ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"Bsp_SDMMC.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.BspSDMMC_PinCLK_Enable,"ax",%progbits
  17              		.align	1
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	BspSDMMC_PinCLK_Enable:
  25              	.LVL0:
  26              	.LFB144:
  27              		.file 1 "Bsp/Bsp_SDMMC.c"
   1:Bsp/Bsp_SDMMC.c **** #include "Bsp_SDMMC.h"
   2:Bsp/Bsp_SDMMC.c **** 
   3:Bsp/Bsp_SDMMC.c **** static const GPIO_InitTypeDef BspSDMMC_PinCfg = {
   4:Bsp/Bsp_SDMMC.c ****     .Mode = GPIO_MODE_AF_PP,
   5:Bsp/Bsp_SDMMC.c ****     .Pull = GPIO_NOPULL,
   6:Bsp/Bsp_SDMMC.c ****     .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
   7:Bsp/Bsp_SDMMC.c **** };
   8:Bsp/Bsp_SDMMC.c **** 
   9:Bsp/Bsp_SDMMC.c **** /* internal variable */
  10:Bsp/Bsp_SDMMC.c **** static bool SD_Tx_Cplt = false;
  11:Bsp/Bsp_SDMMC.c **** static bool SD_Rx_Cplt = false;
  12:Bsp/Bsp_SDMMC.c **** 
  13:Bsp/Bsp_SDMMC.c **** /* internal function */
  14:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_PortCLK_Init(SDMMC_TypeDef *instance);
  15:Bsp/Bsp_SDMMC.c **** static void BspSDMMC_PinCLK_Enable(GPIO_TypeDef *port);
  16:Bsp/Bsp_SDMMC.c **** 
  17:Bsp/Bsp_SDMMC.c **** /* external function */
  18:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Init(BspSDMMC_Obj_TypeDef *obj);
  19:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Read(BspSDMMC_Obj_TypeDef *obj, uint32_t *pData, uint32_t ReadAddr, uint32_t N
  20:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Write(BspSDMMC_Obj_TypeDef *obj, uint32_t *pData, uint32_t WriteAddr, uint32_t
  21:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Erase(BspSDMMC_Obj_TypeDef *obj, uint32_t StartAddr, uint32_t EndAddr);
  22:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_GetStatus(BspSDMMC_Obj_TypeDef *obj);
  23:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_GetInfo(BspSDMMC_Obj_TypeDef *obj, HAL_SD_CardInfoTypeDef *info_out);
  24:Bsp/Bsp_SDMMC.c **** 
  25:Bsp/Bsp_SDMMC.c **** BspSDMMC_TypeDef BspSDMMC = {
  26:Bsp/Bsp_SDMMC.c ****     .init = BspSDMMC_Init,
  27:Bsp/Bsp_SDMMC.c ****     .read = BspSDMMC_Read,
  28:Bsp/Bsp_SDMMC.c ****     .write = BspSDMMC_Write,
  29:Bsp/Bsp_SDMMC.c ****     .erase = BspSDMMC_Erase,
  30:Bsp/Bsp_SDMMC.c ****     .status = BspSDMMC_GetStatus,
  31:Bsp/Bsp_SDMMC.c ****     .info = BspSDMMC_GetInfo,
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 2


  32:Bsp/Bsp_SDMMC.c **** };
  33:Bsp/Bsp_SDMMC.c **** 
  34:Bsp/Bsp_SDMMC.c **** static void BspSDMMC_PinCLK_Enable(GPIO_TypeDef *port)
  35:Bsp/Bsp_SDMMC.c **** {
  28              		.loc 1 35 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              		.loc 1 35 1 is_stmt 0 view .LVU1
  34 0000 8AB0     		sub	sp, sp, #40
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 40
  36:Bsp/Bsp_SDMMC.c ****     if (port == GPIOA)
  37              		.loc 1 36 5 is_stmt 1 view .LVU2
  38              		.loc 1 36 8 is_stmt 0 view .LVU3
  39 0002 5B4B     		ldr	r3, .L22
  40 0004 9842     		cmp	r0, r3
  41 0006 2AD0     		beq	.L13
  37:Bsp/Bsp_SDMMC.c ****     {
  38:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOA_CLK_ENABLE();
  39:Bsp/Bsp_SDMMC.c ****     }
  40:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOB)
  42              		.loc 1 40 10 is_stmt 1 view .LVU4
  43              		.loc 1 40 13 is_stmt 0 view .LVU5
  44 0008 5A4B     		ldr	r3, .L22+4
  45 000a 9842     		cmp	r0, r3
  46 000c 37D0     		beq	.L14
  41:Bsp/Bsp_SDMMC.c ****     {
  42:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOB_CLK_ENABLE();
  43:Bsp/Bsp_SDMMC.c ****     }
  44:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOC)
  47              		.loc 1 44 10 is_stmt 1 view .LVU6
  48              		.loc 1 44 13 is_stmt 0 view .LVU7
  49 000e 5A4B     		ldr	r3, .L22+8
  50 0010 9842     		cmp	r0, r3
  51 0012 43D0     		beq	.L15
  45:Bsp/Bsp_SDMMC.c ****     {
  46:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOC_CLK_ENABLE();
  47:Bsp/Bsp_SDMMC.c ****     }
  48:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOD)
  52              		.loc 1 48 10 is_stmt 1 view .LVU8
  53              		.loc 1 48 13 is_stmt 0 view .LVU9
  54 0014 594B     		ldr	r3, .L22+12
  55 0016 9842     		cmp	r0, r3
  56 0018 4FD0     		beq	.L16
  49:Bsp/Bsp_SDMMC.c ****     {
  50:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOD_CLK_ENABLE();
  51:Bsp/Bsp_SDMMC.c ****     }
  52:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOE)
  57              		.loc 1 52 10 is_stmt 1 view .LVU10
  58              		.loc 1 52 13 is_stmt 0 view .LVU11
  59 001a 594B     		ldr	r3, .L22+16
  60 001c 9842     		cmp	r0, r3
  61 001e 5BD0     		beq	.L17
  53:Bsp/Bsp_SDMMC.c ****     {
  54:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOE_CLK_ENABLE();
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 3


  55:Bsp/Bsp_SDMMC.c ****     }
  56:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOF)
  62              		.loc 1 56 10 is_stmt 1 view .LVU12
  63              		.loc 1 56 13 is_stmt 0 view .LVU13
  64 0020 584B     		ldr	r3, .L22+20
  65 0022 9842     		cmp	r0, r3
  66 0024 67D0     		beq	.L18
  57:Bsp/Bsp_SDMMC.c ****     {
  58:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOF_CLK_ENABLE();
  59:Bsp/Bsp_SDMMC.c ****     }
  60:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOG)
  67              		.loc 1 60 10 is_stmt 1 view .LVU14
  68              		.loc 1 60 13 is_stmt 0 view .LVU15
  69 0026 584B     		ldr	r3, .L22+24
  70 0028 9842     		cmp	r0, r3
  71 002a 73D0     		beq	.L19
  61:Bsp/Bsp_SDMMC.c ****     {
  62:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOG_CLK_ENABLE();
  63:Bsp/Bsp_SDMMC.c ****     }
  64:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOH)
  72              		.loc 1 64 10 is_stmt 1 view .LVU16
  73              		.loc 1 64 13 is_stmt 0 view .LVU17
  74 002c 574B     		ldr	r3, .L22+28
  75 002e 9842     		cmp	r0, r3
  76 0030 7FD0     		beq	.L20
  65:Bsp/Bsp_SDMMC.c ****     {
  66:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOH_CLK_ENABLE();
  67:Bsp/Bsp_SDMMC.c ****     }
  68:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOJ)
  77              		.loc 1 68 10 is_stmt 1 view .LVU18
  78              		.loc 1 68 13 is_stmt 0 view .LVU19
  79 0032 574B     		ldr	r3, .L22+32
  80 0034 9842     		cmp	r0, r3
  81 0036 00F08B80 		beq	.L21
  69:Bsp/Bsp_SDMMC.c ****     {
  70:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOJ_CLK_ENABLE();
  71:Bsp/Bsp_SDMMC.c ****     }
  72:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOK)
  82              		.loc 1 72 10 is_stmt 1 view .LVU20
  83              		.loc 1 72 13 is_stmt 0 view .LVU21
  84 003a 564B     		ldr	r3, .L22+36
  85 003c 9842     		cmp	r0, r3
  86 003e 1CD1     		bne	.L1
  73:Bsp/Bsp_SDMMC.c ****     {
  74:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOK_CLK_ENABLE();
  87              		.loc 1 74 9 is_stmt 1 view .LVU22
  88              	.LBB10:
  89              		.loc 1 74 9 view .LVU23
  90              		.loc 1 74 9 view .LVU24
  91 0040 03F5E053 		add	r3, r3, #7168
  92 0044 D3F8E020 		ldr	r2, [r3, #224]
  93 0048 42F48062 		orr	r2, r2, #1024
  94 004c C3F8E020 		str	r2, [r3, #224]
  95              		.loc 1 74 9 view .LVU25
  96 0050 D3F8E030 		ldr	r3, [r3, #224]
  97 0054 03F48063 		and	r3, r3, #1024
  98 0058 0993     		str	r3, [sp, #36]
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 4


  99              		.loc 1 74 9 view .LVU26
 100 005a 099B     		ldr	r3, [sp, #36]
 101              	.LBE10:
 102              		.loc 1 74 9 view .LVU27
  75:Bsp/Bsp_SDMMC.c ****     }
  76:Bsp/Bsp_SDMMC.c **** }
 103              		.loc 1 76 1 is_stmt 0 view .LVU28
 104 005c 0DE0     		b	.L1
 105              	.L13:
  38:Bsp/Bsp_SDMMC.c ****     }
 106              		.loc 1 38 9 is_stmt 1 view .LVU29
 107              	.LBB11:
  38:Bsp/Bsp_SDMMC.c ****     }
 108              		.loc 1 38 9 view .LVU30
  38:Bsp/Bsp_SDMMC.c ****     }
 109              		.loc 1 38 9 view .LVU31
 110 005e 03F58843 		add	r3, r3, #17408
 111 0062 D3F8E020 		ldr	r2, [r3, #224]
 112 0066 42F00102 		orr	r2, r2, #1
 113 006a C3F8E020 		str	r2, [r3, #224]
  38:Bsp/Bsp_SDMMC.c ****     }
 114              		.loc 1 38 9 view .LVU32
 115 006e D3F8E030 		ldr	r3, [r3, #224]
 116 0072 03F00103 		and	r3, r3, #1
 117 0076 0093     		str	r3, [sp]
  38:Bsp/Bsp_SDMMC.c ****     }
 118              		.loc 1 38 9 view .LVU33
 119 0078 009B     		ldr	r3, [sp]
 120              	.LBE11:
  38:Bsp/Bsp_SDMMC.c ****     }
 121              		.loc 1 38 9 view .LVU34
 122              	.L1:
 123              		.loc 1 76 1 is_stmt 0 view .LVU35
 124 007a 0AB0     		add	sp, sp, #40
 125              	.LCFI1:
 126              		.cfi_remember_state
 127              		.cfi_def_cfa_offset 0
 128              		@ sp needed
 129 007c 7047     		bx	lr
 130              	.L14:
 131              	.LCFI2:
 132              		.cfi_restore_state
  42:Bsp/Bsp_SDMMC.c ****     }
 133              		.loc 1 42 9 is_stmt 1 view .LVU36
 134              	.LBB12:
  42:Bsp/Bsp_SDMMC.c ****     }
 135              		.loc 1 42 9 view .LVU37
  42:Bsp/Bsp_SDMMC.c ****     }
 136              		.loc 1 42 9 view .LVU38
 137 007e 03F58043 		add	r3, r3, #16384
 138 0082 D3F8E020 		ldr	r2, [r3, #224]
 139 0086 42F00202 		orr	r2, r2, #2
 140 008a C3F8E020 		str	r2, [r3, #224]
  42:Bsp/Bsp_SDMMC.c ****     }
 141              		.loc 1 42 9 view .LVU39
 142 008e D3F8E030 		ldr	r3, [r3, #224]
 143 0092 03F00203 		and	r3, r3, #2
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 5


 144 0096 0193     		str	r3, [sp, #4]
  42:Bsp/Bsp_SDMMC.c ****     }
 145              		.loc 1 42 9 view .LVU40
 146 0098 019B     		ldr	r3, [sp, #4]
 147              	.LBE12:
  42:Bsp/Bsp_SDMMC.c ****     }
 148              		.loc 1 42 9 view .LVU41
 149 009a EEE7     		b	.L1
 150              	.L15:
  46:Bsp/Bsp_SDMMC.c ****     }
 151              		.loc 1 46 9 view .LVU42
 152              	.LBB13:
  46:Bsp/Bsp_SDMMC.c ****     }
 153              		.loc 1 46 9 view .LVU43
  46:Bsp/Bsp_SDMMC.c ****     }
 154              		.loc 1 46 9 view .LVU44
 155 009c 03F57053 		add	r3, r3, #15360
 156 00a0 D3F8E020 		ldr	r2, [r3, #224]
 157 00a4 42F00402 		orr	r2, r2, #4
 158 00a8 C3F8E020 		str	r2, [r3, #224]
  46:Bsp/Bsp_SDMMC.c ****     }
 159              		.loc 1 46 9 view .LVU45
 160 00ac D3F8E030 		ldr	r3, [r3, #224]
 161 00b0 03F00403 		and	r3, r3, #4
 162 00b4 0293     		str	r3, [sp, #8]
  46:Bsp/Bsp_SDMMC.c ****     }
 163              		.loc 1 46 9 view .LVU46
 164 00b6 029B     		ldr	r3, [sp, #8]
 165              	.LBE13:
  46:Bsp/Bsp_SDMMC.c ****     }
 166              		.loc 1 46 9 view .LVU47
 167 00b8 DFE7     		b	.L1
 168              	.L16:
  50:Bsp/Bsp_SDMMC.c ****     }
 169              		.loc 1 50 9 view .LVU48
 170              	.LBB14:
  50:Bsp/Bsp_SDMMC.c ****     }
 171              		.loc 1 50 9 view .LVU49
  50:Bsp/Bsp_SDMMC.c ****     }
 172              		.loc 1 50 9 view .LVU50
 173 00ba 03F56053 		add	r3, r3, #14336
 174 00be D3F8E020 		ldr	r2, [r3, #224]
 175 00c2 42F00802 		orr	r2, r2, #8
 176 00c6 C3F8E020 		str	r2, [r3, #224]
  50:Bsp/Bsp_SDMMC.c ****     }
 177              		.loc 1 50 9 view .LVU51
 178 00ca D3F8E030 		ldr	r3, [r3, #224]
 179 00ce 03F00803 		and	r3, r3, #8
 180 00d2 0393     		str	r3, [sp, #12]
  50:Bsp/Bsp_SDMMC.c ****     }
 181              		.loc 1 50 9 view .LVU52
 182 00d4 039B     		ldr	r3, [sp, #12]
 183              	.LBE14:
  50:Bsp/Bsp_SDMMC.c ****     }
 184              		.loc 1 50 9 view .LVU53
 185 00d6 D0E7     		b	.L1
 186              	.L17:
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 6


  54:Bsp/Bsp_SDMMC.c ****     }
 187              		.loc 1 54 9 view .LVU54
 188              	.LBB15:
  54:Bsp/Bsp_SDMMC.c ****     }
 189              		.loc 1 54 9 view .LVU55
  54:Bsp/Bsp_SDMMC.c ****     }
 190              		.loc 1 54 9 view .LVU56
 191 00d8 03F55053 		add	r3, r3, #13312
 192 00dc D3F8E020 		ldr	r2, [r3, #224]
 193 00e0 42F01002 		orr	r2, r2, #16
 194 00e4 C3F8E020 		str	r2, [r3, #224]
  54:Bsp/Bsp_SDMMC.c ****     }
 195              		.loc 1 54 9 view .LVU57
 196 00e8 D3F8E030 		ldr	r3, [r3, #224]
 197 00ec 03F01003 		and	r3, r3, #16
 198 00f0 0493     		str	r3, [sp, #16]
  54:Bsp/Bsp_SDMMC.c ****     }
 199              		.loc 1 54 9 view .LVU58
 200 00f2 049B     		ldr	r3, [sp, #16]
 201              	.LBE15:
  54:Bsp/Bsp_SDMMC.c ****     }
 202              		.loc 1 54 9 view .LVU59
 203 00f4 C1E7     		b	.L1
 204              	.L18:
  58:Bsp/Bsp_SDMMC.c ****     }
 205              		.loc 1 58 9 view .LVU60
 206              	.LBB16:
  58:Bsp/Bsp_SDMMC.c ****     }
 207              		.loc 1 58 9 view .LVU61
  58:Bsp/Bsp_SDMMC.c ****     }
 208              		.loc 1 58 9 view .LVU62
 209 00f6 03F54053 		add	r3, r3, #12288
 210 00fa D3F8E020 		ldr	r2, [r3, #224]
 211 00fe 42F02002 		orr	r2, r2, #32
 212 0102 C3F8E020 		str	r2, [r3, #224]
  58:Bsp/Bsp_SDMMC.c ****     }
 213              		.loc 1 58 9 view .LVU63
 214 0106 D3F8E030 		ldr	r3, [r3, #224]
 215 010a 03F02003 		and	r3, r3, #32
 216 010e 0593     		str	r3, [sp, #20]
  58:Bsp/Bsp_SDMMC.c ****     }
 217              		.loc 1 58 9 view .LVU64
 218 0110 059B     		ldr	r3, [sp, #20]
 219              	.LBE16:
  58:Bsp/Bsp_SDMMC.c ****     }
 220              		.loc 1 58 9 view .LVU65
 221 0112 B2E7     		b	.L1
 222              	.L19:
  62:Bsp/Bsp_SDMMC.c ****     }
 223              		.loc 1 62 9 view .LVU66
 224              	.LBB17:
  62:Bsp/Bsp_SDMMC.c ****     }
 225              		.loc 1 62 9 view .LVU67
  62:Bsp/Bsp_SDMMC.c ****     }
 226              		.loc 1 62 9 view .LVU68
 227 0114 03F53053 		add	r3, r3, #11264
 228 0118 D3F8E020 		ldr	r2, [r3, #224]
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 7


 229 011c 42F04002 		orr	r2, r2, #64
 230 0120 C3F8E020 		str	r2, [r3, #224]
  62:Bsp/Bsp_SDMMC.c ****     }
 231              		.loc 1 62 9 view .LVU69
 232 0124 D3F8E030 		ldr	r3, [r3, #224]
 233 0128 03F04003 		and	r3, r3, #64
 234 012c 0693     		str	r3, [sp, #24]
  62:Bsp/Bsp_SDMMC.c ****     }
 235              		.loc 1 62 9 view .LVU70
 236 012e 069B     		ldr	r3, [sp, #24]
 237              	.LBE17:
  62:Bsp/Bsp_SDMMC.c ****     }
 238              		.loc 1 62 9 view .LVU71
 239 0130 A3E7     		b	.L1
 240              	.L20:
  66:Bsp/Bsp_SDMMC.c ****     }
 241              		.loc 1 66 9 view .LVU72
 242              	.LBB18:
  66:Bsp/Bsp_SDMMC.c ****     }
 243              		.loc 1 66 9 view .LVU73
  66:Bsp/Bsp_SDMMC.c ****     }
 244              		.loc 1 66 9 view .LVU74
 245 0132 03F52053 		add	r3, r3, #10240
 246 0136 D3F8E020 		ldr	r2, [r3, #224]
 247 013a 42F08002 		orr	r2, r2, #128
 248 013e C3F8E020 		str	r2, [r3, #224]
  66:Bsp/Bsp_SDMMC.c ****     }
 249              		.loc 1 66 9 view .LVU75
 250 0142 D3F8E030 		ldr	r3, [r3, #224]
 251 0146 03F08003 		and	r3, r3, #128
 252 014a 0793     		str	r3, [sp, #28]
  66:Bsp/Bsp_SDMMC.c ****     }
 253              		.loc 1 66 9 view .LVU76
 254 014c 079B     		ldr	r3, [sp, #28]
 255              	.LBE18:
  66:Bsp/Bsp_SDMMC.c ****     }
 256              		.loc 1 66 9 view .LVU77
 257 014e 94E7     		b	.L1
 258              	.L21:
  70:Bsp/Bsp_SDMMC.c ****     }
 259              		.loc 1 70 9 view .LVU78
 260              	.LBB19:
  70:Bsp/Bsp_SDMMC.c ****     }
 261              		.loc 1 70 9 view .LVU79
  70:Bsp/Bsp_SDMMC.c ****     }
 262              		.loc 1 70 9 view .LVU80
 263 0150 03F50053 		add	r3, r3, #8192
 264 0154 D3F8E020 		ldr	r2, [r3, #224]
 265 0158 42F40072 		orr	r2, r2, #512
 266 015c C3F8E020 		str	r2, [r3, #224]
  70:Bsp/Bsp_SDMMC.c ****     }
 267              		.loc 1 70 9 view .LVU81
 268 0160 D3F8E030 		ldr	r3, [r3, #224]
 269 0164 03F40073 		and	r3, r3, #512
 270 0168 0893     		str	r3, [sp, #32]
  70:Bsp/Bsp_SDMMC.c ****     }
 271              		.loc 1 70 9 view .LVU82
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 8


 272 016a 089B     		ldr	r3, [sp, #32]
 273              	.LBE19:
  70:Bsp/Bsp_SDMMC.c ****     }
 274              		.loc 1 70 9 view .LVU83
 275 016c 85E7     		b	.L1
 276              	.L23:
 277 016e 00BF     		.align	2
 278              	.L22:
 279 0170 00000258 		.word	1476526080
 280 0174 00040258 		.word	1476527104
 281 0178 00080258 		.word	1476528128
 282 017c 000C0258 		.word	1476529152
 283 0180 00100258 		.word	1476530176
 284 0184 00140258 		.word	1476531200
 285 0188 00180258 		.word	1476532224
 286 018c 001C0258 		.word	1476533248
 287 0190 00240258 		.word	1476535296
 288 0194 00280258 		.word	1476536320
 289              		.cfi_endproc
 290              	.LFE144:
 292              		.section	.text.BspSDMMC_GetInfo,"ax",%progbits
 293              		.align	1
 294              		.syntax unified
 295              		.thumb
 296              		.thumb_func
 297              		.fpu fpv5-d16
 299              	BspSDMMC_GetInfo:
 300              	.LVL1:
 301              	.LFB153:
  77:Bsp/Bsp_SDMMC.c **** 
  78:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_PortCLK_Init(SDMMC_TypeDef *instance)
  79:Bsp/Bsp_SDMMC.c **** {
  80:Bsp/Bsp_SDMMC.c ****     RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  81:Bsp/Bsp_SDMMC.c ****     if (instance == NULL)
  82:Bsp/Bsp_SDMMC.c ****         return false;
  83:Bsp/Bsp_SDMMC.c **** 
  84:Bsp/Bsp_SDMMC.c ****     if (instance == SDMMC1)
  85:Bsp/Bsp_SDMMC.c ****     {
  86:Bsp/Bsp_SDMMC.c ****         PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
  87:Bsp/Bsp_SDMMC.c ****         PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
  88:Bsp/Bsp_SDMMC.c ****         if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  89:Bsp/Bsp_SDMMC.c ****             return false;
  90:Bsp/Bsp_SDMMC.c **** 
  91:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_SDMMC1_CLK_ENABLE();
  92:Bsp/Bsp_SDMMC.c ****         return true;
  93:Bsp/Bsp_SDMMC.c ****     }
  94:Bsp/Bsp_SDMMC.c **** 
  95:Bsp/Bsp_SDMMC.c ****     return true;
  96:Bsp/Bsp_SDMMC.c **** }
  97:Bsp/Bsp_SDMMC.c **** 
  98:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Pin_Init(SD_TypeDef *type, BspSDMMC_PinConfig_TypeDef *obj)
  99:Bsp/Bsp_SDMMC.c **** {
 100:Bsp/Bsp_SDMMC.c ****     GPIO_InitTypeDef GPIO_InitStruct = BspSDMMC_PinCfg;
 101:Bsp/Bsp_SDMMC.c **** 
 102:Bsp/Bsp_SDMMC.c ****     if (obj == NULL)
 103:Bsp/Bsp_SDMMC.c ****         return false;
 104:Bsp/Bsp_SDMMC.c **** 
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 9


 105:Bsp/Bsp_SDMMC.c ****     if (type == SDMMC1)
 106:Bsp/Bsp_SDMMC.c ****     {
 107:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Alternate = obj->Alternate;
 108:Bsp/Bsp_SDMMC.c **** 
 109:Bsp/Bsp_SDMMC.c ****         BspSDMMC_PinCLK_Enable(obj->CK_Port);
 110:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->CK_Pin;
 111:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CK_Port, &GPIO_InitStruct);
 112:Bsp/Bsp_SDMMC.c **** 
 113:Bsp/Bsp_SDMMC.c ****         BspSDMMC_PinCLK_Enable(obj->CMD_Port);
 114:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->CMD_Pin;
 115:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CMD_Port, &GPIO_InitStruct);
 116:Bsp/Bsp_SDMMC.c **** 
 117:Bsp/Bsp_SDMMC.c ****         BspSDMMC_PinCLK_Enable(obj->D0_Port);
 118:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D0_Pin;
 119:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D0_Port, &GPIO_InitStruct);
 120:Bsp/Bsp_SDMMC.c **** 
 121:Bsp/Bsp_SDMMC.c ****         BspSDMMC_PinCLK_Enable(obj->D1_Port);
 122:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D1_Pin;
 123:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D1_Port, &GPIO_InitStruct);
 124:Bsp/Bsp_SDMMC.c **** 
 125:Bsp/Bsp_SDMMC.c ****         BspSDMMC_PinCLK_Enable(obj->D2_Port);
 126:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D2_Pin;
 127:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D2_Port, &GPIO_InitStruct);
 128:Bsp/Bsp_SDMMC.c **** 
 129:Bsp/Bsp_SDMMC.c ****         BspSDMMC_PinCLK_Enable(obj->D3_Port);
 130:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D3_Pin;
 131:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D3_Port, &GPIO_InitStruct);
 132:Bsp/Bsp_SDMMC.c **** 
 133:Bsp/Bsp_SDMMC.c ****         return true;
 134:Bsp/Bsp_SDMMC.c ****     }
 135:Bsp/Bsp_SDMMC.c **** 
 136:Bsp/Bsp_SDMMC.c ****     return false;
 137:Bsp/Bsp_SDMMC.c **** }
 138:Bsp/Bsp_SDMMC.c **** 
 139:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_MDMA_Init(MDMA_HandleTypeDef *mdma)
 140:Bsp/Bsp_SDMMC.c **** {
 141:Bsp/Bsp_SDMMC.c ****     if (mdma == NULL)
 142:Bsp/Bsp_SDMMC.c ****         return false;
 143:Bsp/Bsp_SDMMC.c **** 
 144:Bsp/Bsp_SDMMC.c ****     __HAL_RCC_MDMA_CLK_ENABLE();
 145:Bsp/Bsp_SDMMC.c **** 
 146:Bsp/Bsp_SDMMC.c ****     mdma->Instance = MDMA_Channel0;
 147:Bsp/Bsp_SDMMC.c ****     mdma->Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 148:Bsp/Bsp_SDMMC.c ****     mdma->Init.Priority = MDMA_PRIORITY_HIGH;
 149:Bsp/Bsp_SDMMC.c ****     mdma->Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 150:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceInc = MDMA_SRC_INC_WORD;//MDMA_SRC_INC_BYTE;
 151:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestinationInc = MDMA_DEST_INC_WORD;//MDMA_DEST_INC_BYTE;
 152:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;//MDMA_SRC_DATASIZE_BYTE;
 153:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;//MDMA_DEST_DATASIZE_BYTE;
 154:Bsp/Bsp_SDMMC.c ****     mdma->Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 155:Bsp/Bsp_SDMMC.c ****     mdma->Init.BufferTransferLength = 1;
 156:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceBurst = MDMA_SOURCE_BURST_8BEATS;//MDMA_SOURCE_BURST_SINGLE;
 157:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestBurst = MDMA_DEST_BURST_8BEATS;//MDMA_DEST_BURST_SINGLE;
 158:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceBlockAddressOffset = 0;
 159:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestBlockAddressOffset = 0;
 160:Bsp/Bsp_SDMMC.c ****     if (HAL_MDMA_Init(mdma) != HAL_OK)
 161:Bsp/Bsp_SDMMC.c ****         return false;
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 10


 162:Bsp/Bsp_SDMMC.c **** 
 163:Bsp/Bsp_SDMMC.c ****     HAL_NVIC_SetPriority(MDMA_IRQn, 10, 0);
 164:Bsp/Bsp_SDMMC.c ****     HAL_NVIC_EnableIRQ(MDMA_IRQn);
 165:Bsp/Bsp_SDMMC.c **** 
 166:Bsp/Bsp_SDMMC.c ****     return true;
 167:Bsp/Bsp_SDMMC.c **** }
 168:Bsp/Bsp_SDMMC.c **** 
 169:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Init(BspSDMMC_Obj_TypeDef *obj)
 170:Bsp/Bsp_SDMMC.c **** {
 171:Bsp/Bsp_SDMMC.c ****     IRQn_Type irq = SDMMC1_IRQn;
 172:Bsp/Bsp_SDMMC.c **** 
 173:Bsp/Bsp_SDMMC.c ****     if (obj == NULL)
 174:Bsp/Bsp_SDMMC.c ****         return false;
 175:Bsp/Bsp_SDMMC.c ****         
 176:Bsp/Bsp_SDMMC.c ****     BspSDMMC_PortCLK_Init(obj->instance);
 177:Bsp/Bsp_SDMMC.c ****     BspSDMMC_Pin_Init(obj->instance, obj->pin);
 178:Bsp/Bsp_SDMMC.c **** 
 179:Bsp/Bsp_SDMMC.c ****     if (obj->instance == SDMMC1)
 180:Bsp/Bsp_SDMMC.c ****     {
 181:Bsp/Bsp_SDMMC.c ****         irq = SDMMC1_IRQn;
 182:Bsp/Bsp_SDMMC.c ****     }
 183:Bsp/Bsp_SDMMC.c ****     else if (obj->instance == SDMMC2)
 184:Bsp/Bsp_SDMMC.c ****     {
 185:Bsp/Bsp_SDMMC.c ****         irq = SDMMC2_IRQn;
 186:Bsp/Bsp_SDMMC.c ****     }
 187:Bsp/Bsp_SDMMC.c ****     else
 188:Bsp/Bsp_SDMMC.c ****         return false;
 189:Bsp/Bsp_SDMMC.c **** 
 190:Bsp/Bsp_SDMMC.c ****     obj->hdl.Instance = obj->instance; // SDMMC1;
 191:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 192:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 193:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.BusWide = SDMMC_BUS_WIDE_4B;
 194:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 195:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockDiv = 1;
 196:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 197:Bsp/Bsp_SDMMC.c **** 
 198:Bsp/Bsp_SDMMC.c ****     if (!BspSDMMC_MDMA_Init(&(obj->mdma)) || (HAL_SD_Init(&(obj->hdl)) != HAL_OK))
 199:Bsp/Bsp_SDMMC.c ****         return false;
 200:Bsp/Bsp_SDMMC.c **** 
 201:Bsp/Bsp_SDMMC.c ****     HAL_NVIC_SetPriority(irq, 4, 0);
 202:Bsp/Bsp_SDMMC.c ****     HAL_NVIC_EnableIRQ(irq);
 203:Bsp/Bsp_SDMMC.c **** 
 204:Bsp/Bsp_SDMMC.c ****     return true;
 205:Bsp/Bsp_SDMMC.c **** }
 206:Bsp/Bsp_SDMMC.c **** 
 207:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Read(BspSDMMC_Obj_TypeDef *obj, uint32_t *pData, uint32_t ReadAddr, uint32_t N
 208:Bsp/Bsp_SDMMC.c **** {
 209:Bsp/Bsp_SDMMC.c ****     uint32_t retry_cnt = SDMMC_OPR_RETRY_MAX_CNT;
 210:Bsp/Bsp_SDMMC.c **** 
 211:Bsp/Bsp_SDMMC.c ****     // if (HAL_SD_ReadBlocks(&(obj->hdl), (uint8_t *)pData, ReadAddr, NumOfBlocks, SDMMC_DATATIMEOU
 212:Bsp/Bsp_SDMMC.c ****     //     return true;
 213:Bsp/Bsp_SDMMC.c **** 
 214:Bsp/Bsp_SDMMC.c ****     while (retry_cnt)
 215:Bsp/Bsp_SDMMC.c ****     {
 216:Bsp/Bsp_SDMMC.c ****         if (SD_Rx_Cplt)
 217:Bsp/Bsp_SDMMC.c ****         {
 218:Bsp/Bsp_SDMMC.c ****             // SD_Rx_Cplt = false;
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 11


 219:Bsp/Bsp_SDMMC.c **** 
 220:Bsp/Bsp_SDMMC.c ****             if(HAL_SD_GetState(&(obj->hdl)) == HAL_SD_STATE_READY) 
 221:Bsp/Bsp_SDMMC.c ****             {
 222:Bsp/Bsp_SDMMC.c ****                 break;
 223:Bsp/Bsp_SDMMC.c ****             }
 224:Bsp/Bsp_SDMMC.c **** 
 225:Bsp/Bsp_SDMMC.c ****             return false;
 226:Bsp/Bsp_SDMMC.c ****         }
 227:Bsp/Bsp_SDMMC.c ****         __DSB();
 228:Bsp/Bsp_SDMMC.c **** 
 229:Bsp/Bsp_SDMMC.c ****         retry_cnt--;
 230:Bsp/Bsp_SDMMC.c ****     }
 231:Bsp/Bsp_SDMMC.c **** 
 232:Bsp/Bsp_SDMMC.c ****     HAL_StatusTypeDef state = HAL_SD_ReadBlocks_DMA(&(obj->hdl), pData, ReadAddr, NumOfBlocks);
 233:Bsp/Bsp_SDMMC.c **** 
 234:Bsp/Bsp_SDMMC.c ****     SD_Rx_Cplt = false;
 235:Bsp/Bsp_SDMMC.c **** 
 236:Bsp/Bsp_SDMMC.c ****     if(HAL_OK == state)
 237:Bsp/Bsp_SDMMC.c ****         return true;
 238:Bsp/Bsp_SDMMC.c **** 
 239:Bsp/Bsp_SDMMC.c ****     return false;
 240:Bsp/Bsp_SDMMC.c **** }
 241:Bsp/Bsp_SDMMC.c **** 
 242:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Write(BspSDMMC_Obj_TypeDef *obj, uint32_t *pData, uint32_t WriteAddr, uint32_t
 243:Bsp/Bsp_SDMMC.c **** {
 244:Bsp/Bsp_SDMMC.c ****     volatile HAL_SD_StateTypeDef opr_state;
 245:Bsp/Bsp_SDMMC.c ****     uint32_t retry_cnt = SDMMC_OPR_RETRY_MAX_CNT;
 246:Bsp/Bsp_SDMMC.c **** 
 247:Bsp/Bsp_SDMMC.c ****     // if (HAL_SD_WriteBlocks(&(obj->hdl), (uint8_t *)pData, WriteAddr, NumOfBlocks, SDMMC_DATATIME
 248:Bsp/Bsp_SDMMC.c ****     //     return true;
 249:Bsp/Bsp_SDMMC.c **** 
 250:Bsp/Bsp_SDMMC.c ****     while (retry_cnt)
 251:Bsp/Bsp_SDMMC.c ****     {
 252:Bsp/Bsp_SDMMC.c ****         if (SD_Tx_Cplt)
 253:Bsp/Bsp_SDMMC.c ****         {                
 254:Bsp/Bsp_SDMMC.c ****             // SD_Tx_Cplt = false;
 255:Bsp/Bsp_SDMMC.c ****             
 256:Bsp/Bsp_SDMMC.c ****             if(HAL_SD_GetState(&(obj->hdl)) == HAL_SD_STATE_READY) //HAL_SD_STATE_RESET
 257:Bsp/Bsp_SDMMC.c ****             {
 258:Bsp/Bsp_SDMMC.c ****                 break;
 259:Bsp/Bsp_SDMMC.c ****             }
 260:Bsp/Bsp_SDMMC.c **** 
 261:Bsp/Bsp_SDMMC.c ****             return false;
 262:Bsp/Bsp_SDMMC.c ****         }
 263:Bsp/Bsp_SDMMC.c ****         __DSB();
 264:Bsp/Bsp_SDMMC.c **** 
 265:Bsp/Bsp_SDMMC.c ****         retry_cnt--;
 266:Bsp/Bsp_SDMMC.c ****     }
 267:Bsp/Bsp_SDMMC.c **** 
 268:Bsp/Bsp_SDMMC.c ****     HAL_StatusTypeDef state = HAL_SD_WriteBlocks_DMA(&(obj->hdl), pData, WriteAddr, NumOfBlocks);
 269:Bsp/Bsp_SDMMC.c **** 
 270:Bsp/Bsp_SDMMC.c ****     SD_Tx_Cplt = false;
 271:Bsp/Bsp_SDMMC.c **** 
 272:Bsp/Bsp_SDMMC.c ****     if(HAL_OK == state)
 273:Bsp/Bsp_SDMMC.c ****         return true;
 274:Bsp/Bsp_SDMMC.c **** 
 275:Bsp/Bsp_SDMMC.c ****     return false;
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 12


 276:Bsp/Bsp_SDMMC.c **** }
 277:Bsp/Bsp_SDMMC.c **** 
 278:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Erase(BspSDMMC_Obj_TypeDef *obj, uint32_t StartAddr, uint32_t EndAddr)
 279:Bsp/Bsp_SDMMC.c **** {
 280:Bsp/Bsp_SDMMC.c ****     bool sd_state = true;
 281:Bsp/Bsp_SDMMC.c **** 
 282:Bsp/Bsp_SDMMC.c ****     if (HAL_SD_Erase(&(obj->hdl), StartAddr, EndAddr) != HAL_OK)
 283:Bsp/Bsp_SDMMC.c ****         sd_state = false;
 284:Bsp/Bsp_SDMMC.c **** 
 285:Bsp/Bsp_SDMMC.c ****     return sd_state;
 286:Bsp/Bsp_SDMMC.c **** }
 287:Bsp/Bsp_SDMMC.c **** 
 288:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_GetStatus(BspSDMMC_Obj_TypeDef *obj)
 289:Bsp/Bsp_SDMMC.c **** {
 290:Bsp/Bsp_SDMMC.c ****     if (obj == NULL)
 291:Bsp/Bsp_SDMMC.c ****         return false;
 292:Bsp/Bsp_SDMMC.c **** 
 293:Bsp/Bsp_SDMMC.c ****     return ((HAL_SD_GetCardState(&(obj->hdl)) == HAL_SD_CARD_TRANSFER) ? true : false);
 294:Bsp/Bsp_SDMMC.c **** }
 295:Bsp/Bsp_SDMMC.c **** 
 296:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_GetInfo(BspSDMMC_Obj_TypeDef *obj, HAL_SD_CardInfoTypeDef *info_out)
 297:Bsp/Bsp_SDMMC.c **** {
 302              		.loc 1 297 1 view -0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 298:Bsp/Bsp_SDMMC.c ****     if ((obj == NULL) && (info_out == NULL))
 306              		.loc 1 298 5 view .LVU85
 307              		.loc 1 298 8 is_stmt 0 view .LVU86
 308 0000 0028     		cmp	r0, #0
 309 0002 08BF     		it	eq
 310 0004 0029     		cmpeq	r1, #0
 311 0006 01D1     		bne	.L31
 299:Bsp/Bsp_SDMMC.c ****         return false;
 312              		.loc 1 299 16 view .LVU87
 313 0008 0020     		movs	r0, #0
 314              	.LVL2:
 300:Bsp/Bsp_SDMMC.c **** 
 301:Bsp/Bsp_SDMMC.c ****     memset(&(obj->info), NULL, sizeof(obj->info));
 302:Bsp/Bsp_SDMMC.c ****     HAL_SD_GetCardInfo(&(obj->hdl), &(obj->info));
 303:Bsp/Bsp_SDMMC.c ****     info_out = &(obj->info);
 304:Bsp/Bsp_SDMMC.c **** 
 305:Bsp/Bsp_SDMMC.c ****     return true;
 306:Bsp/Bsp_SDMMC.c **** }
 315              		.loc 1 306 1 view .LVU88
 316 000a 7047     		bx	lr
 317              	.LVL3:
 318              	.L31:
 297:Bsp/Bsp_SDMMC.c ****     if ((obj == NULL) && (info_out == NULL))
 319              		.loc 1 297 1 view .LVU89
 320 000c 38B5     		push	{r3, r4, r5, lr}
 321              	.LCFI3:
 322              		.cfi_def_cfa_offset 16
 323              		.cfi_offset 3, -16
 324              		.cfi_offset 4, -12
 325              		.cfi_offset 5, -8
 326              		.cfi_offset 14, -4
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 13


 327 000e 0446     		mov	r4, r0
 301:Bsp/Bsp_SDMMC.c ****     HAL_SD_GetCardInfo(&(obj->hdl), &(obj->info));
 328              		.loc 1 301 5 is_stmt 1 view .LVU90
 301:Bsp/Bsp_SDMMC.c ****     HAL_SD_GetCardInfo(&(obj->hdl), &(obj->info));
 329              		.loc 1 301 12 is_stmt 0 view .LVU91
 330 0010 00F1F405 		add	r5, r0, #244
 301:Bsp/Bsp_SDMMC.c ****     HAL_SD_GetCardInfo(&(obj->hdl), &(obj->info));
 331              		.loc 1 301 5 view .LVU92
 332 0014 2422     		movs	r2, #36
 333 0016 0021     		movs	r1, #0
 334              	.LVL4:
 301:Bsp/Bsp_SDMMC.c ****     HAL_SD_GetCardInfo(&(obj->hdl), &(obj->info));
 335              		.loc 1 301 5 view .LVU93
 336 0018 2846     		mov	r0, r5
 337              	.LVL5:
 301:Bsp/Bsp_SDMMC.c ****     HAL_SD_GetCardInfo(&(obj->hdl), &(obj->info));
 338              		.loc 1 301 5 view .LVU94
 339 001a FFF7FEFF 		bl	memset
 340              	.LVL6:
 302:Bsp/Bsp_SDMMC.c ****     info_out = &(obj->info);
 341              		.loc 1 302 5 is_stmt 1 view .LVU95
 342 001e 2946     		mov	r1, r5
 343 0020 201D     		adds	r0, r4, #4
 344 0022 FFF7FEFF 		bl	HAL_SD_GetCardInfo
 345              	.LVL7:
 303:Bsp/Bsp_SDMMC.c **** 
 346              		.loc 1 303 5 view .LVU96
 305:Bsp/Bsp_SDMMC.c **** }
 347              		.loc 1 305 5 view .LVU97
 305:Bsp/Bsp_SDMMC.c **** }
 348              		.loc 1 305 12 is_stmt 0 view .LVU98
 349 0026 0120     		movs	r0, #1
 350              		.loc 1 306 1 view .LVU99
 351 0028 38BD     		pop	{r3, r4, r5, pc}
 352              		.loc 1 306 1 view .LVU100
 353              		.cfi_endproc
 354              	.LFE153:
 356              		.section	.text.BspSDMMC_GetStatus,"ax",%progbits
 357              		.align	1
 358              		.syntax unified
 359              		.thumb
 360              		.thumb_func
 361              		.fpu fpv5-d16
 363              	BspSDMMC_GetStatus:
 364              	.LVL8:
 365              	.LFB152:
 289:Bsp/Bsp_SDMMC.c ****     if (obj == NULL)
 366              		.loc 1 289 1 is_stmt 1 view -0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 290:Bsp/Bsp_SDMMC.c ****         return false;
 370              		.loc 1 290 5 view .LVU102
 290:Bsp/Bsp_SDMMC.c ****         return false;
 371              		.loc 1 290 8 is_stmt 0 view .LVU103
 372 0000 40B1     		cbz	r0, .L34
 289:Bsp/Bsp_SDMMC.c ****     if (obj == NULL)
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 14


 373              		.loc 1 289 1 view .LVU104
 374 0002 08B5     		push	{r3, lr}
 375              	.LCFI4:
 376              		.cfi_def_cfa_offset 8
 377              		.cfi_offset 3, -8
 378              		.cfi_offset 14, -4
 293:Bsp/Bsp_SDMMC.c **** }
 379              		.loc 1 293 5 is_stmt 1 view .LVU105
 293:Bsp/Bsp_SDMMC.c **** }
 380              		.loc 1 293 14 is_stmt 0 view .LVU106
 381 0004 0430     		adds	r0, r0, #4
 382              	.LVL9:
 293:Bsp/Bsp_SDMMC.c **** }
 383              		.loc 1 293 14 view .LVU107
 384 0006 FFF7FEFF 		bl	HAL_SD_GetCardState
 385              	.LVL10:
 293:Bsp/Bsp_SDMMC.c **** }
 386              		.loc 1 293 79 view .LVU108
 387 000a 0428     		cmp	r0, #4
 388 000c 14BF     		ite	ne
 389 000e 0020     		movne	r0, #0
 390 0010 0120     		moveq	r0, #1
 294:Bsp/Bsp_SDMMC.c **** 
 391              		.loc 1 294 1 view .LVU109
 392 0012 08BD     		pop	{r3, pc}
 393              	.LVL11:
 394              	.L34:
 395              	.LCFI5:
 396              		.cfi_def_cfa_offset 0
 397              		.cfi_restore 3
 398              		.cfi_restore 14
 291:Bsp/Bsp_SDMMC.c **** 
 399              		.loc 1 291 16 view .LVU110
 400 0014 0020     		movs	r0, #0
 401              	.LVL12:
 294:Bsp/Bsp_SDMMC.c **** 
 402              		.loc 1 294 1 view .LVU111
 403 0016 7047     		bx	lr
 404              		.cfi_endproc
 405              	.LFE152:
 407              		.section	.text.BspSDMMC_Erase,"ax",%progbits
 408              		.align	1
 409              		.syntax unified
 410              		.thumb
 411              		.thumb_func
 412              		.fpu fpv5-d16
 414              	BspSDMMC_Erase:
 415              	.LVL13:
 416              	.LFB151:
 279:Bsp/Bsp_SDMMC.c ****     bool sd_state = true;
 417              		.loc 1 279 1 is_stmt 1 view -0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 279:Bsp/Bsp_SDMMC.c ****     bool sd_state = true;
 421              		.loc 1 279 1 is_stmt 0 view .LVU113
 422 0000 08B5     		push	{r3, lr}
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 15


 423              	.LCFI6:
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 3, -8
 426              		.cfi_offset 14, -4
 280:Bsp/Bsp_SDMMC.c **** 
 427              		.loc 1 280 5 is_stmt 1 view .LVU114
 428              	.LVL14:
 282:Bsp/Bsp_SDMMC.c ****         sd_state = false;
 429              		.loc 1 282 5 view .LVU115
 282:Bsp/Bsp_SDMMC.c ****         sd_state = false;
 430              		.loc 1 282 9 is_stmt 0 view .LVU116
 431 0002 0430     		adds	r0, r0, #4
 432              	.LVL15:
 282:Bsp/Bsp_SDMMC.c ****         sd_state = false;
 433              		.loc 1 282 9 view .LVU117
 434 0004 FFF7FEFF 		bl	HAL_SD_Erase
 435              	.LVL16:
 282:Bsp/Bsp_SDMMC.c ****         sd_state = false;
 436              		.loc 1 282 8 view .LVU118
 437 0008 08B9     		cbnz	r0, .L41
 280:Bsp/Bsp_SDMMC.c **** 
 438              		.loc 1 280 10 view .LVU119
 439 000a 0120     		movs	r0, #1
 440              	.L40:
 441              	.LVL17:
 285:Bsp/Bsp_SDMMC.c **** }
 442              		.loc 1 285 5 is_stmt 1 view .LVU120
 286:Bsp/Bsp_SDMMC.c **** 
 443              		.loc 1 286 1 is_stmt 0 view .LVU121
 444 000c 08BD     		pop	{r3, pc}
 445              	.LVL18:
 446              	.L41:
 283:Bsp/Bsp_SDMMC.c **** 
 447              		.loc 1 283 18 view .LVU122
 448 000e 0020     		movs	r0, #0
 449 0010 FCE7     		b	.L40
 450              		.cfi_endproc
 451              	.LFE151:
 453              		.section	.text.BspSDMMC_Write,"ax",%progbits
 454              		.align	1
 455              		.syntax unified
 456              		.thumb
 457              		.thumb_func
 458              		.fpu fpv5-d16
 460              	BspSDMMC_Write:
 461              	.LVL19:
 462              	.LFB150:
 243:Bsp/Bsp_SDMMC.c ****     volatile HAL_SD_StateTypeDef opr_state;
 463              		.loc 1 243 1 is_stmt 1 view -0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 243:Bsp/Bsp_SDMMC.c ****     volatile HAL_SD_StateTypeDef opr_state;
 467              		.loc 1 243 1 is_stmt 0 view .LVU124
 468 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 469              	.LCFI7:
 470              		.cfi_def_cfa_offset 32
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 16


 471              		.cfi_offset 3, -32
 472              		.cfi_offset 4, -28
 473              		.cfi_offset 5, -24
 474              		.cfi_offset 6, -20
 475              		.cfi_offset 7, -16
 476              		.cfi_offset 8, -12
 477              		.cfi_offset 9, -8
 478              		.cfi_offset 14, -4
 479 0004 0646     		mov	r6, r0
 480 0006 0F46     		mov	r7, r1
 481 0008 9146     		mov	r9, r2
 482 000a 9846     		mov	r8, r3
 244:Bsp/Bsp_SDMMC.c ****     uint32_t retry_cnt = SDMMC_OPR_RETRY_MAX_CNT;
 483              		.loc 1 244 5 is_stmt 1 view .LVU125
 245:Bsp/Bsp_SDMMC.c **** 
 484              		.loc 1 245 5 view .LVU126
 485              	.LVL20:
 250:Bsp/Bsp_SDMMC.c ****     {
 486              		.loc 1 250 5 view .LVU127
 245:Bsp/Bsp_SDMMC.c **** 
 487              		.loc 1 245 14 is_stmt 0 view .LVU128
 488 000c 4FF0FF34 		mov	r4, #-1
 489              	.LVL21:
 490              	.L44:
 250:Bsp/Bsp_SDMMC.c ****     {
 491              		.loc 1 250 11 is_stmt 1 view .LVU129
 492 0010 74B1     		cbz	r4, .L46
 252:Bsp/Bsp_SDMMC.c ****         {                
 493              		.loc 1 252 9 view .LVU130
 252:Bsp/Bsp_SDMMC.c ****         {                
 494              		.loc 1 252 13 is_stmt 0 view .LVU131
 495 0012 0E4D     		ldr	r5, .L52
 496 0014 2D78     		ldrb	r5, [r5]	@ zero_extendqisi2
 252:Bsp/Bsp_SDMMC.c ****         {                
 497              		.loc 1 252 12 view .LVU132
 498 0016 1DB9     		cbnz	r5, .L51
 263:Bsp/Bsp_SDMMC.c **** 
 499              		.loc 1 263 9 is_stmt 1 view .LVU133
 500              	.LBB20:
 501              	.LBI20:
 502              		.file 2 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h"
   1:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 17


  17:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 18


  74:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 119:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 120:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 122:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            in the used linker script.
 129:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 130:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 19


 131:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 133:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 135:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 136:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 141:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 142:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 146:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 151:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     }
 155:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
 156:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  
 157:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     }
 161:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
 162:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  
 163:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   _start();
 164:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 165:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 166:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 168:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 169:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 172:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 173:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 176:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 177:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 180:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 181:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 184:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 185:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 20


 188:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 189:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 190:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 191:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 192:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 196:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 198:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 200:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 201:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 202:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 203:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 207:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 209:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 211:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 212:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 214:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 217:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 218:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 220:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 221:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 222:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 224:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 225:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 226:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 241:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 243:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 244:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 21


 245:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 248:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 250:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 252:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 253:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 254:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 256:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 260:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 262:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 264:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 265:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 267:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 268:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 272:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 274:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 275:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 276:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 278:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 279:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 280:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 281:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 282:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 286:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 288:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 289:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 290:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 292:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 294:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 296:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 300:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 22


 302:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 303:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 304:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 306:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 307:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 308:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 310:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 314:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 316:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 317:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 318:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 320:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 321:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 322:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 323:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 325:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 329:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 331:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 332:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 333:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 335:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 336:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 337:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 338:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 339:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 340:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 344:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 346:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 348:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 23


 359:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 360:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 361:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 362:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 363:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 364:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 368:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 370:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 371:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 372:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 374:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 375:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 379:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 383:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 385:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 386:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 387:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 389:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 390:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 391:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 392:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 393:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 394:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 398:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 400:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 402:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 403:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 404:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 406:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 410:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 412:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 414:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 415:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 24


 416:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 419:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 422:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 423:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 425:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 426:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 427:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 429:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 430:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 432:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 433:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 437:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 439:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 441:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 442:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 443:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 445:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 449:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 451:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 452:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 453:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 455:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 456:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 457:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 458:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 460:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 464:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 466:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 467:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 468:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 470:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 471:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 472:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 25


 473:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 474:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 475:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 479:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 481:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 484:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 496:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 498:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 502:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 506:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 508:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 510:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 511:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 512:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 513:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 517:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 519:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 521:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 522:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 523:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 524:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 528:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 26


 530:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 531:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 532:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 534:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 535:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 537:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 539:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 543:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 545:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 546:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 547:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 549:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 550:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 551:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 553:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 554:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 558:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 560:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 562:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 564:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 566:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 570:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 572:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 574:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 575:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 576:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 577:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 578:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 583:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 585:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 27


 587:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 588:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 589:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 590:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 594:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 596:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 597:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 598:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 600:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 601:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 602:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 603:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 605:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 609:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 611:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 612:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 613:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 615:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 616:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 617:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 618:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 619:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 620:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 624:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 626:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 628:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 629:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 630:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 632:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 636:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 638:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 640:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 641:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 642:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 28


 644:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 646:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 647:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 650:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 655:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 656:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 659:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 661:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 665:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 666:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 667:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 669:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 670:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 671:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 672:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 674:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 678:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 681:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 683:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 686:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 687:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 688:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 690:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 691:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 692:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 693:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 694:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 695:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 696:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 700:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 29


 701:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 704:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 706:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 711:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 713:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 714:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 718:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 731:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 733:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 734:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 735:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 738:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 742:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 748:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 752:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 753:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 754:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 756:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 757:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 30


 758:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 759:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 760:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 762:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 766:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 769:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 771:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 774:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 775:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 776:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 778:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 779:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 780:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 782:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 783:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 784:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 788:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 789:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 799:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 801:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 802:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 803:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 804:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 806:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 813:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 31


 815:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 819:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 821:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 822:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 823:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 824:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 827:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 828:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 829:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 833:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 835:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 843:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 844:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 847:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 848:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 849:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 850:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 851:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 852:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 854:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 855:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 859:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 861:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 869:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 871:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 32


 872:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 873:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 874:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 875:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 876:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 877:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 879:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 880:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 884:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** */
 885:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 886:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 894:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 898:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 899:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 900:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 901:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 903:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 905:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 906:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 909:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 911:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 912:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 913:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 917:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 919:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 920:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 921:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 922:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 924:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 926:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 927:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 928:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 33


 929:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 933:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 935:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 937:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 938:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 939:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 940:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 944:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 503              		.loc 2 944 27 view .LVU134
 504              	.LBB21:
 945:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 946:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 505              		.loc 2 946 3 view .LVU135
 506              		.syntax unified
 507              	@ 946 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h" 1
 508 0018 BFF34F8F 		dsb 0xF
 509              	@ 0 "" 2
 510              		.thumb
 511              		.syntax unified
 512              	.LBE21:
 513              	.LBE20:
 265:Bsp/Bsp_SDMMC.c ****     }
 514              		.loc 1 265 9 view .LVU136
 265:Bsp/Bsp_SDMMC.c ****     }
 515              		.loc 1 265 18 is_stmt 0 view .LVU137
 516 001c 013C     		subs	r4, r4, #1
 517              	.LVL22:
 265:Bsp/Bsp_SDMMC.c ****     }
 518              		.loc 1 265 18 view .LVU138
 519 001e F7E7     		b	.L44
 520              	.L51:
 256:Bsp/Bsp_SDMMC.c ****             {
 521              		.loc 1 256 13 is_stmt 1 view .LVU139
 256:Bsp/Bsp_SDMMC.c ****             {
 522              		.loc 1 256 16 is_stmt 0 view .LVU140
 523 0020 301D     		adds	r0, r6, #4
 524              	.LVL23:
 256:Bsp/Bsp_SDMMC.c ****             {
 525              		.loc 1 256 16 view .LVU141
 526 0022 FFF7FEFF 		bl	HAL_SD_GetState
 527              	.LVL24:
 256:Bsp/Bsp_SDMMC.c ****             {
 528              		.loc 1 256 15 view .LVU142
 529 0026 0128     		cmp	r0, #1
 530 0028 02D0     		beq	.L46
 261:Bsp/Bsp_SDMMC.c ****         }
 531              		.loc 1 261 20 view .LVU143
 532 002a 0020     		movs	r0, #0
 533              	.L47:
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 34


 276:Bsp/Bsp_SDMMC.c **** 
 534              		.loc 1 276 1 view .LVU144
 535 002c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 536              	.LVL25:
 537              	.L46:
 268:Bsp/Bsp_SDMMC.c **** 
 538              		.loc 1 268 5 is_stmt 1 view .LVU145
 268:Bsp/Bsp_SDMMC.c **** 
 539              		.loc 1 268 31 is_stmt 0 view .LVU146
 540 0030 4346     		mov	r3, r8
 541 0032 4A46     		mov	r2, r9
 542 0034 3946     		mov	r1, r7
 543 0036 301D     		adds	r0, r6, #4
 544 0038 FFF7FEFF 		bl	HAL_SD_WriteBlocks_DMA
 545              	.LVL26:
 270:Bsp/Bsp_SDMMC.c **** 
 546              		.loc 1 270 5 is_stmt 1 view .LVU147
 270:Bsp/Bsp_SDMMC.c **** 
 547              		.loc 1 270 16 is_stmt 0 view .LVU148
 548 003c 034B     		ldr	r3, .L52
 549 003e 0022     		movs	r2, #0
 550 0040 1A70     		strb	r2, [r3]
 272:Bsp/Bsp_SDMMC.c ****         return true;
 551              		.loc 1 272 5 is_stmt 1 view .LVU149
 272:Bsp/Bsp_SDMMC.c ****         return true;
 552              		.loc 1 272 7 is_stmt 0 view .LVU150
 553 0042 08B1     		cbz	r0, .L49
 275:Bsp/Bsp_SDMMC.c **** }
 554              		.loc 1 275 12 view .LVU151
 555 0044 1046     		mov	r0, r2
 556              	.LVL27:
 275:Bsp/Bsp_SDMMC.c **** }
 557              		.loc 1 275 12 view .LVU152
 558 0046 F1E7     		b	.L47
 559              	.LVL28:
 560              	.L49:
 273:Bsp/Bsp_SDMMC.c **** 
 561              		.loc 1 273 16 view .LVU153
 562 0048 0120     		movs	r0, #1
 563              	.LVL29:
 273:Bsp/Bsp_SDMMC.c **** 
 564              		.loc 1 273 16 view .LVU154
 565 004a EFE7     		b	.L47
 566              	.L53:
 567              		.align	2
 568              	.L52:
 569 004c 00000000 		.word	.LANCHOR0
 570              		.cfi_endproc
 571              	.LFE150:
 573              		.section	.text.BspSDMMC_Read,"ax",%progbits
 574              		.align	1
 575              		.syntax unified
 576              		.thumb
 577              		.thumb_func
 578              		.fpu fpv5-d16
 580              	BspSDMMC_Read:
 581              	.LVL30:
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 35


 582              	.LFB149:
 208:Bsp/Bsp_SDMMC.c ****     uint32_t retry_cnt = SDMMC_OPR_RETRY_MAX_CNT;
 583              		.loc 1 208 1 is_stmt 1 view -0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 0
 586              		@ frame_needed = 0, uses_anonymous_args = 0
 208:Bsp/Bsp_SDMMC.c ****     uint32_t retry_cnt = SDMMC_OPR_RETRY_MAX_CNT;
 587              		.loc 1 208 1 is_stmt 0 view .LVU156
 588 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 589              	.LCFI8:
 590              		.cfi_def_cfa_offset 32
 591              		.cfi_offset 3, -32
 592              		.cfi_offset 4, -28
 593              		.cfi_offset 5, -24
 594              		.cfi_offset 6, -20
 595              		.cfi_offset 7, -16
 596              		.cfi_offset 8, -12
 597              		.cfi_offset 9, -8
 598              		.cfi_offset 14, -4
 599 0004 0646     		mov	r6, r0
 600 0006 0F46     		mov	r7, r1
 601 0008 9146     		mov	r9, r2
 602 000a 9846     		mov	r8, r3
 209:Bsp/Bsp_SDMMC.c **** 
 603              		.loc 1 209 5 is_stmt 1 view .LVU157
 604              	.LVL31:
 214:Bsp/Bsp_SDMMC.c ****     {
 605              		.loc 1 214 5 view .LVU158
 209:Bsp/Bsp_SDMMC.c **** 
 606              		.loc 1 209 14 is_stmt 0 view .LVU159
 607 000c 4FF0FF34 		mov	r4, #-1
 608              	.LVL32:
 609              	.L55:
 214:Bsp/Bsp_SDMMC.c ****     {
 610              		.loc 1 214 11 is_stmt 1 view .LVU160
 611 0010 74B1     		cbz	r4, .L57
 216:Bsp/Bsp_SDMMC.c ****         {
 612              		.loc 1 216 9 view .LVU161
 216:Bsp/Bsp_SDMMC.c ****         {
 613              		.loc 1 216 13 is_stmt 0 view .LVU162
 614 0012 0E4D     		ldr	r5, .L63
 615 0014 2D78     		ldrb	r5, [r5]	@ zero_extendqisi2
 216:Bsp/Bsp_SDMMC.c ****         {
 616              		.loc 1 216 12 view .LVU163
 617 0016 1DB9     		cbnz	r5, .L62
 227:Bsp/Bsp_SDMMC.c **** 
 618              		.loc 1 227 9 is_stmt 1 view .LVU164
 619              	.LBB22:
 620              	.LBI22:
 944:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 621              		.loc 2 944 27 view .LVU165
 622              	.LBB23:
 623              		.loc 2 946 3 view .LVU166
 624              		.syntax unified
 625              	@ 946 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h" 1
 626 0018 BFF34F8F 		dsb 0xF
 627              	@ 0 "" 2
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 36


 628              		.thumb
 629              		.syntax unified
 630              	.LBE23:
 631              	.LBE22:
 229:Bsp/Bsp_SDMMC.c ****     }
 632              		.loc 1 229 9 view .LVU167
 229:Bsp/Bsp_SDMMC.c ****     }
 633              		.loc 1 229 18 is_stmt 0 view .LVU168
 634 001c 013C     		subs	r4, r4, #1
 635              	.LVL33:
 229:Bsp/Bsp_SDMMC.c ****     }
 636              		.loc 1 229 18 view .LVU169
 637 001e F7E7     		b	.L55
 638              	.L62:
 220:Bsp/Bsp_SDMMC.c ****             {
 639              		.loc 1 220 13 is_stmt 1 view .LVU170
 220:Bsp/Bsp_SDMMC.c ****             {
 640              		.loc 1 220 16 is_stmt 0 view .LVU171
 641 0020 301D     		adds	r0, r6, #4
 642              	.LVL34:
 220:Bsp/Bsp_SDMMC.c ****             {
 643              		.loc 1 220 16 view .LVU172
 644 0022 FFF7FEFF 		bl	HAL_SD_GetState
 645              	.LVL35:
 220:Bsp/Bsp_SDMMC.c ****             {
 646              		.loc 1 220 15 view .LVU173
 647 0026 0128     		cmp	r0, #1
 648 0028 02D0     		beq	.L57
 225:Bsp/Bsp_SDMMC.c ****         }
 649              		.loc 1 225 20 view .LVU174
 650 002a 0020     		movs	r0, #0
 651              	.L58:
 240:Bsp/Bsp_SDMMC.c **** 
 652              		.loc 1 240 1 view .LVU175
 653 002c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 654              	.LVL36:
 655              	.L57:
 232:Bsp/Bsp_SDMMC.c **** 
 656              		.loc 1 232 5 is_stmt 1 view .LVU176
 232:Bsp/Bsp_SDMMC.c **** 
 657              		.loc 1 232 31 is_stmt 0 view .LVU177
 658 0030 4346     		mov	r3, r8
 659 0032 4A46     		mov	r2, r9
 660 0034 3946     		mov	r1, r7
 661 0036 301D     		adds	r0, r6, #4
 662 0038 FFF7FEFF 		bl	HAL_SD_ReadBlocks_DMA
 663              	.LVL37:
 234:Bsp/Bsp_SDMMC.c **** 
 664              		.loc 1 234 5 is_stmt 1 view .LVU178
 234:Bsp/Bsp_SDMMC.c **** 
 665              		.loc 1 234 16 is_stmt 0 view .LVU179
 666 003c 034B     		ldr	r3, .L63
 667 003e 0022     		movs	r2, #0
 668 0040 1A70     		strb	r2, [r3]
 236:Bsp/Bsp_SDMMC.c ****         return true;
 669              		.loc 1 236 5 is_stmt 1 view .LVU180
 236:Bsp/Bsp_SDMMC.c ****         return true;
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 37


 670              		.loc 1 236 7 is_stmt 0 view .LVU181
 671 0042 08B1     		cbz	r0, .L60
 239:Bsp/Bsp_SDMMC.c **** }
 672              		.loc 1 239 12 view .LVU182
 673 0044 1046     		mov	r0, r2
 674              	.LVL38:
 239:Bsp/Bsp_SDMMC.c **** }
 675              		.loc 1 239 12 view .LVU183
 676 0046 F1E7     		b	.L58
 677              	.LVL39:
 678              	.L60:
 237:Bsp/Bsp_SDMMC.c **** 
 679              		.loc 1 237 16 view .LVU184
 680 0048 0120     		movs	r0, #1
 681              	.LVL40:
 237:Bsp/Bsp_SDMMC.c **** 
 682              		.loc 1 237 16 view .LVU185
 683 004a EFE7     		b	.L58
 684              	.L64:
 685              		.align	2
 686              	.L63:
 687 004c 00000000 		.word	.LANCHOR1
 688              		.cfi_endproc
 689              	.LFE149:
 691              		.section	.text.BspSDMMC_PortCLK_Init,"ax",%progbits
 692              		.align	1
 693              		.syntax unified
 694              		.thumb
 695              		.thumb_func
 696              		.fpu fpv5-d16
 698              	BspSDMMC_PortCLK_Init:
 699              	.LVL41:
 700              	.LFB145:
  79:Bsp/Bsp_SDMMC.c ****     RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 701              		.loc 1 79 1 is_stmt 1 view -0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 192
 704              		@ frame_needed = 0, uses_anonymous_args = 0
  79:Bsp/Bsp_SDMMC.c ****     RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 705              		.loc 1 79 1 is_stmt 0 view .LVU187
 706 0000 10B5     		push	{r4, lr}
 707              	.LCFI9:
 708              		.cfi_def_cfa_offset 8
 709              		.cfi_offset 4, -8
 710              		.cfi_offset 14, -4
 711 0002 B0B0     		sub	sp, sp, #192
 712              	.LCFI10:
 713              		.cfi_def_cfa_offset 200
 714 0004 0446     		mov	r4, r0
  80:Bsp/Bsp_SDMMC.c ****     if (instance == NULL)
 715              		.loc 1 80 5 is_stmt 1 view .LVU188
  80:Bsp/Bsp_SDMMC.c ****     if (instance == NULL)
 716              		.loc 1 80 30 is_stmt 0 view .LVU189
 717 0006 BC22     		movs	r2, #188
 718 0008 0021     		movs	r1, #0
 719 000a 01A8     		add	r0, sp, #4
 720              	.LVL42:
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 38


  80:Bsp/Bsp_SDMMC.c ****     if (instance == NULL)
 721              		.loc 1 80 30 view .LVU190
 722 000c FFF7FEFF 		bl	memset
 723              	.LVL43:
  81:Bsp/Bsp_SDMMC.c ****         return false;
 724              		.loc 1 81 5 is_stmt 1 view .LVU191
  81:Bsp/Bsp_SDMMC.c ****         return false;
 725              		.loc 1 81 8 is_stmt 0 view .LVU192
 726 0010 DCB1     		cbz	r4, .L67
  84:Bsp/Bsp_SDMMC.c ****     {
 727              		.loc 1 84 5 is_stmt 1 view .LVU193
  84:Bsp/Bsp_SDMMC.c ****     {
 728              		.loc 1 84 8 is_stmt 0 view .LVU194
 729 0012 104B     		ldr	r3, .L72
 730 0014 9C42     		cmp	r4, r3
 731 0016 02D0     		beq	.L71
  95:Bsp/Bsp_SDMMC.c **** }
 732              		.loc 1 95 12 view .LVU195
 733 0018 0120     		movs	r0, #1
 734              	.L66:
  96:Bsp/Bsp_SDMMC.c **** 
 735              		.loc 1 96 1 view .LVU196
 736 001a 30B0     		add	sp, sp, #192
 737              	.LCFI11:
 738              		.cfi_remember_state
 739              		.cfi_def_cfa_offset 8
 740              		@ sp needed
 741 001c 10BD     		pop	{r4, pc}
 742              	.LVL44:
 743              	.L71:
 744              	.LCFI12:
 745              		.cfi_restore_state
  86:Bsp/Bsp_SDMMC.c ****         PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 746              		.loc 1 86 9 is_stmt 1 view .LVU197
  86:Bsp/Bsp_SDMMC.c ****         PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 747              		.loc 1 86 50 is_stmt 0 view .LVU198
 748 001e 4FF48033 		mov	r3, #65536
 749 0022 0193     		str	r3, [sp, #4]
  87:Bsp/Bsp_SDMMC.c ****         if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 750              		.loc 1 87 9 is_stmt 1 view .LVU199
  88:Bsp/Bsp_SDMMC.c ****             return false;
 751              		.loc 1 88 9 view .LVU200
  88:Bsp/Bsp_SDMMC.c ****             return false;
 752              		.loc 1 88 13 is_stmt 0 view .LVU201
 753 0024 01A8     		add	r0, sp, #4
 754 0026 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 755              	.LVL45:
  88:Bsp/Bsp_SDMMC.c ****             return false;
 756              		.loc 1 88 12 view .LVU202
 757 002a 80B9     		cbnz	r0, .L69
  91:Bsp/Bsp_SDMMC.c ****         return true;
 758              		.loc 1 91 9 is_stmt 1 view .LVU203
 759              	.LBB24:
  91:Bsp/Bsp_SDMMC.c ****         return true;
 760              		.loc 1 91 9 view .LVU204
  91:Bsp/Bsp_SDMMC.c ****         return true;
 761              		.loc 1 91 9 view .LVU205
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 39


 762 002c 0A4B     		ldr	r3, .L72+4
 763 002e D3F8D420 		ldr	r2, [r3, #212]
 764 0032 42F48032 		orr	r2, r2, #65536
 765 0036 C3F8D420 		str	r2, [r3, #212]
  91:Bsp/Bsp_SDMMC.c ****         return true;
 766              		.loc 1 91 9 view .LVU206
 767 003a D3F8D430 		ldr	r3, [r3, #212]
 768 003e 03F48033 		and	r3, r3, #65536
 769 0042 0093     		str	r3, [sp]
  91:Bsp/Bsp_SDMMC.c ****         return true;
 770              		.loc 1 91 9 view .LVU207
 771 0044 009B     		ldr	r3, [sp]
 772              	.LBE24:
  91:Bsp/Bsp_SDMMC.c ****         return true;
 773              		.loc 1 91 9 view .LVU208
  92:Bsp/Bsp_SDMMC.c ****     }
 774              		.loc 1 92 9 view .LVU209
  92:Bsp/Bsp_SDMMC.c ****     }
 775              		.loc 1 92 16 is_stmt 0 view .LVU210
 776 0046 0120     		movs	r0, #1
 777 0048 E7E7     		b	.L66
 778              	.L67:
  82:Bsp/Bsp_SDMMC.c **** 
 779              		.loc 1 82 16 view .LVU211
 780 004a 0020     		movs	r0, #0
 781 004c E5E7     		b	.L66
 782              	.L69:
  89:Bsp/Bsp_SDMMC.c **** 
 783              		.loc 1 89 20 view .LVU212
 784 004e 0020     		movs	r0, #0
 785 0050 E3E7     		b	.L66
 786              	.L73:
 787 0052 00BF     		.align	2
 788              	.L72:
 789 0054 00700052 		.word	1375760384
 790 0058 00440258 		.word	1476543488
 791              		.cfi_endproc
 792              	.LFE145:
 794              		.section	.text.BspSDMMC_Pin_Init,"ax",%progbits
 795              		.align	1
 796              		.syntax unified
 797              		.thumb
 798              		.thumb_func
 799              		.fpu fpv5-d16
 801              	BspSDMMC_Pin_Init:
 802              	.LVL46:
 803              	.LFB146:
  99:Bsp/Bsp_SDMMC.c ****     GPIO_InitTypeDef GPIO_InitStruct = BspSDMMC_PinCfg;
 804              		.loc 1 99 1 is_stmt 1 view -0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 24
 807              		@ frame_needed = 0, uses_anonymous_args = 0
  99:Bsp/Bsp_SDMMC.c ****     GPIO_InitTypeDef GPIO_InitStruct = BspSDMMC_PinCfg;
 808              		.loc 1 99 1 is_stmt 0 view .LVU214
 809 0000 10B5     		push	{r4, lr}
 810              	.LCFI13:
 811              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 40


 812              		.cfi_offset 4, -8
 813              		.cfi_offset 14, -4
 814 0002 86B0     		sub	sp, sp, #24
 815              	.LCFI14:
 816              		.cfi_def_cfa_offset 32
 100:Bsp/Bsp_SDMMC.c **** 
 817              		.loc 1 100 5 is_stmt 1 view .LVU215
 100:Bsp/Bsp_SDMMC.c **** 
 818              		.loc 1 100 22 is_stmt 0 view .LVU216
 819 0004 0023     		movs	r3, #0
 820 0006 0193     		str	r3, [sp, #4]
 821 0008 0293     		str	r3, [sp, #8]
 822 000a 0393     		str	r3, [sp, #12]
 823 000c 0493     		str	r3, [sp, #16]
 824 000e 0593     		str	r3, [sp, #20]
 825 0010 0223     		movs	r3, #2
 826 0012 0293     		str	r3, [sp, #8]
 827 0014 0323     		movs	r3, #3
 828 0016 0493     		str	r3, [sp, #16]
 102:Bsp/Bsp_SDMMC.c ****         return false;
 829              		.loc 1 102 5 is_stmt 1 view .LVU217
 102:Bsp/Bsp_SDMMC.c ****         return false;
 830              		.loc 1 102 8 is_stmt 0 view .LVU218
 831 0018 0029     		cmp	r1, #0
 832 001a 40D0     		beq	.L76
 833 001c 0C46     		mov	r4, r1
 105:Bsp/Bsp_SDMMC.c ****     {
 834              		.loc 1 105 5 is_stmt 1 view .LVU219
 105:Bsp/Bsp_SDMMC.c ****     {
 835              		.loc 1 105 8 is_stmt 0 view .LVU220
 836 001e 214B     		ldr	r3, .L80
 837 0020 9842     		cmp	r0, r3
 838 0022 02D0     		beq	.L79
 136:Bsp/Bsp_SDMMC.c **** }
 839              		.loc 1 136 12 view .LVU221
 840 0024 0020     		movs	r0, #0
 841              	.LVL47:
 842              	.L75:
 137:Bsp/Bsp_SDMMC.c **** 
 843              		.loc 1 137 1 view .LVU222
 844 0026 06B0     		add	sp, sp, #24
 845              	.LCFI15:
 846              		.cfi_remember_state
 847              		.cfi_def_cfa_offset 8
 848              		@ sp needed
 849 0028 10BD     		pop	{r4, pc}
 850              	.LVL48:
 851              	.L79:
 852              	.LCFI16:
 853              		.cfi_restore_state
 107:Bsp/Bsp_SDMMC.c **** 
 854              		.loc 1 107 9 is_stmt 1 view .LVU223
 107:Bsp/Bsp_SDMMC.c **** 
 855              		.loc 1 107 40 is_stmt 0 view .LVU224
 856 002a 0B6B     		ldr	r3, [r1, #48]	@ unaligned
 107:Bsp/Bsp_SDMMC.c **** 
 857              		.loc 1 107 35 view .LVU225
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 41


 858 002c 0593     		str	r3, [sp, #20]
 109:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->CK_Pin;
 859              		.loc 1 109 9 is_stmt 1 view .LVU226
 860 002e 0869     		ldr	r0, [r1, #16]	@ unaligned
 861              	.LVL49:
 109:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->CK_Pin;
 862              		.loc 1 109 9 is_stmt 0 view .LVU227
 863 0030 FFF7FEFF 		bl	BspSDMMC_PinCLK_Enable
 864              	.LVL50:
 110:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CK_Port, &GPIO_InitStruct);
 865              		.loc 1 110 9 is_stmt 1 view .LVU228
 110:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CK_Port, &GPIO_InitStruct);
 866              		.loc 1 110 34 is_stmt 0 view .LVU229
 867 0034 A36A     		ldr	r3, [r4, #40]	@ unaligned
 110:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CK_Port, &GPIO_InitStruct);
 868              		.loc 1 110 29 view .LVU230
 869 0036 0193     		str	r3, [sp, #4]
 111:Bsp/Bsp_SDMMC.c **** 
 870              		.loc 1 111 9 is_stmt 1 view .LVU231
 871 0038 01A9     		add	r1, sp, #4
 872 003a 2069     		ldr	r0, [r4, #16]	@ unaligned
 873 003c FFF7FEFF 		bl	HAL_GPIO_Init
 874              	.LVL51:
 113:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->CMD_Pin;
 875              		.loc 1 113 9 view .LVU232
 876 0040 6069     		ldr	r0, [r4, #20]	@ unaligned
 877 0042 FFF7FEFF 		bl	BspSDMMC_PinCLK_Enable
 878              	.LVL52:
 114:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CMD_Port, &GPIO_InitStruct);
 879              		.loc 1 114 9 view .LVU233
 114:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CMD_Port, &GPIO_InitStruct);
 880              		.loc 1 114 34 is_stmt 0 view .LVU234
 881 0046 E36A     		ldr	r3, [r4, #44]	@ unaligned
 114:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CMD_Port, &GPIO_InitStruct);
 882              		.loc 1 114 29 view .LVU235
 883 0048 0193     		str	r3, [sp, #4]
 115:Bsp/Bsp_SDMMC.c **** 
 884              		.loc 1 115 9 is_stmt 1 view .LVU236
 885 004a 01A9     		add	r1, sp, #4
 886 004c 6069     		ldr	r0, [r4, #20]	@ unaligned
 887 004e FFF7FEFF 		bl	HAL_GPIO_Init
 888              	.LVL53:
 117:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D0_Pin;
 889              		.loc 1 117 9 view .LVU237
 890 0052 2068     		ldr	r0, [r4]	@ unaligned
 891 0054 FFF7FEFF 		bl	BspSDMMC_PinCLK_Enable
 892              	.LVL54:
 118:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D0_Port, &GPIO_InitStruct);
 893              		.loc 1 118 9 view .LVU238
 118:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D0_Port, &GPIO_InitStruct);
 894              		.loc 1 118 34 is_stmt 0 view .LVU239
 895 0058 A369     		ldr	r3, [r4, #24]	@ unaligned
 118:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D0_Port, &GPIO_InitStruct);
 896              		.loc 1 118 29 view .LVU240
 897 005a 0193     		str	r3, [sp, #4]
 119:Bsp/Bsp_SDMMC.c **** 
 898              		.loc 1 119 9 is_stmt 1 view .LVU241
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 42


 899 005c 01A9     		add	r1, sp, #4
 900 005e 2068     		ldr	r0, [r4]	@ unaligned
 901 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 902              	.LVL55:
 121:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D1_Pin;
 903              		.loc 1 121 9 view .LVU242
 904 0064 6068     		ldr	r0, [r4, #4]	@ unaligned
 905 0066 FFF7FEFF 		bl	BspSDMMC_PinCLK_Enable
 906              	.LVL56:
 122:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D1_Port, &GPIO_InitStruct);
 907              		.loc 1 122 9 view .LVU243
 122:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D1_Port, &GPIO_InitStruct);
 908              		.loc 1 122 34 is_stmt 0 view .LVU244
 909 006a E369     		ldr	r3, [r4, #28]	@ unaligned
 122:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D1_Port, &GPIO_InitStruct);
 910              		.loc 1 122 29 view .LVU245
 911 006c 0193     		str	r3, [sp, #4]
 123:Bsp/Bsp_SDMMC.c **** 
 912              		.loc 1 123 9 is_stmt 1 view .LVU246
 913 006e 01A9     		add	r1, sp, #4
 914 0070 6068     		ldr	r0, [r4, #4]	@ unaligned
 915 0072 FFF7FEFF 		bl	HAL_GPIO_Init
 916              	.LVL57:
 125:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D2_Pin;
 917              		.loc 1 125 9 view .LVU247
 918 0076 A068     		ldr	r0, [r4, #8]	@ unaligned
 919 0078 FFF7FEFF 		bl	BspSDMMC_PinCLK_Enable
 920              	.LVL58:
 126:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D2_Port, &GPIO_InitStruct);
 921              		.loc 1 126 9 view .LVU248
 126:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D2_Port, &GPIO_InitStruct);
 922              		.loc 1 126 34 is_stmt 0 view .LVU249
 923 007c 236A     		ldr	r3, [r4, #32]	@ unaligned
 126:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D2_Port, &GPIO_InitStruct);
 924              		.loc 1 126 29 view .LVU250
 925 007e 0193     		str	r3, [sp, #4]
 127:Bsp/Bsp_SDMMC.c **** 
 926              		.loc 1 127 9 is_stmt 1 view .LVU251
 927 0080 01A9     		add	r1, sp, #4
 928 0082 A068     		ldr	r0, [r4, #8]	@ unaligned
 929 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 930              	.LVL59:
 129:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D3_Pin;
 931              		.loc 1 129 9 view .LVU252
 932 0088 E068     		ldr	r0, [r4, #12]	@ unaligned
 933 008a FFF7FEFF 		bl	BspSDMMC_PinCLK_Enable
 934              	.LVL60:
 130:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D3_Port, &GPIO_InitStruct);
 935              		.loc 1 130 9 view .LVU253
 130:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D3_Port, &GPIO_InitStruct);
 936              		.loc 1 130 34 is_stmt 0 view .LVU254
 937 008e 636A     		ldr	r3, [r4, #36]	@ unaligned
 130:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D3_Port, &GPIO_InitStruct);
 938              		.loc 1 130 29 view .LVU255
 939 0090 0193     		str	r3, [sp, #4]
 131:Bsp/Bsp_SDMMC.c **** 
 940              		.loc 1 131 9 is_stmt 1 view .LVU256
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 43


 941 0092 01A9     		add	r1, sp, #4
 942 0094 E068     		ldr	r0, [r4, #12]	@ unaligned
 943 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 944              	.LVL61:
 133:Bsp/Bsp_SDMMC.c ****     }
 945              		.loc 1 133 9 view .LVU257
 133:Bsp/Bsp_SDMMC.c ****     }
 946              		.loc 1 133 16 is_stmt 0 view .LVU258
 947 009a 0120     		movs	r0, #1
 948 009c C3E7     		b	.L75
 949              	.LVL62:
 950              	.L76:
 103:Bsp/Bsp_SDMMC.c **** 
 951              		.loc 1 103 16 view .LVU259
 952 009e 0020     		movs	r0, #0
 953              	.LVL63:
 103:Bsp/Bsp_SDMMC.c **** 
 954              		.loc 1 103 16 view .LVU260
 955 00a0 C1E7     		b	.L75
 956              	.L81:
 957 00a2 00BF     		.align	2
 958              	.L80:
 959 00a4 00700052 		.word	1375760384
 960              		.cfi_endproc
 961              	.LFE146:
 963              		.section	.text.BspSDMMC_MDMA_Init,"ax",%progbits
 964              		.align	1
 965              		.syntax unified
 966              		.thumb
 967              		.thumb_func
 968              		.fpu fpv5-d16
 970              	BspSDMMC_MDMA_Init:
 971              	.LVL64:
 972              	.LFB147:
 140:Bsp/Bsp_SDMMC.c ****     if (mdma == NULL)
 973              		.loc 1 140 1 is_stmt 1 view -0
 974              		.cfi_startproc
 975              		@ args = 0, pretend = 0, frame = 8
 976              		@ frame_needed = 0, uses_anonymous_args = 0
 141:Bsp/Bsp_SDMMC.c ****         return false;
 977              		.loc 1 141 5 view .LVU262
 141:Bsp/Bsp_SDMMC.c ****         return false;
 978              		.loc 1 141 8 is_stmt 0 view .LVU263
 979 0000 0028     		cmp	r0, #0
 980 0002 40D0     		beq	.L84
 140:Bsp/Bsp_SDMMC.c ****     if (mdma == NULL)
 981              		.loc 1 140 1 view .LVU264
 982 0004 00B5     		push	{lr}
 983              	.LCFI17:
 984              		.cfi_def_cfa_offset 4
 985              		.cfi_offset 14, -4
 986 0006 83B0     		sub	sp, sp, #12
 987              	.LCFI18:
 988              		.cfi_def_cfa_offset 16
 989 0008 0346     		mov	r3, r0
 144:Bsp/Bsp_SDMMC.c **** 
 990              		.loc 1 144 5 is_stmt 1 view .LVU265
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 44


 991              	.LBB25:
 144:Bsp/Bsp_SDMMC.c **** 
 992              		.loc 1 144 5 view .LVU266
 144:Bsp/Bsp_SDMMC.c **** 
 993              		.loc 1 144 5 view .LVU267
 994 000a 204A     		ldr	r2, .L91
 995 000c D2F8D410 		ldr	r1, [r2, #212]
 996 0010 41F00101 		orr	r1, r1, #1
 997 0014 C2F8D410 		str	r1, [r2, #212]
 144:Bsp/Bsp_SDMMC.c **** 
 998              		.loc 1 144 5 view .LVU268
 999 0018 D2F8D420 		ldr	r2, [r2, #212]
 1000 001c 02F00102 		and	r2, r2, #1
 1001 0020 0192     		str	r2, [sp, #4]
 144:Bsp/Bsp_SDMMC.c **** 
 1002              		.loc 1 144 5 view .LVU269
 1003 0022 019A     		ldr	r2, [sp, #4]
 1004              	.LBE25:
 144:Bsp/Bsp_SDMMC.c **** 
 1005              		.loc 1 144 5 view .LVU270
 146:Bsp/Bsp_SDMMC.c ****     mdma->Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 1006              		.loc 1 146 5 view .LVU271
 146:Bsp/Bsp_SDMMC.c ****     mdma->Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 1007              		.loc 1 146 20 is_stmt 0 view .LVU272
 1008 0024 1A4A     		ldr	r2, .L91+4
 1009 0026 0260     		str	r2, [r0]
 147:Bsp/Bsp_SDMMC.c ****     mdma->Init.Priority = MDMA_PRIORITY_HIGH;
 1010              		.loc 1 147 5 is_stmt 1 view .LVU273
 147:Bsp/Bsp_SDMMC.c ****     mdma->Init.Priority = MDMA_PRIORITY_HIGH;
 1011              		.loc 1 147 36 is_stmt 0 view .LVU274
 1012 0028 4FF08052 		mov	r2, #268435456
 1013 002c 8260     		str	r2, [r0, #8]
 148:Bsp/Bsp_SDMMC.c ****     mdma->Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 1014              		.loc 1 148 5 is_stmt 1 view .LVU275
 148:Bsp/Bsp_SDMMC.c ****     mdma->Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 1015              		.loc 1 148 25 is_stmt 0 view .LVU276
 1016 002e 8021     		movs	r1, #128
 1017 0030 C160     		str	r1, [r0, #12]
 149:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceInc = MDMA_SRC_INC_WORD;//MDMA_SRC_INC_BYTE;
 1018              		.loc 1 149 5 is_stmt 1 view .LVU277
 149:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceInc = MDMA_SRC_INC_WORD;//MDMA_SRC_INC_BYTE;
 1019              		.loc 1 149 27 is_stmt 0 view .LVU278
 1020 0032 0022     		movs	r2, #0
 1021 0034 0261     		str	r2, [r0, #16]
 150:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestinationInc = MDMA_DEST_INC_WORD;//MDMA_DEST_INC_BYTE;
 1022              		.loc 1 150 5 is_stmt 1 view .LVU279
 150:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestinationInc = MDMA_DEST_INC_WORD;//MDMA_DEST_INC_BYTE;
 1023              		.loc 1 150 26 is_stmt 0 view .LVU280
 1024 0036 40F20220 		movw	r0, #514
 1025              	.LVL65:
 150:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestinationInc = MDMA_DEST_INC_WORD;//MDMA_DEST_INC_BYTE;
 1026              		.loc 1 150 26 view .LVU281
 1027 003a 5861     		str	r0, [r3, #20]
 151:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;//MDMA_SRC_DATASIZE_BYTE;
 1028              		.loc 1 151 5 is_stmt 1 view .LVU282
 151:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;//MDMA_SRC_DATASIZE_BYTE;
 1029              		.loc 1 151 31 is_stmt 0 view .LVU283
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 45


 1030 003c 40F60800 		movw	r0, #2056
 1031 0040 9861     		str	r0, [r3, #24]
 152:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;//MDMA_DEST_DATASIZE_BYTE;
 1032              		.loc 1 152 5 is_stmt 1 view .LVU284
 152:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;//MDMA_DEST_DATASIZE_BYTE;
 1033              		.loc 1 152 31 is_stmt 0 view .LVU285
 1034 0042 2020     		movs	r0, #32
 1035 0044 D861     		str	r0, [r3, #28]
 153:Bsp/Bsp_SDMMC.c ****     mdma->Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 1036              		.loc 1 153 5 is_stmt 1 view .LVU286
 153:Bsp/Bsp_SDMMC.c ****     mdma->Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 1037              		.loc 1 153 29 is_stmt 0 view .LVU287
 1038 0046 1962     		str	r1, [r3, #32]
 154:Bsp/Bsp_SDMMC.c ****     mdma->Init.BufferTransferLength = 1;
 1039              		.loc 1 154 5 is_stmt 1 view .LVU288
 154:Bsp/Bsp_SDMMC.c ****     mdma->Init.BufferTransferLength = 1;
 1040              		.loc 1 154 30 is_stmt 0 view .LVU289
 1041 0048 4FF00071 		mov	r1, #33554432
 1042 004c 5962     		str	r1, [r3, #36]
 155:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceBurst = MDMA_SOURCE_BURST_8BEATS;//MDMA_SOURCE_BURST_SINGLE;
 1043              		.loc 1 155 5 is_stmt 1 view .LVU290
 155:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceBurst = MDMA_SOURCE_BURST_8BEATS;//MDMA_SOURCE_BURST_SINGLE;
 1044              		.loc 1 155 37 is_stmt 0 view .LVU291
 1045 004e 0121     		movs	r1, #1
 1046 0050 9962     		str	r1, [r3, #40]
 156:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestBurst = MDMA_DEST_BURST_8BEATS;//MDMA_DEST_BURST_SINGLE;
 1047              		.loc 1 156 5 is_stmt 1 view .LVU292
 156:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestBurst = MDMA_DEST_BURST_8BEATS;//MDMA_DEST_BURST_SINGLE;
 1048              		.loc 1 156 28 is_stmt 0 view .LVU293
 1049 0052 4FF44051 		mov	r1, #12288
 1050 0056 D962     		str	r1, [r3, #44]
 157:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceBlockAddressOffset = 0;
 1051              		.loc 1 157 5 is_stmt 1 view .LVU294
 157:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceBlockAddressOffset = 0;
 1052              		.loc 1 157 26 is_stmt 0 view .LVU295
 1053 0058 4FF4C031 		mov	r1, #98304
 1054 005c 1963     		str	r1, [r3, #48]
 158:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestBlockAddressOffset = 0;
 1055              		.loc 1 158 5 is_stmt 1 view .LVU296
 158:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestBlockAddressOffset = 0;
 1056              		.loc 1 158 41 is_stmt 0 view .LVU297
 1057 005e 5A63     		str	r2, [r3, #52]
 159:Bsp/Bsp_SDMMC.c ****     if (HAL_MDMA_Init(mdma) != HAL_OK)
 1058              		.loc 1 159 5 is_stmt 1 view .LVU298
 159:Bsp/Bsp_SDMMC.c ****     if (HAL_MDMA_Init(mdma) != HAL_OK)
 1059              		.loc 1 159 39 is_stmt 0 view .LVU299
 1060 0060 9A63     		str	r2, [r3, #56]
 160:Bsp/Bsp_SDMMC.c ****         return false;
 1061              		.loc 1 160 5 is_stmt 1 view .LVU300
 160:Bsp/Bsp_SDMMC.c ****         return false;
 1062              		.loc 1 160 9 is_stmt 0 view .LVU301
 1063 0062 1846     		mov	r0, r3
 1064 0064 FFF7FEFF 		bl	HAL_MDMA_Init
 1065              	.LVL66:
 160:Bsp/Bsp_SDMMC.c ****         return false;
 1066              		.loc 1 160 8 view .LVU302
 1067 0068 18B1     		cbz	r0, .L90
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 46


 161:Bsp/Bsp_SDMMC.c **** 
 1068              		.loc 1 161 16 view .LVU303
 1069 006a 0020     		movs	r0, #0
 1070              	.L83:
 167:Bsp/Bsp_SDMMC.c **** 
 1071              		.loc 1 167 1 view .LVU304
 1072 006c 03B0     		add	sp, sp, #12
 1073              	.LCFI19:
 1074              		.cfi_remember_state
 1075              		.cfi_def_cfa_offset 4
 1076              		@ sp needed
 1077 006e 5DF804FB 		ldr	pc, [sp], #4
 1078              	.L90:
 1079              	.LCFI20:
 1080              		.cfi_restore_state
 163:Bsp/Bsp_SDMMC.c ****     HAL_NVIC_EnableIRQ(MDMA_IRQn);
 1081              		.loc 1 163 5 is_stmt 1 view .LVU305
 1082 0072 0022     		movs	r2, #0
 1083 0074 0A21     		movs	r1, #10
 1084 0076 7A20     		movs	r0, #122
 1085 0078 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1086              	.LVL67:
 164:Bsp/Bsp_SDMMC.c **** 
 1087              		.loc 1 164 5 view .LVU306
 1088 007c 7A20     		movs	r0, #122
 1089 007e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1090              	.LVL68:
 166:Bsp/Bsp_SDMMC.c **** }
 1091              		.loc 1 166 5 view .LVU307
 166:Bsp/Bsp_SDMMC.c **** }
 1092              		.loc 1 166 12 is_stmt 0 view .LVU308
 1093 0082 0120     		movs	r0, #1
 1094 0084 F2E7     		b	.L83
 1095              	.LVL69:
 1096              	.L84:
 1097              	.LCFI21:
 1098              		.cfi_def_cfa_offset 0
 1099              		.cfi_restore 14
 142:Bsp/Bsp_SDMMC.c **** 
 1100              		.loc 1 142 16 view .LVU309
 1101 0086 0020     		movs	r0, #0
 1102              	.LVL70:
 167:Bsp/Bsp_SDMMC.c **** 
 1103              		.loc 1 167 1 view .LVU310
 1104 0088 7047     		bx	lr
 1105              	.L92:
 1106 008a 00BF     		.align	2
 1107              	.L91:
 1108 008c 00440258 		.word	1476543488
 1109 0090 40000052 		.word	1375731776
 1110              		.cfi_endproc
 1111              	.LFE147:
 1113              		.section	.text.BspSDMMC_Init,"ax",%progbits
 1114              		.align	1
 1115              		.syntax unified
 1116              		.thumb
 1117              		.thumb_func
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 47


 1118              		.fpu fpv5-d16
 1120              	BspSDMMC_Init:
 1121              	.LVL71:
 1122              	.LFB148:
 170:Bsp/Bsp_SDMMC.c ****     IRQn_Type irq = SDMMC1_IRQn;
 1123              		.loc 1 170 1 is_stmt 1 view -0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 0
 1126              		@ frame_needed = 0, uses_anonymous_args = 0
 170:Bsp/Bsp_SDMMC.c ****     IRQn_Type irq = SDMMC1_IRQn;
 1127              		.loc 1 170 1 is_stmt 0 view .LVU312
 1128 0000 70B5     		push	{r4, r5, r6, lr}
 1129              	.LCFI22:
 1130              		.cfi_def_cfa_offset 16
 1131              		.cfi_offset 4, -16
 1132              		.cfi_offset 5, -12
 1133              		.cfi_offset 6, -8
 1134              		.cfi_offset 14, -4
 171:Bsp/Bsp_SDMMC.c **** 
 1135              		.loc 1 171 5 is_stmt 1 view .LVU313
 1136              	.LVL72:
 173:Bsp/Bsp_SDMMC.c ****         return false;
 1137              		.loc 1 173 5 view .LVU314
 173:Bsp/Bsp_SDMMC.c ****         return false;
 1138              		.loc 1 173 8 is_stmt 0 view .LVU315
 1139 0002 0028     		cmp	r0, #0
 1140 0004 49D0     		beq	.L98
 1141 0006 0446     		mov	r4, r0
 176:Bsp/Bsp_SDMMC.c ****     BspSDMMC_Pin_Init(obj->instance, obj->pin);
 1142              		.loc 1 176 5 is_stmt 1 view .LVU316
 1143 0008 D0F8F000 		ldr	r0, [r0, #240]	@ unaligned
 1144              	.LVL73:
 176:Bsp/Bsp_SDMMC.c ****     BspSDMMC_Pin_Init(obj->instance, obj->pin);
 1145              		.loc 1 176 5 is_stmt 0 view .LVU317
 1146 000c FFF7FEFF 		bl	BspSDMMC_PortCLK_Init
 1147              	.LVL74:
 177:Bsp/Bsp_SDMMC.c **** 
 1148              		.loc 1 177 5 is_stmt 1 view .LVU318
 1149 0010 2168     		ldr	r1, [r4]	@ unaligned
 1150 0012 D4F8F000 		ldr	r0, [r4, #240]	@ unaligned
 1151 0016 FFF7FEFF 		bl	BspSDMMC_Pin_Init
 1152              	.LVL75:
 179:Bsp/Bsp_SDMMC.c ****     {
 1153              		.loc 1 179 5 view .LVU319
 179:Bsp/Bsp_SDMMC.c ****     {
 1154              		.loc 1 179 12 is_stmt 0 view .LVU320
 1155 001a D4F8F030 		ldr	r3, [r4, #240]	@ unaligned
 179:Bsp/Bsp_SDMMC.c ****     {
 1156              		.loc 1 179 8 view .LVU321
 1157 001e 204A     		ldr	r2, .L104
 1158 0020 9342     		cmp	r3, r2
 1159 0022 2AD0     		beq	.L99
 183:Bsp/Bsp_SDMMC.c ****     {
 1160              		.loc 1 183 10 is_stmt 1 view .LVU322
 183:Bsp/Bsp_SDMMC.c ****     {
 1161              		.loc 1 183 13 is_stmt 0 view .LVU323
 1162 0024 1F4A     		ldr	r2, .L104+4
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 48


 1163 0026 9342     		cmp	r3, r2
 1164 0028 02D0     		beq	.L102
 188:Bsp/Bsp_SDMMC.c **** 
 1165              		.loc 1 188 16 view .LVU324
 1166 002a 0025     		movs	r5, #0
 1167              	.LVL76:
 1168              	.L94:
 205:Bsp/Bsp_SDMMC.c **** 
 1169              		.loc 1 205 1 view .LVU325
 1170 002c 2846     		mov	r0, r5
 1171 002e 70BD     		pop	{r4, r5, r6, pc}
 1172              	.LVL77:
 1173              	.L102:
 185:Bsp/Bsp_SDMMC.c ****     }
 1174              		.loc 1 185 13 view .LVU326
 1175 0030 7C26     		movs	r6, #124
 1176              	.L95:
 1177              	.LVL78:
 190:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 1178              		.loc 1 190 5 is_stmt 1 view .LVU327
 190:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 1179              		.loc 1 190 23 is_stmt 0 view .LVU328
 1180 0032 6360     		str	r3, [r4, #4]	@ unaligned
 191:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 1181              		.loc 1 191 5 is_stmt 1 view .LVU329
 191:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 1182              		.loc 1 191 29 is_stmt 0 view .LVU330
 1183 0034 0023     		movs	r3, #0
 1184 0036 2372     		strb	r3, [r4, #8]
 1185 0038 6372     		strb	r3, [r4, #9]
 1186 003a A372     		strb	r3, [r4, #10]
 1187 003c E372     		strb	r3, [r4, #11]
 192:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.BusWide = SDMMC_BUS_WIDE_4B;
 1188              		.loc 1 192 5 is_stmt 1 view .LVU331
 192:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.BusWide = SDMMC_BUS_WIDE_4B;
 1189              		.loc 1 192 34 is_stmt 0 view .LVU332
 1190 003e 2373     		strb	r3, [r4, #12]
 1191 0040 6373     		strb	r3, [r4, #13]
 1192 0042 A373     		strb	r3, [r4, #14]
 1193 0044 E373     		strb	r3, [r4, #15]
 193:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 1194              		.loc 1 193 5 is_stmt 1 view .LVU333
 193:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 1195              		.loc 1 193 27 is_stmt 0 view .LVU334
 1196 0046 2374     		strb	r3, [r4, #16]
 1197 0048 4022     		movs	r2, #64
 1198 004a 6274     		strb	r2, [r4, #17]
 1199 004c A374     		strb	r3, [r4, #18]
 1200 004e E374     		strb	r3, [r4, #19]
 194:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockDiv = 1;
 1201              		.loc 1 194 5 is_stmt 1 view .LVU335
 194:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockDiv = 1;
 1202              		.loc 1 194 39 is_stmt 0 view .LVU336
 1203 0050 2375     		strb	r3, [r4, #20]
 1204 0052 6375     		strb	r3, [r4, #21]
 1205 0054 A375     		strb	r3, [r4, #22]
 1206 0056 E375     		strb	r3, [r4, #23]
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 49


 195:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 1207              		.loc 1 195 5 is_stmt 1 view .LVU337
 195:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 1208              		.loc 1 195 28 is_stmt 0 view .LVU338
 1209 0058 0122     		movs	r2, #1
 1210 005a 2276     		strb	r2, [r4, #24]
 1211 005c 6376     		strb	r3, [r4, #25]
 1212 005e A376     		strb	r3, [r4, #26]
 1213 0060 E376     		strb	r3, [r4, #27]
 196:Bsp/Bsp_SDMMC.c **** 
 1214              		.loc 1 196 5 is_stmt 1 view .LVU339
 196:Bsp/Bsp_SDMMC.c **** 
 1215              		.loc 1 196 37 is_stmt 0 view .LVU340
 1216 0062 2277     		strb	r2, [r4, #28]
 1217 0064 6377     		strb	r3, [r4, #29]
 1218 0066 A377     		strb	r3, [r4, #30]
 1219 0068 E377     		strb	r3, [r4, #31]
 198:Bsp/Bsp_SDMMC.c ****         return false;
 1220              		.loc 1 198 5 is_stmt 1 view .LVU341
 198:Bsp/Bsp_SDMMC.c ****         return false;
 1221              		.loc 1 198 10 is_stmt 0 view .LVU342
 1222 006a 04F18400 		add	r0, r4, #132
 1223 006e FFF7FEFF 		bl	BspSDMMC_MDMA_Init
 1224              	.LVL79:
 198:Bsp/Bsp_SDMMC.c ****         return false;
 1225              		.loc 1 198 8 view .LVU343
 1226 0072 0546     		mov	r5, r0
 1227 0074 18B9     		cbnz	r0, .L103
 1228              	.L96:
 199:Bsp/Bsp_SDMMC.c **** 
 1229              		.loc 1 199 9 is_stmt 1 view .LVU344
 199:Bsp/Bsp_SDMMC.c **** 
 1230              		.loc 1 199 16 is_stmt 0 view .LVU345
 1231 0076 0025     		movs	r5, #0
 1232 0078 D8E7     		b	.L94
 1233              	.LVL80:
 1234              	.L99:
 181:Bsp/Bsp_SDMMC.c ****     }
 1235              		.loc 1 181 13 view .LVU346
 1236 007a 3126     		movs	r6, #49
 1237 007c D9E7     		b	.L95
 1238              	.LVL81:
 1239              	.L103:
 198:Bsp/Bsp_SDMMC.c ****         return false;
 1240              		.loc 1 198 47 discriminator 1 view .LVU347
 1241 007e 201D     		adds	r0, r4, #4
 1242 0080 FFF7FEFF 		bl	HAL_SD_Init
 1243              	.LVL82:
 198:Bsp/Bsp_SDMMC.c ****         return false;
 1244              		.loc 1 198 43 discriminator 1 view .LVU348
 1245 0084 0028     		cmp	r0, #0
 1246 0086 F6D1     		bne	.L96
 201:Bsp/Bsp_SDMMC.c ****     HAL_NVIC_EnableIRQ(irq);
 1247              		.loc 1 201 5 is_stmt 1 view .LVU349
 1248 0088 0022     		movs	r2, #0
 1249 008a 0421     		movs	r1, #4
 1250 008c 3046     		mov	r0, r6
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 50


 1251 008e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1252              	.LVL83:
 202:Bsp/Bsp_SDMMC.c **** 
 1253              		.loc 1 202 5 view .LVU350
 1254 0092 3046     		mov	r0, r6
 1255 0094 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1256              	.LVL84:
 204:Bsp/Bsp_SDMMC.c **** }
 1257              		.loc 1 204 5 view .LVU351
 204:Bsp/Bsp_SDMMC.c **** }
 1258              		.loc 1 204 12 is_stmt 0 view .LVU352
 1259 0098 C8E7     		b	.L94
 1260              	.LVL85:
 1261              	.L98:
 174:Bsp/Bsp_SDMMC.c ****         
 1262              		.loc 1 174 16 view .LVU353
 1263 009a 0025     		movs	r5, #0
 1264 009c C6E7     		b	.L94
 1265              	.L105:
 1266 009e 00BF     		.align	2
 1267              	.L104:
 1268 00a0 00700052 		.word	1375760384
 1269 00a4 00240248 		.word	1208099840
 1270              		.cfi_endproc
 1271              	.LFE148:
 1273              		.section	.text.HAL_SD_TxCpltCallback,"ax",%progbits
 1274              		.align	1
 1275              		.global	HAL_SD_TxCpltCallback
 1276              		.syntax unified
 1277              		.thumb
 1278              		.thumb_func
 1279              		.fpu fpv5-d16
 1281              	HAL_SD_TxCpltCallback:
 1282              	.LVL86:
 1283              	.LFB154:
 307:Bsp/Bsp_SDMMC.c **** 
 308:Bsp/Bsp_SDMMC.c **** void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
 309:Bsp/Bsp_SDMMC.c **** {
 1284              		.loc 1 309 1 is_stmt 1 view -0
 1285              		.cfi_startproc
 1286              		@ args = 0, pretend = 0, frame = 0
 1287              		@ frame_needed = 0, uses_anonymous_args = 0
 1288              		@ link register save eliminated.
 310:Bsp/Bsp_SDMMC.c ****     if (hsd->Instance == SDMMC1)
 1289              		.loc 1 310 5 view .LVU355
 1290              		.loc 1 310 12 is_stmt 0 view .LVU356
 1291 0000 0268     		ldr	r2, [r0]
 1292              		.loc 1 310 8 view .LVU357
 1293 0002 054B     		ldr	r3, .L109
 1294 0004 9A42     		cmp	r2, r3
 1295 0006 00D0     		beq	.L108
 1296              	.L106:
 311:Bsp/Bsp_SDMMC.c ****     {
 312:Bsp/Bsp_SDMMC.c ****         SD_Tx_Cplt = true;
 313:Bsp/Bsp_SDMMC.c ****         __DSB();
 314:Bsp/Bsp_SDMMC.c ****     }
 315:Bsp/Bsp_SDMMC.c **** }
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 51


 1297              		.loc 1 315 1 view .LVU358
 1298 0008 7047     		bx	lr
 1299              	.L108:
 312:Bsp/Bsp_SDMMC.c ****         __DSB();
 1300              		.loc 1 312 9 is_stmt 1 view .LVU359
 312:Bsp/Bsp_SDMMC.c ****         __DSB();
 1301              		.loc 1 312 20 is_stmt 0 view .LVU360
 1302 000a 044B     		ldr	r3, .L109+4
 1303 000c 0122     		movs	r2, #1
 1304 000e 1A70     		strb	r2, [r3]
 313:Bsp/Bsp_SDMMC.c ****     }
 1305              		.loc 1 313 9 is_stmt 1 view .LVU361
 1306              	.LBB26:
 1307              	.LBI26:
 944:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 1308              		.loc 2 944 27 view .LVU362
 1309              	.LBB27:
 1310              		.loc 2 946 3 view .LVU363
 1311              		.syntax unified
 1312              	@ 946 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h" 1
 1313 0010 BFF34F8F 		dsb 0xF
 1314              	@ 0 "" 2
 1315              		.thumb
 1316              		.syntax unified
 1317              	.LBE27:
 1318              	.LBE26:
 1319              		.loc 1 315 1 is_stmt 0 view .LVU364
 1320 0014 F8E7     		b	.L106
 1321              	.L110:
 1322 0016 00BF     		.align	2
 1323              	.L109:
 1324 0018 00700052 		.word	1375760384
 1325 001c 00000000 		.word	.LANCHOR0
 1326              		.cfi_endproc
 1327              	.LFE154:
 1329              		.section	.text.HAL_SD_RxCpltCallback,"ax",%progbits
 1330              		.align	1
 1331              		.global	HAL_SD_RxCpltCallback
 1332              		.syntax unified
 1333              		.thumb
 1334              		.thumb_func
 1335              		.fpu fpv5-d16
 1337              	HAL_SD_RxCpltCallback:
 1338              	.LVL87:
 1339              	.LFB155:
 316:Bsp/Bsp_SDMMC.c **** 
 317:Bsp/Bsp_SDMMC.c **** void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
 318:Bsp/Bsp_SDMMC.c **** {
 1340              		.loc 1 318 1 is_stmt 1 view -0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 0
 1343              		@ frame_needed = 0, uses_anonymous_args = 0
 1344              		@ link register save eliminated.
 319:Bsp/Bsp_SDMMC.c ****     if (hsd->Instance == SDMMC1)
 1345              		.loc 1 319 5 view .LVU366
 1346              		.loc 1 319 12 is_stmt 0 view .LVU367
 1347 0000 0268     		ldr	r2, [r0]
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 52


 1348              		.loc 1 319 8 view .LVU368
 1349 0002 054B     		ldr	r3, .L114
 1350 0004 9A42     		cmp	r2, r3
 1351 0006 00D0     		beq	.L113
 1352              	.L111:
 320:Bsp/Bsp_SDMMC.c ****     {
 321:Bsp/Bsp_SDMMC.c ****         SD_Rx_Cplt = true;
 322:Bsp/Bsp_SDMMC.c ****         __DSB();
 323:Bsp/Bsp_SDMMC.c ****     }
 324:Bsp/Bsp_SDMMC.c **** }
 1353              		.loc 1 324 1 view .LVU369
 1354 0008 7047     		bx	lr
 1355              	.L113:
 321:Bsp/Bsp_SDMMC.c ****         __DSB();
 1356              		.loc 1 321 9 is_stmt 1 view .LVU370
 321:Bsp/Bsp_SDMMC.c ****         __DSB();
 1357              		.loc 1 321 20 is_stmt 0 view .LVU371
 1358 000a 044B     		ldr	r3, .L114+4
 1359 000c 0122     		movs	r2, #1
 1360 000e 1A70     		strb	r2, [r3]
 322:Bsp/Bsp_SDMMC.c ****     }
 1361              		.loc 1 322 9 is_stmt 1 view .LVU372
 1362              	.LBB28:
 1363              	.LBI28:
 944:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 1364              		.loc 2 944 27 view .LVU373
 1365              	.LBB29:
 1366              		.loc 2 946 3 view .LVU374
 1367              		.syntax unified
 1368              	@ 946 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h" 1
 1369 0010 BFF34F8F 		dsb 0xF
 1370              	@ 0 "" 2
 1371              		.thumb
 1372              		.syntax unified
 1373              	.LBE29:
 1374              	.LBE28:
 1375              		.loc 1 324 1 is_stmt 0 view .LVU375
 1376 0014 F8E7     		b	.L111
 1377              	.L115:
 1378 0016 00BF     		.align	2
 1379              	.L114:
 1380 0018 00700052 		.word	1375760384
 1381 001c 00000000 		.word	.LANCHOR1
 1382              		.cfi_endproc
 1383              	.LFE155:
 1385              		.section	.text.HAL_SD_ErrorCallback,"ax",%progbits
 1386              		.align	1
 1387              		.global	HAL_SD_ErrorCallback
 1388              		.syntax unified
 1389              		.thumb
 1390              		.thumb_func
 1391              		.fpu fpv5-d16
 1393              	HAL_SD_ErrorCallback:
 1394              	.LVL88:
 1395              	.LFB156:
 325:Bsp/Bsp_SDMMC.c **** 
 326:Bsp/Bsp_SDMMC.c **** void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 53


 327:Bsp/Bsp_SDMMC.c **** {
 1396              		.loc 1 327 1 is_stmt 1 view -0
 1397              		.cfi_startproc
 1398              		@ args = 0, pretend = 0, frame = 8
 1399              		@ frame_needed = 0, uses_anonymous_args = 0
 1400              		.loc 1 327 1 is_stmt 0 view .LVU377
 1401 0000 00B5     		push	{lr}
 1402              	.LCFI23:
 1403              		.cfi_def_cfa_offset 4
 1404              		.cfi_offset 14, -4
 1405 0002 83B0     		sub	sp, sp, #12
 1406              	.LCFI24:
 1407              		.cfi_def_cfa_offset 16
 1408 0004 0190     		str	r0, [sp, #4]
 328:Bsp/Bsp_SDMMC.c ****     if (hsd->Instance == SDMMC1)
 1409              		.loc 1 328 5 is_stmt 1 view .LVU378
 1410              		.loc 1 328 12 is_stmt 0 view .LVU379
 1411 0006 0268     		ldr	r2, [r0]
 1412              		.loc 1 328 8 view .LVU380
 1413 0008 064B     		ldr	r3, .L120
 1414 000a 9A42     		cmp	r2, r3
 1415 000c 02D0     		beq	.L119
 1416              	.LVL89:
 1417              	.L116:
 329:Bsp/Bsp_SDMMC.c ****     {
 330:Bsp/Bsp_SDMMC.c ****         if (hsd->ErrorCode & HAL_SD_ERROR_TX_UNDERRUN)
 331:Bsp/Bsp_SDMMC.c ****         {
 332:Bsp/Bsp_SDMMC.c ****             HAL_SD_Abort(&hsd);
 333:Bsp/Bsp_SDMMC.c ****         }
 334:Bsp/Bsp_SDMMC.c ****     }
 335:Bsp/Bsp_SDMMC.c **** }
 1418              		.loc 1 335 1 view .LVU381
 1419 000e 03B0     		add	sp, sp, #12
 1420              	.LCFI25:
 1421              		.cfi_remember_state
 1422              		.cfi_def_cfa_offset 4
 1423              		@ sp needed
 1424 0010 5DF804FB 		ldr	pc, [sp], #4
 1425              	.LVL90:
 1426              	.L119:
 1427              	.LCFI26:
 1428              		.cfi_restore_state
 330:Bsp/Bsp_SDMMC.c ****         {
 1429              		.loc 1 330 9 is_stmt 1 view .LVU382
 330:Bsp/Bsp_SDMMC.c ****         {
 1430              		.loc 1 330 16 is_stmt 0 view .LVU383
 1431 0014 836B     		ldr	r3, [r0, #56]
 330:Bsp/Bsp_SDMMC.c ****         {
 1432              		.loc 1 330 12 view .LVU384
 1433 0016 13F0100F 		tst	r3, #16
 1434 001a F8D0     		beq	.L116
 332:Bsp/Bsp_SDMMC.c ****         }
 1435              		.loc 1 332 13 is_stmt 1 view .LVU385
 1436 001c 01A8     		add	r0, sp, #4
 1437              	.LVL91:
 332:Bsp/Bsp_SDMMC.c ****         }
 1438              		.loc 1 332 13 is_stmt 0 view .LVU386
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 54


 1439 001e FFF7FEFF 		bl	HAL_SD_Abort
 1440              	.LVL92:
 1441              		.loc 1 335 1 view .LVU387
 1442 0022 F4E7     		b	.L116
 1443              	.L121:
 1444              		.align	2
 1445              	.L120:
 1446 0024 00700052 		.word	1375760384
 1447              		.cfi_endproc
 1448              	.LFE156:
 1450              		.global	BspSDMMC
 1451              		.section	.bss.SD_Rx_Cplt,"aw",%nobits
 1452              		.set	.LANCHOR1,. + 0
 1455              	SD_Rx_Cplt:
 1456 0000 00       		.space	1
 1457              		.section	.bss.SD_Tx_Cplt,"aw",%nobits
 1458              		.set	.LANCHOR0,. + 0
 1461              	SD_Tx_Cplt:
 1462 0000 00       		.space	1
 1463              		.section	.data.BspSDMMC,"aw"
 1464              		.align	2
 1467              	BspSDMMC:
 1468 0000 00000000 		.word	BspSDMMC_Init
 1469 0004 00000000 		.word	BspSDMMC_Read
 1470 0008 00000000 		.word	BspSDMMC_Write
 1471 000c 00000000 		.word	BspSDMMC_Erase
 1472 0010 00000000 		.word	BspSDMMC_GetStatus
 1473 0014 00000000 		.word	BspSDMMC_GetInfo
 1474              		.text
 1475              	.Letext0:
 1476              		.file 3 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/machine/_de
 1477              		.file 4 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/sys/_stdint
 1478              		.file 5 "HAL_Lib/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 1479              		.file 6 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 1480              		.file 7 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc_ex.h"
 1481              		.file 8 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
 1482              		.file 9 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_mdma.h"
 1483              		.file 10 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_sdmmc.h"
 1484              		.file 11 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h"
 1485              		.file 12 "Bsp/Bsp_SDMMC.h"
 1486              		.file 13 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_cortex.h"
 1487              		.file 14 "<built-in>"
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 55


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Bsp_SDMMC.c
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:17     .text.BspSDMMC_PinCLK_Enable:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:24     .text.BspSDMMC_PinCLK_Enable:0000000000000000 BspSDMMC_PinCLK_Enable
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:279    .text.BspSDMMC_PinCLK_Enable:0000000000000170 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:293    .text.BspSDMMC_GetInfo:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:299    .text.BspSDMMC_GetInfo:0000000000000000 BspSDMMC_GetInfo
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:357    .text.BspSDMMC_GetStatus:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:363    .text.BspSDMMC_GetStatus:0000000000000000 BspSDMMC_GetStatus
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:408    .text.BspSDMMC_Erase:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:414    .text.BspSDMMC_Erase:0000000000000000 BspSDMMC_Erase
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:454    .text.BspSDMMC_Write:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:460    .text.BspSDMMC_Write:0000000000000000 BspSDMMC_Write
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:569    .text.BspSDMMC_Write:000000000000004c $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:574    .text.BspSDMMC_Read:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:580    .text.BspSDMMC_Read:0000000000000000 BspSDMMC_Read
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:687    .text.BspSDMMC_Read:000000000000004c $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:692    .text.BspSDMMC_PortCLK_Init:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:698    .text.BspSDMMC_PortCLK_Init:0000000000000000 BspSDMMC_PortCLK_Init
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:789    .text.BspSDMMC_PortCLK_Init:0000000000000054 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:795    .text.BspSDMMC_Pin_Init:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:801    .text.BspSDMMC_Pin_Init:0000000000000000 BspSDMMC_Pin_Init
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:959    .text.BspSDMMC_Pin_Init:00000000000000a4 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:964    .text.BspSDMMC_MDMA_Init:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:970    .text.BspSDMMC_MDMA_Init:0000000000000000 BspSDMMC_MDMA_Init
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1108   .text.BspSDMMC_MDMA_Init:000000000000008c $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1114   .text.BspSDMMC_Init:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1120   .text.BspSDMMC_Init:0000000000000000 BspSDMMC_Init
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1268   .text.BspSDMMC_Init:00000000000000a0 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1274   .text.HAL_SD_TxCpltCallback:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1281   .text.HAL_SD_TxCpltCallback:0000000000000000 HAL_SD_TxCpltCallback
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1324   .text.HAL_SD_TxCpltCallback:0000000000000018 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1330   .text.HAL_SD_RxCpltCallback:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1337   .text.HAL_SD_RxCpltCallback:0000000000000000 HAL_SD_RxCpltCallback
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1380   .text.HAL_SD_RxCpltCallback:0000000000000018 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1386   .text.HAL_SD_ErrorCallback:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1393   .text.HAL_SD_ErrorCallback:0000000000000000 HAL_SD_ErrorCallback
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1446   .text.HAL_SD_ErrorCallback:0000000000000024 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1467   .data.BspSDMMC:0000000000000000 BspSDMMC
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1455   .bss.SD_Rx_Cplt:0000000000000000 SD_Rx_Cplt
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1456   .bss.SD_Rx_Cplt:0000000000000000 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1461   .bss.SD_Tx_Cplt:0000000000000000 SD_Tx_Cplt
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1462   .bss.SD_Tx_Cplt:0000000000000000 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s:1464   .data.BspSDMMC:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_SD_GetCardInfo
HAL_SD_GetCardState
HAL_SD_Erase
HAL_SD_GetState
HAL_SD_WriteBlocks_DMA
HAL_SD_ReadBlocks_DMA
HAL_RCCEx_PeriphCLKConfig
HAL_GPIO_Init
HAL_MDMA_Init
HAL_NVIC_SetPriority
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccSGnTzb.s 			page 56


HAL_NVIC_EnableIRQ
HAL_SD_Init
HAL_SD_Abort
