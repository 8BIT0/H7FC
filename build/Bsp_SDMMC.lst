ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"Bsp_SDMMC.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.BspSDMMC_PinCLK_Enable,"ax",%progbits
  17              		.align	1
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	BspSDMMC_PinCLK_Enable:
  25              	.LVL0:
  26              	.LFB144:
  27              		.file 1 "Bsp/Bsp_SDMMC.c"
   1:Bsp/Bsp_SDMMC.c **** #include "Bsp_SDMMC.h"
   2:Bsp/Bsp_SDMMC.c **** 
   3:Bsp/Bsp_SDMMC.c **** static const GPIO_InitTypeDef BspSDMMC_PinCfg = {
   4:Bsp/Bsp_SDMMC.c ****     .Mode = GPIO_MODE_AF_PP,
   5:Bsp/Bsp_SDMMC.c ****     .Pull = GPIO_NOPULL,
   6:Bsp/Bsp_SDMMC.c ****     .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
   7:Bsp/Bsp_SDMMC.c **** };
   8:Bsp/Bsp_SDMMC.c **** 
   9:Bsp/Bsp_SDMMC.c **** /* internal variable */
  10:Bsp/Bsp_SDMMC.c **** static bool SD_Tx_Cplt = false;
  11:Bsp/Bsp_SDMMC.c **** static bool SD_Rx_Cplt = false;
  12:Bsp/Bsp_SDMMC.c **** 
  13:Bsp/Bsp_SDMMC.c **** /* internal function */
  14:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_PortCLK_Init(SDMMC_TypeDef *instance);
  15:Bsp/Bsp_SDMMC.c **** static void BspSDMMC_PinCLK_Enable(GPIO_TypeDef *port);
  16:Bsp/Bsp_SDMMC.c **** 
  17:Bsp/Bsp_SDMMC.c **** /* external function */
  18:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Init(BspSDMMC_Obj_TypeDef *obj);
  19:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Read(BspSDMMC_Obj_TypeDef *obj, uint32_t *pData, uint32_t ReadAddr, uint32_t N
  20:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Write(BspSDMMC_Obj_TypeDef *obj, uint32_t *pData, uint32_t WriteAddr, uint32_t
  21:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Erase(BspSDMMC_Obj_TypeDef *obj, uint32_t StartAddr, uint32_t EndAddr);
  22:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_GetStatus(BspSDMMC_Obj_TypeDef *obj);
  23:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_GetInfo(BspSDMMC_Obj_TypeDef *obj, HAL_SD_CardInfoTypeDef *info_out);
  24:Bsp/Bsp_SDMMC.c **** 
  25:Bsp/Bsp_SDMMC.c **** BspSDMMC_TypeDef BspSDMMC = {
  26:Bsp/Bsp_SDMMC.c ****     .init = BspSDMMC_Init,
  27:Bsp/Bsp_SDMMC.c ****     .read = BspSDMMC_Read,
  28:Bsp/Bsp_SDMMC.c ****     .write = BspSDMMC_Write,
  29:Bsp/Bsp_SDMMC.c ****     .erase = BspSDMMC_Erase,
  30:Bsp/Bsp_SDMMC.c ****     .status = BspSDMMC_GetStatus,
  31:Bsp/Bsp_SDMMC.c ****     .info = BspSDMMC_GetInfo,
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 2


  32:Bsp/Bsp_SDMMC.c **** };
  33:Bsp/Bsp_SDMMC.c **** 
  34:Bsp/Bsp_SDMMC.c **** static void BspSDMMC_PinCLK_Enable(GPIO_TypeDef *port)
  35:Bsp/Bsp_SDMMC.c **** {
  28              		.loc 1 35 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              		.loc 1 35 1 is_stmt 0 view .LVU1
  34 0000 8AB0     		sub	sp, sp, #40
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 40
  36:Bsp/Bsp_SDMMC.c ****     if (port == GPIOA)
  37              		.loc 1 36 5 is_stmt 1 view .LVU2
  38              		.loc 1 36 8 is_stmt 0 view .LVU3
  39 0002 5B4B     		ldr	r3, .L22
  40 0004 9842     		cmp	r0, r3
  41 0006 2AD0     		beq	.L13
  37:Bsp/Bsp_SDMMC.c ****     {
  38:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOA_CLK_ENABLE();
  39:Bsp/Bsp_SDMMC.c ****     }
  40:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOB)
  42              		.loc 1 40 10 is_stmt 1 view .LVU4
  43              		.loc 1 40 13 is_stmt 0 view .LVU5
  44 0008 5A4B     		ldr	r3, .L22+4
  45 000a 9842     		cmp	r0, r3
  46 000c 37D0     		beq	.L14
  41:Bsp/Bsp_SDMMC.c ****     {
  42:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOB_CLK_ENABLE();
  43:Bsp/Bsp_SDMMC.c ****     }
  44:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOC)
  47              		.loc 1 44 10 is_stmt 1 view .LVU6
  48              		.loc 1 44 13 is_stmt 0 view .LVU7
  49 000e 5A4B     		ldr	r3, .L22+8
  50 0010 9842     		cmp	r0, r3
  51 0012 43D0     		beq	.L15
  45:Bsp/Bsp_SDMMC.c ****     {
  46:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOC_CLK_ENABLE();
  47:Bsp/Bsp_SDMMC.c ****     }
  48:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOD)
  52              		.loc 1 48 10 is_stmt 1 view .LVU8
  53              		.loc 1 48 13 is_stmt 0 view .LVU9
  54 0014 594B     		ldr	r3, .L22+12
  55 0016 9842     		cmp	r0, r3
  56 0018 4FD0     		beq	.L16
  49:Bsp/Bsp_SDMMC.c ****     {
  50:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOD_CLK_ENABLE();
  51:Bsp/Bsp_SDMMC.c ****     }
  52:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOE)
  57              		.loc 1 52 10 is_stmt 1 view .LVU10
  58              		.loc 1 52 13 is_stmt 0 view .LVU11
  59 001a 594B     		ldr	r3, .L22+16
  60 001c 9842     		cmp	r0, r3
  61 001e 5BD0     		beq	.L17
  53:Bsp/Bsp_SDMMC.c ****     {
  54:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOE_CLK_ENABLE();
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 3


  55:Bsp/Bsp_SDMMC.c ****     }
  56:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOF)
  62              		.loc 1 56 10 is_stmt 1 view .LVU12
  63              		.loc 1 56 13 is_stmt 0 view .LVU13
  64 0020 584B     		ldr	r3, .L22+20
  65 0022 9842     		cmp	r0, r3
  66 0024 67D0     		beq	.L18
  57:Bsp/Bsp_SDMMC.c ****     {
  58:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOF_CLK_ENABLE();
  59:Bsp/Bsp_SDMMC.c ****     }
  60:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOG)
  67              		.loc 1 60 10 is_stmt 1 view .LVU14
  68              		.loc 1 60 13 is_stmt 0 view .LVU15
  69 0026 584B     		ldr	r3, .L22+24
  70 0028 9842     		cmp	r0, r3
  71 002a 73D0     		beq	.L19
  61:Bsp/Bsp_SDMMC.c ****     {
  62:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOG_CLK_ENABLE();
  63:Bsp/Bsp_SDMMC.c ****     }
  64:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOH)
  72              		.loc 1 64 10 is_stmt 1 view .LVU16
  73              		.loc 1 64 13 is_stmt 0 view .LVU17
  74 002c 574B     		ldr	r3, .L22+28
  75 002e 9842     		cmp	r0, r3
  76 0030 7FD0     		beq	.L20
  65:Bsp/Bsp_SDMMC.c ****     {
  66:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOH_CLK_ENABLE();
  67:Bsp/Bsp_SDMMC.c ****     }
  68:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOJ)
  77              		.loc 1 68 10 is_stmt 1 view .LVU18
  78              		.loc 1 68 13 is_stmt 0 view .LVU19
  79 0032 574B     		ldr	r3, .L22+32
  80 0034 9842     		cmp	r0, r3
  81 0036 00F08B80 		beq	.L21
  69:Bsp/Bsp_SDMMC.c ****     {
  70:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOJ_CLK_ENABLE();
  71:Bsp/Bsp_SDMMC.c ****     }
  72:Bsp/Bsp_SDMMC.c ****     else if (port == GPIOK)
  82              		.loc 1 72 10 is_stmt 1 view .LVU20
  83              		.loc 1 72 13 is_stmt 0 view .LVU21
  84 003a 564B     		ldr	r3, .L22+36
  85 003c 9842     		cmp	r0, r3
  86 003e 1CD1     		bne	.L1
  73:Bsp/Bsp_SDMMC.c ****     {
  74:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_GPIOK_CLK_ENABLE();
  87              		.loc 1 74 9 is_stmt 1 view .LVU22
  88              	.LBB10:
  89              		.loc 1 74 9 view .LVU23
  90              		.loc 1 74 9 view .LVU24
  91 0040 03F5E053 		add	r3, r3, #7168
  92 0044 D3F8E020 		ldr	r2, [r3, #224]
  93 0048 42F48062 		orr	r2, r2, #1024
  94 004c C3F8E020 		str	r2, [r3, #224]
  95              		.loc 1 74 9 view .LVU25
  96 0050 D3F8E030 		ldr	r3, [r3, #224]
  97 0054 03F48063 		and	r3, r3, #1024
  98 0058 0993     		str	r3, [sp, #36]
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 4


  99              		.loc 1 74 9 view .LVU26
 100 005a 099B     		ldr	r3, [sp, #36]
 101              	.LBE10:
 102              		.loc 1 74 9 view .LVU27
  75:Bsp/Bsp_SDMMC.c ****     }
  76:Bsp/Bsp_SDMMC.c **** }
 103              		.loc 1 76 1 is_stmt 0 view .LVU28
 104 005c 0DE0     		b	.L1
 105              	.L13:
  38:Bsp/Bsp_SDMMC.c ****     }
 106              		.loc 1 38 9 is_stmt 1 view .LVU29
 107              	.LBB11:
  38:Bsp/Bsp_SDMMC.c ****     }
 108              		.loc 1 38 9 view .LVU30
  38:Bsp/Bsp_SDMMC.c ****     }
 109              		.loc 1 38 9 view .LVU31
 110 005e 03F58843 		add	r3, r3, #17408
 111 0062 D3F8E020 		ldr	r2, [r3, #224]
 112 0066 42F00102 		orr	r2, r2, #1
 113 006a C3F8E020 		str	r2, [r3, #224]
  38:Bsp/Bsp_SDMMC.c ****     }
 114              		.loc 1 38 9 view .LVU32
 115 006e D3F8E030 		ldr	r3, [r3, #224]
 116 0072 03F00103 		and	r3, r3, #1
 117 0076 0093     		str	r3, [sp]
  38:Bsp/Bsp_SDMMC.c ****     }
 118              		.loc 1 38 9 view .LVU33
 119 0078 009B     		ldr	r3, [sp]
 120              	.LBE11:
  38:Bsp/Bsp_SDMMC.c ****     }
 121              		.loc 1 38 9 view .LVU34
 122              	.L1:
 123              		.loc 1 76 1 is_stmt 0 view .LVU35
 124 007a 0AB0     		add	sp, sp, #40
 125              	.LCFI1:
 126              		.cfi_remember_state
 127              		.cfi_def_cfa_offset 0
 128              		@ sp needed
 129 007c 7047     		bx	lr
 130              	.L14:
 131              	.LCFI2:
 132              		.cfi_restore_state
  42:Bsp/Bsp_SDMMC.c ****     }
 133              		.loc 1 42 9 is_stmt 1 view .LVU36
 134              	.LBB12:
  42:Bsp/Bsp_SDMMC.c ****     }
 135              		.loc 1 42 9 view .LVU37
  42:Bsp/Bsp_SDMMC.c ****     }
 136              		.loc 1 42 9 view .LVU38
 137 007e 03F58043 		add	r3, r3, #16384
 138 0082 D3F8E020 		ldr	r2, [r3, #224]
 139 0086 42F00202 		orr	r2, r2, #2
 140 008a C3F8E020 		str	r2, [r3, #224]
  42:Bsp/Bsp_SDMMC.c ****     }
 141              		.loc 1 42 9 view .LVU39
 142 008e D3F8E030 		ldr	r3, [r3, #224]
 143 0092 03F00203 		and	r3, r3, #2
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 5


 144 0096 0193     		str	r3, [sp, #4]
  42:Bsp/Bsp_SDMMC.c ****     }
 145              		.loc 1 42 9 view .LVU40
 146 0098 019B     		ldr	r3, [sp, #4]
 147              	.LBE12:
  42:Bsp/Bsp_SDMMC.c ****     }
 148              		.loc 1 42 9 view .LVU41
 149 009a EEE7     		b	.L1
 150              	.L15:
  46:Bsp/Bsp_SDMMC.c ****     }
 151              		.loc 1 46 9 view .LVU42
 152              	.LBB13:
  46:Bsp/Bsp_SDMMC.c ****     }
 153              		.loc 1 46 9 view .LVU43
  46:Bsp/Bsp_SDMMC.c ****     }
 154              		.loc 1 46 9 view .LVU44
 155 009c 03F57053 		add	r3, r3, #15360
 156 00a0 D3F8E020 		ldr	r2, [r3, #224]
 157 00a4 42F00402 		orr	r2, r2, #4
 158 00a8 C3F8E020 		str	r2, [r3, #224]
  46:Bsp/Bsp_SDMMC.c ****     }
 159              		.loc 1 46 9 view .LVU45
 160 00ac D3F8E030 		ldr	r3, [r3, #224]
 161 00b0 03F00403 		and	r3, r3, #4
 162 00b4 0293     		str	r3, [sp, #8]
  46:Bsp/Bsp_SDMMC.c ****     }
 163              		.loc 1 46 9 view .LVU46
 164 00b6 029B     		ldr	r3, [sp, #8]
 165              	.LBE13:
  46:Bsp/Bsp_SDMMC.c ****     }
 166              		.loc 1 46 9 view .LVU47
 167 00b8 DFE7     		b	.L1
 168              	.L16:
  50:Bsp/Bsp_SDMMC.c ****     }
 169              		.loc 1 50 9 view .LVU48
 170              	.LBB14:
  50:Bsp/Bsp_SDMMC.c ****     }
 171              		.loc 1 50 9 view .LVU49
  50:Bsp/Bsp_SDMMC.c ****     }
 172              		.loc 1 50 9 view .LVU50
 173 00ba 03F56053 		add	r3, r3, #14336
 174 00be D3F8E020 		ldr	r2, [r3, #224]
 175 00c2 42F00802 		orr	r2, r2, #8
 176 00c6 C3F8E020 		str	r2, [r3, #224]
  50:Bsp/Bsp_SDMMC.c ****     }
 177              		.loc 1 50 9 view .LVU51
 178 00ca D3F8E030 		ldr	r3, [r3, #224]
 179 00ce 03F00803 		and	r3, r3, #8
 180 00d2 0393     		str	r3, [sp, #12]
  50:Bsp/Bsp_SDMMC.c ****     }
 181              		.loc 1 50 9 view .LVU52
 182 00d4 039B     		ldr	r3, [sp, #12]
 183              	.LBE14:
  50:Bsp/Bsp_SDMMC.c ****     }
 184              		.loc 1 50 9 view .LVU53
 185 00d6 D0E7     		b	.L1
 186              	.L17:
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 6


  54:Bsp/Bsp_SDMMC.c ****     }
 187              		.loc 1 54 9 view .LVU54
 188              	.LBB15:
  54:Bsp/Bsp_SDMMC.c ****     }
 189              		.loc 1 54 9 view .LVU55
  54:Bsp/Bsp_SDMMC.c ****     }
 190              		.loc 1 54 9 view .LVU56
 191 00d8 03F55053 		add	r3, r3, #13312
 192 00dc D3F8E020 		ldr	r2, [r3, #224]
 193 00e0 42F01002 		orr	r2, r2, #16
 194 00e4 C3F8E020 		str	r2, [r3, #224]
  54:Bsp/Bsp_SDMMC.c ****     }
 195              		.loc 1 54 9 view .LVU57
 196 00e8 D3F8E030 		ldr	r3, [r3, #224]
 197 00ec 03F01003 		and	r3, r3, #16
 198 00f0 0493     		str	r3, [sp, #16]
  54:Bsp/Bsp_SDMMC.c ****     }
 199              		.loc 1 54 9 view .LVU58
 200 00f2 049B     		ldr	r3, [sp, #16]
 201              	.LBE15:
  54:Bsp/Bsp_SDMMC.c ****     }
 202              		.loc 1 54 9 view .LVU59
 203 00f4 C1E7     		b	.L1
 204              	.L18:
  58:Bsp/Bsp_SDMMC.c ****     }
 205              		.loc 1 58 9 view .LVU60
 206              	.LBB16:
  58:Bsp/Bsp_SDMMC.c ****     }
 207              		.loc 1 58 9 view .LVU61
  58:Bsp/Bsp_SDMMC.c ****     }
 208              		.loc 1 58 9 view .LVU62
 209 00f6 03F54053 		add	r3, r3, #12288
 210 00fa D3F8E020 		ldr	r2, [r3, #224]
 211 00fe 42F02002 		orr	r2, r2, #32
 212 0102 C3F8E020 		str	r2, [r3, #224]
  58:Bsp/Bsp_SDMMC.c ****     }
 213              		.loc 1 58 9 view .LVU63
 214 0106 D3F8E030 		ldr	r3, [r3, #224]
 215 010a 03F02003 		and	r3, r3, #32
 216 010e 0593     		str	r3, [sp, #20]
  58:Bsp/Bsp_SDMMC.c ****     }
 217              		.loc 1 58 9 view .LVU64
 218 0110 059B     		ldr	r3, [sp, #20]
 219              	.LBE16:
  58:Bsp/Bsp_SDMMC.c ****     }
 220              		.loc 1 58 9 view .LVU65
 221 0112 B2E7     		b	.L1
 222              	.L19:
  62:Bsp/Bsp_SDMMC.c ****     }
 223              		.loc 1 62 9 view .LVU66
 224              	.LBB17:
  62:Bsp/Bsp_SDMMC.c ****     }
 225              		.loc 1 62 9 view .LVU67
  62:Bsp/Bsp_SDMMC.c ****     }
 226              		.loc 1 62 9 view .LVU68
 227 0114 03F53053 		add	r3, r3, #11264
 228 0118 D3F8E020 		ldr	r2, [r3, #224]
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 7


 229 011c 42F04002 		orr	r2, r2, #64
 230 0120 C3F8E020 		str	r2, [r3, #224]
  62:Bsp/Bsp_SDMMC.c ****     }
 231              		.loc 1 62 9 view .LVU69
 232 0124 D3F8E030 		ldr	r3, [r3, #224]
 233 0128 03F04003 		and	r3, r3, #64
 234 012c 0693     		str	r3, [sp, #24]
  62:Bsp/Bsp_SDMMC.c ****     }
 235              		.loc 1 62 9 view .LVU70
 236 012e 069B     		ldr	r3, [sp, #24]
 237              	.LBE17:
  62:Bsp/Bsp_SDMMC.c ****     }
 238              		.loc 1 62 9 view .LVU71
 239 0130 A3E7     		b	.L1
 240              	.L20:
  66:Bsp/Bsp_SDMMC.c ****     }
 241              		.loc 1 66 9 view .LVU72
 242              	.LBB18:
  66:Bsp/Bsp_SDMMC.c ****     }
 243              		.loc 1 66 9 view .LVU73
  66:Bsp/Bsp_SDMMC.c ****     }
 244              		.loc 1 66 9 view .LVU74
 245 0132 03F52053 		add	r3, r3, #10240
 246 0136 D3F8E020 		ldr	r2, [r3, #224]
 247 013a 42F08002 		orr	r2, r2, #128
 248 013e C3F8E020 		str	r2, [r3, #224]
  66:Bsp/Bsp_SDMMC.c ****     }
 249              		.loc 1 66 9 view .LVU75
 250 0142 D3F8E030 		ldr	r3, [r3, #224]
 251 0146 03F08003 		and	r3, r3, #128
 252 014a 0793     		str	r3, [sp, #28]
  66:Bsp/Bsp_SDMMC.c ****     }
 253              		.loc 1 66 9 view .LVU76
 254 014c 079B     		ldr	r3, [sp, #28]
 255              	.LBE18:
  66:Bsp/Bsp_SDMMC.c ****     }
 256              		.loc 1 66 9 view .LVU77
 257 014e 94E7     		b	.L1
 258              	.L21:
  70:Bsp/Bsp_SDMMC.c ****     }
 259              		.loc 1 70 9 view .LVU78
 260              	.LBB19:
  70:Bsp/Bsp_SDMMC.c ****     }
 261              		.loc 1 70 9 view .LVU79
  70:Bsp/Bsp_SDMMC.c ****     }
 262              		.loc 1 70 9 view .LVU80
 263 0150 03F50053 		add	r3, r3, #8192
 264 0154 D3F8E020 		ldr	r2, [r3, #224]
 265 0158 42F40072 		orr	r2, r2, #512
 266 015c C3F8E020 		str	r2, [r3, #224]
  70:Bsp/Bsp_SDMMC.c ****     }
 267              		.loc 1 70 9 view .LVU81
 268 0160 D3F8E030 		ldr	r3, [r3, #224]
 269 0164 03F40073 		and	r3, r3, #512
 270 0168 0893     		str	r3, [sp, #32]
  70:Bsp/Bsp_SDMMC.c ****     }
 271              		.loc 1 70 9 view .LVU82
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 8


 272 016a 089B     		ldr	r3, [sp, #32]
 273              	.LBE19:
  70:Bsp/Bsp_SDMMC.c ****     }
 274              		.loc 1 70 9 view .LVU83
 275 016c 85E7     		b	.L1
 276              	.L23:
 277 016e 00BF     		.align	2
 278              	.L22:
 279 0170 00000258 		.word	1476526080
 280 0174 00040258 		.word	1476527104
 281 0178 00080258 		.word	1476528128
 282 017c 000C0258 		.word	1476529152
 283 0180 00100258 		.word	1476530176
 284 0184 00140258 		.word	1476531200
 285 0188 00180258 		.word	1476532224
 286 018c 001C0258 		.word	1476533248
 287 0190 00240258 		.word	1476535296
 288 0194 00280258 		.word	1476536320
 289              		.cfi_endproc
 290              	.LFE144:
 292              		.section	.text.BspSDMMC_GetInfo,"ax",%progbits
 293              		.align	1
 294              		.syntax unified
 295              		.thumb
 296              		.thumb_func
 297              		.fpu fpv5-d16
 299              	BspSDMMC_GetInfo:
 300              	.LVL1:
 301              	.LFB153:
  77:Bsp/Bsp_SDMMC.c **** 
  78:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_PortCLK_Init(SDMMC_TypeDef *instance)
  79:Bsp/Bsp_SDMMC.c **** {
  80:Bsp/Bsp_SDMMC.c ****     RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  81:Bsp/Bsp_SDMMC.c ****     if (instance == NULL)
  82:Bsp/Bsp_SDMMC.c ****         return false;
  83:Bsp/Bsp_SDMMC.c **** 
  84:Bsp/Bsp_SDMMC.c ****     if (instance == SDMMC1)
  85:Bsp/Bsp_SDMMC.c ****     {
  86:Bsp/Bsp_SDMMC.c ****         PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
  87:Bsp/Bsp_SDMMC.c ****         PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
  88:Bsp/Bsp_SDMMC.c ****         if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  89:Bsp/Bsp_SDMMC.c ****             return false;
  90:Bsp/Bsp_SDMMC.c **** 
  91:Bsp/Bsp_SDMMC.c ****         __HAL_RCC_SDMMC1_CLK_ENABLE();
  92:Bsp/Bsp_SDMMC.c ****         return true;
  93:Bsp/Bsp_SDMMC.c ****     }
  94:Bsp/Bsp_SDMMC.c **** 
  95:Bsp/Bsp_SDMMC.c ****     return true;
  96:Bsp/Bsp_SDMMC.c **** }
  97:Bsp/Bsp_SDMMC.c **** 
  98:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Pin_Init(SD_TypeDef *type, BspSDMMC_PinConfig_TypeDef *obj)
  99:Bsp/Bsp_SDMMC.c **** {
 100:Bsp/Bsp_SDMMC.c ****     GPIO_InitTypeDef GPIO_InitStruct = BspSDMMC_PinCfg;
 101:Bsp/Bsp_SDMMC.c **** 
 102:Bsp/Bsp_SDMMC.c ****     if (obj == NULL)
 103:Bsp/Bsp_SDMMC.c ****         return false;
 104:Bsp/Bsp_SDMMC.c **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 9


 105:Bsp/Bsp_SDMMC.c ****     if (type == SDMMC1)
 106:Bsp/Bsp_SDMMC.c ****     {
 107:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Alternate = obj->Alternate;
 108:Bsp/Bsp_SDMMC.c **** 
 109:Bsp/Bsp_SDMMC.c ****         BspSDMMC_PinCLK_Enable(obj->CK_Port);
 110:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->CK_Pin;
 111:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CK_Port, &GPIO_InitStruct);
 112:Bsp/Bsp_SDMMC.c **** 
 113:Bsp/Bsp_SDMMC.c ****         BspSDMMC_PinCLK_Enable(obj->CMD_Port);
 114:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->CMD_Pin;
 115:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CMD_Port, &GPIO_InitStruct);
 116:Bsp/Bsp_SDMMC.c **** 
 117:Bsp/Bsp_SDMMC.c ****         BspSDMMC_PinCLK_Enable(obj->D0_Port);
 118:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D0_Pin;
 119:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D0_Port, &GPIO_InitStruct);
 120:Bsp/Bsp_SDMMC.c **** 
 121:Bsp/Bsp_SDMMC.c ****         BspSDMMC_PinCLK_Enable(obj->D1_Port);
 122:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D1_Pin;
 123:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D1_Port, &GPIO_InitStruct);
 124:Bsp/Bsp_SDMMC.c **** 
 125:Bsp/Bsp_SDMMC.c ****         BspSDMMC_PinCLK_Enable(obj->D2_Port);
 126:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D2_Pin;
 127:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D2_Port, &GPIO_InitStruct);
 128:Bsp/Bsp_SDMMC.c **** 
 129:Bsp/Bsp_SDMMC.c ****         BspSDMMC_PinCLK_Enable(obj->D3_Port);
 130:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D3_Pin;
 131:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D3_Port, &GPIO_InitStruct);
 132:Bsp/Bsp_SDMMC.c **** 
 133:Bsp/Bsp_SDMMC.c ****         return true;
 134:Bsp/Bsp_SDMMC.c ****     }
 135:Bsp/Bsp_SDMMC.c **** 
 136:Bsp/Bsp_SDMMC.c ****     return false;
 137:Bsp/Bsp_SDMMC.c **** }
 138:Bsp/Bsp_SDMMC.c **** 
 139:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_MDMA_Init(MDMA_HandleTypeDef *mdma)
 140:Bsp/Bsp_SDMMC.c **** {
 141:Bsp/Bsp_SDMMC.c ****     if (mdma == NULL)
 142:Bsp/Bsp_SDMMC.c ****         return false;
 143:Bsp/Bsp_SDMMC.c **** 
 144:Bsp/Bsp_SDMMC.c ****     __HAL_RCC_MDMA_CLK_ENABLE();
 145:Bsp/Bsp_SDMMC.c **** 
 146:Bsp/Bsp_SDMMC.c ****     mdma->Instance = MDMA_Channel0;
 147:Bsp/Bsp_SDMMC.c ****     mdma->Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 148:Bsp/Bsp_SDMMC.c ****     mdma->Init.Priority = MDMA_PRIORITY_LOW;
 149:Bsp/Bsp_SDMMC.c ****     mdma->Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 150:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceInc = MDMA_SRC_INC_BYTE;
 151:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestinationInc = MDMA_DEST_INC_BYTE;
 152:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 153:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 154:Bsp/Bsp_SDMMC.c ****     mdma->Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 155:Bsp/Bsp_SDMMC.c ****     mdma->Init.BufferTransferLength = 1;
 156:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 157:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 158:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceBlockAddressOffset = 0;
 159:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestBlockAddressOffset = 0;
 160:Bsp/Bsp_SDMMC.c ****     if (HAL_MDMA_Init(mdma) != HAL_OK)
 161:Bsp/Bsp_SDMMC.c ****         return false;
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 10


 162:Bsp/Bsp_SDMMC.c **** 
 163:Bsp/Bsp_SDMMC.c ****     HAL_NVIC_SetPriority(MDMA_IRQn, 10, 0);
 164:Bsp/Bsp_SDMMC.c ****     HAL_NVIC_EnableIRQ(MDMA_IRQn);
 165:Bsp/Bsp_SDMMC.c **** 
 166:Bsp/Bsp_SDMMC.c ****     return true;
 167:Bsp/Bsp_SDMMC.c **** }
 168:Bsp/Bsp_SDMMC.c **** 
 169:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Init(BspSDMMC_Obj_TypeDef *obj)
 170:Bsp/Bsp_SDMMC.c **** {
 171:Bsp/Bsp_SDMMC.c ****     IRQn_Type irq = SDMMC1_IRQn;
 172:Bsp/Bsp_SDMMC.c **** 
 173:Bsp/Bsp_SDMMC.c ****     BspSDMMC_PortCLK_Init(obj->instance);
 174:Bsp/Bsp_SDMMC.c ****     BspSDMMC_Pin_Init(obj->instance, obj->pin);
 175:Bsp/Bsp_SDMMC.c **** 
 176:Bsp/Bsp_SDMMC.c ****     if (obj == NULL)
 177:Bsp/Bsp_SDMMC.c ****         return false;
 178:Bsp/Bsp_SDMMC.c **** 
 179:Bsp/Bsp_SDMMC.c ****     if (obj->instance == SDMMC1)
 180:Bsp/Bsp_SDMMC.c ****     {
 181:Bsp/Bsp_SDMMC.c ****         irq = SDMMC1_IRQn;
 182:Bsp/Bsp_SDMMC.c ****     }
 183:Bsp/Bsp_SDMMC.c ****     else if (obj->instance == SDMMC2)
 184:Bsp/Bsp_SDMMC.c ****     {
 185:Bsp/Bsp_SDMMC.c ****         irq = SDMMC2_IRQn;
 186:Bsp/Bsp_SDMMC.c ****     }
 187:Bsp/Bsp_SDMMC.c ****     else
 188:Bsp/Bsp_SDMMC.c ****         return false;
 189:Bsp/Bsp_SDMMC.c **** 
 190:Bsp/Bsp_SDMMC.c ****     obj->hdl.Instance = obj->instance; // SDMMC1;
 191:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 192:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 193:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.BusWide = SDMMC_BUS_WIDE_1B;
 194:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 195:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockDiv = 2;
 196:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 197:Bsp/Bsp_SDMMC.c **** 
 198:Bsp/Bsp_SDMMC.c ****     if (!BspSDMMC_MDMA_Init(&(obj->mdma)) || (HAL_SD_Init(&(obj->hdl)) != HAL_OK))
 199:Bsp/Bsp_SDMMC.c ****         return false;
 200:Bsp/Bsp_SDMMC.c **** 
 201:Bsp/Bsp_SDMMC.c ****     HAL_NVIC_SetPriority(irq, 4, 0);
 202:Bsp/Bsp_SDMMC.c ****     HAL_NVIC_EnableIRQ(irq);
 203:Bsp/Bsp_SDMMC.c **** 
 204:Bsp/Bsp_SDMMC.c ****     return true;
 205:Bsp/Bsp_SDMMC.c **** }
 206:Bsp/Bsp_SDMMC.c **** 
 207:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Read(BspSDMMC_Obj_TypeDef *obj, uint32_t *pData, uint32_t ReadAddr, uint32_t N
 208:Bsp/Bsp_SDMMC.c **** {
 209:Bsp/Bsp_SDMMC.c ****     uint32_t retry_cnt = SDMMC_OPR_RETRY_MAX_CNT;
 210:Bsp/Bsp_SDMMC.c **** 
 211:Bsp/Bsp_SDMMC.c ****     // if (HAL_SD_ReadBlocks(&(obj->hdl), (uint8_t *)pData, ReadAddr, NumOfBlocks, SDMMC_DATATIMEOU
 212:Bsp/Bsp_SDMMC.c ****     //     return true;
 213:Bsp/Bsp_SDMMC.c **** 
 214:Bsp/Bsp_SDMMC.c ****     Kernel_EnterCritical();
 215:Bsp/Bsp_SDMMC.c ****     HAL_StatusTypeDef state = HAL_SD_ReadBlocks_DMA(&(obj->hdl), pData, ReadAddr, NumOfBlocks);
 216:Bsp/Bsp_SDMMC.c ****     Kernel_ExitCritical();
 217:Bsp/Bsp_SDMMC.c **** 
 218:Bsp/Bsp_SDMMC.c ****     if (state == HAL_OK)
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 11


 219:Bsp/Bsp_SDMMC.c ****     {
 220:Bsp/Bsp_SDMMC.c ****         while (retry_cnt)
 221:Bsp/Bsp_SDMMC.c ****         {
 222:Bsp/Bsp_SDMMC.c ****             if (SD_Rx_Cplt)
 223:Bsp/Bsp_SDMMC.c ****             {
 224:Bsp/Bsp_SDMMC.c ****                 SD_Rx_Cplt = false;
 225:Bsp/Bsp_SDMMC.c **** 
 226:Bsp/Bsp_SDMMC.c ****                 if(HAL_SD_GetState(&(obj->hdl)) == HAL_SD_STATE_READY) 
 227:Bsp/Bsp_SDMMC.c ****                     return true;
 228:Bsp/Bsp_SDMMC.c **** 
 229:Bsp/Bsp_SDMMC.c ****                 return false;
 230:Bsp/Bsp_SDMMC.c ****             }
 231:Bsp/Bsp_SDMMC.c ****             __DSB();
 232:Bsp/Bsp_SDMMC.c **** 
 233:Bsp/Bsp_SDMMC.c ****             retry_cnt--;
 234:Bsp/Bsp_SDMMC.c ****         }
 235:Bsp/Bsp_SDMMC.c ****     }
 236:Bsp/Bsp_SDMMC.c **** 
 237:Bsp/Bsp_SDMMC.c ****     SD_Rx_Cplt = false;
 238:Bsp/Bsp_SDMMC.c ****     return false;
 239:Bsp/Bsp_SDMMC.c **** }
 240:Bsp/Bsp_SDMMC.c **** 
 241:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Write(BspSDMMC_Obj_TypeDef *obj, uint32_t *pData, uint32_t WriteAddr, uint32_t
 242:Bsp/Bsp_SDMMC.c **** {
 243:Bsp/Bsp_SDMMC.c ****     volatile HAL_SD_StateTypeDef opr_state;
 244:Bsp/Bsp_SDMMC.c ****     uint32_t retry_cnt = SDMMC_OPR_RETRY_MAX_CNT;
 245:Bsp/Bsp_SDMMC.c **** 
 246:Bsp/Bsp_SDMMC.c ****     // if (HAL_SD_WriteBlocks(&(obj->hdl), (uint8_t *)pData, WriteAddr, NumOfBlocks, SDMMC_DATATIME
 247:Bsp/Bsp_SDMMC.c ****     //     return true;
 248:Bsp/Bsp_SDMMC.c **** 
 249:Bsp/Bsp_SDMMC.c ****     Kernel_EnterCritical();
 250:Bsp/Bsp_SDMMC.c ****     HAL_StatusTypeDef state = HAL_SD_WriteBlocks_DMA(&(obj->hdl), pData, WriteAddr, NumOfBlocks);
 251:Bsp/Bsp_SDMMC.c ****     Kernel_ExitCritical();
 252:Bsp/Bsp_SDMMC.c **** 
 253:Bsp/Bsp_SDMMC.c ****     if (state == HAL_OK)
 254:Bsp/Bsp_SDMMC.c ****     {
 255:Bsp/Bsp_SDMMC.c ****         while (retry_cnt)
 256:Bsp/Bsp_SDMMC.c ****         {
 257:Bsp/Bsp_SDMMC.c ****             if (SD_Tx_Cplt)
 258:Bsp/Bsp_SDMMC.c ****             {                
 259:Bsp/Bsp_SDMMC.c ****                 SD_Tx_Cplt = false;
 260:Bsp/Bsp_SDMMC.c ****                 
 261:Bsp/Bsp_SDMMC.c ****                 if(HAL_SD_GetState(&(obj->hdl)) == HAL_SD_STATE_READY) //HAL_SD_STATE_RESET
 262:Bsp/Bsp_SDMMC.c ****                     return true;
 263:Bsp/Bsp_SDMMC.c **** 
 264:Bsp/Bsp_SDMMC.c ****                 return false;
 265:Bsp/Bsp_SDMMC.c ****             }
 266:Bsp/Bsp_SDMMC.c ****             __DSB();
 267:Bsp/Bsp_SDMMC.c **** 
 268:Bsp/Bsp_SDMMC.c ****             retry_cnt--;
 269:Bsp/Bsp_SDMMC.c ****         }
 270:Bsp/Bsp_SDMMC.c ****     }
 271:Bsp/Bsp_SDMMC.c **** 
 272:Bsp/Bsp_SDMMC.c ****     SD_Tx_Cplt = false;
 273:Bsp/Bsp_SDMMC.c ****     return false;
 274:Bsp/Bsp_SDMMC.c **** }
 275:Bsp/Bsp_SDMMC.c **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 12


 276:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_Erase(BspSDMMC_Obj_TypeDef *obj, uint32_t StartAddr, uint32_t EndAddr)
 277:Bsp/Bsp_SDMMC.c **** {
 278:Bsp/Bsp_SDMMC.c ****     bool sd_state = true;
 279:Bsp/Bsp_SDMMC.c **** 
 280:Bsp/Bsp_SDMMC.c ****     if (HAL_SD_Erase(&(obj->hdl), StartAddr, EndAddr) != HAL_OK)
 281:Bsp/Bsp_SDMMC.c ****         sd_state = false;
 282:Bsp/Bsp_SDMMC.c **** 
 283:Bsp/Bsp_SDMMC.c ****     return sd_state;
 284:Bsp/Bsp_SDMMC.c **** }
 285:Bsp/Bsp_SDMMC.c **** 
 286:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_GetStatus(BspSDMMC_Obj_TypeDef *obj)
 287:Bsp/Bsp_SDMMC.c **** {
 288:Bsp/Bsp_SDMMC.c ****     if (obj == NULL)
 289:Bsp/Bsp_SDMMC.c ****         return false;
 290:Bsp/Bsp_SDMMC.c **** 
 291:Bsp/Bsp_SDMMC.c ****     return ((HAL_SD_GetCardState(&(obj->hdl)) == HAL_SD_CARD_TRANSFER) ? true : false);
 292:Bsp/Bsp_SDMMC.c **** }
 293:Bsp/Bsp_SDMMC.c **** 
 294:Bsp/Bsp_SDMMC.c **** static bool BspSDMMC_GetInfo(BspSDMMC_Obj_TypeDef *obj, HAL_SD_CardInfoTypeDef *info_out)
 295:Bsp/Bsp_SDMMC.c **** {
 302              		.loc 1 295 1 view -0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 296:Bsp/Bsp_SDMMC.c ****     if ((obj == NULL) && (info_out == NULL))
 306              		.loc 1 296 5 view .LVU85
 307              		.loc 1 296 36 is_stmt 0 view .LVU86
 308 0000 B1FA81F1 		clz	r1, r1
 309              	.LVL2:
 310              		.loc 1 296 36 view .LVU87
 311 0004 4909     		lsrs	r1, r1, #5
 312              		.loc 1 296 23 view .LVU88
 313 0006 0028     		cmp	r0, #0
 314 0008 18BF     		it	ne
 315 000a 0021     		movne	r1, #0
 316              		.loc 1 296 8 view .LVU89
 317 000c 09B1     		cbz	r1, .L31
 297:Bsp/Bsp_SDMMC.c ****         return false;
 318              		.loc 1 297 16 view .LVU90
 319 000e 0020     		movs	r0, #0
 320              	.LVL3:
 298:Bsp/Bsp_SDMMC.c **** 
 299:Bsp/Bsp_SDMMC.c ****     memset(&(obj->info), NULL, sizeof(obj->info));
 300:Bsp/Bsp_SDMMC.c ****     HAL_SD_GetCardInfo(&(obj->hdl), &(obj->info));
 301:Bsp/Bsp_SDMMC.c ****     info_out = &(obj->info);
 302:Bsp/Bsp_SDMMC.c **** 
 303:Bsp/Bsp_SDMMC.c ****     return true;
 304:Bsp/Bsp_SDMMC.c **** }
 321              		.loc 1 304 1 view .LVU91
 322 0010 7047     		bx	lr
 323              	.LVL4:
 324              	.L31:
 295:Bsp/Bsp_SDMMC.c ****     if ((obj == NULL) && (info_out == NULL))
 325              		.loc 1 295 1 view .LVU92
 326 0012 38B5     		push	{r3, r4, r5, lr}
 327              	.LCFI3:
 328              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 13


 329              		.cfi_offset 3, -16
 330              		.cfi_offset 4, -12
 331              		.cfi_offset 5, -8
 332              		.cfi_offset 14, -4
 333 0014 0446     		mov	r4, r0
 299:Bsp/Bsp_SDMMC.c ****     HAL_SD_GetCardInfo(&(obj->hdl), &(obj->info));
 334              		.loc 1 299 5 is_stmt 1 view .LVU93
 299:Bsp/Bsp_SDMMC.c ****     HAL_SD_GetCardInfo(&(obj->hdl), &(obj->info));
 335              		.loc 1 299 12 is_stmt 0 view .LVU94
 336 0016 00F1F405 		add	r5, r0, #244
 299:Bsp/Bsp_SDMMC.c ****     HAL_SD_GetCardInfo(&(obj->hdl), &(obj->info));
 337              		.loc 1 299 5 view .LVU95
 338 001a 2422     		movs	r2, #36
 339 001c 2846     		mov	r0, r5
 340              	.LVL5:
 299:Bsp/Bsp_SDMMC.c ****     HAL_SD_GetCardInfo(&(obj->hdl), &(obj->info));
 341              		.loc 1 299 5 view .LVU96
 342 001e FFF7FEFF 		bl	memset
 343              	.LVL6:
 300:Bsp/Bsp_SDMMC.c ****     info_out = &(obj->info);
 344              		.loc 1 300 5 is_stmt 1 view .LVU97
 345 0022 2946     		mov	r1, r5
 346 0024 201D     		adds	r0, r4, #4
 347 0026 FFF7FEFF 		bl	HAL_SD_GetCardInfo
 348              	.LVL7:
 301:Bsp/Bsp_SDMMC.c **** 
 349              		.loc 1 301 5 view .LVU98
 303:Bsp/Bsp_SDMMC.c **** }
 350              		.loc 1 303 5 view .LVU99
 303:Bsp/Bsp_SDMMC.c **** }
 351              		.loc 1 303 12 is_stmt 0 view .LVU100
 352 002a 0120     		movs	r0, #1
 353              		.loc 1 304 1 view .LVU101
 354 002c 38BD     		pop	{r3, r4, r5, pc}
 355              		.loc 1 304 1 view .LVU102
 356              		.cfi_endproc
 357              	.LFE153:
 359              		.section	.text.BspSDMMC_GetStatus,"ax",%progbits
 360              		.align	1
 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 364              		.fpu fpv5-d16
 366              	BspSDMMC_GetStatus:
 367              	.LVL8:
 368              	.LFB152:
 287:Bsp/Bsp_SDMMC.c ****     if (obj == NULL)
 369              		.loc 1 287 1 is_stmt 1 view -0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 288:Bsp/Bsp_SDMMC.c ****         return false;
 373              		.loc 1 288 5 view .LVU104
 288:Bsp/Bsp_SDMMC.c ****         return false;
 374              		.loc 1 288 8 is_stmt 0 view .LVU105
 375 0000 40B1     		cbz	r0, .L34
 287:Bsp/Bsp_SDMMC.c ****     if (obj == NULL)
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 14


 376              		.loc 1 287 1 view .LVU106
 377 0002 08B5     		push	{r3, lr}
 378              	.LCFI4:
 379              		.cfi_def_cfa_offset 8
 380              		.cfi_offset 3, -8
 381              		.cfi_offset 14, -4
 291:Bsp/Bsp_SDMMC.c **** }
 382              		.loc 1 291 5 is_stmt 1 view .LVU107
 291:Bsp/Bsp_SDMMC.c **** }
 383              		.loc 1 291 14 is_stmt 0 view .LVU108
 384 0004 0430     		adds	r0, r0, #4
 385              	.LVL9:
 291:Bsp/Bsp_SDMMC.c **** }
 386              		.loc 1 291 14 view .LVU109
 387 0006 FFF7FEFF 		bl	HAL_SD_GetCardState
 388              	.LVL10:
 291:Bsp/Bsp_SDMMC.c **** }
 389              		.loc 1 291 79 view .LVU110
 390 000a 0428     		cmp	r0, #4
 391 000c 14BF     		ite	ne
 392 000e 0020     		movne	r0, #0
 393 0010 0120     		moveq	r0, #1
 292:Bsp/Bsp_SDMMC.c **** 
 394              		.loc 1 292 1 view .LVU111
 395 0012 08BD     		pop	{r3, pc}
 396              	.LVL11:
 397              	.L34:
 398              	.LCFI5:
 399              		.cfi_def_cfa_offset 0
 400              		.cfi_restore 3
 401              		.cfi_restore 14
 289:Bsp/Bsp_SDMMC.c **** 
 402              		.loc 1 289 16 view .LVU112
 403 0014 0020     		movs	r0, #0
 404              	.LVL12:
 292:Bsp/Bsp_SDMMC.c **** 
 405              		.loc 1 292 1 view .LVU113
 406 0016 7047     		bx	lr
 407              		.cfi_endproc
 408              	.LFE152:
 410              		.section	.text.BspSDMMC_Erase,"ax",%progbits
 411              		.align	1
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 415              		.fpu fpv5-d16
 417              	BspSDMMC_Erase:
 418              	.LVL13:
 419              	.LFB151:
 277:Bsp/Bsp_SDMMC.c ****     bool sd_state = true;
 420              		.loc 1 277 1 is_stmt 1 view -0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 0
 423              		@ frame_needed = 0, uses_anonymous_args = 0
 277:Bsp/Bsp_SDMMC.c ****     bool sd_state = true;
 424              		.loc 1 277 1 is_stmt 0 view .LVU115
 425 0000 08B5     		push	{r3, lr}
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 15


 426              	.LCFI6:
 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 3, -8
 429              		.cfi_offset 14, -4
 278:Bsp/Bsp_SDMMC.c **** 
 430              		.loc 1 278 5 is_stmt 1 view .LVU116
 431              	.LVL14:
 280:Bsp/Bsp_SDMMC.c ****         sd_state = false;
 432              		.loc 1 280 5 view .LVU117
 280:Bsp/Bsp_SDMMC.c ****         sd_state = false;
 433              		.loc 1 280 9 is_stmt 0 view .LVU118
 434 0002 0430     		adds	r0, r0, #4
 435              	.LVL15:
 280:Bsp/Bsp_SDMMC.c ****         sd_state = false;
 436              		.loc 1 280 9 view .LVU119
 437 0004 FFF7FEFF 		bl	HAL_SD_Erase
 438              	.LVL16:
 280:Bsp/Bsp_SDMMC.c ****         sd_state = false;
 439              		.loc 1 280 8 view .LVU120
 440 0008 08B9     		cbnz	r0, .L41
 278:Bsp/Bsp_SDMMC.c **** 
 441              		.loc 1 278 10 view .LVU121
 442 000a 0120     		movs	r0, #1
 443              	.L40:
 444              	.LVL17:
 283:Bsp/Bsp_SDMMC.c **** }
 445              		.loc 1 283 5 is_stmt 1 view .LVU122
 284:Bsp/Bsp_SDMMC.c **** 
 446              		.loc 1 284 1 is_stmt 0 view .LVU123
 447 000c 08BD     		pop	{r3, pc}
 448              	.LVL18:
 449              	.L41:
 281:Bsp/Bsp_SDMMC.c **** 
 450              		.loc 1 281 18 view .LVU124
 451 000e 0020     		movs	r0, #0
 452 0010 FCE7     		b	.L40
 453              		.cfi_endproc
 454              	.LFE151:
 456              		.section	.text.BspSDMMC_Write,"ax",%progbits
 457              		.align	1
 458              		.syntax unified
 459              		.thumb
 460              		.thumb_func
 461              		.fpu fpv5-d16
 463              	BspSDMMC_Write:
 464              	.LVL19:
 465              	.LFB150:
 242:Bsp/Bsp_SDMMC.c ****     volatile HAL_SD_StateTypeDef opr_state;
 466              		.loc 1 242 1 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 242:Bsp/Bsp_SDMMC.c ****     volatile HAL_SD_StateTypeDef opr_state;
 470              		.loc 1 242 1 is_stmt 0 view .LVU126
 471 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 472              	.LCFI7:
 473              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 16


 474              		.cfi_offset 3, -24
 475              		.cfi_offset 4, -20
 476              		.cfi_offset 5, -16
 477              		.cfi_offset 6, -12
 478              		.cfi_offset 7, -8
 479              		.cfi_offset 14, -4
 480 0002 0546     		mov	r5, r0
 481 0004 0C46     		mov	r4, r1
 482 0006 1646     		mov	r6, r2
 483 0008 1F46     		mov	r7, r3
 243:Bsp/Bsp_SDMMC.c ****     uint32_t retry_cnt = SDMMC_OPR_RETRY_MAX_CNT;
 484              		.loc 1 243 5 is_stmt 1 view .LVU127
 244:Bsp/Bsp_SDMMC.c **** 
 485              		.loc 1 244 5 view .LVU128
 486              	.LVL20:
 249:Bsp/Bsp_SDMMC.c ****     HAL_StatusTypeDef state = HAL_SD_WriteBlocks_DMA(&(obj->hdl), pData, WriteAddr, NumOfBlocks);
 487              		.loc 1 249 5 view .LVU129
 488 000a FFF7FEFF 		bl	Kernel_EnterCritical
 489              	.LVL21:
 250:Bsp/Bsp_SDMMC.c ****     Kernel_ExitCritical();
 490              		.loc 1 250 5 view .LVU130
 250:Bsp/Bsp_SDMMC.c ****     Kernel_ExitCritical();
 491              		.loc 1 250 31 is_stmt 0 view .LVU131
 492 000e 0435     		adds	r5, r5, #4
 493              	.LVL22:
 250:Bsp/Bsp_SDMMC.c ****     Kernel_ExitCritical();
 494              		.loc 1 250 31 view .LVU132
 495 0010 3B46     		mov	r3, r7
 496 0012 3246     		mov	r2, r6
 497 0014 2146     		mov	r1, r4
 498 0016 2846     		mov	r0, r5
 499 0018 FFF7FEFF 		bl	HAL_SD_WriteBlocks_DMA
 500              	.LVL23:
 501 001c 0446     		mov	r4, r0
 502              	.LVL24:
 251:Bsp/Bsp_SDMMC.c **** 
 503              		.loc 1 251 5 is_stmt 1 view .LVU133
 504 001e FFF7FEFF 		bl	Kernel_ExitCritical
 505              	.LVL25:
 253:Bsp/Bsp_SDMMC.c ****     {
 506              		.loc 1 253 5 view .LVU134
 253:Bsp/Bsp_SDMMC.c ****     {
 507              		.loc 1 253 8 is_stmt 0 view .LVU135
 508 0022 BCB1     		cbz	r4, .L49
 509              	.LVL26:
 510              	.L45:
 272:Bsp/Bsp_SDMMC.c ****     return false;
 511              		.loc 1 272 5 is_stmt 1 view .LVU136
 272:Bsp/Bsp_SDMMC.c ****     return false;
 512              		.loc 1 272 16 is_stmt 0 view .LVU137
 513 0024 0024     		movs	r4, #0
 514 0026 0D4B     		ldr	r3, .L52
 515 0028 1C70     		strb	r4, [r3]
 273:Bsp/Bsp_SDMMC.c **** }
 516              		.loc 1 273 5 is_stmt 1 view .LVU138
 517              	.L47:
 274:Bsp/Bsp_SDMMC.c **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 17


 518              		.loc 1 274 1 is_stmt 0 view .LVU139
 519 002a 2046     		mov	r0, r4
 520 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 521              	.LVL27:
 522              	.L46:
 266:Bsp/Bsp_SDMMC.c **** 
 523              		.loc 1 266 13 is_stmt 1 view .LVU140
 524              	.LBB20:
 525              	.LBI20:
 526              		.file 2 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h"
   1:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 18


  48:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 19


 105:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 119:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 120:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 122:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            in the used linker script.
 129:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 130:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 131:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 133:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 135:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 136:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 141:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 142:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 146:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 151:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     }
 155:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
 156:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  
 157:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     }
 161:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 20


 162:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  
 163:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   _start();
 164:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 165:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 166:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 168:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 169:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 172:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 173:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 176:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 177:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 180:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 181:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 184:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 185:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 189:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 190:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 191:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 192:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 196:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 198:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 200:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 201:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 202:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 203:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 207:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 209:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 211:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 212:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 214:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 217:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 218:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 21


 219:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 220:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 221:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 222:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 224:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 225:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 226:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 241:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 243:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 244:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 248:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 250:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 252:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 253:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 254:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 256:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 260:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 262:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 264:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 265:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 267:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 268:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 272:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 274:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 275:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 22


 276:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 278:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 279:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 280:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 281:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 282:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 286:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 288:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 289:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 290:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 292:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 294:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 296:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 300:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 302:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 303:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 304:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 306:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 307:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 308:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 310:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 314:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 316:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 317:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 318:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 320:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 321:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 322:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 323:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 325:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 329:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 331:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 332:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 23


 333:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 335:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 336:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 337:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 338:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 339:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 340:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 344:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 346:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 348:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 360:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 361:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 362:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 363:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 364:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 368:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 370:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 371:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 372:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 374:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 375:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 379:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 383:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 385:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 386:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 387:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 389:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 24


 390:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 391:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 392:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 393:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 394:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 398:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 400:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 402:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 403:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 404:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 406:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 410:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 412:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 414:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 415:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 416:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 419:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 422:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 423:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 425:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 426:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 427:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 429:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 430:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 432:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 433:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 437:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 439:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 441:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 442:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 443:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 445:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 25


 447:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 449:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 451:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 452:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 453:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 455:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 456:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 457:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 458:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 460:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 464:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 466:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 467:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 468:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 470:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 471:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 472:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 473:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 474:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 475:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 479:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 481:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 484:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 496:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 498:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 502:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 26


 504:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 506:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 508:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 510:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 511:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 512:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 513:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 517:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 519:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 521:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 522:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 523:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 524:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 528:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 530:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 531:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 532:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 534:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 535:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 537:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 539:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 543:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 545:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 546:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 547:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 549:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 550:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 551:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 553:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 554:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 558:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 560:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 27


 561:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 562:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 564:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 566:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 570:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 572:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 574:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 575:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 576:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 577:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 578:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 583:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 585:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 587:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 588:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 589:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 590:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 594:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 596:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 597:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 598:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 600:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 601:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 602:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 603:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 605:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 609:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 611:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 612:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 613:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 615:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 616:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 617:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 28


 618:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 619:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 620:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 624:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 626:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 628:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 629:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 630:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 632:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 636:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 638:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 640:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 641:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 642:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 646:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 647:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 650:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 655:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 656:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 659:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 661:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 665:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 666:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 667:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 669:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 670:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 671:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 672:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 674:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 29


 675:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 678:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 681:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 683:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 686:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 687:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 688:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 690:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 691:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 692:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 693:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 694:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 695:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 696:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 700:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 701:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 704:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 706:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 711:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 713:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 714:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 718:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 731:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 30


 732:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 733:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 734:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 735:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 738:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 742:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 748:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 752:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 753:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 754:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 756:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 757:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 758:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 759:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 760:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 762:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 766:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 769:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 771:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 774:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 775:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 776:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 778:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 779:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 780:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 782:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 783:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 784:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 788:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 31


 789:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 799:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 801:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 802:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 803:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 804:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 806:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 813:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 815:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 819:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 821:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 822:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 823:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 824:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 827:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 828:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 829:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 833:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 835:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 843:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 844:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 32


 846:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 847:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 848:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 849:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 850:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 851:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 852:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 854:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 855:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 859:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 861:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 869:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 871:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 872:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 873:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 874:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 875:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 876:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 877:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 879:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 880:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 884:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** */
 885:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 886:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 894:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 898:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 899:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 900:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 901:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 33


 903:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 905:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 906:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 909:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 911:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 912:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 913:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 917:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 919:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 920:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 921:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 922:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 924:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 926:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 927:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 928:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 933:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 935:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 937:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 938:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 939:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 940:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 944:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 527              		.loc 2 944 27 view .LVU141
 528              	.LBB21:
 945:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 946:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 529              		.loc 2 946 3 view .LVU142
 530              		.syntax unified
 531              	@ 946 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h" 1
 532 002e BFF34F8F 		dsb 0xF
 533              	@ 0 "" 2
 534              		.thumb
 535              		.syntax unified
 536              	.LBE21:
 537              	.LBE20:
 268:Bsp/Bsp_SDMMC.c ****         }
 538              		.loc 1 268 13 view .LVU143
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 34


 268:Bsp/Bsp_SDMMC.c ****         }
 539              		.loc 1 268 22 is_stmt 0 view .LVU144
 540 0032 013B     		subs	r3, r3, #1
 541              	.LVL28:
 542              	.L44:
 255:Bsp/Bsp_SDMMC.c ****         {
 543              		.loc 1 255 15 is_stmt 1 view .LVU145
 544 0034 002B     		cmp	r3, #0
 545 0036 F5D0     		beq	.L45
 257:Bsp/Bsp_SDMMC.c ****             {                
 546              		.loc 1 257 13 view .LVU146
 257:Bsp/Bsp_SDMMC.c ****             {                
 547              		.loc 1 257 17 is_stmt 0 view .LVU147
 548 0038 084A     		ldr	r2, .L52
 549 003a 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 257:Bsp/Bsp_SDMMC.c ****             {                
 550              		.loc 1 257 16 view .LVU148
 551 003c 002C     		cmp	r4, #0
 552 003e F6D0     		beq	.L46
 259:Bsp/Bsp_SDMMC.c ****                 
 553              		.loc 1 259 17 is_stmt 1 view .LVU149
 259:Bsp/Bsp_SDMMC.c ****                 
 554              		.loc 1 259 28 is_stmt 0 view .LVU150
 555 0040 1346     		mov	r3, r2
 556              	.LVL29:
 259:Bsp/Bsp_SDMMC.c ****                 
 557              		.loc 1 259 28 view .LVU151
 558 0042 0022     		movs	r2, #0
 559 0044 1A70     		strb	r2, [r3]
 261:Bsp/Bsp_SDMMC.c ****                     return true;
 560              		.loc 1 261 17 is_stmt 1 view .LVU152
 261:Bsp/Bsp_SDMMC.c ****                     return true;
 561              		.loc 1 261 20 is_stmt 0 view .LVU153
 562 0046 2846     		mov	r0, r5
 563 0048 FFF7FEFF 		bl	HAL_SD_GetState
 564              	.LVL30:
 261:Bsp/Bsp_SDMMC.c ****                     return true;
 565              		.loc 1 261 19 view .LVU154
 566 004c 0128     		cmp	r0, #1
 567 004e ECD0     		beq	.L47
 264:Bsp/Bsp_SDMMC.c ****             }
 568              		.loc 1 264 24 view .LVU155
 569 0050 0024     		movs	r4, #0
 570 0052 EAE7     		b	.L47
 571              	.LVL31:
 572              	.L49:
 244:Bsp/Bsp_SDMMC.c **** 
 573              		.loc 1 244 14 view .LVU156
 574 0054 4FF0FF33 		mov	r3, #-1
 575 0058 ECE7     		b	.L44
 576              	.L53:
 577 005a 00BF     		.align	2
 578              	.L52:
 579 005c 00000000 		.word	.LANCHOR0
 580              		.cfi_endproc
 581              	.LFE150:
 583              		.section	.text.BspSDMMC_Read,"ax",%progbits
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 35


 584              		.align	1
 585              		.syntax unified
 586              		.thumb
 587              		.thumb_func
 588              		.fpu fpv5-d16
 590              	BspSDMMC_Read:
 591              	.LVL32:
 592              	.LFB149:
 208:Bsp/Bsp_SDMMC.c ****     uint32_t retry_cnt = SDMMC_OPR_RETRY_MAX_CNT;
 593              		.loc 1 208 1 is_stmt 1 view -0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 0
 596              		@ frame_needed = 0, uses_anonymous_args = 0
 208:Bsp/Bsp_SDMMC.c ****     uint32_t retry_cnt = SDMMC_OPR_RETRY_MAX_CNT;
 597              		.loc 1 208 1 is_stmt 0 view .LVU158
 598 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 599              	.LCFI8:
 600              		.cfi_def_cfa_offset 24
 601              		.cfi_offset 3, -24
 602              		.cfi_offset 4, -20
 603              		.cfi_offset 5, -16
 604              		.cfi_offset 6, -12
 605              		.cfi_offset 7, -8
 606              		.cfi_offset 14, -4
 607 0002 0546     		mov	r5, r0
 608 0004 0C46     		mov	r4, r1
 609 0006 1646     		mov	r6, r2
 610 0008 1F46     		mov	r7, r3
 209:Bsp/Bsp_SDMMC.c **** 
 611              		.loc 1 209 5 is_stmt 1 view .LVU159
 612              	.LVL33:
 214:Bsp/Bsp_SDMMC.c ****     HAL_StatusTypeDef state = HAL_SD_ReadBlocks_DMA(&(obj->hdl), pData, ReadAddr, NumOfBlocks);
 613              		.loc 1 214 5 view .LVU160
 614 000a FFF7FEFF 		bl	Kernel_EnterCritical
 615              	.LVL34:
 215:Bsp/Bsp_SDMMC.c ****     Kernel_ExitCritical();
 616              		.loc 1 215 5 view .LVU161
 215:Bsp/Bsp_SDMMC.c ****     Kernel_ExitCritical();
 617              		.loc 1 215 31 is_stmt 0 view .LVU162
 618 000e 0435     		adds	r5, r5, #4
 619              	.LVL35:
 215:Bsp/Bsp_SDMMC.c ****     Kernel_ExitCritical();
 620              		.loc 1 215 31 view .LVU163
 621 0010 3B46     		mov	r3, r7
 622 0012 3246     		mov	r2, r6
 623 0014 2146     		mov	r1, r4
 624 0016 2846     		mov	r0, r5
 625 0018 FFF7FEFF 		bl	HAL_SD_ReadBlocks_DMA
 626              	.LVL36:
 627 001c 0446     		mov	r4, r0
 628              	.LVL37:
 216:Bsp/Bsp_SDMMC.c **** 
 629              		.loc 1 216 5 is_stmt 1 view .LVU164
 630 001e FFF7FEFF 		bl	Kernel_ExitCritical
 631              	.LVL38:
 218:Bsp/Bsp_SDMMC.c ****     {
 632              		.loc 1 218 5 view .LVU165
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 36


 218:Bsp/Bsp_SDMMC.c ****     {
 633              		.loc 1 218 8 is_stmt 0 view .LVU166
 634 0022 BCB1     		cbz	r4, .L60
 635              	.LVL39:
 636              	.L56:
 237:Bsp/Bsp_SDMMC.c ****     return false;
 637              		.loc 1 237 5 is_stmt 1 view .LVU167
 237:Bsp/Bsp_SDMMC.c ****     return false;
 638              		.loc 1 237 16 is_stmt 0 view .LVU168
 639 0024 0024     		movs	r4, #0
 640 0026 0D4B     		ldr	r3, .L63
 641 0028 1C70     		strb	r4, [r3]
 238:Bsp/Bsp_SDMMC.c **** }
 642              		.loc 1 238 5 is_stmt 1 view .LVU169
 643              	.L58:
 239:Bsp/Bsp_SDMMC.c **** 
 644              		.loc 1 239 1 is_stmt 0 view .LVU170
 645 002a 2046     		mov	r0, r4
 646 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 647              	.LVL40:
 648              	.L57:
 231:Bsp/Bsp_SDMMC.c **** 
 649              		.loc 1 231 13 is_stmt 1 view .LVU171
 650              	.LBB22:
 651              	.LBI22:
 944:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 652              		.loc 2 944 27 view .LVU172
 653              	.LBB23:
 654              		.loc 2 946 3 view .LVU173
 655              		.syntax unified
 656              	@ 946 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h" 1
 657 002e BFF34F8F 		dsb 0xF
 658              	@ 0 "" 2
 659              		.thumb
 660              		.syntax unified
 661              	.LBE23:
 662              	.LBE22:
 233:Bsp/Bsp_SDMMC.c ****         }
 663              		.loc 1 233 13 view .LVU174
 233:Bsp/Bsp_SDMMC.c ****         }
 664              		.loc 1 233 22 is_stmt 0 view .LVU175
 665 0032 013B     		subs	r3, r3, #1
 666              	.LVL41:
 667              	.L55:
 220:Bsp/Bsp_SDMMC.c ****         {
 668              		.loc 1 220 15 is_stmt 1 view .LVU176
 669 0034 002B     		cmp	r3, #0
 670 0036 F5D0     		beq	.L56
 222:Bsp/Bsp_SDMMC.c ****             {
 671              		.loc 1 222 13 view .LVU177
 222:Bsp/Bsp_SDMMC.c ****             {
 672              		.loc 1 222 17 is_stmt 0 view .LVU178
 673 0038 084A     		ldr	r2, .L63
 674 003a 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 222:Bsp/Bsp_SDMMC.c ****             {
 675              		.loc 1 222 16 view .LVU179
 676 003c 002C     		cmp	r4, #0
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 37


 677 003e F6D0     		beq	.L57
 224:Bsp/Bsp_SDMMC.c **** 
 678              		.loc 1 224 17 is_stmt 1 view .LVU180
 224:Bsp/Bsp_SDMMC.c **** 
 679              		.loc 1 224 28 is_stmt 0 view .LVU181
 680 0040 1346     		mov	r3, r2
 681              	.LVL42:
 224:Bsp/Bsp_SDMMC.c **** 
 682              		.loc 1 224 28 view .LVU182
 683 0042 0022     		movs	r2, #0
 684 0044 1A70     		strb	r2, [r3]
 226:Bsp/Bsp_SDMMC.c ****                     return true;
 685              		.loc 1 226 17 is_stmt 1 view .LVU183
 226:Bsp/Bsp_SDMMC.c ****                     return true;
 686              		.loc 1 226 20 is_stmt 0 view .LVU184
 687 0046 2846     		mov	r0, r5
 688 0048 FFF7FEFF 		bl	HAL_SD_GetState
 689              	.LVL43:
 226:Bsp/Bsp_SDMMC.c ****                     return true;
 690              		.loc 1 226 19 view .LVU185
 691 004c 0128     		cmp	r0, #1
 692 004e ECD0     		beq	.L58
 229:Bsp/Bsp_SDMMC.c ****             }
 693              		.loc 1 229 24 view .LVU186
 694 0050 0024     		movs	r4, #0
 695 0052 EAE7     		b	.L58
 696              	.LVL44:
 697              	.L60:
 209:Bsp/Bsp_SDMMC.c **** 
 698              		.loc 1 209 14 view .LVU187
 699 0054 4FF0FF33 		mov	r3, #-1
 700 0058 ECE7     		b	.L55
 701              	.L64:
 702 005a 00BF     		.align	2
 703              	.L63:
 704 005c 00000000 		.word	.LANCHOR1
 705              		.cfi_endproc
 706              	.LFE149:
 708              		.section	.text.BspSDMMC_PortCLK_Init,"ax",%progbits
 709              		.align	1
 710              		.syntax unified
 711              		.thumb
 712              		.thumb_func
 713              		.fpu fpv5-d16
 715              	BspSDMMC_PortCLK_Init:
 716              	.LVL45:
 717              	.LFB145:
  79:Bsp/Bsp_SDMMC.c ****     RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 718              		.loc 1 79 1 is_stmt 1 view -0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 192
 721              		@ frame_needed = 0, uses_anonymous_args = 0
  79:Bsp/Bsp_SDMMC.c ****     RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 722              		.loc 1 79 1 is_stmt 0 view .LVU189
 723 0000 10B5     		push	{r4, lr}
 724              	.LCFI9:
 725              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 38


 726              		.cfi_offset 4, -8
 727              		.cfi_offset 14, -4
 728 0002 B0B0     		sub	sp, sp, #192
 729              	.LCFI10:
 730              		.cfi_def_cfa_offset 200
 731 0004 0446     		mov	r4, r0
  80:Bsp/Bsp_SDMMC.c ****     if (instance == NULL)
 732              		.loc 1 80 5 is_stmt 1 view .LVU190
  80:Bsp/Bsp_SDMMC.c ****     if (instance == NULL)
 733              		.loc 1 80 30 is_stmt 0 view .LVU191
 734 0006 BC22     		movs	r2, #188
 735 0008 0021     		movs	r1, #0
 736 000a 01A8     		add	r0, sp, #4
 737              	.LVL46:
  80:Bsp/Bsp_SDMMC.c ****     if (instance == NULL)
 738              		.loc 1 80 30 view .LVU192
 739 000c FFF7FEFF 		bl	memset
 740              	.LVL47:
  81:Bsp/Bsp_SDMMC.c ****         return false;
 741              		.loc 1 81 5 is_stmt 1 view .LVU193
  81:Bsp/Bsp_SDMMC.c ****         return false;
 742              		.loc 1 81 8 is_stmt 0 view .LVU194
 743 0010 ECB1     		cbz	r4, .L67
  84:Bsp/Bsp_SDMMC.c ****     {
 744              		.loc 1 84 5 is_stmt 1 view .LVU195
  84:Bsp/Bsp_SDMMC.c ****     {
 745              		.loc 1 84 8 is_stmt 0 view .LVU196
 746 0012 114B     		ldr	r3, .L72
 747 0014 9C42     		cmp	r4, r3
 748 0016 02D0     		beq	.L71
  95:Bsp/Bsp_SDMMC.c **** }
 749              		.loc 1 95 12 view .LVU197
 750 0018 0120     		movs	r0, #1
 751              	.L66:
  96:Bsp/Bsp_SDMMC.c **** 
 752              		.loc 1 96 1 view .LVU198
 753 001a 30B0     		add	sp, sp, #192
 754              	.LCFI11:
 755              		.cfi_remember_state
 756              		.cfi_def_cfa_offset 8
 757              		@ sp needed
 758 001c 10BD     		pop	{r4, pc}
 759              	.LVL48:
 760              	.L71:
 761              	.LCFI12:
 762              		.cfi_restore_state
  86:Bsp/Bsp_SDMMC.c ****         PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 763              		.loc 1 86 9 is_stmt 1 view .LVU199
  86:Bsp/Bsp_SDMMC.c ****         PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 764              		.loc 1 86 50 is_stmt 0 view .LVU200
 765 001e 4FF48033 		mov	r3, #65536
 766 0022 0193     		str	r3, [sp, #4]
  87:Bsp/Bsp_SDMMC.c ****         if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 767              		.loc 1 87 9 is_stmt 1 view .LVU201
  87:Bsp/Bsp_SDMMC.c ****         if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 768              		.loc 1 87 49 is_stmt 0 view .LVU202
 769 0024 0023     		movs	r3, #0
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 39


 770 0026 1493     		str	r3, [sp, #80]
  88:Bsp/Bsp_SDMMC.c ****             return false;
 771              		.loc 1 88 9 is_stmt 1 view .LVU203
  88:Bsp/Bsp_SDMMC.c ****             return false;
 772              		.loc 1 88 13 is_stmt 0 view .LVU204
 773 0028 01A8     		add	r0, sp, #4
 774 002a FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 775              	.LVL49:
  88:Bsp/Bsp_SDMMC.c ****             return false;
 776              		.loc 1 88 12 view .LVU205
 777 002e 80B9     		cbnz	r0, .L69
  91:Bsp/Bsp_SDMMC.c ****         return true;
 778              		.loc 1 91 9 is_stmt 1 view .LVU206
 779              	.LBB24:
  91:Bsp/Bsp_SDMMC.c ****         return true;
 780              		.loc 1 91 9 view .LVU207
  91:Bsp/Bsp_SDMMC.c ****         return true;
 781              		.loc 1 91 9 view .LVU208
 782 0030 0A4B     		ldr	r3, .L72+4
 783 0032 D3F8D420 		ldr	r2, [r3, #212]
 784 0036 42F48032 		orr	r2, r2, #65536
 785 003a C3F8D420 		str	r2, [r3, #212]
  91:Bsp/Bsp_SDMMC.c ****         return true;
 786              		.loc 1 91 9 view .LVU209
 787 003e D3F8D430 		ldr	r3, [r3, #212]
 788 0042 03F48033 		and	r3, r3, #65536
 789 0046 0093     		str	r3, [sp]
  91:Bsp/Bsp_SDMMC.c ****         return true;
 790              		.loc 1 91 9 view .LVU210
 791 0048 009B     		ldr	r3, [sp]
 792              	.LBE24:
  91:Bsp/Bsp_SDMMC.c ****         return true;
 793              		.loc 1 91 9 view .LVU211
  92:Bsp/Bsp_SDMMC.c ****     }
 794              		.loc 1 92 9 view .LVU212
  92:Bsp/Bsp_SDMMC.c ****     }
 795              		.loc 1 92 16 is_stmt 0 view .LVU213
 796 004a 0120     		movs	r0, #1
 797 004c E5E7     		b	.L66
 798              	.L67:
  82:Bsp/Bsp_SDMMC.c **** 
 799              		.loc 1 82 16 view .LVU214
 800 004e 0020     		movs	r0, #0
 801 0050 E3E7     		b	.L66
 802              	.L69:
  89:Bsp/Bsp_SDMMC.c **** 
 803              		.loc 1 89 20 view .LVU215
 804 0052 0020     		movs	r0, #0
 805 0054 E1E7     		b	.L66
 806              	.L73:
 807 0056 00BF     		.align	2
 808              	.L72:
 809 0058 00700052 		.word	1375760384
 810 005c 00440258 		.word	1476543488
 811              		.cfi_endproc
 812              	.LFE145:
 814              		.section	.text.BspSDMMC_Pin_Init,"ax",%progbits
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 40


 815              		.align	1
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 819              		.fpu fpv5-d16
 821              	BspSDMMC_Pin_Init:
 822              	.LVL50:
 823              	.LFB146:
  99:Bsp/Bsp_SDMMC.c ****     GPIO_InitTypeDef GPIO_InitStruct = BspSDMMC_PinCfg;
 824              		.loc 1 99 1 is_stmt 1 view -0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 24
 827              		@ frame_needed = 0, uses_anonymous_args = 0
  99:Bsp/Bsp_SDMMC.c ****     GPIO_InitTypeDef GPIO_InitStruct = BspSDMMC_PinCfg;
 828              		.loc 1 99 1 is_stmt 0 view .LVU217
 829 0000 10B5     		push	{r4, lr}
 830              	.LCFI13:
 831              		.cfi_def_cfa_offset 8
 832              		.cfi_offset 4, -8
 833              		.cfi_offset 14, -4
 834 0002 86B0     		sub	sp, sp, #24
 835              	.LCFI14:
 836              		.cfi_def_cfa_offset 32
 100:Bsp/Bsp_SDMMC.c **** 
 837              		.loc 1 100 5 is_stmt 1 view .LVU218
 100:Bsp/Bsp_SDMMC.c **** 
 838              		.loc 1 100 22 is_stmt 0 view .LVU219
 839 0004 0023     		movs	r3, #0
 840 0006 0193     		str	r3, [sp, #4]
 841 0008 0393     		str	r3, [sp, #12]
 842 000a 0223     		movs	r3, #2
 843 000c 0293     		str	r3, [sp, #8]
 844 000e 0323     		movs	r3, #3
 845 0010 0493     		str	r3, [sp, #16]
 102:Bsp/Bsp_SDMMC.c ****         return false;
 846              		.loc 1 102 5 is_stmt 1 view .LVU220
 102:Bsp/Bsp_SDMMC.c ****         return false;
 847              		.loc 1 102 8 is_stmt 0 view .LVU221
 848 0012 0029     		cmp	r1, #0
 849 0014 40D0     		beq	.L76
 850 0016 0C46     		mov	r4, r1
 105:Bsp/Bsp_SDMMC.c ****     {
 851              		.loc 1 105 5 is_stmt 1 view .LVU222
 105:Bsp/Bsp_SDMMC.c ****     {
 852              		.loc 1 105 8 is_stmt 0 view .LVU223
 853 0018 204B     		ldr	r3, .L80
 854 001a 9842     		cmp	r0, r3
 855 001c 02D0     		beq	.L79
 136:Bsp/Bsp_SDMMC.c **** }
 856              		.loc 1 136 12 view .LVU224
 857 001e 0020     		movs	r0, #0
 858              	.LVL51:
 859              	.L75:
 137:Bsp/Bsp_SDMMC.c **** 
 860              		.loc 1 137 1 view .LVU225
 861 0020 06B0     		add	sp, sp, #24
 862              	.LCFI15:
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 41


 863              		.cfi_remember_state
 864              		.cfi_def_cfa_offset 8
 865              		@ sp needed
 866 0022 10BD     		pop	{r4, pc}
 867              	.LVL52:
 868              	.L79:
 869              	.LCFI16:
 870              		.cfi_restore_state
 107:Bsp/Bsp_SDMMC.c **** 
 871              		.loc 1 107 9 is_stmt 1 view .LVU226
 107:Bsp/Bsp_SDMMC.c **** 
 872              		.loc 1 107 40 is_stmt 0 view .LVU227
 873 0024 0B6B     		ldr	r3, [r1, #48]	@ unaligned
 107:Bsp/Bsp_SDMMC.c **** 
 874              		.loc 1 107 35 view .LVU228
 875 0026 0593     		str	r3, [sp, #20]
 109:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->CK_Pin;
 876              		.loc 1 109 9 is_stmt 1 view .LVU229
 877 0028 0869     		ldr	r0, [r1, #16]	@ unaligned
 878              	.LVL53:
 109:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->CK_Pin;
 879              		.loc 1 109 9 is_stmt 0 view .LVU230
 880 002a FFF7FEFF 		bl	BspSDMMC_PinCLK_Enable
 881              	.LVL54:
 110:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CK_Port, &GPIO_InitStruct);
 882              		.loc 1 110 9 is_stmt 1 view .LVU231
 110:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CK_Port, &GPIO_InitStruct);
 883              		.loc 1 110 34 is_stmt 0 view .LVU232
 884 002e A36A     		ldr	r3, [r4, #40]	@ unaligned
 110:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CK_Port, &GPIO_InitStruct);
 885              		.loc 1 110 29 view .LVU233
 886 0030 0193     		str	r3, [sp, #4]
 111:Bsp/Bsp_SDMMC.c **** 
 887              		.loc 1 111 9 is_stmt 1 view .LVU234
 888 0032 01A9     		add	r1, sp, #4
 889 0034 2069     		ldr	r0, [r4, #16]	@ unaligned
 890 0036 FFF7FEFF 		bl	HAL_GPIO_Init
 891              	.LVL55:
 113:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->CMD_Pin;
 892              		.loc 1 113 9 view .LVU235
 893 003a 6069     		ldr	r0, [r4, #20]	@ unaligned
 894 003c FFF7FEFF 		bl	BspSDMMC_PinCLK_Enable
 895              	.LVL56:
 114:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CMD_Port, &GPIO_InitStruct);
 896              		.loc 1 114 9 view .LVU236
 114:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CMD_Port, &GPIO_InitStruct);
 897              		.loc 1 114 34 is_stmt 0 view .LVU237
 898 0040 E36A     		ldr	r3, [r4, #44]	@ unaligned
 114:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->CMD_Port, &GPIO_InitStruct);
 899              		.loc 1 114 29 view .LVU238
 900 0042 0193     		str	r3, [sp, #4]
 115:Bsp/Bsp_SDMMC.c **** 
 901              		.loc 1 115 9 is_stmt 1 view .LVU239
 902 0044 01A9     		add	r1, sp, #4
 903 0046 6069     		ldr	r0, [r4, #20]	@ unaligned
 904 0048 FFF7FEFF 		bl	HAL_GPIO_Init
 905              	.LVL57:
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 42


 117:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D0_Pin;
 906              		.loc 1 117 9 view .LVU240
 907 004c 2068     		ldr	r0, [r4]	@ unaligned
 908 004e FFF7FEFF 		bl	BspSDMMC_PinCLK_Enable
 909              	.LVL58:
 118:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D0_Port, &GPIO_InitStruct);
 910              		.loc 1 118 9 view .LVU241
 118:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D0_Port, &GPIO_InitStruct);
 911              		.loc 1 118 34 is_stmt 0 view .LVU242
 912 0052 A369     		ldr	r3, [r4, #24]	@ unaligned
 118:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D0_Port, &GPIO_InitStruct);
 913              		.loc 1 118 29 view .LVU243
 914 0054 0193     		str	r3, [sp, #4]
 119:Bsp/Bsp_SDMMC.c **** 
 915              		.loc 1 119 9 is_stmt 1 view .LVU244
 916 0056 01A9     		add	r1, sp, #4
 917 0058 2068     		ldr	r0, [r4]	@ unaligned
 918 005a FFF7FEFF 		bl	HAL_GPIO_Init
 919              	.LVL59:
 121:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D1_Pin;
 920              		.loc 1 121 9 view .LVU245
 921 005e 6068     		ldr	r0, [r4, #4]	@ unaligned
 922 0060 FFF7FEFF 		bl	BspSDMMC_PinCLK_Enable
 923              	.LVL60:
 122:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D1_Port, &GPIO_InitStruct);
 924              		.loc 1 122 9 view .LVU246
 122:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D1_Port, &GPIO_InitStruct);
 925              		.loc 1 122 34 is_stmt 0 view .LVU247
 926 0064 E369     		ldr	r3, [r4, #28]	@ unaligned
 122:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D1_Port, &GPIO_InitStruct);
 927              		.loc 1 122 29 view .LVU248
 928 0066 0193     		str	r3, [sp, #4]
 123:Bsp/Bsp_SDMMC.c **** 
 929              		.loc 1 123 9 is_stmt 1 view .LVU249
 930 0068 01A9     		add	r1, sp, #4
 931 006a 6068     		ldr	r0, [r4, #4]	@ unaligned
 932 006c FFF7FEFF 		bl	HAL_GPIO_Init
 933              	.LVL61:
 125:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D2_Pin;
 934              		.loc 1 125 9 view .LVU250
 935 0070 A068     		ldr	r0, [r4, #8]	@ unaligned
 936 0072 FFF7FEFF 		bl	BspSDMMC_PinCLK_Enable
 937              	.LVL62:
 126:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D2_Port, &GPIO_InitStruct);
 938              		.loc 1 126 9 view .LVU251
 126:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D2_Port, &GPIO_InitStruct);
 939              		.loc 1 126 34 is_stmt 0 view .LVU252
 940 0076 236A     		ldr	r3, [r4, #32]	@ unaligned
 126:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D2_Port, &GPIO_InitStruct);
 941              		.loc 1 126 29 view .LVU253
 942 0078 0193     		str	r3, [sp, #4]
 127:Bsp/Bsp_SDMMC.c **** 
 943              		.loc 1 127 9 is_stmt 1 view .LVU254
 944 007a 01A9     		add	r1, sp, #4
 945 007c A068     		ldr	r0, [r4, #8]	@ unaligned
 946 007e FFF7FEFF 		bl	HAL_GPIO_Init
 947              	.LVL63:
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 43


 129:Bsp/Bsp_SDMMC.c ****         GPIO_InitStruct.Pin = obj->D3_Pin;
 948              		.loc 1 129 9 view .LVU255
 949 0082 E068     		ldr	r0, [r4, #12]	@ unaligned
 950 0084 FFF7FEFF 		bl	BspSDMMC_PinCLK_Enable
 951              	.LVL64:
 130:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D3_Port, &GPIO_InitStruct);
 952              		.loc 1 130 9 view .LVU256
 130:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D3_Port, &GPIO_InitStruct);
 953              		.loc 1 130 34 is_stmt 0 view .LVU257
 954 0088 636A     		ldr	r3, [r4, #36]	@ unaligned
 130:Bsp/Bsp_SDMMC.c ****         HAL_GPIO_Init(obj->D3_Port, &GPIO_InitStruct);
 955              		.loc 1 130 29 view .LVU258
 956 008a 0193     		str	r3, [sp, #4]
 131:Bsp/Bsp_SDMMC.c **** 
 957              		.loc 1 131 9 is_stmt 1 view .LVU259
 958 008c 01A9     		add	r1, sp, #4
 959 008e E068     		ldr	r0, [r4, #12]	@ unaligned
 960 0090 FFF7FEFF 		bl	HAL_GPIO_Init
 961              	.LVL65:
 133:Bsp/Bsp_SDMMC.c ****     }
 962              		.loc 1 133 9 view .LVU260
 133:Bsp/Bsp_SDMMC.c ****     }
 963              		.loc 1 133 16 is_stmt 0 view .LVU261
 964 0094 0120     		movs	r0, #1
 965 0096 C3E7     		b	.L75
 966              	.LVL66:
 967              	.L76:
 103:Bsp/Bsp_SDMMC.c **** 
 968              		.loc 1 103 16 view .LVU262
 969 0098 0020     		movs	r0, #0
 970              	.LVL67:
 103:Bsp/Bsp_SDMMC.c **** 
 971              		.loc 1 103 16 view .LVU263
 972 009a C1E7     		b	.L75
 973              	.L81:
 974              		.align	2
 975              	.L80:
 976 009c 00700052 		.word	1375760384
 977              		.cfi_endproc
 978              	.LFE146:
 980              		.section	.text.BspSDMMC_MDMA_Init,"ax",%progbits
 981              		.align	1
 982              		.syntax unified
 983              		.thumb
 984              		.thumb_func
 985              		.fpu fpv5-d16
 987              	BspSDMMC_MDMA_Init:
 988              	.LVL68:
 989              	.LFB147:
 140:Bsp/Bsp_SDMMC.c ****     if (mdma == NULL)
 990              		.loc 1 140 1 is_stmt 1 view -0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 8
 993              		@ frame_needed = 0, uses_anonymous_args = 0
 141:Bsp/Bsp_SDMMC.c ****         return false;
 994              		.loc 1 141 5 view .LVU265
 141:Bsp/Bsp_SDMMC.c ****         return false;
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 44


 995              		.loc 1 141 8 is_stmt 0 view .LVU266
 996 0000 0028     		cmp	r0, #0
 997 0002 36D0     		beq	.L84
 140:Bsp/Bsp_SDMMC.c ****     if (mdma == NULL)
 998              		.loc 1 140 1 view .LVU267
 999 0004 00B5     		push	{lr}
 1000              	.LCFI17:
 1001              		.cfi_def_cfa_offset 4
 1002              		.cfi_offset 14, -4
 1003 0006 83B0     		sub	sp, sp, #12
 1004              	.LCFI18:
 1005              		.cfi_def_cfa_offset 16
 144:Bsp/Bsp_SDMMC.c **** 
 1006              		.loc 1 144 5 is_stmt 1 view .LVU268
 1007              	.LBB25:
 144:Bsp/Bsp_SDMMC.c **** 
 1008              		.loc 1 144 5 view .LVU269
 144:Bsp/Bsp_SDMMC.c **** 
 1009              		.loc 1 144 5 view .LVU270
 1010 0008 1B4A     		ldr	r2, .L91
 1011 000a D2F8D410 		ldr	r1, [r2, #212]
 1012 000e 41F00101 		orr	r1, r1, #1
 1013 0012 C2F8D410 		str	r1, [r2, #212]
 144:Bsp/Bsp_SDMMC.c **** 
 1014              		.loc 1 144 5 view .LVU271
 1015 0016 D2F8D420 		ldr	r2, [r2, #212]
 1016 001a 02F00102 		and	r2, r2, #1
 1017 001e 0192     		str	r2, [sp, #4]
 144:Bsp/Bsp_SDMMC.c **** 
 1018              		.loc 1 144 5 view .LVU272
 1019 0020 019A     		ldr	r2, [sp, #4]
 1020              	.LBE25:
 144:Bsp/Bsp_SDMMC.c **** 
 1021              		.loc 1 144 5 view .LVU273
 146:Bsp/Bsp_SDMMC.c ****     mdma->Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 1022              		.loc 1 146 5 view .LVU274
 146:Bsp/Bsp_SDMMC.c ****     mdma->Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 1023              		.loc 1 146 20 is_stmt 0 view .LVU275
 1024 0022 164A     		ldr	r2, .L91+4
 1025 0024 0260     		str	r2, [r0]
 147:Bsp/Bsp_SDMMC.c ****     mdma->Init.Priority = MDMA_PRIORITY_LOW;
 1026              		.loc 1 147 5 is_stmt 1 view .LVU276
 147:Bsp/Bsp_SDMMC.c ****     mdma->Init.Priority = MDMA_PRIORITY_LOW;
 1027              		.loc 1 147 36 is_stmt 0 view .LVU277
 1028 0026 4FF08052 		mov	r2, #268435456
 1029 002a 8260     		str	r2, [r0, #8]
 148:Bsp/Bsp_SDMMC.c ****     mdma->Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 1030              		.loc 1 148 5 is_stmt 1 view .LVU278
 148:Bsp/Bsp_SDMMC.c ****     mdma->Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 1031              		.loc 1 148 25 is_stmt 0 view .LVU279
 1032 002c 0022     		movs	r2, #0
 1033 002e C260     		str	r2, [r0, #12]
 149:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceInc = MDMA_SRC_INC_BYTE;
 1034              		.loc 1 149 5 is_stmt 1 view .LVU280
 149:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceInc = MDMA_SRC_INC_BYTE;
 1035              		.loc 1 149 27 is_stmt 0 view .LVU281
 1036 0030 0261     		str	r2, [r0, #16]
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 45


 150:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestinationInc = MDMA_DEST_INC_BYTE;
 1037              		.loc 1 150 5 is_stmt 1 view .LVU282
 150:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestinationInc = MDMA_DEST_INC_BYTE;
 1038              		.loc 1 150 26 is_stmt 0 view .LVU283
 1039 0032 0221     		movs	r1, #2
 1040 0034 4161     		str	r1, [r0, #20]
 151:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 1041              		.loc 1 151 5 is_stmt 1 view .LVU284
 151:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 1042              		.loc 1 151 31 is_stmt 0 view .LVU285
 1043 0036 0821     		movs	r1, #8
 1044 0038 8161     		str	r1, [r0, #24]
 152:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 1045              		.loc 1 152 5 is_stmt 1 view .LVU286
 152:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 1046              		.loc 1 152 31 is_stmt 0 view .LVU287
 1047 003a C261     		str	r2, [r0, #28]
 153:Bsp/Bsp_SDMMC.c ****     mdma->Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 1048              		.loc 1 153 5 is_stmt 1 view .LVU288
 153:Bsp/Bsp_SDMMC.c ****     mdma->Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 1049              		.loc 1 153 29 is_stmt 0 view .LVU289
 1050 003c 0262     		str	r2, [r0, #32]
 154:Bsp/Bsp_SDMMC.c ****     mdma->Init.BufferTransferLength = 1;
 1051              		.loc 1 154 5 is_stmt 1 view .LVU290
 154:Bsp/Bsp_SDMMC.c ****     mdma->Init.BufferTransferLength = 1;
 1052              		.loc 1 154 30 is_stmt 0 view .LVU291
 1053 003e 4FF00071 		mov	r1, #33554432
 1054 0042 4162     		str	r1, [r0, #36]
 155:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 1055              		.loc 1 155 5 is_stmt 1 view .LVU292
 155:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 1056              		.loc 1 155 37 is_stmt 0 view .LVU293
 1057 0044 0121     		movs	r1, #1
 1058 0046 8162     		str	r1, [r0, #40]
 156:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 1059              		.loc 1 156 5 is_stmt 1 view .LVU294
 156:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 1060              		.loc 1 156 28 is_stmt 0 view .LVU295
 1061 0048 C262     		str	r2, [r0, #44]
 157:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceBlockAddressOffset = 0;
 1062              		.loc 1 157 5 is_stmt 1 view .LVU296
 157:Bsp/Bsp_SDMMC.c ****     mdma->Init.SourceBlockAddressOffset = 0;
 1063              		.loc 1 157 26 is_stmt 0 view .LVU297
 1064 004a 0263     		str	r2, [r0, #48]
 158:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestBlockAddressOffset = 0;
 1065              		.loc 1 158 5 is_stmt 1 view .LVU298
 158:Bsp/Bsp_SDMMC.c ****     mdma->Init.DestBlockAddressOffset = 0;
 1066              		.loc 1 158 41 is_stmt 0 view .LVU299
 1067 004c 4263     		str	r2, [r0, #52]
 159:Bsp/Bsp_SDMMC.c ****     if (HAL_MDMA_Init(mdma) != HAL_OK)
 1068              		.loc 1 159 5 is_stmt 1 view .LVU300
 159:Bsp/Bsp_SDMMC.c ****     if (HAL_MDMA_Init(mdma) != HAL_OK)
 1069              		.loc 1 159 39 is_stmt 0 view .LVU301
 1070 004e 8263     		str	r2, [r0, #56]
 160:Bsp/Bsp_SDMMC.c ****         return false;
 1071              		.loc 1 160 5 is_stmt 1 view .LVU302
 160:Bsp/Bsp_SDMMC.c ****         return false;
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 46


 1072              		.loc 1 160 9 is_stmt 0 view .LVU303
 1073 0050 FFF7FEFF 		bl	HAL_MDMA_Init
 1074              	.LVL69:
 160:Bsp/Bsp_SDMMC.c ****         return false;
 1075              		.loc 1 160 8 view .LVU304
 1076 0054 18B1     		cbz	r0, .L90
 161:Bsp/Bsp_SDMMC.c **** 
 1077              		.loc 1 161 16 view .LVU305
 1078 0056 0020     		movs	r0, #0
 1079              	.L83:
 167:Bsp/Bsp_SDMMC.c **** 
 1080              		.loc 1 167 1 view .LVU306
 1081 0058 03B0     		add	sp, sp, #12
 1082              	.LCFI19:
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 4
 1085              		@ sp needed
 1086 005a 5DF804FB 		ldr	pc, [sp], #4
 1087              	.L90:
 1088              	.LCFI20:
 1089              		.cfi_restore_state
 163:Bsp/Bsp_SDMMC.c ****     HAL_NVIC_EnableIRQ(MDMA_IRQn);
 1090              		.loc 1 163 5 is_stmt 1 view .LVU307
 1091 005e 0022     		movs	r2, #0
 1092 0060 0A21     		movs	r1, #10
 1093 0062 7A20     		movs	r0, #122
 1094 0064 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1095              	.LVL70:
 164:Bsp/Bsp_SDMMC.c **** 
 1096              		.loc 1 164 5 view .LVU308
 1097 0068 7A20     		movs	r0, #122
 1098 006a FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1099              	.LVL71:
 166:Bsp/Bsp_SDMMC.c **** }
 1100              		.loc 1 166 5 view .LVU309
 166:Bsp/Bsp_SDMMC.c **** }
 1101              		.loc 1 166 12 is_stmt 0 view .LVU310
 1102 006e 0120     		movs	r0, #1
 1103 0070 F2E7     		b	.L83
 1104              	.LVL72:
 1105              	.L84:
 1106              	.LCFI21:
 1107              		.cfi_def_cfa_offset 0
 1108              		.cfi_restore 14
 142:Bsp/Bsp_SDMMC.c **** 
 1109              		.loc 1 142 16 view .LVU311
 1110 0072 0020     		movs	r0, #0
 1111              	.LVL73:
 167:Bsp/Bsp_SDMMC.c **** 
 1112              		.loc 1 167 1 view .LVU312
 1113 0074 7047     		bx	lr
 1114              	.L92:
 1115 0076 00BF     		.align	2
 1116              	.L91:
 1117 0078 00440258 		.word	1476543488
 1118 007c 40000052 		.word	1375731776
 1119              		.cfi_endproc
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 47


 1120              	.LFE147:
 1122              		.section	.text.BspSDMMC_Init,"ax",%progbits
 1123              		.align	1
 1124              		.syntax unified
 1125              		.thumb
 1126              		.thumb_func
 1127              		.fpu fpv5-d16
 1129              	BspSDMMC_Init:
 1130              	.LVL74:
 1131              	.LFB148:
 170:Bsp/Bsp_SDMMC.c ****     IRQn_Type irq = SDMMC1_IRQn;
 1132              		.loc 1 170 1 is_stmt 1 view -0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 0
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 170:Bsp/Bsp_SDMMC.c ****     IRQn_Type irq = SDMMC1_IRQn;
 1136              		.loc 1 170 1 is_stmt 0 view .LVU314
 1137 0000 70B5     		push	{r4, r5, r6, lr}
 1138              	.LCFI22:
 1139              		.cfi_def_cfa_offset 16
 1140              		.cfi_offset 4, -16
 1141              		.cfi_offset 5, -12
 1142              		.cfi_offset 6, -8
 1143              		.cfi_offset 14, -4
 1144 0002 0446     		mov	r4, r0
 171:Bsp/Bsp_SDMMC.c **** 
 1145              		.loc 1 171 5 is_stmt 1 view .LVU315
 1146              	.LVL75:
 173:Bsp/Bsp_SDMMC.c ****     BspSDMMC_Pin_Init(obj->instance, obj->pin);
 1147              		.loc 1 173 5 view .LVU316
 1148 0004 D0F8F000 		ldr	r0, [r0, #240]	@ unaligned
 1149              	.LVL76:
 173:Bsp/Bsp_SDMMC.c ****     BspSDMMC_Pin_Init(obj->instance, obj->pin);
 1150              		.loc 1 173 5 is_stmt 0 view .LVU317
 1151 0008 FFF7FEFF 		bl	BspSDMMC_PortCLK_Init
 1152              	.LVL77:
 174:Bsp/Bsp_SDMMC.c **** 
 1153              		.loc 1 174 5 is_stmt 1 view .LVU318
 1154 000c 2168     		ldr	r1, [r4]	@ unaligned
 1155 000e D4F8F000 		ldr	r0, [r4, #240]	@ unaligned
 1156 0012 FFF7FEFF 		bl	BspSDMMC_Pin_Init
 1157              	.LVL78:
 176:Bsp/Bsp_SDMMC.c ****         return false;
 1158              		.loc 1 176 5 view .LVU319
 176:Bsp/Bsp_SDMMC.c ****         return false;
 1159              		.loc 1 176 8 is_stmt 0 view .LVU320
 1160 0016 002C     		cmp	r4, #0
 1161 0018 3FD0     		beq	.L98
 179:Bsp/Bsp_SDMMC.c ****     {
 1162              		.loc 1 179 5 is_stmt 1 view .LVU321
 179:Bsp/Bsp_SDMMC.c ****     {
 1163              		.loc 1 179 12 is_stmt 0 view .LVU322
 1164 001a D4F8F030 		ldr	r3, [r4, #240]	@ unaligned
 179:Bsp/Bsp_SDMMC.c ****     {
 1165              		.loc 1 179 8 view .LVU323
 1166 001e 204A     		ldr	r2, .L104
 1167 0020 9342     		cmp	r3, r2
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 48


 1168 0022 2AD0     		beq	.L99
 183:Bsp/Bsp_SDMMC.c ****     {
 1169              		.loc 1 183 10 is_stmt 1 view .LVU324
 183:Bsp/Bsp_SDMMC.c ****     {
 1170              		.loc 1 183 13 is_stmt 0 view .LVU325
 1171 0024 1F4A     		ldr	r2, .L104+4
 1172 0026 9342     		cmp	r3, r2
 1173 0028 02D0     		beq	.L102
 188:Bsp/Bsp_SDMMC.c **** 
 1174              		.loc 1 188 16 view .LVU326
 1175 002a 0025     		movs	r5, #0
 1176              	.LVL79:
 1177              	.L94:
 205:Bsp/Bsp_SDMMC.c **** 
 1178              		.loc 1 205 1 view .LVU327
 1179 002c 2846     		mov	r0, r5
 1180 002e 70BD     		pop	{r4, r5, r6, pc}
 1181              	.LVL80:
 1182              	.L102:
 185:Bsp/Bsp_SDMMC.c ****     }
 1183              		.loc 1 185 13 view .LVU328
 1184 0030 7C26     		movs	r6, #124
 1185              	.L95:
 1186              	.LVL81:
 190:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 1187              		.loc 1 190 5 is_stmt 1 view .LVU329
 190:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 1188              		.loc 1 190 23 is_stmt 0 view .LVU330
 1189 0032 6360     		str	r3, [r4, #4]	@ unaligned
 191:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 1190              		.loc 1 191 5 is_stmt 1 view .LVU331
 191:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 1191              		.loc 1 191 29 is_stmt 0 view .LVU332
 1192 0034 0023     		movs	r3, #0
 1193 0036 2372     		strb	r3, [r4, #8]
 1194 0038 6372     		strb	r3, [r4, #9]
 1195 003a A372     		strb	r3, [r4, #10]
 1196 003c E372     		strb	r3, [r4, #11]
 192:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.BusWide = SDMMC_BUS_WIDE_1B;
 1197              		.loc 1 192 5 is_stmt 1 view .LVU333
 192:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.BusWide = SDMMC_BUS_WIDE_1B;
 1198              		.loc 1 192 34 is_stmt 0 view .LVU334
 1199 003e 2373     		strb	r3, [r4, #12]
 1200 0040 6373     		strb	r3, [r4, #13]
 1201 0042 A373     		strb	r3, [r4, #14]
 1202 0044 E373     		strb	r3, [r4, #15]
 193:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 1203              		.loc 1 193 5 is_stmt 1 view .LVU335
 193:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 1204              		.loc 1 193 27 is_stmt 0 view .LVU336
 1205 0046 2374     		strb	r3, [r4, #16]
 1206 0048 6374     		strb	r3, [r4, #17]
 1207 004a A374     		strb	r3, [r4, #18]
 1208 004c E374     		strb	r3, [r4, #19]
 194:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockDiv = 2;
 1209              		.loc 1 194 5 is_stmt 1 view .LVU337
 194:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.ClockDiv = 2;
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 49


 1210              		.loc 1 194 39 is_stmt 0 view .LVU338
 1211 004e 2375     		strb	r3, [r4, #20]
 1212 0050 6375     		strb	r3, [r4, #21]
 1213 0052 0222     		movs	r2, #2
 1214 0054 A275     		strb	r2, [r4, #22]
 1215 0056 E375     		strb	r3, [r4, #23]
 195:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 1216              		.loc 1 195 5 is_stmt 1 view .LVU339
 195:Bsp/Bsp_SDMMC.c ****     obj->hdl.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 1217              		.loc 1 195 28 is_stmt 0 view .LVU340
 1218 0058 2276     		strb	r2, [r4, #24]
 1219 005a 6376     		strb	r3, [r4, #25]
 1220 005c A376     		strb	r3, [r4, #26]
 1221 005e E376     		strb	r3, [r4, #27]
 196:Bsp/Bsp_SDMMC.c **** 
 1222              		.loc 1 196 5 is_stmt 1 view .LVU341
 196:Bsp/Bsp_SDMMC.c **** 
 1223              		.loc 1 196 37 is_stmt 0 view .LVU342
 1224 0060 0122     		movs	r2, #1
 1225 0062 2277     		strb	r2, [r4, #28]
 1226 0064 6377     		strb	r3, [r4, #29]
 1227 0066 A377     		strb	r3, [r4, #30]
 1228 0068 E377     		strb	r3, [r4, #31]
 198:Bsp/Bsp_SDMMC.c ****         return false;
 1229              		.loc 1 198 5 is_stmt 1 view .LVU343
 198:Bsp/Bsp_SDMMC.c ****         return false;
 1230              		.loc 1 198 10 is_stmt 0 view .LVU344
 1231 006a 04F18400 		add	r0, r4, #132
 1232 006e FFF7FEFF 		bl	BspSDMMC_MDMA_Init
 1233              	.LVL82:
 198:Bsp/Bsp_SDMMC.c ****         return false;
 1234              		.loc 1 198 8 view .LVU345
 1235 0072 0546     		mov	r5, r0
 1236 0074 18B9     		cbnz	r0, .L103
 1237              	.L96:
 199:Bsp/Bsp_SDMMC.c **** 
 1238              		.loc 1 199 9 is_stmt 1 view .LVU346
 199:Bsp/Bsp_SDMMC.c **** 
 1239              		.loc 1 199 16 is_stmt 0 view .LVU347
 1240 0076 0025     		movs	r5, #0
 1241 0078 D8E7     		b	.L94
 1242              	.LVL83:
 1243              	.L99:
 181:Bsp/Bsp_SDMMC.c ****     }
 1244              		.loc 1 181 13 view .LVU348
 1245 007a 3126     		movs	r6, #49
 1246 007c D9E7     		b	.L95
 1247              	.LVL84:
 1248              	.L103:
 198:Bsp/Bsp_SDMMC.c ****         return false;
 1249              		.loc 1 198 47 discriminator 1 view .LVU349
 1250 007e 201D     		adds	r0, r4, #4
 1251 0080 FFF7FEFF 		bl	HAL_SD_Init
 1252              	.LVL85:
 198:Bsp/Bsp_SDMMC.c ****         return false;
 1253              		.loc 1 198 43 discriminator 1 view .LVU350
 1254 0084 0028     		cmp	r0, #0
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 50


 1255 0086 F6D1     		bne	.L96
 201:Bsp/Bsp_SDMMC.c ****     HAL_NVIC_EnableIRQ(irq);
 1256              		.loc 1 201 5 is_stmt 1 view .LVU351
 1257 0088 0022     		movs	r2, #0
 1258 008a 0421     		movs	r1, #4
 1259 008c 3046     		mov	r0, r6
 1260 008e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1261              	.LVL86:
 202:Bsp/Bsp_SDMMC.c **** 
 1262              		.loc 1 202 5 view .LVU352
 1263 0092 3046     		mov	r0, r6
 1264 0094 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1265              	.LVL87:
 204:Bsp/Bsp_SDMMC.c **** }
 1266              		.loc 1 204 5 view .LVU353
 204:Bsp/Bsp_SDMMC.c **** }
 1267              		.loc 1 204 12 is_stmt 0 view .LVU354
 1268 0098 C8E7     		b	.L94
 1269              	.LVL88:
 1270              	.L98:
 177:Bsp/Bsp_SDMMC.c **** 
 1271              		.loc 1 177 16 view .LVU355
 1272 009a 0025     		movs	r5, #0
 1273 009c C6E7     		b	.L94
 1274              	.L105:
 1275 009e 00BF     		.align	2
 1276              	.L104:
 1277 00a0 00700052 		.word	1375760384
 1278 00a4 00240248 		.word	1208099840
 1279              		.cfi_endproc
 1280              	.LFE148:
 1282              		.section	.text.HAL_SD_TxCpltCallback,"ax",%progbits
 1283              		.align	1
 1284              		.global	HAL_SD_TxCpltCallback
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
 1288              		.fpu fpv5-d16
 1290              	HAL_SD_TxCpltCallback:
 1291              	.LVL89:
 1292              	.LFB154:
 305:Bsp/Bsp_SDMMC.c **** 
 306:Bsp/Bsp_SDMMC.c **** void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
 307:Bsp/Bsp_SDMMC.c **** {
 1293              		.loc 1 307 1 is_stmt 1 view -0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 1297              		@ link register save eliminated.
 308:Bsp/Bsp_SDMMC.c ****     if (hsd->Instance == SDMMC1)
 1298              		.loc 1 308 5 view .LVU357
 1299              		.loc 1 308 12 is_stmt 0 view .LVU358
 1300 0000 0268     		ldr	r2, [r0]
 1301              		.loc 1 308 8 view .LVU359
 1302 0002 054B     		ldr	r3, .L109
 1303 0004 9A42     		cmp	r2, r3
 1304 0006 00D0     		beq	.L108
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 51


 1305              	.L106:
 309:Bsp/Bsp_SDMMC.c ****     {
 310:Bsp/Bsp_SDMMC.c ****         SD_Tx_Cplt = true;
 311:Bsp/Bsp_SDMMC.c ****         __DSB();
 312:Bsp/Bsp_SDMMC.c ****     }
 313:Bsp/Bsp_SDMMC.c **** }
 1306              		.loc 1 313 1 view .LVU360
 1307 0008 7047     		bx	lr
 1308              	.L108:
 310:Bsp/Bsp_SDMMC.c ****         __DSB();
 1309              		.loc 1 310 9 is_stmt 1 view .LVU361
 310:Bsp/Bsp_SDMMC.c ****         __DSB();
 1310              		.loc 1 310 20 is_stmt 0 view .LVU362
 1311 000a 044B     		ldr	r3, .L109+4
 1312 000c 0122     		movs	r2, #1
 1313 000e 1A70     		strb	r2, [r3]
 311:Bsp/Bsp_SDMMC.c ****     }
 1314              		.loc 1 311 9 is_stmt 1 view .LVU363
 1315              	.LBB26:
 1316              	.LBI26:
 944:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 1317              		.loc 2 944 27 view .LVU364
 1318              	.LBB27:
 1319              		.loc 2 946 3 view .LVU365
 1320              		.syntax unified
 1321              	@ 946 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h" 1
 1322 0010 BFF34F8F 		dsb 0xF
 1323              	@ 0 "" 2
 1324              		.thumb
 1325              		.syntax unified
 1326              	.LBE27:
 1327              	.LBE26:
 1328              		.loc 1 313 1 is_stmt 0 view .LVU366
 1329 0014 F8E7     		b	.L106
 1330              	.L110:
 1331 0016 00BF     		.align	2
 1332              	.L109:
 1333 0018 00700052 		.word	1375760384
 1334 001c 00000000 		.word	.LANCHOR0
 1335              		.cfi_endproc
 1336              	.LFE154:
 1338              		.section	.text.HAL_SD_RxCpltCallback,"ax",%progbits
 1339              		.align	1
 1340              		.global	HAL_SD_RxCpltCallback
 1341              		.syntax unified
 1342              		.thumb
 1343              		.thumb_func
 1344              		.fpu fpv5-d16
 1346              	HAL_SD_RxCpltCallback:
 1347              	.LVL90:
 1348              	.LFB155:
 314:Bsp/Bsp_SDMMC.c **** 
 315:Bsp/Bsp_SDMMC.c **** void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
 316:Bsp/Bsp_SDMMC.c **** {
 1349              		.loc 1 316 1 is_stmt 1 view -0
 1350              		.cfi_startproc
 1351              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 52


 1352              		@ frame_needed = 0, uses_anonymous_args = 0
 1353              		@ link register save eliminated.
 317:Bsp/Bsp_SDMMC.c ****     if (hsd->Instance == SDMMC1)
 1354              		.loc 1 317 5 view .LVU368
 1355              		.loc 1 317 12 is_stmt 0 view .LVU369
 1356 0000 0268     		ldr	r2, [r0]
 1357              		.loc 1 317 8 view .LVU370
 1358 0002 054B     		ldr	r3, .L114
 1359 0004 9A42     		cmp	r2, r3
 1360 0006 00D0     		beq	.L113
 1361              	.L111:
 318:Bsp/Bsp_SDMMC.c ****     {
 319:Bsp/Bsp_SDMMC.c ****         SD_Rx_Cplt = true;
 320:Bsp/Bsp_SDMMC.c ****         __DSB();
 321:Bsp/Bsp_SDMMC.c ****     }
 322:Bsp/Bsp_SDMMC.c **** }
 1362              		.loc 1 322 1 view .LVU371
 1363 0008 7047     		bx	lr
 1364              	.L113:
 319:Bsp/Bsp_SDMMC.c ****         __DSB();
 1365              		.loc 1 319 9 is_stmt 1 view .LVU372
 319:Bsp/Bsp_SDMMC.c ****         __DSB();
 1366              		.loc 1 319 20 is_stmt 0 view .LVU373
 1367 000a 044B     		ldr	r3, .L114+4
 1368 000c 0122     		movs	r2, #1
 1369 000e 1A70     		strb	r2, [r3]
 320:Bsp/Bsp_SDMMC.c ****     }
 1370              		.loc 1 320 9 is_stmt 1 view .LVU374
 1371              	.LBB28:
 1372              	.LBI28:
 944:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 1373              		.loc 2 944 27 view .LVU375
 1374              	.LBB29:
 1375              		.loc 2 946 3 view .LVU376
 1376              		.syntax unified
 1377              	@ 946 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h" 1
 1378 0010 BFF34F8F 		dsb 0xF
 1379              	@ 0 "" 2
 1380              		.thumb
 1381              		.syntax unified
 1382              	.LBE29:
 1383              	.LBE28:
 1384              		.loc 1 322 1 is_stmt 0 view .LVU377
 1385 0014 F8E7     		b	.L111
 1386              	.L115:
 1387 0016 00BF     		.align	2
 1388              	.L114:
 1389 0018 00700052 		.word	1375760384
 1390 001c 00000000 		.word	.LANCHOR1
 1391              		.cfi_endproc
 1392              	.LFE155:
 1394              		.section	.text.HAL_SD_ErrorCallback,"ax",%progbits
 1395              		.align	1
 1396              		.global	HAL_SD_ErrorCallback
 1397              		.syntax unified
 1398              		.thumb
 1399              		.thumb_func
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 53


 1400              		.fpu fpv5-d16
 1402              	HAL_SD_ErrorCallback:
 1403              	.LVL91:
 1404              	.LFB156:
 323:Bsp/Bsp_SDMMC.c **** 
 324:Bsp/Bsp_SDMMC.c **** void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
 325:Bsp/Bsp_SDMMC.c **** {
 1405              		.loc 1 325 1 is_stmt 1 view -0
 1406              		.cfi_startproc
 1407              		@ args = 0, pretend = 0, frame = 8
 1408              		@ frame_needed = 0, uses_anonymous_args = 0
 1409              		.loc 1 325 1 is_stmt 0 view .LVU379
 1410 0000 00B5     		push	{lr}
 1411              	.LCFI23:
 1412              		.cfi_def_cfa_offset 4
 1413              		.cfi_offset 14, -4
 1414 0002 83B0     		sub	sp, sp, #12
 1415              	.LCFI24:
 1416              		.cfi_def_cfa_offset 16
 1417 0004 0190     		str	r0, [sp, #4]
 326:Bsp/Bsp_SDMMC.c ****     if (hsd->Instance == SDMMC1)
 1418              		.loc 1 326 5 is_stmt 1 view .LVU380
 1419              		.loc 1 326 12 is_stmt 0 view .LVU381
 1420 0006 0268     		ldr	r2, [r0]
 1421              		.loc 1 326 8 view .LVU382
 1422 0008 064B     		ldr	r3, .L120
 1423 000a 9A42     		cmp	r2, r3
 1424 000c 02D0     		beq	.L119
 1425              	.LVL92:
 1426              	.L116:
 327:Bsp/Bsp_SDMMC.c ****     {
 328:Bsp/Bsp_SDMMC.c ****         if (hsd->ErrorCode & HAL_SD_ERROR_TX_UNDERRUN)
 329:Bsp/Bsp_SDMMC.c ****         {
 330:Bsp/Bsp_SDMMC.c ****             HAL_SD_Abort(&hsd);
 331:Bsp/Bsp_SDMMC.c ****         }
 332:Bsp/Bsp_SDMMC.c ****     }
 333:Bsp/Bsp_SDMMC.c **** }
 1427              		.loc 1 333 1 view .LVU383
 1428 000e 03B0     		add	sp, sp, #12
 1429              	.LCFI25:
 1430              		.cfi_remember_state
 1431              		.cfi_def_cfa_offset 4
 1432              		@ sp needed
 1433 0010 5DF804FB 		ldr	pc, [sp], #4
 1434              	.LVL93:
 1435              	.L119:
 1436              	.LCFI26:
 1437              		.cfi_restore_state
 328:Bsp/Bsp_SDMMC.c ****         {
 1438              		.loc 1 328 9 is_stmt 1 view .LVU384
 328:Bsp/Bsp_SDMMC.c ****         {
 1439              		.loc 1 328 16 is_stmt 0 view .LVU385
 1440 0014 836B     		ldr	r3, [r0, #56]
 328:Bsp/Bsp_SDMMC.c ****         {
 1441              		.loc 1 328 12 view .LVU386
 1442 0016 13F0100F 		tst	r3, #16
 1443 001a F8D0     		beq	.L116
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 54


 330:Bsp/Bsp_SDMMC.c ****         }
 1444              		.loc 1 330 13 is_stmt 1 view .LVU387
 1445 001c 01A8     		add	r0, sp, #4
 1446              	.LVL94:
 330:Bsp/Bsp_SDMMC.c ****         }
 1447              		.loc 1 330 13 is_stmt 0 view .LVU388
 1448 001e FFF7FEFF 		bl	HAL_SD_Abort
 1449              	.LVL95:
 1450              		.loc 1 333 1 view .LVU389
 1451 0022 F4E7     		b	.L116
 1452              	.L121:
 1453              		.align	2
 1454              	.L120:
 1455 0024 00700052 		.word	1375760384
 1456              		.cfi_endproc
 1457              	.LFE156:
 1459              		.global	BspSDMMC
 1460              		.section	.bss.SD_Rx_Cplt,"aw",%nobits
 1461              		.set	.LANCHOR1,. + 0
 1464              	SD_Rx_Cplt:
 1465 0000 00       		.space	1
 1466              		.section	.bss.SD_Tx_Cplt,"aw",%nobits
 1467              		.set	.LANCHOR0,. + 0
 1470              	SD_Tx_Cplt:
 1471 0000 00       		.space	1
 1472              		.section	.data.BspSDMMC,"aw"
 1473              		.align	2
 1476              	BspSDMMC:
 1477 0000 00000000 		.word	BspSDMMC_Init
 1478 0004 00000000 		.word	BspSDMMC_Read
 1479 0008 00000000 		.word	BspSDMMC_Write
 1480 000c 00000000 		.word	BspSDMMC_Erase
 1481 0010 00000000 		.word	BspSDMMC_GetStatus
 1482 0014 00000000 		.word	BspSDMMC_GetInfo
 1483              		.text
 1484              	.Letext0:
 1485              		.file 3 "d:\\software\\zephyr_env_gcc\\gcc-arm-none-eabi-9-2019-q4-major-win32\\arm-none-eabi\\inc
 1486              		.file 4 "d:\\software\\zephyr_env_gcc\\gcc-arm-none-eabi-9-2019-q4-major-win32\\arm-none-eabi\\inc
 1487              		.file 5 "d:\\software\\zephyr_env_gcc\\gcc-arm-none-eabi-9-2019-q4-major-win32\\arm-none-eabi\\inc
 1488              		.file 6 "d:\\software\\zephyr_env_gcc\\gcc-arm-none-eabi-9-2019-q4-major-win32\\arm-none-eabi\\inc
 1489              		.file 7 "d:\\software\\zephyr_env_gcc\\gcc-arm-none-eabi-9-2019-q4-major-win32\\lib\\gcc\\arm-none
 1490              		.file 8 "d:\\software\\zephyr_env_gcc\\gcc-arm-none-eabi-9-2019-q4-major-win32\\arm-none-eabi\\inc
 1491              		.file 9 "HAL_Lib/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 1492              		.file 10 "HAL_Lib/CMSIS/Core/Include/core_cm7.h"
 1493              		.file 11 "HAL_Lib/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 1494              		.file 12 "d:\\software\\zephyr_env_gcc\\gcc-arm-none-eabi-9-2019-q4-major-win32\\arm-none-eabi\\in
 1495              		.file 13 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 1496              		.file 14 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc_ex.h"
 1497              		.file 15 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
 1498              		.file 16 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_mdma.h"
 1499              		.file 17 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 1500              		.file 18 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_sdmmc.h"
 1501              		.file 19 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h"
 1502              		.file 20 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 1503              		.file 21 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 1504              		.file 22 "Bsp/Bsp_SDMMC.h"
 1505              		.file 23 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_cortex.h"
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 55


 1506              		.file 24 "<built-in>"
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 56


DEFINED SYMBOLS
                            *ABS*:00000000 Bsp_SDMMC.c
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:17     .text.BspSDMMC_PinCLK_Enable:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:24     .text.BspSDMMC_PinCLK_Enable:00000000 BspSDMMC_PinCLK_Enable
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:279    .text.BspSDMMC_PinCLK_Enable:00000170 $d
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:293    .text.BspSDMMC_GetInfo:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:299    .text.BspSDMMC_GetInfo:00000000 BspSDMMC_GetInfo
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:360    .text.BspSDMMC_GetStatus:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:366    .text.BspSDMMC_GetStatus:00000000 BspSDMMC_GetStatus
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:411    .text.BspSDMMC_Erase:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:417    .text.BspSDMMC_Erase:00000000 BspSDMMC_Erase
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:457    .text.BspSDMMC_Write:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:463    .text.BspSDMMC_Write:00000000 BspSDMMC_Write
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:579    .text.BspSDMMC_Write:0000005c $d
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:584    .text.BspSDMMC_Read:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:590    .text.BspSDMMC_Read:00000000 BspSDMMC_Read
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:704    .text.BspSDMMC_Read:0000005c $d
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:709    .text.BspSDMMC_PortCLK_Init:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:715    .text.BspSDMMC_PortCLK_Init:00000000 BspSDMMC_PortCLK_Init
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:809    .text.BspSDMMC_PortCLK_Init:00000058 $d
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:815    .text.BspSDMMC_Pin_Init:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:821    .text.BspSDMMC_Pin_Init:00000000 BspSDMMC_Pin_Init
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:976    .text.BspSDMMC_Pin_Init:0000009c $d
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:981    .text.BspSDMMC_MDMA_Init:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:987    .text.BspSDMMC_MDMA_Init:00000000 BspSDMMC_MDMA_Init
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1117   .text.BspSDMMC_MDMA_Init:00000078 $d
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1123   .text.BspSDMMC_Init:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1129   .text.BspSDMMC_Init:00000000 BspSDMMC_Init
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1277   .text.BspSDMMC_Init:000000a0 $d
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1283   .text.HAL_SD_TxCpltCallback:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1290   .text.HAL_SD_TxCpltCallback:00000000 HAL_SD_TxCpltCallback
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1333   .text.HAL_SD_TxCpltCallback:00000018 $d
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1339   .text.HAL_SD_RxCpltCallback:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1346   .text.HAL_SD_RxCpltCallback:00000000 HAL_SD_RxCpltCallback
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1389   .text.HAL_SD_RxCpltCallback:00000018 $d
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1395   .text.HAL_SD_ErrorCallback:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1402   .text.HAL_SD_ErrorCallback:00000000 HAL_SD_ErrorCallback
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1455   .text.HAL_SD_ErrorCallback:00000024 $d
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1476   .data.BspSDMMC:00000000 BspSDMMC
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1464   .bss.SD_Rx_Cplt:00000000 SD_Rx_Cplt
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1465   .bss.SD_Rx_Cplt:00000000 $d
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1470   .bss.SD_Tx_Cplt:00000000 SD_Tx_Cplt
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1471   .bss.SD_Tx_Cplt:00000000 $d
C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s:1473   .data.BspSDMMC:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_SD_GetCardInfo
HAL_SD_GetCardState
HAL_SD_Erase
Kernel_EnterCritical
HAL_SD_WriteBlocks_DMA
Kernel_ExitCritical
HAL_SD_GetState
HAL_SD_ReadBlocks_DMA
HAL_RCCEx_PeriphCLKConfig
HAL_GPIO_Init
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccCnXzUZ.s 			page 57


HAL_MDMA_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_SD_Init
HAL_SD_Abort
