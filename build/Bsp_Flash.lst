ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"Bsp_Flash.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.BspFlash_DeInit,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	BspFlash_DeInit:
  26              	.LFB134:
  27              		.file 1 "HW_Lib/AT32F435/bsp/Bsp_Flash.c"
   1:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** #include "Bsp_Flash.h"
   2:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** #include "at32f435_437_flash.h"
   3:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
   4:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** /* internal vriable */
   5:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** uint8_t BspFlash_Cache_tmp[FLASH_SECTION_SIZE] = {0};
   6:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** uint8_t BspFlash_Rx_Cache_tmp[FLASH_SECTION_SIZE] = {0};
   7:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
   8:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** /* internal function */
   9:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static uint32_t BspFlash_Get_Section_Addr(uint32_t addr);
  10:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static uint32_t BspFlash_Get_Section_Size(uint8_t sector_id);
  11:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static bool BspFlash_NoneCheck_Write(uint32_t addr, uint8_t *p_data, uint32_t len);
  12:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
  13:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** /* external function */
  14:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static bool BspFlash_Init(void);
  15:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static void BspFlash_DeInit(void);
  16:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static bool BspFlash_Erase(uint32_t addr, uint32_t len);
  17:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static bool BspFlash_Read(uint32_t addr, uint8_t *p_data, uint32_t len);
  18:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static bool BspFlash_Write(uint32_t addr, uint8_t *p_data, uint32_t len);
  19:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
  20:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** BspFlash_TypeDef BspFlash = {
  21:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     .de_init = BspFlash_DeInit,
  22:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     .init = BspFlash_Init,
  23:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     .erase = BspFlash_Erase,
  24:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     .read = BspFlash_Read,
  25:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     .write = BspFlash_Write,
  26:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** };
  27:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
  28:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static bool BspFlash_Init(void)
  29:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** {
  30:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     memset(BspFlash_Cache_tmp, 0, FLASH_SECTION_SIZE);
  31:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     return true;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 2


  32:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
  33:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
  34:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static void BspFlash_DeInit(void)
  35:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** {
  28              		.loc 1 35 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  36:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
  33              		.loc 1 36 1 view .LVU1
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE134:
  38              		.section	.text.BspFlash_Read,"ax",%progbits
  39              		.align	1
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  44              	BspFlash_Read:
  45              	.LVL0:
  46              	.LFB136:
  37:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
  38:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static bool BspFlash_Erase(uint32_t addr, uint32_t len)
  39:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** {
  40:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     flash_status_type status;
  41:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t start_sec = 0;
  42:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t end_sec = 0;
  43:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint8_t erase_cnt = 1;
  44:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint16_t write_offset = 0;
  45:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint16_t write_len = 0;
  46:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
  47:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     if ((addr >= FLASH_BASE) && ((addr + len) < FLASH_BLOCK_END_ADDR))
  48:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
  49:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         start_sec = BspFlash_Get_Section_Addr(addr);
  50:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         end_sec = BspFlash_Get_Section_Addr(addr + len);
  51:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         erase_cnt += (end_sec - start_sec) / FLASH_SECTION_SIZE;
  52:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         if ((end_sec - start_sec) % FLASH_SECTION_SIZE)
  53:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             erase_cnt += 1;
  54:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         write_offset = addr - start_sec;
  55:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
  56:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         if (write_offset)
  57:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
  58:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             write_len = FLASH_SECTION_SIZE - write_offset;
  59:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if (!BspFlash_Read(end_sec, BspFlash_Cache_tmp, FLASH_SECTION_SIZE))
  60:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
  61:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         }
  62:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
  63:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         flash_unlock();
  64:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
  65:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         for (uint8_t i = 0; i < erase_cnt; i++)
  66:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
  67:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             /* wait for operation to be completed */
  68:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             status = flash_operation_wait_for(ERASE_TIMEOUT);
  69:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             
  70:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if ((status == FLASH_PROGRAM_ERROR) || (status == FLASH_EPP_ERROR))
  71:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 3


  72:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 flash_flag_clear(FLASH_PRGMERR_FLAG | FLASH_EPPERR_FLAG);
  73:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
  74:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             else if (status == FLASH_OPERATE_TIMEOUT)
  75:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
  76:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 flash_lock();
  77:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
  78:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
  79:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
  80:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             /* erase section first */
  81:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             status = flash_sector_erase(start_sec);
  82:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if(status != FLASH_OPERATE_DONE)
  83:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
  84:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 flash_lock();
  85:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
  86:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
  87:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
  88:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             start_sec = BspFlash_Get_Section_Addr(start_sec + FLASH_SECTION_SIZE);
  89:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         }
  90:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
  91:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         if (write_offset)
  92:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
  93:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if (!BspFlash_Write(end_sec + write_offset, BspFlash_Cache_tmp + write_offset, write_le
  94:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
  95:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 flash_lock();
  96:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
  97:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
  98:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         }
  99:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 100:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         flash_lock();
 101:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         return true;
 102:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     }
 103:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 104:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     return false;
 105:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 106:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 107:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static bool BspFlash_Read(uint32_t addr, uint8_t *p_data, uint32_t len)
 108:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** {
  47              		.loc 1 108 1 view -0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
 109:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     if ((addr >= FLASH_BASE) && ((addr + len) <= FLASH_BLOCK_END_ADDR) && p_data && len)
  52              		.loc 1 109 5 view .LVU3
  53              		.loc 1 109 8 is_stmt 0 view .LVU4
  54 0000 B0F1006F 		cmp	r0, #134217728
  55 0004 15D3     		bcc	.L6
  56              		.loc 1 109 40 discriminator 1 view .LVU5
  57 0006 00EB020C 		add	ip, r0, r2
  58              		.loc 1 109 30 discriminator 1 view .LVU6
  59 000a 0D4B     		ldr	r3, .L10
  60 000c 9C45     		cmp	ip, r3
  61 000e 12D8     		bhi	.L7
  62              		.loc 1 109 72 discriminator 2 view .LVU7
  63 0010 99B1     		cbz	r1, .L8
  64              		.loc 1 109 82 discriminator 3 view .LVU8
  65 0012 62B9     		cbnz	r2, .L9
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 4


 110:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 111:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         for (uint32_t i = 0; i < len; i++)
 112:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 113:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             p_data[i] = ((__IO uint8_t *)addr)[i];
 114:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             __DSB();
 115:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         }
 116:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 117:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         return true;
 118:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     }
 119:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 120:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     return false;
  66              		.loc 1 120 12 view .LVU9
  67 0014 0020     		movs	r0, #0
  68              	.LVL1:
  69              		.loc 1 120 12 view .LVU10
  70 0016 7047     		bx	lr
  71              	.LVL2:
  72              	.L5:
  73              	.LBB5:
 113:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             __DSB();
  74              		.loc 1 113 13 is_stmt 1 discriminator 3 view .LVU11
 113:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             __DSB();
  75              		.loc 1 113 47 is_stmt 0 discriminator 3 view .LVU12
  76 0018 13F800C0 		ldrb	ip, [r3, r0]	@ zero_extendqisi2
 113:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             __DSB();
  77              		.loc 1 113 23 discriminator 3 view .LVU13
  78 001c 01F803C0 		strb	ip, [r1, r3]
 114:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         }
  79              		.loc 1 114 13 is_stmt 1 discriminator 3 view .LVU14
  80              	.LBB6:
  81              	.LBI6:
  82              		.file 2 "HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h"
   1:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /******************************************************************************
   2:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * @version  V5.3.0
   5:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * @date     26. March 2020
   6:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  ******************************************************************************/
   7:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /*
   8:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * Copyright (c) 2009-2020 Arm Limited. All rights reserved.
   9:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  *
  10:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  *
  12:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  *
  16:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  *
  18:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * limitations under the License.
  23:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
  24:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
  25:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 5


  26:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
  28:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
  34:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef __has_builtin
  36:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
  38:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
  39:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __ASM
  41:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
  43:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __INLINE
  44:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __INLINE                               inline
  45:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
  46:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
  49:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
  52:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
  55:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __USED
  56:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
  58:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __WEAK
  59:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
  61:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __PACKED
  62:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
  64:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
  67:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
  70:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
  78:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 6


  83:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
  86:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
  94:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 102:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 110:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 113:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 116:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 119:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 120:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 122:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 124:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 125:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****            in the used linker script.
 129:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 130:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 131:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 133:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 135:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   typedef struct {
 136:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     uint32_t const* src;
 137:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     uint32_t* dest;
 138:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     uint32_t  wlen;
 139:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   } __copy_table_t;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 7


 140:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 141:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   typedef struct {
 142:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     uint32_t* dest;
 143:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     uint32_t  wlen;
 144:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   } __zero_table_t;
 145:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 146:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 151:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     }
 155:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   }
 156:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 157:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     }
 161:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   }
 162:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 163:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   _start();
 164:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 165:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 166:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 168:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 169:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 172:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 173:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 176:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 177:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 180:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 181:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 184:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 185:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   @{
 189:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 190:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 191:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 192:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 196:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 8


 197:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 198:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 200:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 201:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 202:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 203:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 207:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 209:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 211:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 212:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 213:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 214:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Control Register
 215:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               Control Register value
 217:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 218:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 220:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 221:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 222:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 224:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 225:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 226:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 227:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 229:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 233:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 235:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 236:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 237:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 239:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 240:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 241:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 242:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 243:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 244:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Control Register
 245:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 248:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 250:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 252:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 253:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 9


 254:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 256:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 260:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 262:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 264:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 265:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 266:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 267:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 268:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               IPSR Register value
 271:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 272:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 274:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 275:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 276:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 278:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 279:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 280:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 281:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 282:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get APSR Register
 283:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               APSR Register value
 285:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 286:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 288:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 289:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 290:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 292:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 293:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 294:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 295:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 296:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               xPSR Register value
 299:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 300:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 302:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 303:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 304:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 306:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 307:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 308:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 309:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 310:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 10


 311:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               PSP Register value
 313:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 314:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 316:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 317:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 318:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 320:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 321:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 322:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 323:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 325:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               PSP Register value
 328:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 329:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 331:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 332:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 333:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 335:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 336:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 337:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 338:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 339:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 340:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 344:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 346:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 348:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 349:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 350:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 352:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 356:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 358:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 360:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 361:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 362:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 363:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 364:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               MSP Register value
 367:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 11


 368:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 370:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 371:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 372:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 374:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 375:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 376:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 377:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 379:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               MSP Register value
 382:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 383:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 385:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 386:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 387:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 389:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 390:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 391:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 392:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 393:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 394:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 398:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 400:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 402:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 403:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 404:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 406:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 410:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 412:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 414:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 415:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 416:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 417:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 419:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               SP Register value
 422:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 423:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 12


 425:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 426:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 427:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 429:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 430:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 431:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 432:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 433:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 437:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 439:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 441:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 442:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 443:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 444:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 445:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               Priority Mask value
 448:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 449:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 451:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 452:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 453:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 454:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 455:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 456:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 457:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 458:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 460:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               Priority Mask value
 463:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 464:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 466:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 467:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 468:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 469:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 470:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 471:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 472:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 473:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 474:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 475:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 479:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 481:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 13


 482:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 483:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 484:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 485:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 487:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 491:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 493:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 495:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 496:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 497:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 498:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 502:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Enable FIQ
 503:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 506:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 508:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 510:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 511:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 512:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 513:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Disable FIQ
 514:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 517:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 519:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 521:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 522:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 523:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 524:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Base Priority
 525:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               Base Priority register value
 527:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 528:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 530:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 531:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 532:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 534:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 535:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 536:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 537:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 14


 539:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               Base Priority register value
 542:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 543:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 545:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 546:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 547:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 549:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 550:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 551:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 552:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 553:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 554:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Base Priority
 555:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 558:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 560:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 562:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 563:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 564:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 566:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 570:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 572:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 574:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 575:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 576:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 577:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 578:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 583:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 585:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 587:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 588:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 589:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 590:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               Fault Mask register value
 593:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 594:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 15


 596:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 597:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 598:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 600:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 601:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 602:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 603:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 605:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               Fault Mask register value
 608:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 609:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 611:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 612:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 613:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 615:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 616:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 617:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 618:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 619:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 620:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 624:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 626:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 628:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 629:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 630:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 632:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 636:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 638:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 640:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 641:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 642:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 646:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 647:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 650:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 651:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 16


 653:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   mode.
 655:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 656:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 659:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 661:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return 0U;
 665:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #else
 666:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 667:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return result;
 669:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 670:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 671:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 672:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 674:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 678:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 681:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 683:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return 0U;
 686:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #else
 687:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 688:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return result;
 690:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 691:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 692:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 693:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 694:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 695:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 696:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   mode.
 700:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 701:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 704:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 706:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 17


 710:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #else
 711:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 713:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 714:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 715:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 716:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 718:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 722:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 725:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 727:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #else
 731:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 733:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 734:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 735:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 736:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 737:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 738:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   mode.
 742:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 743:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 746:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 748:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return 0U;
 752:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #else
 753:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 754:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return result;
 756:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 757:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 758:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 759:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 760:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 762:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 766:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 18


 767:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 769:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 771:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return 0U;
 774:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #else
 775:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 776:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return result;
 778:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 779:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 780:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 781:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 782:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 783:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 784:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   mode.
 788:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 789:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 792:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 794:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #else
 799:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 801:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 802:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 803:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 804:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 806:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 810:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 813:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 815:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #else
 819:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 821:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 822:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 823:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 19


 824:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 827:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 828:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 829:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Get FPSCR
 830:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 833:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 835:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr)
 838:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #else
 843:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   uint32_t result;
 844:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 845:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(result);
 847:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 848:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #else
 849:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   return(0U);
 850:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 851:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 852:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 853:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 854:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 855:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Set FPSCR
 856:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 859:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 861:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #else
 869:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 871:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #else
 872:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   (void)fpscr;
 873:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 874:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 875:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 876:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 877:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 879:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 880:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 20


 881:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   Access to dedicated instructions
 883:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   @{
 884:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** */
 885:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 886:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #else
 894:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #endif
 898:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 899:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 900:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   No Operation
 901:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 903:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 905:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 906:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 909:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 910:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 911:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 912:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 913:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Wait For Event
 914:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 917:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 918:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 919:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 920:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 921:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Send Event
 922:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 924:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 926:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 927:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 928:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****            after the instruction has been completed.
 932:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 933:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 935:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** }
 937:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 21


 938:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** 
 939:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** /**
 940:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****  */
 944:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
  83              		.loc 2 944 27 discriminator 3 view .LVU15
  84              	.LBB7:
 945:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h **** {
 946:HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  85              		.loc 2 946 3 discriminator 3 view .LVU16
  86              		.syntax unified
  87              	@ 946 "HW_Lib/AT32F435/cmsis/cm4/core_support/cmsis_gcc.h" 1
  88 0020 BFF34F8F 		dsb 0xF
  89              	@ 0 "" 2
  90              		.thumb
  91              		.syntax unified
  92              	.LBE7:
  93              	.LBE6:
 111:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
  94              		.loc 1 111 39 discriminator 3 view .LVU17
 111:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
  95              		.loc 1 111 40 is_stmt 0 discriminator 3 view .LVU18
  96 0024 0133     		adds	r3, r3, #1
  97              	.LVL3:
  98              	.L4:
 111:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
  99              		.loc 1 111 30 is_stmt 1 discriminator 1 view .LVU19
 111:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 100              		.loc 1 111 9 is_stmt 0 discriminator 1 view .LVU20
 101 0026 9342     		cmp	r3, r2
 102 0028 F6D3     		bcc	.L5
 103              	.LBE5:
 117:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     }
 104              		.loc 1 117 16 view .LVU21
 105 002a 0120     		movs	r0, #1
 106              	.LVL4:
 107              	.LBB8:
 117:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     }
 108              		.loc 1 117 16 view .LVU22
 109 002c 7047     		bx	lr
 110              	.LVL5:
 111              	.L9:
 111:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 112              		.loc 1 111 23 view .LVU23
 113 002e 0023     		movs	r3, #0
 114 0030 F9E7     		b	.L4
 115              	.L6:
 116              	.LBE8:
 117              		.loc 1 120 12 view .LVU24
 118 0032 0020     		movs	r0, #0
 119              	.LVL6:
 120              		.loc 1 120 12 view .LVU25
 121 0034 7047     		bx	lr
 122              	.LVL7:
 123              	.L7:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 22


 124              		.loc 1 120 12 view .LVU26
 125 0036 0020     		movs	r0, #0
 126              	.LVL8:
 127              		.loc 1 120 12 view .LVU27
 128 0038 7047     		bx	lr
 129              	.LVL9:
 130              	.L8:
 131              		.loc 1 120 12 view .LVU28
 132 003a 0020     		movs	r0, #0
 133              	.LVL10:
 121:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 134              		.loc 1 121 1 view .LVU29
 135 003c 7047     		bx	lr
 136              	.L11:
 137 003e 00BF     		.align	2
 138              	.L10:
 139 0040 00A00F08 		.word	135241728
 140              		.cfi_endproc
 141              	.LFE136:
 143              		.section	.text.BspFlash_Get_Section_Addr,"ax",%progbits
 144              		.align	1
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 149              	BspFlash_Get_Section_Addr:
 150              	.LVL11:
 151              	.LFB139:
 122:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 123:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static bool BspFlash_Write(uint32_t addr, uint8_t *p_data, uint32_t len)
 124:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** {
 125:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t start_sec = 0;
 126:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     volatile uint32_t end_sec = 0;
 127:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t write_cnt = 1;
 128:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t write_offset = 0;
 129:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t write_len = FLASH_SECTION_SIZE;
 130:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     flash_status_type status = FLASH_OPERATE_DONE;
 131:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 132:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     if ((addr >= FLASH_BASE) && ((addr + len) <= FLASH_BLOCK_END_ADDR) && p_data && len)
 133:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 134:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         flash_unlock();
 135:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 136:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         start_sec = BspFlash_Get_Section_Addr(addr);
 137:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         end_sec = BspFlash_Get_Section_Addr(addr + len);
 138:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 139:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         write_cnt += (end_sec - start_sec) / FLASH_SECTION_SIZE;
 140:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         if ((end_sec - start_sec) % FLASH_SECTION_SIZE)
 141:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             write_cnt ++;
 142:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 143:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         /* read data from section first */
 144:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         if (!BspFlash_Read(start_sec, BspFlash_Cache_tmp, FLASH_SECTION_SIZE))
 145:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             return false;
 146:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****  
 147:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         if (addr - start_sec)
 148:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             write_offset = addr - start_sec;
 149:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 150:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         for(uint32_t i = 0; i < write_cnt; i++)
 151:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 23


 152:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             memcpy(&BspFlash_Cache_tmp[write_offset], p_data, write_len);
 153:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             
 154:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             /* wait for operation to be completed */
 155:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             status = flash_operation_wait_for(ERASE_TIMEOUT);
 156:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             
 157:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if((status == FLASH_PROGRAM_ERROR) || (status == FLASH_EPP_ERROR))
 158:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 159:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 flash_flag_clear(FLASH_PRGMERR_FLAG | FLASH_EPPERR_FLAG);
 160:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 161:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             else if(status == FLASH_OPERATE_TIMEOUT)
 162:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 163:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 flash_lock();
 164:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
 165:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 166:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 167:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             /* erase section first */
 168:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             status = flash_sector_erase(start_sec);
 169:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if(status != FLASH_OPERATE_DONE)
 170:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 171:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 flash_lock();
 172:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
 173:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 174:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 175:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             /* write data */
 176:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if (!BspFlash_NoneCheck_Write(start_sec, BspFlash_Cache_tmp, write_len))
 177:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 178:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 flash_lock();
 179:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
 180:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 181:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             else
 182:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 183:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 BspFlash_Read(start_sec, BspFlash_Rx_Cache_tmp, write_len);
 184:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 185:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 if (memcmp(BspFlash_Rx_Cache_tmp, BspFlash_Cache_tmp, write_len) != 0)
 186:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 {
 187:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                     flash_lock();
 188:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                     return false;
 189:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 }
 190:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 191:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 192:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if (len <= write_len)
 193:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 break;
 194:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 195:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             /* update section addr */
 196:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             start_sec = BspFlash_Get_Section_Addr(start_sec + write_len);
 197:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 198:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             write_offset = 0;
 199:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             len -= write_len;
 200:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             p_data += write_len;
 201:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 202:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if(len <= FLASH_SECTION_SIZE)
 203:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 204:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 write_len = len;
 205:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 206:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             else
 207:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 write_len = FLASH_SECTION_SIZE;
 208:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 24


 209:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 210:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         flash_lock();
 211:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         return true;
 212:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     }
 213:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 214:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     return false;
 215:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 216:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 217:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static bool BspFlash_NoneCheck_Write(uint32_t addr, uint8_t *p_data, uint32_t len)
 218:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** {
 219:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     flash_status_type status = FLASH_OPERATE_BUSY;
 220:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 221:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     if ((addr >= FLASH_BASE) && ((addr + len) <= FLASH_BLOCK_END_ADDR) && p_data && len)
 222:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 223:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         for(uint32_t i = 0; i < len; i ++)
 224:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 225:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             status = flash_byte_program(addr, p_data[i]);
 226:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             while (status != FLASH_OPERATE_DONE)
 227:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 228:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 status = flash_operation_status_get();
 229:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 230:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             
 231:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             addr ++;
 232:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         }
 233:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 234:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         return true;
 235:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     }
 236:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 237:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     return false;
 238:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 239:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 240:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** static uint32_t BspFlash_Get_Section_Addr(uint32_t addr)
 241:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** {
 152              		.loc 1 241 1 is_stmt 1 view -0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 242:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     if ((addr < FLASH_BASE) || (addr > FLASH_BLOCK_END_ADDR))
 157              		.loc 1 242 5 view .LVU31
 158              		.loc 1 242 29 is_stmt 0 view .LVU32
 159 0000 00F17843 		add	r3, r0, #-134217728
 160              		.loc 1 242 8 view .LVU33
 161 0004 B3F57A2F 		cmp	r3, #1024000
 162 0008 04D8     		bhi	.L14
 243:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         return 0;
 244:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 245:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     return (addr / FLASH_SECTION_SIZE) * FLASH_SECTION_SIZE;
 163              		.loc 1 245 5 is_stmt 1 view .LVU34
 164              		.loc 1 245 40 is_stmt 0 view .LVU35
 165 000a 20F4FF60 		bic	r0, r0, #2040
 166              	.LVL12:
 167              		.loc 1 245 40 view .LVU36
 168 000e 20F00700 		bic	r0, r0, #7
 169 0012 7047     		bx	lr
 170              	.LVL13:
 171              	.L14:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 25


 243:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         return 0;
 172              		.loc 1 243 16 view .LVU37
 173 0014 0020     		movs	r0, #0
 174              	.LVL14:
 246:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 175              		.loc 1 246 1 view .LVU38
 176 0016 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE139:
 180              		.section	.text.BspFlash_NoneCheck_Write,"ax",%progbits
 181              		.align	1
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 186              	BspFlash_NoneCheck_Write:
 187              	.LVL15:
 188              	.LFB138:
 218:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     flash_status_type status = FLASH_OPERATE_BUSY;
 189              		.loc 1 218 1 is_stmt 1 view -0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 219:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 193              		.loc 1 219 5 view .LVU40
 221:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 194              		.loc 1 221 5 view .LVU41
 221:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 195              		.loc 1 221 8 is_stmt 0 view .LVU42
 196 0000 B0F1006F 		cmp	r0, #134217728
 197 0004 1CD3     		bcc	.L21
 218:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     flash_status_type status = FLASH_OPERATE_BUSY;
 198              		.loc 1 218 1 discriminator 1 view .LVU43
 199 0006 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 200              	.LCFI0:
 201              		.cfi_def_cfa_offset 24
 202              		.cfi_offset 3, -24
 203              		.cfi_offset 4, -20
 204              		.cfi_offset 5, -16
 205              		.cfi_offset 6, -12
 206              		.cfi_offset 7, -8
 207              		.cfi_offset 14, -4
 208 0008 0446     		mov	r4, r0
 209 000a 0F46     		mov	r7, r1
 210 000c 1546     		mov	r5, r2
 221:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 211              		.loc 1 221 40 discriminator 1 view .LVU44
 212 000e 8218     		adds	r2, r0, r2
 213              	.LVL16:
 221:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 214              		.loc 1 221 30 discriminator 1 view .LVU45
 215 0010 0E4B     		ldr	r3, .L30
 216 0012 9A42     		cmp	r2, r3
 217 0014 16D8     		bhi	.L22
 221:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 218              		.loc 1 221 72 discriminator 2 view .LVU46
 219 0016 B9B1     		cbz	r1, .L23
 221:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 26


 220              		.loc 1 221 82 discriminator 3 view .LVU47
 221 0018 75B9     		cbnz	r5, .L24
 237:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 222              		.loc 1 237 12 view .LVU48
 223 001a 0020     		movs	r0, #0
 224              	.LVL17:
 237:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 225              		.loc 1 237 12 view .LVU49
 226 001c 13E0     		b	.L16
 227              	.LVL18:
 228              	.L19:
 229              	.LBB9:
 228:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 230              		.loc 1 228 17 is_stmt 1 view .LVU50
 228:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 231              		.loc 1 228 26 is_stmt 0 view .LVU51
 232 001e FFF7FEFF 		bl	flash_operation_status_get
 233              	.LVL19:
 234              	.L18:
 226:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 235              		.loc 1 226 19 is_stmt 1 view .LVU52
 236 0022 0328     		cmp	r0, #3
 237 0024 FBD1     		bne	.L19
 231:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         }
 238              		.loc 1 231 13 discriminator 2 view .LVU53
 231:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         }
 239              		.loc 1 231 18 is_stmt 0 discriminator 2 view .LVU54
 240 0026 0134     		adds	r4, r4, #1
 241              	.LVL20:
 223:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 242              		.loc 1 223 38 is_stmt 1 discriminator 2 view .LVU55
 223:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 243              		.loc 1 223 40 is_stmt 0 discriminator 2 view .LVU56
 244 0028 0136     		adds	r6, r6, #1
 245              	.LVL21:
 246              	.L17:
 223:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 247              		.loc 1 223 29 is_stmt 1 discriminator 1 view .LVU57
 223:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 248              		.loc 1 223 9 is_stmt 0 discriminator 1 view .LVU58
 249 002a AE42     		cmp	r6, r5
 250 002c 06D2     		bcs	.L29
 225:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             while (status != FLASH_OPERATE_DONE)
 251              		.loc 1 225 13 is_stmt 1 view .LVU59
 225:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             while (status != FLASH_OPERATE_DONE)
 252              		.loc 1 225 22 is_stmt 0 view .LVU60
 253 002e B95D     		ldrb	r1, [r7, r6]	@ zero_extendqisi2
 254 0030 2046     		mov	r0, r4
 255 0032 FFF7FEFF 		bl	flash_byte_program
 256              	.LVL22:
 226:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 257              		.loc 1 226 13 is_stmt 1 view .LVU61
 226:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 258              		.loc 1 226 19 is_stmt 0 view .LVU62
 259 0036 F4E7     		b	.L18
 260              	.LVL23:
 261              	.L24:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 27


 223:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 262              		.loc 1 223 22 view .LVU63
 263 0038 0026     		movs	r6, #0
 264 003a F6E7     		b	.L17
 265              	.LVL24:
 266              	.L29:
 223:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 267              		.loc 1 223 22 view .LVU64
 268              	.LBE9:
 234:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     }
 269              		.loc 1 234 16 view .LVU65
 270 003c 0120     		movs	r0, #1
 271              	.LBB10:
 272 003e 02E0     		b	.L16
 273              	.LVL25:
 274              	.L21:
 275              	.LCFI1:
 276              		.cfi_def_cfa_offset 0
 277              		.cfi_restore 3
 278              		.cfi_restore 4
 279              		.cfi_restore 5
 280              		.cfi_restore 6
 281              		.cfi_restore 7
 282              		.cfi_restore 14
 234:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     }
 283              		.loc 1 234 16 view .LVU66
 284              	.LBE10:
 237:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 285              		.loc 1 237 12 view .LVU67
 286 0040 0020     		movs	r0, #0
 287              	.LVL26:
 238:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 288              		.loc 1 238 1 view .LVU68
 289 0042 7047     		bx	lr
 290              	.LVL27:
 291              	.L22:
 292              	.LCFI2:
 293              		.cfi_def_cfa_offset 24
 294              		.cfi_offset 3, -24
 295              		.cfi_offset 4, -20
 296              		.cfi_offset 5, -16
 297              		.cfi_offset 6, -12
 298              		.cfi_offset 7, -8
 299              		.cfi_offset 14, -4
 237:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 300              		.loc 1 237 12 view .LVU69
 301 0044 0020     		movs	r0, #0
 302              	.LVL28:
 303              	.L16:
 238:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 304              		.loc 1 238 1 view .LVU70
 305 0046 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 306              	.LVL29:
 307              	.L23:
 237:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 308              		.loc 1 237 12 view .LVU71
 309 0048 0020     		movs	r0, #0
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 28


 310              	.LVL30:
 237:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 311              		.loc 1 237 12 view .LVU72
 312 004a FCE7     		b	.L16
 313              	.L31:
 314              		.align	2
 315              	.L30:
 316 004c 00A00F08 		.word	135241728
 317              		.cfi_endproc
 318              	.LFE138:
 320              		.section	.text.BspFlash_Write,"ax",%progbits
 321              		.align	1
 322              		.syntax unified
 323              		.thumb
 324              		.thumb_func
 326              	BspFlash_Write:
 327              	.LVL31:
 328              	.LFB137:
 124:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t start_sec = 0;
 329              		.loc 1 124 1 is_stmt 1 view -0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 8
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 124:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t start_sec = 0;
 333              		.loc 1 124 1 is_stmt 0 view .LVU74
 334 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 335              	.LCFI3:
 336              		.cfi_def_cfa_offset 36
 337              		.cfi_offset 4, -36
 338              		.cfi_offset 5, -32
 339              		.cfi_offset 6, -28
 340              		.cfi_offset 7, -24
 341              		.cfi_offset 8, -20
 342              		.cfi_offset 9, -16
 343              		.cfi_offset 10, -12
 344              		.cfi_offset 11, -8
 345              		.cfi_offset 14, -4
 346 0004 83B0     		sub	sp, sp, #12
 347              	.LCFI4:
 348              		.cfi_def_cfa_offset 48
 125:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     volatile uint32_t end_sec = 0;
 349              		.loc 1 125 5 is_stmt 1 view .LVU75
 350              	.LVL32:
 126:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t write_cnt = 1;
 351              		.loc 1 126 5 view .LVU76
 126:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t write_cnt = 1;
 352              		.loc 1 126 23 is_stmt 0 view .LVU77
 353 0006 0023     		movs	r3, #0
 354 0008 0193     		str	r3, [sp, #4]
 127:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t write_offset = 0;
 355              		.loc 1 127 5 is_stmt 1 view .LVU78
 356              	.LVL33:
 128:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t write_len = FLASH_SECTION_SIZE;
 357              		.loc 1 128 5 view .LVU79
 129:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     flash_status_type status = FLASH_OPERATE_DONE;
 358              		.loc 1 129 5 view .LVU80
 130:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 29


 359              		.loc 1 130 5 view .LVU81
 132:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 360              		.loc 1 132 5 view .LVU82
 132:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 361              		.loc 1 132 8 is_stmt 0 view .LVU83
 362 000a B0F1006F 		cmp	r0, #134217728
 363 000e C0F09480 		bcc	.L45
 364 0012 0446     		mov	r4, r0
 365 0014 0E46     		mov	r6, r1
 366 0016 1546     		mov	r5, r2
 132:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 367              		.loc 1 132 40 discriminator 1 view .LVU84
 368 0018 8718     		adds	r7, r0, r2
 132:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 369              		.loc 1 132 30 discriminator 1 view .LVU85
 370 001a 4E4B     		ldr	r3, .L58
 371 001c 9F42     		cmp	r7, r3
 372 001e 00F29280 		bhi	.L46
 132:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 373              		.loc 1 132 72 discriminator 2 view .LVU86
 374 0022 0029     		cmp	r1, #0
 375 0024 00F09280 		beq	.L47
 132:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 376              		.loc 1 132 82 discriminator 3 view .LVU87
 377 0028 12B9     		cbnz	r2, .L52
 214:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 378              		.loc 1 214 12 view .LVU88
 379 002a 4FF00009 		mov	r9, #0
 380 002e 86E0     		b	.L33
 381              	.L52:
 134:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 382              		.loc 1 134 9 is_stmt 1 view .LVU89
 383 0030 FFF7FEFF 		bl	flash_unlock
 384              	.LVL34:
 136:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         end_sec = BspFlash_Get_Section_Addr(addr + len);
 385              		.loc 1 136 9 view .LVU90
 136:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         end_sec = BspFlash_Get_Section_Addr(addr + len);
 386              		.loc 1 136 21 is_stmt 0 view .LVU91
 387 0034 2046     		mov	r0, r4
 388 0036 FFF7FEFF 		bl	BspFlash_Get_Section_Addr
 389              	.LVL35:
 390 003a 8046     		mov	r8, r0
 391              	.LVL36:
 137:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 392              		.loc 1 137 9 is_stmt 1 view .LVU92
 137:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 393              		.loc 1 137 19 is_stmt 0 view .LVU93
 394 003c 3846     		mov	r0, r7
 395              	.LVL37:
 137:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 396              		.loc 1 137 19 view .LVU94
 397 003e FFF7FEFF 		bl	BspFlash_Get_Section_Addr
 398              	.LVL38:
 137:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 399              		.loc 1 137 17 view .LVU95
 400 0042 0190     		str	r0, [sp, #4]
 139:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         if ((end_sec - start_sec) % FLASH_SECTION_SIZE)
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 30


 401              		.loc 1 139 9 is_stmt 1 view .LVU96
 139:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         if ((end_sec - start_sec) % FLASH_SECTION_SIZE)
 402              		.loc 1 139 31 is_stmt 0 view .LVU97
 403 0044 019B     		ldr	r3, [sp, #4]
 404 0046 A3EB0803 		sub	r3, r3, r8
 139:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         if ((end_sec - start_sec) % FLASH_SECTION_SIZE)
 405              		.loc 1 139 44 view .LVU98
 406 004a DB0A     		lsrs	r3, r3, #11
 139:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         if ((end_sec - start_sec) % FLASH_SECTION_SIZE)
 407              		.loc 1 139 19 view .LVU99
 408 004c 03F1010A 		add	r10, r3, #1
 409              	.LVL39:
 140:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             write_cnt ++;
 410              		.loc 1 140 9 is_stmt 1 view .LVU100
 140:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             write_cnt ++;
 411              		.loc 1 140 22 is_stmt 0 view .LVU101
 412 0050 019A     		ldr	r2, [sp, #4]
 413 0052 A2EB0802 		sub	r2, r2, r8
 140:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             write_cnt ++;
 414              		.loc 1 140 35 view .LVU102
 415 0056 C2F30A02 		ubfx	r2, r2, #0, #11
 140:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             write_cnt ++;
 416              		.loc 1 140 12 view .LVU103
 417 005a 0AB1     		cbz	r2, .L34
 141:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 418              		.loc 1 141 13 is_stmt 1 view .LVU104
 141:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 419              		.loc 1 141 23 is_stmt 0 view .LVU105
 420 005c 03F1020A 		add	r10, r3, #2
 421              	.LVL40:
 422              	.L34:
 144:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             return false;
 423              		.loc 1 144 9 is_stmt 1 view .LVU106
 144:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             return false;
 424              		.loc 1 144 14 is_stmt 0 view .LVU107
 425 0060 4FF40062 		mov	r2, #2048
 426 0064 3C49     		ldr	r1, .L58+4
 427 0066 4046     		mov	r0, r8
 428 0068 FFF7FEFF 		bl	BspFlash_Read
 429              	.LVL41:
 144:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             return false;
 430              		.loc 1 144 12 view .LVU108
 431 006c 8146     		mov	r9, r0
 432 006e 0028     		cmp	r0, #0
 433 0070 65D0     		beq	.L33
 147:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             write_offset = addr - start_sec;
 434              		.loc 1 147 9 is_stmt 1 view .LVU109
 147:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             write_offset = addr - start_sec;
 435              		.loc 1 147 12 is_stmt 0 view .LVU110
 436 0072 4445     		cmp	r4, r8
 437 0074 5CD0     		beq	.L49
 148:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 438              		.loc 1 148 13 is_stmt 1 view .LVU111
 148:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 439              		.loc 1 148 26 is_stmt 0 view .LVU112
 440 0076 A4EB0804 		sub	r4, r4, r8
 441              	.LVL42:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 31


 442              	.L35:
 128:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t write_len = FLASH_SECTION_SIZE;
 443              		.loc 1 128 14 discriminator 1 view .LVU113
 444 007a 4FF0000B 		mov	fp, #0
 445 007e 4FF40067 		mov	r7, #2048
 446 0082 1BE0     		b	.L43
 447              	.LVL43:
 448              	.L53:
 449              	.LBB11:
 159:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 450              		.loc 1 159 17 is_stmt 1 view .LVU114
 451 0084 1420     		movs	r0, #20
 452              	.LVL44:
 159:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 453              		.loc 1 159 17 is_stmt 0 view .LVU115
 454 0086 FFF7FEFF 		bl	flash_flag_clear
 455              	.LVL45:
 456 008a 29E0     		b	.L37
 457              	.LVL46:
 458              	.L54:
 163:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
 459              		.loc 1 163 17 is_stmt 1 view .LVU116
 460 008c FFF7FEFF 		bl	flash_lock
 461              	.LVL47:
 164:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 462              		.loc 1 164 17 view .LVU117
 164:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 463              		.loc 1 164 24 is_stmt 0 view .LVU118
 464 0090 4FF00009 		mov	r9, #0
 465 0094 53E0     		b	.L33
 466              	.LVL48:
 467              	.L55:
 171:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
 468              		.loc 1 171 17 is_stmt 1 view .LVU119
 469 0096 FFF7FEFF 		bl	flash_lock
 470              	.LVL49:
 172:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 471              		.loc 1 172 17 view .LVU120
 172:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 472              		.loc 1 172 24 is_stmt 0 view .LVU121
 473 009a 4FF00009 		mov	r9, #0
 474 009e 4EE0     		b	.L33
 475              	.LVL50:
 476              	.L56:
 178:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
 477              		.loc 1 178 17 is_stmt 1 view .LVU122
 478 00a0 FFF7FEFF 		bl	flash_lock
 479              	.LVL51:
 179:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 480              		.loc 1 179 17 view .LVU123
 179:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 481              		.loc 1 179 24 is_stmt 0 view .LVU124
 482 00a4 A146     		mov	r9, r4
 483 00a6 4AE0     		b	.L33
 484              	.L57:
 187:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                     return false;
 485              		.loc 1 187 21 is_stmt 1 view .LVU125
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 32


 486 00a8 FFF7FEFF 		bl	flash_lock
 487              	.LVL52:
 188:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 }
 488              		.loc 1 188 21 view .LVU126
 188:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 }
 489              		.loc 1 188 28 is_stmt 0 view .LVU127
 490 00ac 4FF00009 		mov	r9, #0
 491 00b0 45E0     		b	.L33
 492              	.LVL53:
 493              	.L50:
 207:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         }
 494              		.loc 1 207 27 view .LVU128
 495 00b2 4FF40067 		mov	r7, #2048
 496              	.LVL54:
 497              	.L42:
 150:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 498              		.loc 1 150 44 is_stmt 1 discriminator 2 view .LVU129
 150:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 499              		.loc 1 150 45 is_stmt 0 discriminator 2 view .LVU130
 500 00b6 0BF1010B 		add	fp, fp, #1
 501              	.LVL55:
 198:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             len -= write_len;
 502              		.loc 1 198 26 discriminator 2 view .LVU131
 503 00ba 0024     		movs	r4, #0
 504              	.LVL56:
 505              	.L43:
 150:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 506              		.loc 1 150 29 is_stmt 1 discriminator 1 view .LVU132
 150:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 507              		.loc 1 150 9 is_stmt 0 discriminator 1 view .LVU133
 508 00bc DA45     		cmp	r10, fp
 509 00be 39D9     		bls	.L41
 152:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             
 510              		.loc 1 152 13 is_stmt 1 view .LVU134
 511 00c0 3A46     		mov	r2, r7
 512 00c2 3146     		mov	r1, r6
 513 00c4 2448     		ldr	r0, .L58+4
 514 00c6 2044     		add	r0, r0, r4
 515 00c8 FFF7FEFF 		bl	memcpy
 516              	.LVL57:
 155:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             
 517              		.loc 1 155 13 view .LVU135
 155:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             
 518              		.loc 1 155 22 is_stmt 0 view .LVU136
 519 00cc 4FF00040 		mov	r0, #-2147483648
 520 00d0 FFF7FEFF 		bl	flash_operation_wait_for
 521              	.LVL58:
 157:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 522              		.loc 1 157 13 is_stmt 1 view .LVU137
 157:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 523              		.loc 1 157 48 is_stmt 0 view .LVU138
 524 00d4 431E     		subs	r3, r0, #1
 525 00d6 DBB2     		uxtb	r3, r3
 157:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 526              		.loc 1 157 15 view .LVU139
 527 00d8 012B     		cmp	r3, #1
 528 00da D3D9     		bls	.L53
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 33


 161:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 529              		.loc 1 161 18 is_stmt 1 view .LVU140
 161:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 530              		.loc 1 161 20 is_stmt 0 view .LVU141
 531 00dc 0428     		cmp	r0, #4
 532 00de D5D0     		beq	.L54
 533              	.LVL59:
 534              	.L37:
 168:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if(status != FLASH_OPERATE_DONE)
 535              		.loc 1 168 13 is_stmt 1 view .LVU142
 168:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if(status != FLASH_OPERATE_DONE)
 536              		.loc 1 168 22 is_stmt 0 view .LVU143
 537 00e0 4046     		mov	r0, r8
 538 00e2 FFF7FEFF 		bl	flash_sector_erase
 539              	.LVL60:
 169:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 540              		.loc 1 169 13 is_stmt 1 view .LVU144
 169:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 541              		.loc 1 169 15 is_stmt 0 view .LVU145
 542 00e6 0328     		cmp	r0, #3
 543 00e8 D5D1     		bne	.L55
 176:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 544              		.loc 1 176 13 is_stmt 1 view .LVU146
 176:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 545              		.loc 1 176 18 is_stmt 0 view .LVU147
 546 00ea 3A46     		mov	r2, r7
 547 00ec 1A49     		ldr	r1, .L58+4
 548 00ee 4046     		mov	r0, r8
 549              	.LVL61:
 176:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 550              		.loc 1 176 18 view .LVU148
 551 00f0 FFF7FEFF 		bl	BspFlash_NoneCheck_Write
 552              	.LVL62:
 176:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 553              		.loc 1 176 16 view .LVU149
 554 00f4 0446     		mov	r4, r0
 555              	.LVL63:
 176:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 556              		.loc 1 176 16 view .LVU150
 557 00f6 0028     		cmp	r0, #0
 558 00f8 D2D0     		beq	.L56
 183:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 559              		.loc 1 183 17 is_stmt 1 view .LVU151
 560 00fa 184C     		ldr	r4, .L58+8
 561 00fc 3A46     		mov	r2, r7
 562 00fe 2146     		mov	r1, r4
 563 0100 4046     		mov	r0, r8
 564 0102 FFF7FEFF 		bl	BspFlash_Read
 565              	.LVL64:
 185:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 {
 566              		.loc 1 185 17 view .LVU152
 185:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 {
 567              		.loc 1 185 21 is_stmt 0 view .LVU153
 568 0106 3A46     		mov	r2, r7
 569 0108 1349     		ldr	r1, .L58+4
 570 010a 2046     		mov	r0, r4
 571 010c FFF7FEFF 		bl	memcmp
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 34


 572              	.LVL65:
 185:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 {
 573              		.loc 1 185 20 view .LVU154
 574 0110 0028     		cmp	r0, #0
 575 0112 C9D1     		bne	.L57
 192:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 break;
 576              		.loc 1 192 13 is_stmt 1 view .LVU155
 192:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 break;
 577              		.loc 1 192 16 is_stmt 0 view .LVU156
 578 0114 BD42     		cmp	r5, r7
 579 0116 0DD9     		bls	.L41
 196:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 580              		.loc 1 196 13 is_stmt 1 view .LVU157
 196:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 581              		.loc 1 196 25 is_stmt 0 view .LVU158
 582 0118 08EB0700 		add	r0, r8, r7
 583 011c FFF7FEFF 		bl	BspFlash_Get_Section_Addr
 584              	.LVL66:
 585 0120 8046     		mov	r8, r0
 586              	.LVL67:
 198:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             len -= write_len;
 587              		.loc 1 198 13 is_stmt 1 view .LVU159
 199:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             p_data += write_len;
 588              		.loc 1 199 13 view .LVU160
 199:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             p_data += write_len;
 589              		.loc 1 199 17 is_stmt 0 view .LVU161
 590 0122 ED1B     		subs	r5, r5, r7
 591              	.LVL68:
 200:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 592              		.loc 1 200 13 is_stmt 1 view .LVU162
 200:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 593              		.loc 1 200 20 is_stmt 0 view .LVU163
 594 0124 3E44     		add	r6, r6, r7
 595              	.LVL69:
 202:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 596              		.loc 1 202 13 is_stmt 1 view .LVU164
 202:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 597              		.loc 1 202 15 is_stmt 0 view .LVU165
 598 0126 B5F5006F 		cmp	r5, #2048
 599 012a C2D8     		bhi	.L50
 204:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 600              		.loc 1 204 27 view .LVU166
 601 012c 2F46     		mov	r7, r5
 602              	.LVL70:
 204:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 603              		.loc 1 204 27 view .LVU167
 604 012e C2E7     		b	.L42
 605              	.LVL71:
 606              	.L49:
 204:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 607              		.loc 1 204 27 view .LVU168
 608              	.LBE11:
 128:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t write_len = FLASH_SECTION_SIZE;
 609              		.loc 1 128 14 view .LVU169
 610 0130 0024     		movs	r4, #0
 611              	.LVL72:
 128:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t write_len = FLASH_SECTION_SIZE;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 35


 612              		.loc 1 128 14 view .LVU170
 613 0132 A2E7     		b	.L35
 614              	.LVL73:
 615              	.L41:
 210:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         return true;
 616              		.loc 1 210 9 is_stmt 1 view .LVU171
 617 0134 FFF7FEFF 		bl	flash_lock
 618              	.LVL74:
 211:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     }
 619              		.loc 1 211 9 view .LVU172
 211:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     }
 620              		.loc 1 211 16 is_stmt 0 view .LVU173
 621 0138 01E0     		b	.L33
 622              	.LVL75:
 623              	.L45:
 214:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 624              		.loc 1 214 12 view .LVU174
 625 013a 4FF00009 		mov	r9, #0
 626              	.LVL76:
 627              	.L33:
 215:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 628              		.loc 1 215 1 view .LVU175
 629 013e 4846     		mov	r0, r9
 630 0140 03B0     		add	sp, sp, #12
 631              	.LCFI5:
 632              		.cfi_remember_state
 633              		.cfi_def_cfa_offset 36
 634              		@ sp needed
 635 0142 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 636              	.LVL77:
 637              	.L46:
 638              	.LCFI6:
 639              		.cfi_restore_state
 214:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 640              		.loc 1 214 12 view .LVU176
 641 0146 4FF00009 		mov	r9, #0
 642 014a F8E7     		b	.L33
 643              	.L47:
 644 014c 4FF00009 		mov	r9, #0
 645 0150 F5E7     		b	.L33
 646              	.L59:
 647 0152 00BF     		.align	2
 648              	.L58:
 649 0154 00A00F08 		.word	135241728
 650 0158 00000000 		.word	.LANCHOR0
 651 015c 00000000 		.word	.LANCHOR1
 652              		.cfi_endproc
 653              	.LFE137:
 655              		.section	.text.BspFlash_Erase,"ax",%progbits
 656              		.align	1
 657              		.syntax unified
 658              		.thumb
 659              		.thumb_func
 661              	BspFlash_Erase:
 662              	.LVL78:
 663              	.LFB135:
  39:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     flash_status_type status;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 36


 664              		.loc 1 39 1 is_stmt 1 view -0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
  39:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     flash_status_type status;
 668              		.loc 1 39 1 is_stmt 0 view .LVU178
 669 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 670              	.LCFI7:
 671              		.cfi_def_cfa_offset 32
 672              		.cfi_offset 3, -32
 673              		.cfi_offset 4, -28
 674              		.cfi_offset 5, -24
 675              		.cfi_offset 6, -20
 676              		.cfi_offset 7, -16
 677              		.cfi_offset 8, -12
 678              		.cfi_offset 9, -8
 679              		.cfi_offset 14, -4
  40:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t start_sec = 0;
 680              		.loc 1 40 5 is_stmt 1 view .LVU179
  41:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint32_t end_sec = 0;
 681              		.loc 1 41 5 view .LVU180
 682              	.LVL79:
  42:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint8_t erase_cnt = 1;
 683              		.loc 1 42 5 view .LVU181
  43:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint16_t write_offset = 0;
 684              		.loc 1 43 5 view .LVU182
  44:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     uint16_t write_len = 0;
 685              		.loc 1 44 5 view .LVU183
  45:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 686              		.loc 1 45 5 view .LVU184
  47:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 687              		.loc 1 47 5 view .LVU185
  47:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 688              		.loc 1 47 8 is_stmt 0 view .LVU186
 689 0004 B0F1006F 		cmp	r0, #134217728
 690 0008 66D3     		bcc	.L70
 691 000a 0546     		mov	r5, r0
  47:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 692              		.loc 1 47 40 discriminator 1 view .LVU187
 693 000c 4618     		adds	r6, r0, r1
  47:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     {
 694              		.loc 1 47 30 discriminator 1 view .LVU188
 695 000e 354B     		ldr	r3, .L78
 696 0010 9E42     		cmp	r6, r3
 697 0012 65D2     		bcs	.L71
  49:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         end_sec = BspFlash_Get_Section_Addr(addr + len);
 698              		.loc 1 49 9 is_stmt 1 view .LVU189
  49:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         end_sec = BspFlash_Get_Section_Addr(addr + len);
 699              		.loc 1 49 21 is_stmt 0 view .LVU190
 700 0014 FFF7FEFF 		bl	BspFlash_Get_Section_Addr
 701              	.LVL80:
  49:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         end_sec = BspFlash_Get_Section_Addr(addr + len);
 702              		.loc 1 49 21 view .LVU191
 703 0018 0446     		mov	r4, r0
 704              	.LVL81:
  50:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         erase_cnt += (end_sec - start_sec) / FLASH_SECTION_SIZE;
 705              		.loc 1 50 9 is_stmt 1 view .LVU192
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 37


  50:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         erase_cnt += (end_sec - start_sec) / FLASH_SECTION_SIZE;
 706              		.loc 1 50 19 is_stmt 0 view .LVU193
 707 001a 3046     		mov	r0, r6
 708              	.LVL82:
  50:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         erase_cnt += (end_sec - start_sec) / FLASH_SECTION_SIZE;
 709              		.loc 1 50 19 view .LVU194
 710 001c FFF7FEFF 		bl	BspFlash_Get_Section_Addr
 711              	.LVL83:
 712 0020 8146     		mov	r9, r0
 713              	.LVL84:
  51:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         if ((end_sec - start_sec) % FLASH_SECTION_SIZE)
 714              		.loc 1 51 9 is_stmt 1 view .LVU195
  51:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         if ((end_sec - start_sec) % FLASH_SECTION_SIZE)
 715              		.loc 1 51 31 is_stmt 0 view .LVU196
 716 0022 031B     		subs	r3, r0, r4
  51:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         if ((end_sec - start_sec) % FLASH_SECTION_SIZE)
 717              		.loc 1 51 19 view .LVU197
 718 0024 C3F3C722 		ubfx	r2, r3, #11, #8
 719 0028 561C     		adds	r6, r2, #1
 720 002a F6B2     		uxtb	r6, r6
 721              	.LVL85:
  52:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             erase_cnt += 1;
 722              		.loc 1 52 9 is_stmt 1 view .LVU198
  52:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             erase_cnt += 1;
 723              		.loc 1 52 35 is_stmt 0 view .LVU199
 724 002c C3F30A03 		ubfx	r3, r3, #0, #11
  52:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             erase_cnt += 1;
 725              		.loc 1 52 12 view .LVU200
 726 0030 0BB1     		cbz	r3, .L62
  53:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         write_offset = addr - start_sec;
 727              		.loc 1 53 13 is_stmt 1 view .LVU201
  53:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         write_offset = addr - start_sec;
 728              		.loc 1 53 23 is_stmt 0 view .LVU202
 729 0032 0232     		adds	r2, r2, #2
 730 0034 D6B2     		uxtb	r6, r2
 731              	.LVL86:
 732              	.L62:
  54:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 733              		.loc 1 54 9 is_stmt 1 view .LVU203
  54:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 734              		.loc 1 54 29 is_stmt 0 view .LVU204
 735 0036 ADB2     		uxth	r5, r5
 736              	.LVL87:
  54:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 737              		.loc 1 54 29 view .LVU205
 738 0038 A3B2     		uxth	r3, r4
  54:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 739              		.loc 1 54 22 view .LVU206
 740 003a A5EB0308 		sub	r8, r5, r3
 741 003e 1FFA88F8 		uxth	r8, r8
 742              	.LVL88:
  56:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 743              		.loc 1 56 9 is_stmt 1 view .LVU207
  56:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 744              		.loc 1 56 12 is_stmt 0 view .LVU208
 745 0042 B8F1000F 		cmp	r8, #0
 746 0046 0CD0     		beq	.L72
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 38


  58:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if (!BspFlash_Read(end_sec, BspFlash_Cache_tmp, FLASH_SECTION_SIZE))
 747              		.loc 1 58 13 is_stmt 1 view .LVU209
  58:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if (!BspFlash_Read(end_sec, BspFlash_Cache_tmp, FLASH_SECTION_SIZE))
 748              		.loc 1 58 23 is_stmt 0 view .LVU210
 749 0048 5D1B     		subs	r5, r3, r5
 750 004a 05F50067 		add	r7, r5, #2048
 751 004e BFB2     		uxth	r7, r7
 752              	.LVL89:
  59:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
 753              		.loc 1 59 13 is_stmt 1 view .LVU211
  59:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
 754              		.loc 1 59 18 is_stmt 0 view .LVU212
 755 0050 4FF40062 		mov	r2, #2048
 756 0054 2449     		ldr	r1, .L78+4
 757 0056 4846     		mov	r0, r9
 758              	.LVL90:
  59:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
 759              		.loc 1 59 18 view .LVU213
 760 0058 FFF7FEFF 		bl	BspFlash_Read
 761              	.LVL91:
  59:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
 762              		.loc 1 59 16 view .LVU214
 763 005c 0546     		mov	r5, r0
 764 005e 08B9     		cbnz	r0, .L63
 765 0060 3BE0     		b	.L61
 766              	.LVL92:
 767              	.L72:
  45:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 768              		.loc 1 45 14 view .LVU215
 769 0062 4746     		mov	r7, r8
 770              	.LVL93:
 771              	.L63:
  63:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 772              		.loc 1 63 9 is_stmt 1 view .LVU216
 773 0064 FFF7FEFF 		bl	flash_unlock
 774              	.LVL94:
  65:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 775              		.loc 1 65 9 view .LVU217
 776              	.LBB12:
  65:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 777              		.loc 1 65 14 view .LVU218
  65:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 778              		.loc 1 65 22 is_stmt 0 view .LVU219
 779 0068 0025     		movs	r5, #0
  65:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 780              		.loc 1 65 9 view .LVU220
 781 006a 0EE0     		b	.L64
 782              	.LVL95:
 783              	.L76:
  72:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 784              		.loc 1 72 17 is_stmt 1 view .LVU221
 785 006c 1420     		movs	r0, #20
 786              	.LVL96:
  72:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 787              		.loc 1 72 17 is_stmt 0 view .LVU222
 788 006e FFF7FEFF 		bl	flash_flag_clear
 789              	.LVL97:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 39


 790              	.L66:
  81:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if(status != FLASH_OPERATE_DONE)
 791              		.loc 1 81 13 is_stmt 1 view .LVU223
  81:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             if(status != FLASH_OPERATE_DONE)
 792              		.loc 1 81 22 is_stmt 0 view .LVU224
 793 0072 2046     		mov	r0, r4
 794 0074 FFF7FEFF 		bl	flash_sector_erase
 795              	.LVL98:
  82:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 796              		.loc 1 82 13 is_stmt 1 view .LVU225
  82:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 797              		.loc 1 82 15 is_stmt 0 view .LVU226
 798 0078 0328     		cmp	r0, #3
 799 007a 16D1     		bne	.L74
  88:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         }
 800              		.loc 1 88 13 is_stmt 1 discriminator 2 view .LVU227
  88:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         }
 801              		.loc 1 88 25 is_stmt 0 discriminator 2 view .LVU228
 802 007c 04F50060 		add	r0, r4, #2048
 803              	.LVL99:
  88:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         }
 804              		.loc 1 88 25 discriminator 2 view .LVU229
 805 0080 FFF7FEFF 		bl	BspFlash_Get_Section_Addr
 806              	.LVL100:
 807 0084 0446     		mov	r4, r0
 808              	.LVL101:
  65:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 809              		.loc 1 65 44 is_stmt 1 discriminator 2 view .LVU230
  65:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 810              		.loc 1 65 45 is_stmt 0 discriminator 2 view .LVU231
 811 0086 0135     		adds	r5, r5, #1
 812              	.LVL102:
  65:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 813              		.loc 1 65 45 discriminator 2 view .LVU232
 814 0088 EDB2     		uxtb	r5, r5
 815              	.LVL103:
 816              	.L64:
  65:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 817              		.loc 1 65 29 is_stmt 1 discriminator 1 view .LVU233
  65:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 818              		.loc 1 65 9 is_stmt 0 discriminator 1 view .LVU234
 819 008a AE42     		cmp	r6, r5
 820 008c 11D9     		bls	.L75
  68:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             
 821              		.loc 1 68 13 is_stmt 1 view .LVU235
  68:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             
 822              		.loc 1 68 22 is_stmt 0 view .LVU236
 823 008e 4FF00040 		mov	r0, #-2147483648
 824 0092 FFF7FEFF 		bl	flash_operation_wait_for
 825              	.LVL104:
  70:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 826              		.loc 1 70 13 is_stmt 1 view .LVU237
  70:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 827              		.loc 1 70 49 is_stmt 0 view .LVU238
 828 0096 431E     		subs	r3, r0, #1
 829 0098 DBB2     		uxtb	r3, r3
  70:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 40


 830              		.loc 1 70 16 view .LVU239
 831 009a 012B     		cmp	r3, #1
 832 009c E6D9     		bls	.L76
  74:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 833              		.loc 1 74 18 is_stmt 1 view .LVU240
  74:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 834              		.loc 1 74 21 is_stmt 0 view .LVU241
 835 009e 0428     		cmp	r0, #4
 836 00a0 E7D1     		bne	.L66
  76:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
 837              		.loc 1 76 17 is_stmt 1 view .LVU242
 838 00a2 FFF7FEFF 		bl	flash_lock
 839              	.LVL105:
  77:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 840              		.loc 1 77 17 view .LVU243
  77:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 841              		.loc 1 77 24 is_stmt 0 view .LVU244
 842 00a6 0025     		movs	r5, #0
 843              	.LVL106:
  77:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 844              		.loc 1 77 24 view .LVU245
 845 00a8 17E0     		b	.L61
 846              	.LVL107:
 847              	.L74:
  84:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
 848              		.loc 1 84 17 is_stmt 1 view .LVU246
 849 00aa FFF7FEFF 		bl	flash_lock
 850              	.LVL108:
  85:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 851              		.loc 1 85 17 view .LVU247
  85:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 852              		.loc 1 85 24 is_stmt 0 view .LVU248
 853 00ae 0025     		movs	r5, #0
 854              	.LVL109:
  85:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 855              		.loc 1 85 24 view .LVU249
 856 00b0 13E0     		b	.L61
 857              	.LVL110:
 858              	.L75:
  85:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 859              		.loc 1 85 24 view .LVU250
 860              	.LBE12:
  91:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 861              		.loc 1 91 9 is_stmt 1 view .LVU251
  91:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         {
 862              		.loc 1 91 12 is_stmt 0 view .LVU252
 863 00b2 B8F1000F 		cmp	r8, #0
 864 00b6 08D0     		beq	.L69
  93:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 865              		.loc 1 93 13 is_stmt 1 view .LVU253
  93:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 866              		.loc 1 93 18 is_stmt 0 view .LVU254
 867 00b8 3A46     		mov	r2, r7
 868 00ba 0B49     		ldr	r1, .L78+4
 869 00bc 4144     		add	r1, r1, r8
 870 00be 08EB0900 		add	r0, r8, r9
 871 00c2 FFF7FEFF 		bl	BspFlash_Write
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 41


 872              	.LVL111:
  93:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 873              		.loc 1 93 16 view .LVU255
 874 00c6 0546     		mov	r5, r0
 875              	.LVL112:
  93:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             {
 876              		.loc 1 93 16 view .LVU256
 877 00c8 18B1     		cbz	r0, .L77
 878              	.L69:
 100:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****         return true;
 879              		.loc 1 100 9 is_stmt 1 view .LVU257
 880 00ca FFF7FEFF 		bl	flash_lock
 881              	.LVL113:
 101:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     }
 882              		.loc 1 101 9 view .LVU258
 101:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     }
 883              		.loc 1 101 16 is_stmt 0 view .LVU259
 884 00ce 0125     		movs	r5, #1
 885 00d0 03E0     		b	.L61
 886              	.L77:
  95:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****                 return false;
 887              		.loc 1 95 17 is_stmt 1 view .LVU260
 888 00d2 FFF7FEFF 		bl	flash_lock
 889              	.LVL114:
  96:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 890              		.loc 1 96 17 view .LVU261
  96:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****             }
 891              		.loc 1 96 24 is_stmt 0 view .LVU262
 892 00d6 00E0     		b	.L61
 893              	.LVL115:
 894              	.L70:
 104:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 895              		.loc 1 104 12 view .LVU263
 896 00d8 0025     		movs	r5, #0
 897              	.LVL116:
 898              	.L61:
 105:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 899              		.loc 1 105 1 view .LVU264
 900 00da 2846     		mov	r0, r5
 901 00dc BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 902              	.LVL117:
 903              	.L71:
 104:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 904              		.loc 1 104 12 view .LVU265
 905 00e0 0025     		movs	r5, #0
 906 00e2 FAE7     		b	.L61
 907              	.L79:
 908              		.align	2
 909              	.L78:
 910 00e4 00A00F08 		.word	135241728
 911 00e8 00000000 		.word	.LANCHOR0
 912              		.cfi_endproc
 913              	.LFE135:
 915              		.section	.text.BspFlash_Init,"ax",%progbits
 916              		.align	1
 917              		.syntax unified
 918              		.thumb
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 42


 919              		.thumb_func
 921              	BspFlash_Init:
 922              	.LFB133:
  29:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     memset(BspFlash_Cache_tmp, 0, FLASH_SECTION_SIZE);
 923              		.loc 1 29 1 is_stmt 1 view -0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 927 0000 08B5     		push	{r3, lr}
 928              	.LCFI8:
 929              		.cfi_def_cfa_offset 8
 930              		.cfi_offset 3, -8
 931              		.cfi_offset 14, -4
  30:HW_Lib/AT32F435/bsp/Bsp_Flash.c ****     return true;
 932              		.loc 1 30 5 view .LVU267
 933 0002 4FF40062 		mov	r2, #2048
 934 0006 0021     		movs	r1, #0
 935 0008 0248     		ldr	r0, .L82
 936 000a FFF7FEFF 		bl	memset
 937              	.LVL118:
  31:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** }
 938              		.loc 1 31 5 view .LVU268
  32:HW_Lib/AT32F435/bsp/Bsp_Flash.c **** 
 939              		.loc 1 32 1 is_stmt 0 view .LVU269
 940 000e 0120     		movs	r0, #1
 941 0010 08BD     		pop	{r3, pc}
 942              	.L83:
 943 0012 00BF     		.align	2
 944              	.L82:
 945 0014 00000000 		.word	.LANCHOR0
 946              		.cfi_endproc
 947              	.LFE133:
 949              		.global	BspFlash
 950              		.global	BspFlash_Rx_Cache_tmp
 951              		.global	BspFlash_Cache_tmp
 952              		.section	.bss.BspFlash_Cache_tmp,"aw",%nobits
 953              		.align	2
 954              		.set	.LANCHOR0,. + 0
 957              	BspFlash_Cache_tmp:
 958 0000 00000000 		.space	2048
 958      00000000 
 958      00000000 
 958      00000000 
 958      00000000 
 959              		.section	.bss.BspFlash_Rx_Cache_tmp,"aw",%nobits
 960              		.align	2
 961              		.set	.LANCHOR1,. + 0
 964              	BspFlash_Rx_Cache_tmp:
 965 0000 00000000 		.space	2048
 965      00000000 
 965      00000000 
 965      00000000 
 965      00000000 
 966              		.section	.data.BspFlash,"aw"
 967              		.align	2
 970              	BspFlash:
 971 0000 00000000 		.word	BspFlash_Init
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 43


 972 0004 00000000 		.word	BspFlash_DeInit
 973 0008 00000000 		.word	BspFlash_Erase
 974 000c 00000000 		.space	4
 975 0010 00000000 		.word	BspFlash_Read
 976 0014 00000000 		.word	BspFlash_Write
 977              		.text
 978              	.Letext0:
 979              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 980              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 981              		.file 5 "HW_Lib/Port_Def/Bsp_Flash_Port_Def.h"
 982              		.file 6 "HW_Lib/AT32F435/drivers/inc/at32f435_437_tmr.h"
 983              		.file 7 "HW_Lib/AT32F435/drivers/inc/at32f435_437_flash.h"
 984              		.file 8 "HW_Lib/AT32F435/bsp/Bsp_Flash.h"
 985              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 986              		.file 10 "<built-in>"
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s 			page 44


DEFINED SYMBOLS
                            *ABS*:00000000 Bsp_Flash.c
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:20     .text.BspFlash_DeInit:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:25     .text.BspFlash_DeInit:00000000 BspFlash_DeInit
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:39     .text.BspFlash_Read:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:44     .text.BspFlash_Read:00000000 BspFlash_Read
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:139    .text.BspFlash_Read:00000040 $d
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:144    .text.BspFlash_Get_Section_Addr:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:149    .text.BspFlash_Get_Section_Addr:00000000 BspFlash_Get_Section_Addr
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:181    .text.BspFlash_NoneCheck_Write:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:186    .text.BspFlash_NoneCheck_Write:00000000 BspFlash_NoneCheck_Write
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:316    .text.BspFlash_NoneCheck_Write:0000004c $d
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:321    .text.BspFlash_Write:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:326    .text.BspFlash_Write:00000000 BspFlash_Write
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:649    .text.BspFlash_Write:00000154 $d
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:656    .text.BspFlash_Erase:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:661    .text.BspFlash_Erase:00000000 BspFlash_Erase
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:910    .text.BspFlash_Erase:000000e4 $d
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:916    .text.BspFlash_Init:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:921    .text.BspFlash_Init:00000000 BspFlash_Init
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:945    .text.BspFlash_Init:00000014 $d
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:970    .data.BspFlash:00000000 BspFlash
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:964    .bss.BspFlash_Rx_Cache_tmp:00000000 BspFlash_Rx_Cache_tmp
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:957    .bss.BspFlash_Cache_tmp:00000000 BspFlash_Cache_tmp
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:953    .bss.BspFlash_Cache_tmp:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:960    .bss.BspFlash_Rx_Cache_tmp:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccKAtSXj.s:967    .data.BspFlash:00000000 $d

UNDEFINED SYMBOLS
flash_operation_status_get
flash_byte_program
flash_unlock
flash_flag_clear
flash_lock
memcpy
flash_operation_wait_for
flash_sector_erase
memcmp
memset
