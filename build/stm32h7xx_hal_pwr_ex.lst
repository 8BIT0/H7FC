ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"stm32h7xx_hal_pwr_ex.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HAL_PWREx_ConfigSupply,"ax",%progbits
  19              		.align	1
  20              		.global	HAL_PWREx_ConfigSupply
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	HAL_PWREx_ConfigSupply:
  26              	.LVL0:
  27              	.LFB144:
  28              		.file 1 "HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c"
   1:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
   2:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
   3:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @file    stm32h7xx_hal_pwr_ex.c
   4:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @author  MCD Application Team
   5:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief   Extended PWR HAL module driver.
   6:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This file provides firmware functions to manage the following
   7:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          functionalities of PWR extension peripheral:
   8:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           + Peripheral Extended features functions
   9:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
  10:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @attention
  11:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
  12:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * Copyright (c) 2017 STMicroelectronics.
  13:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * All rights reserved.
  14:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
  15:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * This software is licensed under terms that can be found in the LICENSE file
  16:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * in the root directory of this software component.
  17:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  18:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
  19:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
  20:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   @verbatim
  21:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ==============================================================================
  22:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                         ##### How to use this driver #####
  23:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ==============================================================================
  24:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   [..]
  25:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigSupply() function to configure the regulator supply
  26:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        with the following different setups according to hardware (support SMPS):
  27:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_DIRECT_SMPS_SUPPLY
  28:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_LDO
  29:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_LDO
  30:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 2


  31:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO
  32:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_EXT
  33:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_EXT
  34:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_LDO_SUPPLY
  35:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_EXTERNAL_SOURCE_SUPPLY
  36:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  37:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetSupplyConfig() function to get the current supply setup.
  38:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  39:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ControlVoltageScaling() function to configure the main
  40:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        internal regulator output voltage. The voltage scaling could be one of
  41:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        the following scales :
  42:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE0
  43:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE1
  44:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE2
  45:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE3
  46:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  47:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetVoltageRange() function to get the current output
  48:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        voltage applied to the main regulator.
  49:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  50:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ControlStopModeVoltageScaling() function to configure the
  51:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        main internal regulator output voltage in STOP mode. The voltage scaling
  52:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in STOP mode could be one of the following scales :
  53:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE3
  54:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE4
  55:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE5
  56:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  57:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetStopModeVoltageRange() function to get the current
  58:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        output voltage applied to the main regulator in STOP mode.
  59:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  60:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTOP2Mode() function to enter the system in STOP mode
  61:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        with core domain in D2STOP mode. This API is used only for STM32H7Axxx
  62:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        and STM32H7Bxxx devices.
  63:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Please ensure to clear all CPU pending events by calling
  64:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_ClearPendingEvent() function when trying to enter the Cortex-Mx
  65:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DEEP-SLEEP mode with __WFE() entry.
  66:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  67:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTOPMode() function to enter the selected domain in
  68:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        DSTOP mode. Call this API with all available power domains to enter the
  69:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        system in STOP mode.
  70:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Please ensure to clear all CPU pending events by calling
  71:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_ClearPendingEvent() function when trying to enter the Cortex-Mx
  72:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DEEP-SLEEP mode with __WFE() entry.
  73:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  74:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ClearPendingEvent() function always before entring the
  75:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Cortex-Mx in any low power mode (SLEEP/DEEP-SLEEP) using WFE entry.
  76:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  77:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTANDBYMode() function to enter the selected domain
  78:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DSTANDBY mode. Call this API with all available power domains to enter
  79:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        the system in STANDBY mode.
  80:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  81:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigD3Domain() function to setup the D3/SRD domain state
  82:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (RUN/STOP) when the system enter to low power mode.
  83:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  84:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ClearDomainFlags() function to clear the CPU flags for the
  85:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        selected power domain. This API is used only for dual core devices.
  86:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  87:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_HoldCore() and HAL_PWREx_ReleaseCore() functions to hold
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 3


  88:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        and release the selected CPU and and their domain peripherals when
  89:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        exiting STOP mode. These APIs are used only for dual core devices.
  90:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  91:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableFlashPowerDown() and
  92:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableFlashPowerDown() functions to enable and disable the
  93:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Flash Power Down in STOP mode.
  94:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  95:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableMemoryShutOff() and
  96:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableMemoryShutOff() functions to enable and disable the
  97:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        memory block shut-off in DStop or DStop2. These APIs are used only for
  98:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        STM32H7Axxx and STM32H7Bxxx lines.
  99:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 100:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableWakeUpPin() and HAL_PWREx_DisableWakeUpPin()
 101:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to enable and disable the Wake-up pin functionality for
 102:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        the selected pin.
 103:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 104:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetWakeupFlag() and HAL_PWREx_ClearWakeupFlag()
 105:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to manage wake-up flag for the selected pin.
 106:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 107:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_WAKEUP_PIN_IRQHandler() function to handle all wake-up
 108:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        pins interrupts.
 109:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 110:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableBkUpReg() and HAL_PWREx_DisableBkUpReg() functions
 111:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        to enable and disable the backup domain regulator.
 112:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 113:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableUSBReg(), HAL_PWREx_DisableUSBReg(),
 114:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_EnableUSBVoltageDetector() and
 115:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableUSBVoltageDetector() functions to manage USB power
 116:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        regulation functionalities.
 117:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 118:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableBatteryCharging() and
 119:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableBatteryCharging() functions to enable and disable the
 120:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        battery charging feature with the selected resistor.
 121:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 122:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableAnalogBooster() and
 123:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableAnalogBooster() functions to enable and disable the
 124:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        AVD boost feature when the VDD supply voltage is below 2V7.
 125:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 126:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableMonitoring() and HAL_PWREx_DisableMonitoring()
 127:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to enable and disable the VBAT and Temperature monitoring.
 128:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        When VBAT and Temperature monitoring feature is enables, use
 129:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_GetTemperatureLevel() and HAL_PWREx_GetVBATLevel() to get
 130:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        respectively the Temperature level and VBAT level.
 131:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 132:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetMMCVoltage() and HAL_PWREx_DisableMonitoring()
 133:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        function to get VDDMMC voltage level. This API is used only for
 134:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        STM32H7Axxx and STM32H7Bxxx lines
 135:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 136:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigAVD() after setting parameter to be configured
 137:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (event mode and voltage threshold) in order to set up the Analog Voltage
 138:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Detector then use HAL_PWREx_EnableAVD() and  HAL_PWREx_DisableAVD()
 139:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to start and stop the AVD detection.
 140:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) AVD level could be one of the following values :
 141:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 1V7
 142:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V1
 143:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V5
 144:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V8
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 4


 145:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 146:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_PVD_AVD_IRQHandler() function to handle the PWR PVD and
 147:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        AVD interrupt request.
 148:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 149:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   @endverbatim
 150:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 151:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 152:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Includes ------------------------------------------------------------------*/
 153:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #include "stm32h7xx_hal.h"
 154:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 155:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @addtogroup STM32H7xx_HAL_Driver
 156:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 157:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 158:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 159:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx PWREx
 160:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR Extended HAL module driver
 161:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 162:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 163:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 164:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #ifdef HAL_PWR_MODULE_ENABLED
 165:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 166:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private typedef -----------------------------------------------------------*/
 167:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private define ------------------------------------------------------------*/
 168:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 169:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @addtogroup PWREx_Private_Constants
 170:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 171:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 172:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 173:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_AVD_Mode_Mask PWR Extended AVD Mode Mask
 174:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 175:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 176:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_MODE_IT              (0x00010000U)
 177:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_MODE_EVT             (0x00020000U)
 178:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_RISING_EDGE          (0x00000001U)
 179:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_FALLING_EDGE         (0x00000002U)
 180:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_RISING_FALLING_EDGE  (0x00000003U)
 181:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 182:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 183:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 184:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 185:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_REG_SET_TIMEOUT PWR Extended Flag Setting Time Out Value
 186:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 187:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 188:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_FLAG_SETTING_DELAY   (1000U)
 189:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 190:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 191:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 192:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 193:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_WakeUp_Pins_Offsets PWREx Wake-Up Pins masks and offsets
 194:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 195:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 196:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Wake-Up Pins EXTI register mask */
 197:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (EXTI_IMR2_IM57)
 198:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_EXTI_WAKEUP_PINS_MASK  (EXTI_IMR2_IM55 | EXTI_IMR2_IM56 |\
 199:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM57 | EXTI_IMR2_IM58 |\
 200:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM59 | EXTI_IMR2_IM60)
 201:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 5


 202:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_EXTI_WAKEUP_PINS_MASK  (EXTI_IMR2_IM55 | EXTI_IMR2_IM56 |\
 203:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM58 | EXTI_IMR2_IM60)
 204:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (EXTI_IMR2_IM57) */
 205:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 206:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Wake-Up Pins PWR Pin Pull shift offsets */
 207:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET (2U)
 208:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 209:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 210:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 211:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 212:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 213:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 214:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 215:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 216:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private macro -------------------------------------------------------------*/
 217:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private variables ---------------------------------------------------------*/
 218:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private function prototypes -----------------------------------------------*/
 219:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private functions ---------------------------------------------------------*/
 220:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Exported types ------------------------------------------------------------*/
 221:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Exported functions --------------------------------------------------------*/
 222:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 223:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions PWREx Exported Functions
 224:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 225:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 226:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 227:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group1 Power Supply Control Functions
 228:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Power supply control functions
 229:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 230:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
 231:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 232:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                   ##### Power supply control functions #####
 233:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 234:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 235:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) When the system is powered on, the POR monitors VDD supply. Once VDD is
 236:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        above the POR threshold level, the voltage regulator is enabled in the
 237:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        default supply configuration:
 238:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The Voltage converter output level is set at 1V0 in accordance with
 239:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           the VOS3 level configured in PWR (D3/SRD) domain control register
 240:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (PWR_D3CR/PWR_SRDCR).
 241:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The system is kept in reset mode as long as VCORE is not ok.
 242:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once VCORE is ok, the system is taken out of reset and the HSI
 243:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           oscillator is enabled.
 244:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once the oscillator is stable, the system is initialized: Flash memory
 245:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           and option bytes are loaded and the CPU starts in Run* mode.
 246:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The software shall then initialize the system including supply
 247:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           configuration programming using the HAL_PWREx_ConfigSupply().
 248:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once the supply configuration has been configured, the
 249:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_ConfigSupply() function checks the ACTVOSRDY bit in PWR
 250:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           control status register 1 (PWR_CSR1) to guarantee a valid voltage
 251:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           levels:
 252:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) As long as ACTVOSRDY indicates that voltage levels are invalid, the
 253:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             system is in limited Run* mode, write accesses to the RAMs are not
 254:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             permitted and VOS shall not be changed.
 255:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) Once ACTVOSRDY indicates that voltage levels are valid, the system
 256:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             is in normal Run mode, write accesses to RAMs are allowed and VOS
 257:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             can be changed.
 258:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 6


 259:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
 260:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 261:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 262:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 263:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 264:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the system Power Supply.
 265:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  SupplySource : Specifies the Power Supply source to set after a
 266:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                        system startup.
 267:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values :
 268:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_DIRECT_SMPS_SUPPLY : The SMPS supplies the Vcore Power
 269:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                          Domains. The LDO is Bypassed.
 270:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_LDO : The SMPS 1.8V output supplies
 271:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             the LDO. The Vcore Power Domains
 272:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             are supplied from the LDO.
 273:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_LDO : The SMPS 2.5V output supplies
 274:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             the LDO. The Vcore Power Domains
 275:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             are supplied from the LDO.
 276:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO : The SMPS 1.8V output
 277:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     supplies external
 278:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     circuits and the LDO.
 279:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains
 280:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     are supplied from the
 281:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     LDO.
 282:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO : The SMPS 2.5V output
 283:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     supplies external
 284:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     circuits and the LDO.
 285:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains
 286:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     are supplied from the
 287:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     LDO.
 288:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_EXT : The SMPS 1.8V output supplies
 289:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external circuits. The LDO is
 290:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Bypassed. The Vcore Power
 291:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Domains are supplied from
 292:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external source.
 293:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_EXT : The SMPS 2.5V output supplies
 294:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external circuits. The LDO is
 295:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Bypassed. The Vcore Power
 296:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Domains are supplied from
 297:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external source.
 298:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LDO_SUPPLY : The LDO regulator supplies the Vcore Power
 299:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                  Domains. The SMPS regulator is Bypassed.
 300:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_EXTERNAL_SOURCE_SUPPLY : The SMPS and the LDO are
 301:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              Bypassed. The Vcore Power
 302:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              Domains are supplied from
 303:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              external source.
 304:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_LDO_SUPPLY and PWR_EXTERNAL_SOURCE_SUPPLY are used by all
 305:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         H7 lines.
 306:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         The PWR_DIRECT_SMPS_SUPPLY, PWR_SMPS_1V8_SUPPLIES_LDO,
 307:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_LDO, PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO,
 308:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO, PWR_SMPS_1V8_SUPPLIES_EXT and
 309:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
 310:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         regulator.
 311:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
 312:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 313:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
 314:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
  29              		.loc 1 314 1 view -0
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 7


  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
 315:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
  33              		.loc 1 315 3 view .LVU1
 316:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 317:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 318:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_SUPPLY (SupplySource));
  34              		.loc 1 318 3 view .LVU2
 319:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 320:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if supply source was configured */
 321:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_FLAG_SCUEN)
 322:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
  35              		.loc 1 322 3 view .LVU3
  36              		.loc 1 322 7 is_stmt 0 view .LVU4
  37 0000 134B     		ldr	r3, .L12
  38 0002 DB68     		ldr	r3, [r3, #12]
  39              		.loc 1 322 6 view .LVU5
  40 0004 13F0040F 		tst	r3, #4
  41 0008 07D1     		bne	.L2
 323:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 324:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_L
 325:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_FLAG_SCUEN) */
 326:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 327:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check supply configuration */
 328:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
  42              		.loc 1 328 5 is_stmt 1 view .LVU6
  43              		.loc 1 328 13 is_stmt 0 view .LVU7
  44 000a 114B     		ldr	r3, .L12
  45 000c DB68     		ldr	r3, [r3, #12]
  46              		.loc 1 328 19 view .LVU8
  47 000e 03F00703 		and	r3, r3, #7
  48              		.loc 1 328 8 view .LVU9
  49 0012 8342     		cmp	r3, r0
  50 0014 1AD0     		beq	.L6
 329:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 330:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Supply configuration update locked, can't apply a new supply config */
 331:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
  51              		.loc 1 331 14 view .LVU10
  52 0016 0120     		movs	r0, #1
  53              	.LVL1:
  54              		.loc 1 331 14 view .LVU11
  55 0018 7047     		bx	lr
  56              	.LVL2:
  57              	.L2:
 314:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
  58              		.loc 1 314 1 view .LVU12
  59 001a 10B5     		push	{r4, lr}
  60              	.LCFI0:
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 4, -8
  63              		.cfi_offset 14, -4
 332:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 333:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 334:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 335:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Supply configuration update locked, but new supply configuration
 336:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          matches with old supply configuration : nothing to do
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 8


 337:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 338:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_OK;
 339:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 340:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 341:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 342:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the power supply configuration */
 343:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
  64              		.loc 1 343 3 is_stmt 1 view .LVU13
  65 001c 0C4A     		ldr	r2, .L12
  66 001e D368     		ldr	r3, [r2, #12]
  67 0020 23F00703 		bic	r3, r3, #7
  68 0024 1843     		orrs	r0, r0, r3
  69              	.LVL3:
  70              		.loc 1 343 3 is_stmt 0 view .LVU14
  71 0026 D060     		str	r0, [r2, #12]
 344:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 345:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
 346:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
  72              		.loc 1 346 3 is_stmt 1 view .LVU15
  73              		.loc 1 346 15 is_stmt 0 view .LVU16
  74 0028 FFF7FEFF 		bl	HAL_GetTick
  75              	.LVL4:
  76 002c 0446     		mov	r4, r0
  77              	.LVL5:
 347:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 348:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till voltage level flag is set */
 349:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
  78              		.loc 1 349 3 is_stmt 1 view .LVU17
  79              	.L4:
  80              		.loc 1 349 9 view .LVU18
  81              		.loc 1 349 10 is_stmt 0 view .LVU19
  82 002e 084B     		ldr	r3, .L12
  83 0030 5B68     		ldr	r3, [r3, #4]
  84              		.loc 1 349 9 view .LVU20
  85 0032 13F4005F 		tst	r3, #8192
  86 0036 07D1     		bne	.L11
 350:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 351:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
  87              		.loc 1 351 5 is_stmt 1 view .LVU21
  88              		.loc 1 351 10 is_stmt 0 view .LVU22
  89 0038 FFF7FEFF 		bl	HAL_GetTick
  90              	.LVL6:
  91              		.loc 1 351 25 view .LVU23
  92 003c 001B     		subs	r0, r0, r4
  93              		.loc 1 351 8 view .LVU24
  94 003e B0F57A7F 		cmp	r0, #1000
  95 0042 F4D9     		bls	.L4
 352:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 353:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
  96              		.loc 1 353 14 view .LVU25
  97 0044 0120     		movs	r0, #1
  98 0046 00E0     		b	.L3
  99              	.L11:
 354:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 355:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 356:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 357:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (SMPS)
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 9


 358:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
 359:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 360:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 361:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 362:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 363:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 364:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Get the current tick number */
 365:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tickstart = HAL_GetTick ();
 366:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 367:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Wait till SMPS external supply ready flag is set */
 368:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 369:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 370:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 371:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 372:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         return HAL_ERROR;
 373:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 374:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 375:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 376:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (SMPS) */
 377:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 378:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 100              		.loc 1 378 10 view .LVU26
 101 0048 0020     		movs	r0, #0
 102              	.L3:
 379:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 103              		.loc 1 379 1 view .LVU27
 104 004a 10BD     		pop	{r4, pc}
 105              	.LVL7:
 106              	.L6:
 107              	.LCFI1:
 108              		.cfi_def_cfa_offset 0
 109              		.cfi_restore 4
 110              		.cfi_restore 14
 338:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 111              		.loc 1 338 14 view .LVU28
 112 004c 0020     		movs	r0, #0
 113              	.LVL8:
 114              		.loc 1 379 1 view .LVU29
 115 004e 7047     		bx	lr
 116              	.L13:
 117              		.align	2
 118              	.L12:
 119 0050 00480258 		.word	1476544512
 120              		.cfi_endproc
 121              	.LFE144:
 123              		.section	.text.HAL_PWREx_GetSupplyConfig,"ax",%progbits
 124              		.align	1
 125              		.global	HAL_PWREx_GetSupplyConfig
 126              		.syntax unified
 127              		.thumb
 128              		.thumb_func
 130              	HAL_PWREx_GetSupplyConfig:
 131              	.LFB145:
 380:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 381:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 382:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the power supply configuration.
 383:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The supply configuration.
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 10


 384:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 385:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetSupplyConfig (void)
 386:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 132              		.loc 1 386 1 is_stmt 1 view -0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 387:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CR3 & PWR_SUPPLY_CONFIG_MASK);
 137              		.loc 1 387 3 view .LVU31
 138              		.loc 1 387 14 is_stmt 0 view .LVU32
 139 0000 024B     		ldr	r3, .L15
 140 0002 D868     		ldr	r0, [r3, #12]
 388:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 141              		.loc 1 388 1 view .LVU33
 142 0004 00F00700 		and	r0, r0, #7
 143 0008 7047     		bx	lr
 144              	.L16:
 145 000a 00BF     		.align	2
 146              	.L15:
 147 000c 00480258 		.word	1476544512
 148              		.cfi_endproc
 149              	.LFE145:
 151              		.section	.text.HAL_PWREx_ControlVoltageScaling,"ax",%progbits
 152              		.align	1
 153              		.global	HAL_PWREx_ControlVoltageScaling
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 158              	HAL_PWREx_ControlVoltageScaling:
 159              	.LVL9:
 160              	.LFB146:
 389:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 390:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 391:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the main internal regulator output voltage.
 392:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  VoltageScaling : Specifies the regulator output voltage to achieve
 393:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                          a tradeoff between performance and power
 394:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                          consumption.
 395:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
 396:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE0 : Regulator voltage output
 397:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                Scale 0 mode.
 398:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE1 : Regulator voltage output
 399:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 1 mode.
 400:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE2 : Regulator voltage output
 401:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 2 mode.
 402:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE3 : Regulator voltage output
 403:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 3 mode.
 404:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For STM32H74x and STM32H75x lines, configuring Voltage Scale 0 is
 405:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         only possible when Vcore is supplied from LDO (Low DropOut). The
 406:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         SYSCFG Clock must be enabled through __HAL_RCC_SYSCFG_CLK_ENABLE()
 407:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         macro before configuring Voltage Scale 0.
 408:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         To enter low power mode , and if current regulator voltage is
 409:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Voltage Scale 0 then first switch to Voltage Scale 1 before entering
 410:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         low power mode.
 411:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL Status
 412:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 413:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling (uint32_t VoltageScaling)
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 11


 414:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 161              		.loc 1 414 1 is_stmt 1 view -0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              		.loc 1 414 1 is_stmt 0 view .LVU35
 166 0000 38B5     		push	{r3, r4, r5, lr}
 167              	.LCFI2:
 168              		.cfi_def_cfa_offset 16
 169              		.cfi_offset 3, -16
 170              		.cfi_offset 4, -12
 171              		.cfi_offset 5, -8
 172              		.cfi_offset 14, -4
 415:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 173              		.loc 1 415 3 is_stmt 1 view .LVU36
 416:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 417:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 418:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR_VOLTAGE (VoltageScaling));
 174              		.loc 1 418 3 view .LVU37
 419:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 420:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get the voltage scaling  */
 421:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == VoltageScaling)
 175              		.loc 1 421 3 view .LVU38
 176              		.loc 1 421 11 is_stmt 0 view .LVU39
 177 0002 324B     		ldr	r3, .L38
 178 0004 5B68     		ldr	r3, [r3, #4]
 179              		.loc 1 421 18 view .LVU40
 180 0006 03F44043 		and	r3, r3, #49152
 181              		.loc 1 421 6 view .LVU41
 182 000a 8342     		cmp	r3, r0
 183 000c 5CD0     		beq	.L28
 184 000e 0446     		mov	r4, r0
 422:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 423:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Old and new voltage scaling configuration match : nothing to do */
 424:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     return HAL_OK;
 425:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 426:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 427:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_SRDCR_VOS)
 428:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the voltage range */
 429:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
 430:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 431:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(SYSCFG_PWRCR_ODEN) /* STM32H74xxx and STM32H75xxx lines */
 432:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE0)
 185              		.loc 1 432 3 is_stmt 1 view .LVU42
 186              		.loc 1 432 6 is_stmt 0 view .LVU43
 187 0010 08BB     		cbnz	r0, .L19
 433:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 434:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CR3 & PWR_CR3_LDOEN) == PWR_CR3_LDOEN)
 188              		.loc 1 434 5 is_stmt 1 view .LVU44
 189              		.loc 1 434 13 is_stmt 0 view .LVU45
 190 0012 2E4B     		ldr	r3, .L38
 191 0014 DB68     		ldr	r3, [r3, #12]
 192              		.loc 1 434 8 view .LVU46
 193 0016 13F0020F 		tst	r3, #2
 194 001a 01D1     		bne	.L34
 435:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 436:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set the voltage range */
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 12


 437:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 438:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 439:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Get tick */
 440:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       tickstart = HAL_GetTick ();
 441:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 442:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Wait till voltage level flag is set */
 443:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 444:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 445:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 446:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 447:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           return HAL_ERROR;
 448:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 449:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 450:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 451:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Enable the PWR overdrive */
 452:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 453:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 454:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 455:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 456:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* The voltage scale 0 is only possible when LDO regulator is enabled */
 457:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 195              		.loc 1 457 14 view .LVU47
 196 001c 0120     		movs	r0, #1
 197              	.LVL10:
 198              		.loc 1 457 14 view .LVU48
 199 001e 52E0     		b	.L18
 200              	.LVL11:
 201              	.L34:
 437:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 202              		.loc 1 437 7 is_stmt 1 view .LVU49
 203 0020 2A4A     		ldr	r2, .L38
 204 0022 9369     		ldr	r3, [r2, #24]
 205 0024 43F44043 		orr	r3, r3, #49152
 206 0028 9361     		str	r3, [r2, #24]
 440:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 207              		.loc 1 440 7 view .LVU50
 440:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 208              		.loc 1 440 19 is_stmt 0 view .LVU51
 209 002a FFF7FEFF 		bl	HAL_GetTick
 210              	.LVL12:
 440:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 211              		.loc 1 440 19 view .LVU52
 212 002e 0446     		mov	r4, r0
 213              	.LVL13:
 443:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 214              		.loc 1 443 7 is_stmt 1 view .LVU53
 215              	.L20:
 443:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 216              		.loc 1 443 13 view .LVU54
 443:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 217              		.loc 1 443 14 is_stmt 0 view .LVU55
 218 0030 264B     		ldr	r3, .L38
 219 0032 5B68     		ldr	r3, [r3, #4]
 443:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 220              		.loc 1 443 13 view .LVU56
 221 0034 13F4005F 		tst	r3, #8192
 222 0038 07D1     		bne	.L35
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 13


 445:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 223              		.loc 1 445 9 is_stmt 1 view .LVU57
 445:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 224              		.loc 1 445 14 is_stmt 0 view .LVU58
 225 003a FFF7FEFF 		bl	HAL_GetTick
 226              	.LVL14:
 445:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 227              		.loc 1 445 29 view .LVU59
 228 003e 001B     		subs	r0, r0, r4
 445:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 229              		.loc 1 445 12 view .LVU60
 230 0040 B0F57A7F 		cmp	r0, #1000
 231 0044 F4D9     		bls	.L20
 447:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 232              		.loc 1 447 18 view .LVU61
 233 0046 0120     		movs	r0, #1
 234 0048 3DE0     		b	.L18
 235              	.L35:
 452:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 236              		.loc 1 452 7 is_stmt 1 view .LVU62
 237 004a 214A     		ldr	r2, .L38+4
 238 004c D36A     		ldr	r3, [r2, #44]
 239 004e 43F00103 		orr	r3, r3, #1
 240 0052 D362     		str	r3, [r2, #44]
 241 0054 0CE0     		b	.L22
 242              	.LVL15:
 243              	.L19:
 458:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 459:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 460:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 461:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 462:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
 244              		.loc 1 462 5 view .LVU63
 245              		.loc 1 462 13 is_stmt 0 view .LVU64
 246 0056 1D4B     		ldr	r3, .L38
 247 0058 5B68     		ldr	r3, [r3, #4]
 248              		.loc 1 462 20 view .LVU65
 249 005a 03F44043 		and	r3, r3, #49152
 250              		.loc 1 462 8 view .LVU66
 251 005e B3F5404F 		cmp	r3, #49152
 252 0062 15D0     		beq	.L36
 253              	.LVL16:
 254              	.L23:
 463:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 464:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if ((SYSCFG->PWRCR & SYSCFG_PWRCR_ODEN) != 0U)
 465:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 466:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Disable the PWR overdrive */
 467:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 468:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 469:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Get tick */
 470:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         tickstart = HAL_GetTick ();
 471:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 472:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Wait till voltage level flag is set */
 473:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 474:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 475:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 476:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 14


 477:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             return HAL_ERROR;
 478:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           }
 479:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 480:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 481:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 482:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 483:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set the voltage range */
 484:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 255              		.loc 1 484 5 is_stmt 1 view .LVU67
 256 0064 194B     		ldr	r3, .L38
 257 0066 9869     		ldr	r0, [r3, #24]
 258 0068 20F44040 		bic	r0, r0, #49152
 259 006c 0443     		orrs	r4, r4, r0
 260              	.LVL17:
 261              		.loc 1 484 5 is_stmt 0 view .LVU68
 262 006e 9C61     		str	r4, [r3, #24]
 263              	.L22:
 485:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 486:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else  /* STM32H72xxx and STM32H73xxx lines */
 487:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the voltage range */
 488:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 489:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (SYSCFG_PWRCR_ODEN) */
 490:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_SRDCR_VOS) */
 491:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 492:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
 493:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 264              		.loc 1 493 3 is_stmt 1 view .LVU69
 265              		.loc 1 493 15 is_stmt 0 view .LVU70
 266 0070 FFF7FEFF 		bl	HAL_GetTick
 267              	.LVL18:
 268 0074 0446     		mov	r4, r0
 269              	.LVL19:
 494:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 495:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till voltage level flag is set */
 496:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 270              		.loc 1 496 3 is_stmt 1 view .LVU71
 271              	.L26:
 272              		.loc 1 496 9 view .LVU72
 273              		.loc 1 496 10 is_stmt 0 view .LVU73
 274 0076 154B     		ldr	r3, .L38
 275 0078 5B68     		ldr	r3, [r3, #4]
 276              		.loc 1 496 9 view .LVU74
 277 007a 13F4005F 		tst	r3, #8192
 278 007e 21D1     		bne	.L37
 497:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 498:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 279              		.loc 1 498 5 is_stmt 1 view .LVU75
 280              		.loc 1 498 10 is_stmt 0 view .LVU76
 281 0080 FFF7FEFF 		bl	HAL_GetTick
 282              	.LVL20:
 283              		.loc 1 498 24 view .LVU77
 284 0084 001B     		subs	r0, r0, r4
 285              		.loc 1 498 8 view .LVU78
 286 0086 B0F57A7F 		cmp	r0, #1000
 287 008a F4D9     		bls	.L26
 499:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 500:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 15


 288              		.loc 1 500 14 view .LVU79
 289 008c 0120     		movs	r0, #1
 290 008e 1AE0     		b	.L18
 291              	.LVL21:
 292              	.L36:
 464:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 293              		.loc 1 464 7 is_stmt 1 view .LVU80
 464:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 294              		.loc 1 464 18 is_stmt 0 view .LVU81
 295 0090 0F4B     		ldr	r3, .L38+4
 296 0092 DB6A     		ldr	r3, [r3, #44]
 464:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 297              		.loc 1 464 10 view .LVU82
 298 0094 13F0010F 		tst	r3, #1
 299 0098 E4D0     		beq	.L23
 467:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 300              		.loc 1 467 9 is_stmt 1 view .LVU83
 301 009a 0D4A     		ldr	r2, .L38+4
 302 009c D36A     		ldr	r3, [r2, #44]
 303 009e 23F00103 		bic	r3, r3, #1
 304 00a2 D362     		str	r3, [r2, #44]
 470:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 305              		.loc 1 470 9 view .LVU84
 470:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 306              		.loc 1 470 21 is_stmt 0 view .LVU85
 307 00a4 FFF7FEFF 		bl	HAL_GetTick
 308              	.LVL22:
 470:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 309              		.loc 1 470 21 view .LVU86
 310 00a8 0546     		mov	r5, r0
 311              	.LVL23:
 473:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 312              		.loc 1 473 9 is_stmt 1 view .LVU87
 313              	.L24:
 473:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 314              		.loc 1 473 15 view .LVU88
 473:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 315              		.loc 1 473 16 is_stmt 0 view .LVU89
 316 00aa 084B     		ldr	r3, .L38
 317 00ac 5B68     		ldr	r3, [r3, #4]
 473:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 318              		.loc 1 473 15 view .LVU90
 319 00ae 13F4005F 		tst	r3, #8192
 320 00b2 D7D1     		bne	.L23
 475:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 321              		.loc 1 475 11 is_stmt 1 view .LVU91
 475:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 322              		.loc 1 475 16 is_stmt 0 view .LVU92
 323 00b4 FFF7FEFF 		bl	HAL_GetTick
 324              	.LVL24:
 475:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 325              		.loc 1 475 31 view .LVU93
 326 00b8 401B     		subs	r0, r0, r5
 475:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 327              		.loc 1 475 14 view .LVU94
 328 00ba B0F57A7F 		cmp	r0, #1000
 329 00be F4D9     		bls	.L24
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 16


 477:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           }
 330              		.loc 1 477 20 view .LVU95
 331 00c0 0120     		movs	r0, #1
 332 00c2 00E0     		b	.L18
 333              	.LVL25:
 334              	.L37:
 501:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 502:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 503:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 504:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 335              		.loc 1 504 10 view .LVU96
 336 00c4 0020     		movs	r0, #0
 337              	.LVL26:
 338              	.L18:
 505:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 339              		.loc 1 505 1 view .LVU97
 340 00c6 38BD     		pop	{r3, r4, r5, pc}
 341              	.LVL27:
 342              	.L28:
 424:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 343              		.loc 1 424 12 view .LVU98
 344 00c8 0020     		movs	r0, #0
 345              	.LVL28:
 424:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 346              		.loc 1 424 12 view .LVU99
 347 00ca FCE7     		b	.L18
 348              	.L39:
 349              		.align	2
 350              	.L38:
 351 00cc 00480258 		.word	1476544512
 352 00d0 00040058 		.word	1476396032
 353              		.cfi_endproc
 354              	.LFE146:
 356              		.section	.text.HAL_PWREx_GetVoltageRange,"ax",%progbits
 357              		.align	1
 358              		.global	HAL_PWREx_GetVoltageRange
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 363              	HAL_PWREx_GetVoltageRange:
 364              	.LFB147:
 506:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 507:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 508:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the main internal regulator output voltage. Reflecting the last
 509:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        VOS value applied to the PMU.
 510:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The current applied VOS selection.
 511:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 512:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVoltageRange (void)
 513:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 365              		.loc 1 513 1 is_stmt 1 view -0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              		@ link register save eliminated.
 514:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get the active voltage scaling */
 515:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CSR1 & PWR_CSR1_ACTVOS);
 370              		.loc 1 515 3 view .LVU101
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 17


 371              		.loc 1 515 14 is_stmt 0 view .LVU102
 372 0000 024B     		ldr	r3, .L41
 373 0002 5868     		ldr	r0, [r3, #4]
 516:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 374              		.loc 1 516 1 view .LVU103
 375 0004 00F44040 		and	r0, r0, #49152
 376 0008 7047     		bx	lr
 377              	.L42:
 378 000a 00BF     		.align	2
 379              	.L41:
 380 000c 00480258 		.word	1476544512
 381              		.cfi_endproc
 382              	.LFE147:
 384              		.section	.text.HAL_PWREx_ControlStopModeVoltageScaling,"ax",%progbits
 385              		.align	1
 386              		.global	HAL_PWREx_ControlStopModeVoltageScaling
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 391              	HAL_PWREx_ControlStopModeVoltageScaling:
 392              	.LVL29:
 393              	.LFB148:
 517:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 518:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 519:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the main internal regulator output voltage in STOP mode.
 520:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  VoltageScaling : Specifies the regulator output voltage when the
 521:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         system enters Stop mode to achieve a tradeoff between performance
 522:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         and power consumption.
 523:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 524:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE3 : Regulator voltage output range
 525:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             3 mode.
 526:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE4 : Regulator voltage output range
 527:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             4 mode.
 528:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE5 : Regulator voltage output range
 529:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             5 mode.
 530:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The Stop mode voltage scaling for SVOS4 and SVOS5 sets the voltage
 531:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         regulator in Low-power (LP) mode to further reduce power consumption.
 532:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         When preselecting SVOS3, the use of the voltage regulator low-power
 533:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode (LP) can be selected by LPDS register bit.
 534:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The selected SVOS4 and SVOS5 levels add an additional startup delay
 535:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         when exiting from system Stop mode.
 536:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL Status.
 537:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 538:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlStopModeVoltageScaling (uint32_t VoltageScaling)
 539:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 394              		.loc 1 539 1 is_stmt 1 view -0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 540:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 541:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_MODE_REGULATOR_VOLTAGE (VoltageScaling));
 399              		.loc 1 541 3 view .LVU105
 542:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 543:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the stop mode voltage range */
 544:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_SVOS, VoltageScaling);
 400              		.loc 1 544 3 view .LVU106
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 18


 401 0000 034A     		ldr	r2, .L44
 402 0002 1368     		ldr	r3, [r2]
 403 0004 23F44043 		bic	r3, r3, #49152
 404 0008 0343     		orrs	r3, r3, r0
 405 000a 1360     		str	r3, [r2]
 545:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 546:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 406              		.loc 1 546 3 view .LVU107
 547:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 407              		.loc 1 547 1 is_stmt 0 view .LVU108
 408 000c 0020     		movs	r0, #0
 409              	.LVL30:
 410              		.loc 1 547 1 view .LVU109
 411 000e 7047     		bx	lr
 412              	.L45:
 413              		.align	2
 414              	.L44:
 415 0010 00480258 		.word	1476544512
 416              		.cfi_endproc
 417              	.LFE148:
 419              		.section	.text.HAL_PWREx_GetStopModeVoltageRange,"ax",%progbits
 420              		.align	1
 421              		.global	HAL_PWREx_GetStopModeVoltageRange
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 426              	HAL_PWREx_GetStopModeVoltageRange:
 427              	.LFB149:
 548:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 549:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 550:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the main internal regulator output voltage in STOP mode.
 551:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The actual applied VOS selection.
 552:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 553:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetStopModeVoltageRange (void)
 554:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 428              		.loc 1 554 1 is_stmt 1 view -0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 0, uses_anonymous_args = 0
 432              		@ link register save eliminated.
 555:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the stop voltage scaling */
 556:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CR1 & PWR_CR1_SVOS);
 433              		.loc 1 556 3 view .LVU111
 434              		.loc 1 556 14 is_stmt 0 view .LVU112
 435 0000 024B     		ldr	r3, .L47
 436 0002 1868     		ldr	r0, [r3]
 557:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 437              		.loc 1 557 1 view .LVU113
 438 0004 00F44040 		and	r0, r0, #49152
 439 0008 7047     		bx	lr
 440              	.L48:
 441 000a 00BF     		.align	2
 442              	.L47:
 443 000c 00480258 		.word	1476544512
 444              		.cfi_endproc
 445              	.LFE149:
 447              		.section	.text.HAL_PWREx_EnterSTOPMode,"ax",%progbits
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 19


 448              		.align	1
 449              		.global	HAL_PWREx_EnterSTOPMode
 450              		.syntax unified
 451              		.thumb
 452              		.thumb_func
 454              	HAL_PWREx_EnterSTOPMode:
 455              	.LVL31:
 456              	.LFB150:
 558:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 559:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 560:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 561:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 562:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group2 Low Power Control Functions
 563:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Low power control functions
 564:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 565:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
 566:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 567:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                      ##### Low power control functions #####
 568:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 569:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 570:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Domains Low Power modes configuration ***
 571:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =============================================
 572:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 573:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       This section provides the extended low power mode control APIs.
 574:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The system presents 3 principles domains (D1, D2 and D3) that can be
 575:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       operated in low-power modes (DSTOP or DSTANDBY mode):
 576:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 577:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) DSTOP mode to enters a domain to STOP mode:
 578:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) D1 domain and/or D2 domain enters DSTOP mode only when the CPU
 579:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             subsystem is in CSTOP mode and has allocated peripheral in the
 580:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             domain.
 581:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             In DSTOP mode the domain bus matrix clock is stopped.
 582:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The system enters STOP mode using one of the following scenarios:
 583:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 domain enters DSTANDBY mode (powered off) and D2, D3 domains
 584:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 585:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D2 domain enters DSTANDBY mode (powered off) and D1, D3 domains
 586:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 587:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D3 domain enters DSTANDBY mode (powered off) and D1, D2 domains
 588:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 589:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 and D2 domains enter DSTANDBY mode (powered off) and D3 domain
 590:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 591:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 and D3 domains enter DSTANDBY mode (powered off) and D2 domain
 592:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 593:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D2 and D3 domains enter DSTANDBY mode (powered off) and D1 domain
 594:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 595:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1, D2 and D3 domains enter DSTOP mode.
 596:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) When the system enters STOP mode, the clocks are stopped and the
 597:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             regulator is running in main or low power mode.
 598:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) D3 domain can be kept in Run mode regardless of the CPU status when
 599:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             enter STOP mode by using HAL_PWREx_ConfigD3Domain(D3State) function.
 600:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 601:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) DSTANDBY mode to enters a domain to STANDBY mode:
 602:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The DSTANDBY mode is entered when the PDDS_Dn bit in PWR CPU control
 603:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             register (PWR_CPUCR) for the Dn domain selects Standby mode.
 604:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The system enters STANDBY mode only when D1, D2 and D3 domains enter
 605:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             DSTANDBY mode. Consequently the VCORE supply regulator is powered
 606:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             off.
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 20


 607:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 608:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** DSTOP mode ***
 609:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    ==================
 610:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 611:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStop mode the domain bus matrix clock is stopped.
 612:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The Flash memory can enter low-power Stop mode when it is enabled through
 613:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       FLPS in PWR_CR1 register. This allows a trade-off between domain DStop
 614:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       restart time and low power consumption.
 615:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 616:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStop mode domain peripherals using the LSI or LSE clock and
 617:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       peripherals having a kernel clock request are still able to operate.
 618:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 619:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Before entering DSTOP mode it is recommended to call SCB_CleanDCache
 620:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       function in order to clean the D-Cache and guarantee the data integrity
 621:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       for the SRAM memories.
 622:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 623:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Entry:
 624:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          The DSTOP mode is entered using the HAL_PWREx_EnterSTOPMode(Regulator,
 625:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          STOPEntry, Domain) function with:
 626:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) Regulator:
 627:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_MAINREGULATOR_ON     : Main regulator ON.
 628:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_LOWPOWERREGULATOR_ON : Low Power regulator ON.
 629:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) STOPEntry:
 630:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_STOPENTRY_WFI : enter STOP mode with WFI instruction
 631:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_STOPENTRY_WFE : enter STOP mode with WFE instruction
 632:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) Domain:
 633:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D1_DOMAIN : Enters D1/CD domain to DSTOP mode.
 634:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D2_DOMAIN : Enters D2 domain to DSTOP mode.
 635:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D3_DOMAIN : Enters D3/SRD domain to DSTOP mode.
 636:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 637:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Exit:
 638:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 639:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 640:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** DSTANDBY mode ***
 641:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    =====================
 642:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 643:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStandby mode:
 644:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+) The domain bus matrix clock is stopped.
 645:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+) The domain is powered down and the domain RAM and register contents
 646:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             are lost.
 647:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 648:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Before entering DSTANDBY mode it is recommended to call SCB_CleanDCache
 649:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       function in order to clean the D-Cache and guarantee the data integrity
 650:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       for the SRAM memories.
 651:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 652:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Entry:
 653:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          The DSTANDBY mode is entered using the HAL_PWREx_EnterSTANDBYMode
 654:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (Domain) function with:
 655:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) Domain:
 656:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D1_DOMAIN : Enters D1/CD domain to DSTANDBY mode.
 657:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D2_DOMAIN : Enters D2 domain to DSTANDBY mode.
 658:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D3_DOMAIN : Enters D3/SRD domain to DSTANDBY mode.
 659:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 660:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Exit:
 661:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         WKUP pin rising or falling edge, RTC alarm (Alarm A and Alarm B), RTC
 662:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         wakeup, tamper event, time stamp event, external reset in NRST pin,
 663:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         IWDG reset.
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 21


 664:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 665:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** Keep D3/SRD in RUN mode ***
 666:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    ===============================
 667:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 668:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       D3/SRD domain can be kept in Run mode regardless of the CPU status when
 669:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       entering STOP mode by using HAL_PWREx_ConfigD3Domain(D3State) function
 670:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       with :
 671:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) D3State:
 672:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PWR_D3_DOMAIN_STOP : D3/SDR domain follows the CPU sub-system
 673:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                   mode.
 674:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PWR_D3_DOMAIN_RUN : D3/SRD domain remains in Run mode regardless
 675:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                  of CPU subsystem mode.
 676:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 677:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** FLASH Power Down configuration ****
 678:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =======================================
 679:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 680:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       By setting the FLPS bit in the PWR_CR1 register using the
 681:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       HAL_PWREx_EnableFlashPowerDown() function, the Flash memory also enters
 682:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       power down mode when the device enters STOP mode. When the Flash memory is
 683:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       in power down mode, an additional startup delay is incurred when waking up
 684:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       from STOP mode.
 685:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 686:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Wakeup Pins configuration ****
 687:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ===================================
 688:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 689:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Wakeup pins allow the system to exit from Standby mode. The configuration
 690:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       of wakeup pins is done with the HAL_PWREx_EnableWakeUpPin(sPinParams)
 691:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       function with:
 692:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) sPinParams: structure to enable and configure a wakeup pin:
 693:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) WakeUpPin: Wakeup pin to be enabled.
 694:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PinPolarity: Wakeup pin polarity (rising or falling edge).
 695:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PinPull: Wakeup pin pull (no pull, pull-up or pull-down).
 696:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 697:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The wakeup pins are internally connected to the EXTI lines [55-60] to
 698:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       generate an interrupt if enabled. The EXTI lines configuration is done by
 699:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       the HAL_EXTI_Dx_EventInputConfig() functions defined in the stm32h7xxhal.c
 700:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       file.
 701:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 702:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       When a wakeup pin event is received the HAL_PWREx_WAKEUP_PIN_IRQHandler is
 703:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       called and the appropriate flag is set in the PWR_WKUPFR register. Then in
 704:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       the HAL_PWREx_WAKEUP_PIN_IRQHandler function the wakeup pin flag will be
 705:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       cleared and the appropriate user callback will be called. The user can add
 706:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       his own code by customization of function pointer HAL_PWREx_WKUPx_Callback.
 707:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 708:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
 709:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 710:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 711:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 712:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_RETDS_CD)
 713:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 714:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter the system to STOP mode with main domain in DSTOP2.
 715:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In STOP mode, the domain bus matrix clock is stalled.
 716:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In STOP mode, memories and registers are maintained and peripherals
 717:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         in CPU domain are no longer operational.
 718:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   All clocks in the VCORE domain are stopped, the PLL, the HSI and the
 719:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         HSE oscillators are disabled. Only Peripherals that have wakeup
 720:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         capability can switch on the HSI to receive a frame, and switch off
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 22


 721:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the HSI after receiving the frame if it is not a wakeup frame. In
 722:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         this case the HSI clock is propagated only to the peripheral
 723:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         requesting it.
 724:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When exiting STOP mode by issuing an interrupt or a wakeup event,
 725:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the HSI RC oscillator is selected as system clock if STOPWUCK bit in
 726:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         RCC_CFGR register is set.
 727:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Regulator : Specifies the regulator state in STOP mode.
 728:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 729:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_MAINREGULATOR_ON     : STOP mode with regulator ON.
 730:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON : STOP mode with low power
 731:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                            regulator ON.
 732:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  STOPEntry : Specifies if STOP mode in entered with WFI or WFE
 733:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                     intrinsic instruction.
 734:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 735:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFI : Enter STOP mode with WFI instruction.
 736:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFE : Enter STOP mode with WFE instruction.
 737:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 738:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 739:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTOP2Mode (uint32_t Regulator, uint8_t STOPEntry)
 740:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 741:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 742:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR (Regulator));
 743:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
 744:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 745:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the regulator state in Stop mode */
 746:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 747:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 748:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Go to DStop2 mode (deep retention) when CPU domain enters Deepsleep */
 749:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CPUCR, PWR_CPUCR_RETDS_CD);
 750:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 751:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Keep DSTOP mode when SmartRun domain enters Deepsleep */
 752:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_SRD);
 753:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 754:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 755:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 756:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 757:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Ensure that all instructions are done before entering STOP mode */
 758:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __ISB ();
 759:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __DSB ();
 760:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 761:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select Stop mode entry */
 762:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (STOPEntry == PWR_STOPENTRY_WFI)
 763:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 764:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
 765:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
 766:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 767:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 768:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 769:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Event */
 770:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 771:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 772:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 773:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 774:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 775:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 776:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_RETDS_CD) */
 777:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 23


 778:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 779:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter a Domain to DSTOP mode.
 780:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API gives flexibility to manage independently each domain STOP
 781:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode. For dual core lines, this API should be executed with the
 782:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         corresponding Cortex-Mx to enter domain to DSTOP mode. When it is
 783:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         executed by all available Cortex-Mx, the system enter to STOP mode.
 784:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         For single core lines, calling this API with domain parameter set to
 785:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_D1_DOMAIN (D1/CD), the whole system will enter in STOP mode
 786:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         independently of PWR_CPUCR_PDDS_Dx bits values if RUN_D3 bit in the
 787:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         CPUCR_RUN_D3 is cleared.
 788:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In DStop mode the domain bus matrix clock is stopped.
 789:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The system D3/SRD domain enter Stop mode only when the CPU subsystem
 790:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         is in CStop mode, the EXTI wakeup sources are inactive and at least
 791:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         one PDDS_Dn bit in PWR CPU control register (PWR_CPUCR) for
 792:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         any domain request Stop.
 793:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Before entering DSTOP mode it is recommended to call SCB_CleanDCache
 794:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         function in order to clean the D-Cache and guarantee the data
 795:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         integrity for the SRAM memories.
 796:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In System Stop mode, the domain peripherals that use the LSI or LSE
 797:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         clock, and the peripherals that have a kernel clock request to
 798:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         select HSI or CSI as source, are still able to operate.
 799:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Regulator : Specifies the regulator state in STOP mode.
 800:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 801:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_MAINREGULATOR_ON     : STOP mode with regulator ON.
 802:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON : STOP mode with low power
 803:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                            regulator ON.
 804:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  STOPEntry : Specifies if STOP mode in entered with WFI or WFE
 805:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                     intrinsic instruction.
 806:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 807:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFI : Enter STOP mode with WFI instruction.
 808:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFE : Enter STOP mode with WFE instruction.
 809:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Domain : Specifies the Domain to enter in DSTOP mode.
 810:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 811:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN : Enter D1/CD Domain to DSTOP mode.
 812:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
 813:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
 814:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 815:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 816:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
 817:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 457              		.loc 1 817 1 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              		@ link register save eliminated.
 462              		.loc 1 817 1 is_stmt 0 view .LVU115
 463 0000 10B4     		push	{r4}
 464              	.LCFI3:
 465              		.cfi_def_cfa_offset 4
 466              		.cfi_offset 4, -4
 818:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 819:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR (Regulator));
 467              		.loc 1 819 3 is_stmt 1 view .LVU116
 820:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
 468              		.loc 1 820 3 view .LVU117
 821:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN (Domain));
 469              		.loc 1 821 3 view .LVU118
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 24


 822:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 823:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the regulator state in Stop mode */
 824:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 470              		.loc 1 824 3 view .LVU119
 471 0002 174C     		ldr	r4, .L58
 472 0004 2368     		ldr	r3, [r4]
 473 0006 23F00103 		bic	r3, r3, #1
 474 000a 0343     		orrs	r3, r3, r0
 475 000c 2360     		str	r3, [r4]
 825:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 826:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the domain Power Down DeepSleep */
 827:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (Domain == PWR_D1_DOMAIN)
 476              		.loc 1 827 3 view .LVU120
 477              		.loc 1 827 6 is_stmt 0 view .LVU121
 478 000e CAB9     		cbnz	r2, .L50
 828:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 829:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 830:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 831:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM7_CPUID)
 832:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 833:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
 834:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering stop
 835:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          mode will not be performed
 836:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 837:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
 838:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 839:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 840:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 841:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
 842:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 479              		.loc 1 842 5 is_stmt 1 view .LVU122
 480 0010 2369     		ldr	r3, [r4, #16]
 481 0012 23F00103 		bic	r3, r3, #1
 482 0016 2361     		str	r3, [r4, #16]
 843:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 844:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
 845:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 483              		.loc 1 845 5 view .LVU123
 484 0018 124A     		ldr	r2, .L58+4
 485              	.LVL32:
 486              		.loc 1 845 5 is_stmt 0 view .LVU124
 487 001a 1369     		ldr	r3, [r2, #16]
 488 001c 43F00403 		orr	r3, r3, #4
 489 0020 1361     		str	r3, [r2, #16]
 846:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 847:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Ensure that all instructions are done before entering STOP mode */
 848:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __DSB ();
 490              		.loc 1 848 5 is_stmt 1 view .LVU125
 491              	.LBB22:
 492              	.LBI22:
 493              		.file 2 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h"
   1:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 25


   7:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 26


  64:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 119:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 120:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 27


 121:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 122:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            in the used linker script.
 129:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 130:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 131:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 133:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 135:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 136:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 141:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 142:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 146:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 151:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     }
 155:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
 156:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  
 157:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     }
 161:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
 162:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  
 163:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   _start();
 164:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 165:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 166:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 168:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 169:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 172:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 173:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 176:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 177:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 28


 178:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 180:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 181:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 184:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 185:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 189:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 190:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 191:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 192:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 196:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 198:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 200:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 201:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 202:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 203:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 207:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 209:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 211:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 212:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 214:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 217:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 218:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 220:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 221:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 222:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 224:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 225:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 226:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 29


 235:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 241:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 243:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 244:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 248:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 250:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 252:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 253:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 254:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 256:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 260:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 262:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 264:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 265:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 267:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 268:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 272:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 274:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 275:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 276:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 278:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 279:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 280:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 281:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 282:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 286:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 288:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 289:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 290:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 30


 292:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 294:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 296:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 300:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 302:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 303:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 304:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 306:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 307:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 308:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 310:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 314:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 316:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 317:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 318:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 320:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 321:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 322:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 323:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 325:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 329:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 331:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 332:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 333:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 335:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 336:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 337:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 338:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 339:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 340:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 344:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 346:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 348:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 31


 349:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 360:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 361:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 362:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 363:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 364:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 368:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 370:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 371:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 372:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 374:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 375:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 379:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 383:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 385:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 386:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 387:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 389:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 390:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 391:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 392:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 393:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 394:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 398:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 400:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 402:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 403:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 404:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 32


 406:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 410:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 412:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 414:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 415:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 416:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 419:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 422:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 423:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 425:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 426:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 427:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 429:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 430:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 432:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 433:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 437:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 439:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 441:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 442:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 443:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 445:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 449:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 451:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 452:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 453:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 455:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 456:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 457:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 458:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 460:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 33


 463:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 464:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 466:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 467:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 468:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 470:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 471:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 472:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 473:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 474:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 475:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 479:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 481:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 484:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 496:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 498:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 502:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 506:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 508:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 510:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 511:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 512:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 513:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 517:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 519:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 34


 520:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 521:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 522:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 523:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 524:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 528:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 530:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 531:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 532:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 534:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 535:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 537:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 539:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 543:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 545:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 546:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 547:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 549:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 550:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 551:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 553:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 554:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 558:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 560:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 562:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 564:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 566:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 570:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 572:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 574:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 575:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 576:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 35


 577:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 578:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 583:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 585:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 587:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 588:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 589:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 590:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 594:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 596:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 597:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 598:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 600:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 601:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 602:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 603:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 605:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 609:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 611:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 612:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 613:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 615:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 616:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 617:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 618:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 619:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 620:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 624:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 626:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 628:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 629:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 630:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 632:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 36


 634:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 636:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 638:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 640:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 641:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 642:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 646:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 647:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 650:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 655:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 656:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 659:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 661:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 665:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 666:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 667:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 669:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 670:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 671:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 672:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 674:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 678:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 681:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 683:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 686:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 687:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 688:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 690:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 37


 691:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 692:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 693:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 694:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 695:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 696:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 700:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   
 701:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 704:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 706:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 711:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 713:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 714:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 718:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 731:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 733:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 734:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 735:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 738:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 742:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 38


 748:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 752:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 753:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 754:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 756:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 757:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 758:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 759:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 760:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 762:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 766:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 769:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 771:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 774:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 775:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 776:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 778:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 779:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 780:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 782:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 783:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 784:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 788:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 789:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 799:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 801:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 802:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 803:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 804:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 39


 805:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 806:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 813:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 815:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 819:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 821:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 822:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 823:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 824:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 827:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 828:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 829:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 833:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 835:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 843:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 844:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 847:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 848:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 849:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 850:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 851:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 852:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 854:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 855:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 859:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 861:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 40


 862:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 869:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 871:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 872:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 873:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 874:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 875:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 876:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 877:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 879:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 880:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 884:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** */
 885:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 886:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 894:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 898:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 899:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 900:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 901:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 903:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 905:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 906:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 909:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 911:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 912:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 913:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 917:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 41


 919:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 920:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 921:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 922:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 924:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 926:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 927:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 928:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 933:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 935:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 937:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 938:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 939:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 940:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 944:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 494              		.loc 2 944 27 view .LVU126
 495              	.LBB23:
 945:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 946:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 496              		.loc 2 946 3 view .LVU127
 497              		.syntax unified
 498              	@ 946 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h" 1
 499 0022 BFF34F8F 		dsb 0xF
 500              	@ 0 "" 2
 501              		.thumb
 502              		.syntax unified
 503              	.LBE23:
 504              	.LBE22:
 849:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __ISB ();
 505              		.loc 1 849 5 view .LVU128
 506              	.LBB24:
 507              	.LBI24:
 933:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 508              		.loc 2 933 27 view .LVU129
 509              	.LBB25:
 935:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 510              		.loc 2 935 3 view .LVU130
 511              		.syntax unified
 512              	@ 935 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h" 1
 513 0026 BFF36F8F 		isb 0xF
 514              	@ 0 "" 2
 515              		.thumb
 516              		.syntax unified
 517              	.LBE25:
 518              	.LBE24:
 850:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 42


 851:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Select Stop mode entry */
 852:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (STOPEntry == PWR_STOPENTRY_WFI)
 519              		.loc 1 852 5 view .LVU131
 520              		.loc 1 852 8 is_stmt 0 view .LVU132
 521 002a 0129     		cmp	r1, #1
 522 002c 08D0     		beq	.L56
 853:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 854:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Interrupt */
 855:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFI ();
 856:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 857:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 858:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 859:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Event */
 860:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFE ();
 523              		.loc 1 860 7 is_stmt 1 view .LVU133
 524              		.syntax unified
 525              	@ 860 "HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 526 002e 20BF     		wfe
 527              	@ 0 "" 2
 528              		.thumb
 529              		.syntax unified
 530              	.L52:
 861:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 862:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 863:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 864:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 531              		.loc 1 864 5 view .LVU134
 532 0030 0C4A     		ldr	r2, .L58+4
 533 0032 1369     		ldr	r3, [r2, #16]
 534 0034 23F00403 		bic	r3, r3, #4
 535 0038 1361     		str	r3, [r2, #16]
 536              	.L49:
 865:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 866:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_PDDS_D2)
 867:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (Domain == PWR_D2_DOMAIN)
 868:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 869:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 870:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 871:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM4_CPUID)
 872:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 873:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
 874:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering stop
 875:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          mode will not be performed
 876:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 877:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
 878:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 879:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 880:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D2 domain enters Deepsleep */
 881:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 882:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 883:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
 884:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 885:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 886:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Ensure that all instructions are done before entering STOP mode */
 887:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __DSB ();
 888:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __ISB ();
 889:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 43


 890:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Select Stop mode entry */
 891:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (STOPEntry == PWR_STOPENTRY_WFI)
 892:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 893:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Interrupt */
 894:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFI ();
 895:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 896:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 897:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 898:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Event */
 899:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFE ();
 900:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 901:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 902:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 903:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 904:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 905:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D2 domain enters Deepsleep */
 906:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 907:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 908:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 909:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_PDDS_D2) */
 910:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 911:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 912:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 913:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 914:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
 915:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 916:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Keep DSTOP mode when D3 domain enters Deepsleep */
 917:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 918:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 919:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 920:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 921:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Keep DSTOP mode when D3 domain enters Deepsleep */
 922:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 923:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 924:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 925:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
 926:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 927:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 928:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 929:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 537              		.loc 1 929 1 is_stmt 0 view .LVU135
 538 003a 5DF8044B 		ldr	r4, [sp], #4
 539              	.LCFI4:
 540              		.cfi_remember_state
 541              		.cfi_restore 4
 542              		.cfi_def_cfa_offset 0
 543 003e 7047     		bx	lr
 544              	.L56:
 545              	.LCFI5:
 546              		.cfi_restore_state
 855:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 547              		.loc 1 855 7 is_stmt 1 view .LVU136
 548              		.syntax unified
 549              	@ 855 "HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 550 0040 30BF     		wfi
 551              	@ 0 "" 2
 552              		.thumb
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 44


 553              		.syntax unified
 554 0042 F5E7     		b	.L52
 555              	.LVL33:
 556              	.L50:
 867:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 557              		.loc 1 867 8 view .LVU137
 867:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 558              		.loc 1 867 11 is_stmt 0 view .LVU138
 559 0044 012A     		cmp	r2, #1
 560 0046 05D0     		beq	.L57
 926:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 561              		.loc 1 926 5 is_stmt 1 view .LVU139
 562 0048 054A     		ldr	r2, .L58
 563              	.LVL34:
 926:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 564              		.loc 1 926 5 is_stmt 0 view .LVU140
 565 004a 1369     		ldr	r3, [r2, #16]
 566 004c 23F00403 		bic	r3, r3, #4
 567 0050 1361     		str	r3, [r2, #16]
 568              		.loc 1 929 1 view .LVU141
 569 0052 F2E7     		b	.L49
 570              	.LVL35:
 571              	.L57:
 906:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 572              		.loc 1 906 5 is_stmt 1 view .LVU142
 573 0054 024A     		ldr	r2, .L58
 574              	.LVL36:
 906:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 575              		.loc 1 906 5 is_stmt 0 view .LVU143
 576 0056 1369     		ldr	r3, [r2, #16]
 577 0058 23F00203 		bic	r3, r3, #2
 578 005c 1361     		str	r3, [r2, #16]
 579 005e ECE7     		b	.L49
 580              	.L59:
 581              		.align	2
 582              	.L58:
 583 0060 00480258 		.word	1476544512
 584 0064 00ED00E0 		.word	-536810240
 585              		.cfi_endproc
 586              	.LFE150:
 588              		.section	.text.HAL_PWREx_ClearPendingEvent,"ax",%progbits
 589              		.align	1
 590              		.global	HAL_PWREx_ClearPendingEvent
 591              		.syntax unified
 592              		.thumb
 593              		.thumb_func
 595              	HAL_PWREx_ClearPendingEvent:
 596              	.LFB151:
 930:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 931:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 932:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear pending event.
 933:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API clears the pending event in order to enter a given CPU
 934:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         to CSLEEP or CSTOP. It should be called just before APIs performing
 935:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         enter low power mode using Wait For Event request.
 936:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
 937:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 938:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 45


 939:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ClearPendingEvent (void)
 940:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 597              		.loc 1 940 1 is_stmt 1 view -0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 0
 600              		@ frame_needed = 0, uses_anonymous_args = 0
 601              		@ link register save eliminated.
 941:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 942:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the current Core */
 943:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (HAL_GetCurrentCPUID () == CM7_CPUID)
 944:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 945:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 946:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 947:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 948:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 949:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __SEV ();
 950:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 951:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 952:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 953:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __WFE ();
 602              		.loc 1 953 3 view .LVU145
 603              		.syntax unified
 604              	@ 953 "HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 605 0000 20BF     		wfe
 606              	@ 0 "" 2
 954:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 955:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 607              		.loc 1 955 1 is_stmt 0 view .LVU146
 608              		.thumb
 609              		.syntax unified
 610 0002 7047     		bx	lr
 611              		.cfi_endproc
 612              	.LFE151:
 614              		.section	.text.HAL_PWREx_EnterSTANDBYMode,"ax",%progbits
 615              		.align	1
 616              		.global	HAL_PWREx_EnterSTANDBYMode
 617              		.syntax unified
 618              		.thumb
 619              		.thumb_func
 621              	HAL_PWREx_EnterSTANDBYMode:
 622              	.LVL37:
 623              	.LFB152:
 956:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 957:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 958:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter a Domain to DSTANDBY mode.
 959:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API gives flexibility to manage independently each domain
 960:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         STANDBY mode. For dual core lines, this API should be executed with
 961:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the corresponding Cortex-Mx to enter domain to DSTANDBY mode. When
 962:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         it is executed by all available Cortex-Mx, the system enter STANDBY
 963:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode.
 964:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         For single core lines, calling this API with D1/SRD the selected
 965:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain will enter the whole system in STOP if PWR_CPUCR_PDDS_D3 = 0
 966:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         and enter the whole system in STANDBY if PWR_CPUCR_PDDS_D3 = 1.
 967:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The DStandby mode is entered when all PDDS_Dn bits in PWR_CPUCR for
 968:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the Dn domain select Standby mode. When the system enters Standby
 969:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode, the voltage regulator is disabled.
 970:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When D2 or D3 domain is in DStandby mode and the CPU sets the
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 46


 971:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain PDDS_Dn bit to select Stop mode, the domain remains in
 972:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         DStandby mode. The domain will only exit DStandby when the CPU
 973:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         allocates a peripheral in the domain.
 974:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The system D3/SRD domain enters Standby mode only when the D1 and D2
 975:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain are in DStandby.
 976:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Before entering DSTANDBY mode it is recommended to call
 977:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         SCB_CleanDCache function in order to clean the D-Cache and guarantee
 978:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the data integrity for the SRAM memories.
 979:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Domain : Specifies the Domain to enter to STANDBY mode.
 980:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 981:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN: Enter D1/CD Domain to DSTANDBY mode.
 982:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTANDBY mode.
 983:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN: Enter D3/SRD Domain to DSTANDBY mode.
 984:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
 985:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 986:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTANDBYMode (uint32_t Domain)
 987:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 624              		.loc 1 987 1 is_stmt 1 view -0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 0
 627              		@ frame_needed = 0, uses_anonymous_args = 0
 628              		@ link register save eliminated.
 988:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 989:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN (Domain));
 629              		.loc 1 989 3 view .LVU148
 990:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 991:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the domain Power Down DeepSleep */
 992:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (Domain == PWR_D1_DOMAIN)
 630              		.loc 1 992 3 view .LVU149
 631              		.loc 1 992 6 is_stmt 0 view .LVU150
 632 0000 58B9     		cbnz	r0, .L62
 993:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 994:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 995:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 996:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM7_CPUID)
 997:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 998:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
 999:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering
1000:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          standby mode will not be performed
1001:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
1002:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
1003:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1004:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1005:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1006:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
1007:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D1);
 633              		.loc 1 1007 5 is_stmt 1 view .LVU151
 634 0002 0D4A     		ldr	r2, .L66
 635 0004 1369     		ldr	r3, [r2, #16]
 636 0006 43F00103 		orr	r3, r3, #1
 637 000a 1361     		str	r3, [r2, #16]
1008:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1009:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1010:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
1011:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D1);
1012:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
1013:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 47


1014:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
1015:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 638              		.loc 1 1015 5 view .LVU152
 639 000c 0B4A     		ldr	r2, .L66+4
 640 000e 1369     		ldr	r3, [r2, #16]
 641 0010 43F00403 		orr	r3, r3, #4
 642 0014 1361     		str	r3, [r2, #16]
1016:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1017:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* This option is used to ensure that store operations are completed */
1018:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (__CC_ARM)
1019:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __force_stores ();
1020:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (__CC_ARM) */
1021:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1022:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
1023:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
 643              		.loc 1 1023 5 view .LVU153
 644              		.syntax unified
 645              	@ 1023 "HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 646 0016 30BF     		wfi
 647              	@ 0 "" 2
 648              		.thumb
 649              		.syntax unified
 650 0018 7047     		bx	lr
 651              	.L62:
1024:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1025:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_PDDS_D2)
1026:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (Domain == PWR_D2_DOMAIN)
 652              		.loc 1 1026 8 view .LVU154
 653              		.loc 1 1026 11 is_stmt 0 view .LVU155
 654 001a 0128     		cmp	r0, #1
 655 001c 05D0     		beq	.L65
1027:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1028:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D2 domain enters Deepsleep */
1029:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D2);
1030:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1031:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1032:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
1033:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM4_CPUID)
1034:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1035:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
1036:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering
1037:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          standby mode will not be performed
1038:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
1039:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
1040:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1041:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1042:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D2 domain enters Deepsleep */
1043:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D2);
1044:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1045:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
1046:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
1047:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1048:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* This option is used to ensure that store operations are completed */
1049:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (__CC_ARM)
1050:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __force_stores ();
1051:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (__CC_ARM) */
1052:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 48


1053:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
1054:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
1055:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1056:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1057:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_PDDS_D2) */
1058:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1059:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1060:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
1061:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 656              		.loc 1 1061 5 is_stmt 1 view .LVU156
 657 001e 064A     		ldr	r2, .L66
 658 0020 1369     		ldr	r3, [r2, #16]
 659 0022 43F00403 		orr	r3, r3, #4
 660 0026 1361     		str	r3, [r2, #16]
1062:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1063:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1064:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
1065:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
1066:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1067:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1068:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 661              		.loc 1 1068 1 is_stmt 0 view .LVU157
 662 0028 7047     		bx	lr
 663              	.L65:
1029:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 664              		.loc 1 1029 5 is_stmt 1 view .LVU158
 665 002a 034A     		ldr	r2, .L66
 666 002c 1369     		ldr	r3, [r2, #16]
 667 002e 43F00203 		orr	r3, r3, #2
 668 0032 1361     		str	r3, [r2, #16]
 669 0034 7047     		bx	lr
 670              	.L67:
 671 0036 00BF     		.align	2
 672              	.L66:
 673 0038 00480258 		.word	1476544512
 674 003c 00ED00E0 		.word	-536810240
 675              		.cfi_endproc
 676              	.LFE152:
 678              		.section	.text.HAL_PWREx_ConfigD3Domain,"ax",%progbits
 679              		.align	1
 680              		.global	HAL_PWREx_ConfigD3Domain
 681              		.syntax unified
 682              		.thumb
 683              		.thumb_func
 685              	HAL_PWREx_ConfigD3Domain:
 686              	.LVL38:
 687              	.LFB153:
1069:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1070:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1071:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the D3/SRD Domain state when the System in low power mode.
1072:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  D3State : Specifies the D3/SRD state.
1073:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
1074:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN_STOP : D3/SRD domain will follow the most deep
1075:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      CPU sub-system low power mode.
1076:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN_RUN : D3/SRD domain will stay in RUN mode
1077:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                     regardless of the CPU sub-system low
1078:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                     power mode.
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 49


1079:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1080:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1081:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ConfigD3Domain (uint32_t D3State)
1082:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 688              		.loc 1 1082 1 view -0
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 0
 691              		@ frame_needed = 0, uses_anonymous_args = 0
 692              		@ link register save eliminated.
1083:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1084:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_D3_STATE (D3State));
 693              		.loc 1 1084 3 view .LVU160
1085:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1086:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Keep D3/SRD in run mode */
1087:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CPUCR, PWR_CPUCR_RUN_D3, D3State);
 694              		.loc 1 1087 3 view .LVU161
 695 0000 034A     		ldr	r2, .L69
 696 0002 1369     		ldr	r3, [r2, #16]
 697 0004 23F40063 		bic	r3, r3, #2048
 698 0008 0343     		orrs	r3, r3, r0
 699 000a 1361     		str	r3, [r2, #16]
1088:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 700              		.loc 1 1088 1 is_stmt 0 view .LVU162
 701 000c 7047     		bx	lr
 702              	.L70:
 703 000e 00BF     		.align	2
 704              	.L69:
 705 0010 00480258 		.word	1476544512
 706              		.cfi_endproc
 707              	.LFE153:
 709              		.section	.text.HAL_PWREx_EnableFlashPowerDown,"ax",%progbits
 710              		.align	1
 711              		.global	HAL_PWREx_EnableFlashPowerDown
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 716              	HAL_PWREx_EnableFlashPowerDown:
 717              	.LFB154:
1089:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1090:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1091:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1092:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear HOLD2F, HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2 flags for a
1093:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        given domain.
1094:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  DomainFlags : Specifies the Domain flags to be cleared.
1095:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1096:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN_FLAGS : Clear D1 Domain flags.
1097:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN_FLAGS : Clear D2 Domain flags.
1098:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_ALL_DOMAIN_FLAGS : Clear D1 and D2 Domain flags.
1099:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1100:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1101:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ClearDomainFlags (uint32_t DomainFlags)
1102:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1103:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1104:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN_FLAG (DomainFlags));
1105:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1106:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* D1 CPU flags */
1107:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (DomainFlags == PWR_D1_DOMAIN_FLAGS)
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 50


1108:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1109:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D1 domain flags (HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2) */
1110:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_CSSF);
1111:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1112:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* D2 CPU flags */
1113:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (DomainFlags == PWR_D2_DOMAIN_FLAGS)
1114:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1115:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D2 domain flags (HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2) */
1116:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_CSSF);
1117:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1118:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1119:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1120:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D1 domain flags (HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2) */
1121:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_CSSF);
1122:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D2 domain flags (HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2) */
1123:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_CSSF);
1124:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1125:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1126:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1127:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1128:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Hold the CPU and their domain peripherals when exiting STOP mode.
1129:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  CPU : Specifies the core to be held.
1130:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
1131:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg PWR_CORE_CPU1: Hold CPU1 and set CPU2 as master.
1132:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg PWR_CORE_CPU2: Hold CPU2 and set CPU1 as master.
1133:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status
1134:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1135:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_HoldCore (uint32_t CPU)
1136:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1137:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1138:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1139:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1140:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_CORE (CPU));
1141:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1142:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check CPU index */
1143:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (CPU == PWR_CORE_CPU2)
1144:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1145:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* If CPU1 is not held */
1146:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CPU2CR & PWR_CPU2CR_HOLD1) != PWR_CPU2CR_HOLD1)
1147:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1148:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set HOLD2 bit */
1149:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (PWR->CPUCR, PWR_CPUCR_HOLD2);
1150:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1151:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
1152:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1153:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       status = HAL_ERROR;
1154:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1155:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1156:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1157:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1158:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* If CPU2 is not held */
1159:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CPUCR & PWR_CPUCR_HOLD2) != PWR_CPUCR_HOLD2)
1160:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1161:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set HOLD1 bit */
1162:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (PWR->CPU2CR, PWR_CPU2CR_HOLD1);
1163:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1164:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 51


1165:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1166:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       status = HAL_ERROR;
1167:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1168:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1169:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1170:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return status;
1171:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1172:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1173:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1174:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Release the CPU and their domain peripherals after a wake-up from
1175:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        STOP mode.
1176:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  CPU: Specifies the core to be released.
1177:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
1178:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg  PWR_CORE_CPU1: Release the CPU1 and their domain
1179:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                   peripherals from holding.
1180:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg  PWR_CORE_CPU2: Release the CPU2 and their domain
1181:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                   peripherals from holding.
1182:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1183:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1184:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ReleaseCore (uint32_t CPU)
1185:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1186:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1187:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_CORE (CPU));
1188:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1189:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check CPU index */
1190:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (CPU == PWR_CORE_CPU2)
1191:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1192:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Reset HOLD2 bit */
1193:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_HOLD2);
1194:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1195:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1196:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1197:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Reset HOLD1 bit */
1198:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_HOLD1);
1199:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1200:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1201:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1202:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1203:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1204:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1205:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Flash Power Down in Stop mode.
1206:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When Flash Power Down is enabled  the Flash memory enters low-power
1207:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode when D1/SRD domain is in DStop mode. This feature allows to
1208:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         obtain the best trade-off between low-power consumption and restart
1209:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         time when exiting from DStop mode.
1210:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1211:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1212:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableFlashPowerDown (void)
1213:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 718              		.loc 1 1213 1 is_stmt 1 view -0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		@ link register save eliminated.
1214:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Flash Power Down */
1215:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_FLPS);
 723              		.loc 1 1215 3 view .LVU164
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 52


 724 0000 024A     		ldr	r2, .L72
 725 0002 1368     		ldr	r3, [r2]
 726 0004 43F40073 		orr	r3, r3, #512
 727 0008 1360     		str	r3, [r2]
1216:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 728              		.loc 1 1216 1 is_stmt 0 view .LVU165
 729 000a 7047     		bx	lr
 730              	.L73:
 731              		.align	2
 732              	.L72:
 733 000c 00480258 		.word	1476544512
 734              		.cfi_endproc
 735              	.LFE154:
 737              		.section	.text.HAL_PWREx_DisableFlashPowerDown,"ax",%progbits
 738              		.align	1
 739              		.global	HAL_PWREx_DisableFlashPowerDown
 740              		.syntax unified
 741              		.thumb
 742              		.thumb_func
 744              	HAL_PWREx_DisableFlashPowerDown:
 745              	.LFB155:
1217:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1218:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1219:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Flash Power Down in Stop mode.
1220:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When Flash Power Down is disabled  the Flash memory is kept on
1221:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         normal mode when D1/SRD domain is in DStop mode. This feature allows
1222:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         to obtain the best trade-off between low-power consumption and
1223:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         restart time when exiting from DStop mode.
1224:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1225:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1226:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableFlashPowerDown (void)
1227:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 746              		.loc 1 1227 1 is_stmt 1 view -0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 750              		@ link register save eliminated.
1228:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Flash Power Down */
1229:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_FLPS);
 751              		.loc 1 1229 3 view .LVU167
 752 0000 024A     		ldr	r2, .L75
 753 0002 1368     		ldr	r3, [r2]
 754 0004 23F40073 		bic	r3, r3, #512
 755 0008 1360     		str	r3, [r2]
1230:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 756              		.loc 1 1230 1 is_stmt 0 view .LVU168
 757 000a 7047     		bx	lr
 758              	.L76:
 759              		.align	2
 760              	.L75:
 761 000c 00480258 		.word	1476544512
 762              		.cfi_endproc
 763              	.LFE155:
 765              		.section	.text.HAL_PWREx_EnableWakeUpPin,"ax",%progbits
 766              		.align	1
 767              		.global	HAL_PWREx_EnableWakeUpPin
 768              		.syntax unified
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 53


 769              		.thumb
 770              		.thumb_func
 772              	HAL_PWREx_EnableWakeUpPin:
 773              	.LVL39:
 774              	.LFB156:
1231:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1232:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CR1_SRDRAMSO)
1233:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1234:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable memory block shut-off in DStop or DStop2 modes
1235:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In DStop or DStop2 mode, the content of the memory blocks is
1236:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         maintained. Further power optimization can be obtained by switching
1237:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         off some memory blocks. This optimization implies loss of the memory
1238:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         content. The user can select which memory is discarded during STOP
1239:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode by means of xxSO bits.
1240:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  MemoryBlock : Specifies the memory block to shut-off during DStop or
1241:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                       DStop2 mode.
1242:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1243:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SRD_AHB_MEMORY_BLOCK : SmartRun domain AHB memory.
1244:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_USB_FDCAN_MEMORY_BLOCK : High-speed interfaces USB and
1245:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              FDCAN memories.
1246:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_GFXMMU_JPEG_MEMORY_BLOCK : GFXMMU and JPEG memories.
1247:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_TCM_ECM_MEMORY_BLOCK : Instruction TCM and ETM memories.
1248:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AHB_MEMORY_BLOCK : AHB RAM1 memory.
1249:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AHB_MEMORY_BLOCK : AHB RAM2 memory.
1250:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AXI_MEMORY_BLOCK : AXI RAM1 memory.
1251:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AXI_MEMORY_BLOCK : AXI RAM2 memory.
1252:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM3_AXI_MEMORY_BLOCK : AXI RAM3 memory.
1253:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1254:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1255:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableMemoryShutOff (uint32_t MemoryBlock)
1256:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1257:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1258:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_MEMORY_BLOCK (MemoryBlock));
1259:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1260:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable memory block shut-off */
1261:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, MemoryBlock);
1262:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1263:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1264:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1265:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable memory block shut-off in DStop or DStop2 modes
1266:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  MemoryBlock : Specifies the memory block to keep content during
1267:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                       DStop or DStop2 mode.
1268:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1269:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SRD_AHB_MEMORY_BLOCK : SmartRun domain AHB memory.
1270:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_USB_FDCAN_MEMORY_BLOCK : High-speed interfaces USB and
1271:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              FDCAN memories.
1272:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_GFXMMU_JPEG_MEMORY_BLOCK : GFXMMU and JPEG memories.
1273:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_TCM_ECM_MEMORY_BLOCK : Instruction TCM and ETM memories.
1274:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AHB_MEMORY_BLOCK : AHB RAM1 memory.
1275:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AHB_MEMORY_BLOCK : AHB RAM2 memory.
1276:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AXI_MEMORY_BLOCK : AXI RAM1 memory.
1277:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AXI_MEMORY_BLOCK : AXI RAM2 memory.
1278:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM3_AXI_MEMORY_BLOCK : AXI RAM3 memory.
1279:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1280:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1281:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableMemoryShutOff (uint32_t MemoryBlock)
1282:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 54


1283:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1284:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_MEMORY_BLOCK (MemoryBlock));
1285:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1286:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable memory block shut-off */
1287:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, MemoryBlock);
1288:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1289:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CR1_SRDRAMSO) */
1290:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1291:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1292:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Wake-up PINx functionality.
1293:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  sPinParams : Pointer to a PWREx_WakeupPinTypeDef structure that
1294:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      contains the configuration information for the wake-up
1295:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      Pin.
1296:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For dual core devices, please ensure to configure the EXTI lines for
1297:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the different Cortex-Mx. All combination are allowed: wake up only
1298:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Cortex-M7, wake up only Cortex-M4 and wake up Cortex-M7 and
1299:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Cortex-M4.
1300:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1301:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1302:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableWakeUpPin (PWREx_WakeupPinTypeDef *sPinParams)
1303:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 775              		.loc 1 1303 1 is_stmt 1 view -0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              		@ link register save eliminated.
 780              		.loc 1 1303 1 is_stmt 0 view .LVU170
 781 0000 10B4     		push	{r4}
 782              	.LCFI6:
 783              		.cfi_def_cfa_offset 4
 784              		.cfi_offset 4, -4
1304:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t pinConfig;
 785              		.loc 1 1304 3 is_stmt 1 view .LVU171
1305:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t regMask;
 786              		.loc 1 1305 3 view .LVU172
1306:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   const uint32_t pullMask = PWR_WKUPEPR_WKUPPUPD1;
 787              		.loc 1 1306 3 view .LVU173
 788              	.LVL40:
1307:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1308:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1309:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN (sPinParams->WakeUpPin));
 789              		.loc 1 1309 3 view .LVU174
1310:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN_POLARITY (sPinParams->PinPolarity));
 790              		.loc 1 1310 3 view .LVU175
1311:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN_PULL (sPinParams->PinPull));
 791              		.loc 1 1311 3 view .LVU176
1312:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1313:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   pinConfig = sPinParams->WakeUpPin | \
 792              		.loc 1 1313 3 view .LVU177
 793              		.loc 1 1313 25 is_stmt 0 view .LVU178
 794 0002 0368     		ldr	r3, [r0]
1314:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 795              		.loc 1 1314 26 view .LVU179
 796 0004 4168     		ldr	r1, [r0, #4]
 797              	.LVL41:
 798              	.LBB26:
 799              	.LBI26:
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 55


 947:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 948:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 949:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 950:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 951:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 955:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 957:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 959:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 960:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 961:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 962:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 966:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 967:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 969:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 972:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 973:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 974:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 976:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 977:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 978:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 979:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 980:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 981:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 985:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
 986:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 988:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 989:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 990:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 992:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 993:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 994:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 995:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
 996:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1000:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
1001:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
1003:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 56


1004:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
1006:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   int16_t result;
1007:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
1008:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
1010:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1011:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
1012:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
1013:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
1014:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
1015:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Rotated value
1020:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
1021:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
1023:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   {
1026:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     return op1;
1027:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
1028:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
1030:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
1031:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
1032:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
1033:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
1039:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
1041:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
1042:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
1043:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1047:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
1048:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 800              		.loc 2 1048 31 is_stmt 1 view .LVU180
 801              	.LBB27:
1049:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
1050:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 802              		.loc 2 1050 3 view .LVU181
1051:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
1052:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 803              		.loc 2 1055 4 view .LVU182
 804              		.syntax unified
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 57


 805              	@ 1055 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h" 1
 806 0006 93FAA3F2 		rbit r2, r3
 807              	@ 0 "" 2
 808              	.LVL42:
1056:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
1057:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
1059:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   {
1062:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     result <<= 1U;
1063:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     s--;
1065:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
1066:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1068:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 809              		.loc 2 1068 3 view .LVU183
 810              		.loc 2 1068 3 is_stmt 0 view .LVU184
 811              		.thumb
 812              		.syntax unified
 813              	.LBE27:
 814              	.LBE26:
 815              	.LBB28:
 816              	.LBI28:
1069:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
1070:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
1071:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
1072:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** /**
1073:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****  */
1078:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 817              		.loc 2 1078 30 is_stmt 1 view .LVU185
 818              	.LBB29:
1079:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
1080:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      is non-zero".
1086:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****    */
1089:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   if (value == 0U)
 819              		.loc 2 1089 3 view .LVU186
 820              		.loc 2 1089 6 is_stmt 0 view .LVU187
 821 000a 002A     		cmp	r2, #0
 822 000c 42D0     		beq	.L82
1090:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   {
1091:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****     return 32U;
1092:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
1093:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 823              		.loc 2 1093 3 is_stmt 1 view .LVU188
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 58


 824              		.loc 2 1093 10 is_stmt 0 view .LVU189
 825 000e B2FA82F2 		clz	r2, r2
 826              	.LVL43:
 827              	.L78:
 828              		.loc 2 1093 10 view .LVU190
 829              	.LBE29:
 830              	.LBE28:
 831              		.loc 1 1314 81 view .LVU191
 832 0012 0832     		adds	r2, r2, #8
 833              		.loc 1 1314 107 view .LVU192
 834 0014 02F01F02 		and	r2, r2, #31
 835              		.loc 1 1314 40 view .LVU193
 836 0018 01FA02F2 		lsl	r2, r1, r2
1313:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 837              		.loc 1 1313 37 view .LVU194
 838 001c 43EA0201 		orr	r1, r3, r2
1315:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL
 839              		.loc 1 1315 26 view .LVU195
 840 0020 8468     		ldr	r4, [r0, #8]
 841              	.LVL44:
 842              	.LBB31:
 843              	.LBI31:
1048:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 844              		.loc 2 1048 31 is_stmt 1 view .LVU196
 845              	.LBB32:
1050:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 846              		.loc 2 1050 3 view .LVU197
1055:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 847              		.loc 2 1055 4 view .LVU198
 848              		.syntax unified
 849              	@ 1055 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h" 1
 850 0022 93FAA3F2 		rbit r2, r3
 851              	@ 0 "" 2
 852              	.LVL45:
1068:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 853              		.loc 2 1068 3 view .LVU199
1068:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 854              		.loc 2 1068 3 is_stmt 0 view .LVU200
 855              		.thumb
 856              		.syntax unified
 857              	.LBE32:
 858              	.LBE31:
 859              	.LBB33:
 860              	.LBI33:
1078:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 861              		.loc 2 1078 30 is_stmt 1 view .LVU201
 862              	.LBB34:
1089:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   {
 863              		.loc 2 1089 3 view .LVU202
1089:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   {
 864              		.loc 2 1089 6 is_stmt 0 view .LVU203
 865 0026 BAB3     		cbz	r2, .L83
 866              		.loc 2 1093 3 is_stmt 1 view .LVU204
 867              		.loc 2 1093 10 is_stmt 0 view .LVU205
 868 0028 B2FA82F2 		clz	r2, r2
 869              	.LVL46:
 870              	.L79:
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 59


 871              		.loc 2 1093 10 view .LVU206
 872              	.LBE34:
 873              	.LBE33:
 874              		.loc 1 1315 115 view .LVU207
 875 002c 0832     		adds	r2, r2, #8
 876 002e 5200     		lsls	r2, r2, #1
 877              		.loc 1 1315 144 view .LVU208
 878 0030 02F01E02 		and	r2, r2, #30
 879              		.loc 1 1315 36 view .LVU209
 880 0034 04FA02F2 		lsl	r2, r4, r2
1313:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 881              		.loc 1 1313 13 view .LVU210
 882 0038 0A43     		orrs	r2, r2, r1
 883              	.LVL47:
1316:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1317:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regMask   = sPinParams->WakeUpPin | \
 884              		.loc 1 1317 3 is_stmt 1 view .LVU211
 885              	.LBB36:
 886              	.LBI36:
1048:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 887              		.loc 2 1048 31 view .LVU212
 888              	.LBB37:
1050:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 889              		.loc 2 1050 3 view .LVU213
1055:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 890              		.loc 2 1055 4 view .LVU214
 891              		.syntax unified
 892              	@ 1055 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h" 1
 893 003a 93FAA3F1 		rbit r1, r3
 894              	@ 0 "" 2
 895              	.LVL48:
1068:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 896              		.loc 2 1068 3 view .LVU215
1068:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 897              		.loc 2 1068 3 is_stmt 0 view .LVU216
 898              		.thumb
 899              		.syntax unified
 900              	.LBE37:
 901              	.LBE36:
 902              	.LBB38:
 903              	.LBI38:
1078:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 904              		.loc 2 1078 30 is_stmt 1 view .LVU217
 905              	.LBB39:
1089:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   {
 906              		.loc 2 1089 3 view .LVU218
1089:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   {
 907              		.loc 2 1089 6 is_stmt 0 view .LVU219
 908 003e 69B3     		cbz	r1, .L84
 909              		.loc 2 1093 3 is_stmt 1 view .LVU220
 910              		.loc 2 1093 10 is_stmt 0 view .LVU221
 911 0040 B1FA81F1 		clz	r1, r1
 912              	.LVL49:
 913              	.L80:
 914              		.loc 2 1093 10 view .LVU222
 915              	.LBE39:
 916              	.LBE38:
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 60


1318:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 917              		.loc 1 1318 75 view .LVU223
 918 0044 01F01F0C 		and	ip, r1, #31
 919              		.loc 1 1318 35 view .LVU224
 920 0048 4FF48071 		mov	r1, #256
 921 004c 01FA0CF1 		lsl	r1, r1, ip
1317:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 922              		.loc 1 1317 37 view .LVU225
 923 0050 1943     		orrs	r1, r1, r3
 924              	.LVL50:
 925              	.LBB41:
 926              	.LBI41:
1048:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 927              		.loc 2 1048 31 is_stmt 1 view .LVU226
 928              	.LBB42:
1050:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** 
 929              		.loc 2 1050 3 view .LVU227
1055:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** #else
 930              		.loc 2 1055 4 view .LVU228
 931              		.syntax unified
 932              	@ 1055 "HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h" 1
 933 0052 93FAA3F3 		rbit r3, r3
 934              	@ 0 "" 2
 935              	.LVL51:
1068:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 936              		.loc 2 1068 3 view .LVU229
1068:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** }
 937              		.loc 2 1068 3 is_stmt 0 view .LVU230
 938              		.thumb
 939              		.syntax unified
 940              	.LBE42:
 941              	.LBE41:
 942              	.LBB43:
 943              	.LBI43:
1078:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h **** {
 944              		.loc 2 1078 30 is_stmt 1 view .LVU231
 945              	.LBB44:
1089:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   {
 946              		.loc 2 1089 3 view .LVU232
1089:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   {
 947              		.loc 2 1089 6 is_stmt 0 view .LVU233
 948 0056 1BB3     		cbz	r3, .L85
 949              		.loc 2 1093 3 is_stmt 1 view .LVU234
 950              		.loc 2 1093 10 is_stmt 0 view .LVU235
 951 0058 B3FA83F3 		clz	r3, r3
 952              	.LVL52:
 953              	.L81:
 954              		.loc 2 1093 10 view .LVU236
 955              	.LBE44:
 956              	.LBE43:
1319:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSE
 957              		.loc 1 1319 66 view .LVU237
 958 005c 5B00     		lsls	r3, r3, #1
 959              		.loc 1 1319 103 view .LVU238
 960 005e 03F01E03 		and	r3, r3, #30
 961              		.loc 1 1319 25 view .LVU239
 962 0062 4FF4403C 		mov	ip, #196608
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 61


 963 0066 0CFA03F3 		lsl	r3, ip, r3
1317:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 964              		.loc 1 1317 13 view .LVU240
 965 006a 0B43     		orrs	r3, r3, r1
 966              	.LVL53:
1320:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1321:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable and Specify the Wake-Up pin polarity and the pull configuration
1322:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****      for the event detection (rising or falling edge) */
1323:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->WKUPEPR, regMask, pinConfig);
 967              		.loc 1 1323 3 is_stmt 1 view .LVU241
 968 006c 0D4C     		ldr	r4, .L87
 969 006e A16A     		ldr	r1, [r4, #40]
 970 0070 21EA0303 		bic	r3, r1, r3
 971              	.LVL54:
 972              		.loc 1 1323 3 is_stmt 0 view .LVU242
 973 0074 1A43     		orrs	r2, r2, r3
 974              	.LVL55:
 975              		.loc 1 1323 3 view .LVU243
 976 0076 A262     		str	r2, [r4, #40]
1324:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #ifndef DUAL_CORE
1325:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the Wakeup Pin EXTI Line */
1326:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos))
 977              		.loc 1 1326 3 is_stmt 1 view .LVU244
 978 0078 4FF0B042 		mov	r2, #1476395008
 979 007c D2F89030 		ldr	r3, [r2, #144]
 980 0080 23F0FC53 		bic	r3, r3, #528482304
 981 0084 0168     		ldr	r1, [r0]
 982 0086 43EAC153 		orr	r3, r3, r1, lsl #23
 983 008a C2F89030 		str	r3, [r2, #144]
1327:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !DUAL_CORE */
1328:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 984              		.loc 1 1328 1 is_stmt 0 view .LVU245
 985 008e 5DF8044B 		ldr	r4, [sp], #4
 986              	.LCFI7:
 987              		.cfi_remember_state
 988              		.cfi_restore 4
 989              		.cfi_def_cfa_offset 0
 990 0092 7047     		bx	lr
 991              	.LVL56:
 992              	.L82:
 993              	.LCFI8:
 994              		.cfi_restore_state
 995              	.LBB46:
 996              	.LBB30:
1091:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
 997              		.loc 2 1091 12 view .LVU246
 998 0094 2022     		movs	r2, #32
 999              	.LVL57:
1091:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
 1000              		.loc 2 1091 12 view .LVU247
 1001 0096 BCE7     		b	.L78
 1002              	.LVL58:
 1003              	.L83:
1091:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
 1004              		.loc 2 1091 12 view .LVU248
 1005              	.LBE30:
 1006              	.LBE46:
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 62


 1007              	.LBB47:
 1008              	.LBB35:
 1009 0098 2022     		movs	r2, #32
 1010              	.LVL59:
1091:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
 1011              		.loc 2 1091 12 view .LVU249
 1012 009a C7E7     		b	.L79
 1013              	.LVL60:
 1014              	.L84:
1091:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
 1015              		.loc 2 1091 12 view .LVU250
 1016              	.LBE35:
 1017              	.LBE47:
 1018              	.LBB48:
 1019              	.LBB40:
 1020 009c 2021     		movs	r1, #32
 1021              	.LVL61:
1091:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
 1022              		.loc 2 1091 12 view .LVU251
 1023 009e D1E7     		b	.L80
 1024              	.LVL62:
 1025              	.L85:
1091:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
 1026              		.loc 2 1091 12 view .LVU252
 1027              	.LBE40:
 1028              	.LBE48:
 1029              	.LBB49:
 1030              	.LBB45:
 1031 00a0 2023     		movs	r3, #32
 1032              	.LVL63:
1091:HAL_Lib/CMSIS/Core/Include/cmsis_gcc.h ****   }
 1033              		.loc 2 1091 12 view .LVU253
 1034 00a2 DBE7     		b	.L81
 1035              	.L88:
 1036              		.align	2
 1037              	.L87:
 1038 00a4 00480258 		.word	1476544512
 1039              	.LBE45:
 1040              	.LBE49:
 1041              		.cfi_endproc
 1042              	.LFE156:
 1044              		.section	.text.HAL_PWREx_DisableWakeUpPin,"ax",%progbits
 1045              		.align	1
 1046              		.global	HAL_PWREx_DisableWakeUpPin
 1047              		.syntax unified
 1048              		.thumb
 1049              		.thumb_func
 1051              	HAL_PWREx_DisableWakeUpPin:
 1052              	.LVL64:
 1053              	.LFB157:
1329:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1330:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1331:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Wake-up PINx functionality.
1332:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpPin : Specifies the Wake-Up pin to be disabled.
1333:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1334:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN1 : Disable PA0  wake-up PIN.
1335:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN2 : Disable PA2  wake-up PIN.
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 63


1336:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN3 : Disable PI8  wake-up PIN.
1337:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN4 : Disable PC13 wake-up PIN.
1338:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN5 : Disable PI11 wake-up PIN.
1339:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN6 : Disable PC1  wake-up PIN.
1340:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_PIN3 and PWR_WAKEUP_PIN5 are available only for
1341:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
1342:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1343:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1344:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableWakeUpPin (uint32_t WakeUpPin)
1345:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1054              		.loc 1 1345 1 is_stmt 1 view -0
 1055              		.cfi_startproc
 1056              		@ args = 0, pretend = 0, frame = 0
 1057              		@ frame_needed = 0, uses_anonymous_args = 0
 1058              		@ link register save eliminated.
1346:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1347:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN (WakeUpPin));
 1059              		.loc 1 1347 3 view .LVU255
1348:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1349:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the WakeUpPin */
1350:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->WKUPEPR, WakeUpPin);
 1060              		.loc 1 1350 3 view .LVU256
 1061 0000 024A     		ldr	r2, .L90
 1062 0002 936A     		ldr	r3, [r2, #40]
 1063 0004 23EA0003 		bic	r3, r3, r0
 1064 0008 9362     		str	r3, [r2, #40]
1351:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1065              		.loc 1 1351 1 is_stmt 0 view .LVU257
 1066 000a 7047     		bx	lr
 1067              	.L91:
 1068              		.align	2
 1069              	.L90:
 1070 000c 00480258 		.word	1476544512
 1071              		.cfi_endproc
 1072              	.LFE157:
 1074              		.section	.text.HAL_PWREx_GetWakeupFlag,"ax",%progbits
 1075              		.align	1
 1076              		.global	HAL_PWREx_GetWakeupFlag
 1077              		.syntax unified
 1078              		.thumb
 1079              		.thumb_func
 1081              	HAL_PWREx_GetWakeupFlag:
 1082              	.LVL65:
 1083              	.LFB158:
1352:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1353:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1354:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the Wake-Up Pin pending flags.
1355:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpFlag : Specifies the Wake-Up PIN flag to be checked.
1356:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1357:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG1    : Get wakeup event received from PA0.
1358:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG2    : Get wakeup event received from PA2.
1359:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG3    : Get wakeup event received from PI8.
1360:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG4    : Get wakeup event received from PC13.
1361:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG5    : Get wakeup event received from PI11.
1362:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG6    : Get wakeup event received from PC1.
1363:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG_ALL : Get Wakeup event received from all
1364:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      wake up pins.
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 64


1365:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
1366:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
1367:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The Wake-Up pin flag.
1368:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1369:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetWakeupFlag (uint32_t WakeUpFlag)
1370:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1084              		.loc 1 1370 1 is_stmt 1 view -0
 1085              		.cfi_startproc
 1086              		@ args = 0, pretend = 0, frame = 0
 1087              		@ frame_needed = 0, uses_anonymous_args = 0
 1088              		@ link register save eliminated.
1371:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1372:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));
 1089              		.loc 1 1372 3 view .LVU259
1373:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1374:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the wake up pin flag */
1375:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->WKUPFR & WakeUpFlag);
 1090              		.loc 1 1375 3 view .LVU260
 1091              		.loc 1 1375 14 is_stmt 0 view .LVU261
 1092 0000 014B     		ldr	r3, .L93
 1093 0002 5B6A     		ldr	r3, [r3, #36]
1376:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1094              		.loc 1 1376 1 view .LVU262
 1095 0004 1840     		ands	r0, r0, r3
 1096              	.LVL66:
 1097              		.loc 1 1376 1 view .LVU263
 1098 0006 7047     		bx	lr
 1099              	.L94:
 1100              		.align	2
 1101              	.L93:
 1102 0008 00480258 		.word	1476544512
 1103              		.cfi_endproc
 1104              	.LFE158:
 1106              		.section	.text.HAL_PWREx_ClearWakeupFlag,"ax",%progbits
 1107              		.align	1
 1108              		.global	HAL_PWREx_ClearWakeupFlag
 1109              		.syntax unified
 1110              		.thumb
 1111              		.thumb_func
 1113              	HAL_PWREx_ClearWakeupFlag:
 1114              	.LVL67:
 1115              	.LFB159:
1377:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1378:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1379:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear the Wake-Up pin pending flag.
1380:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpFlag: Specifies the Wake-Up PIN flag to clear.
1381:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1382:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG1 : Clear the wakeup event received from PA0.
1383:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG2 : Clear the wakeup event received from PA2.
1384:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG3 : Clear the wakeup event received from PI8.
1385:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG4 : Clear the wakeup event received from PC13.
1386:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG5 : Clear the wakeup event received from PI11.
1387:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG6 : Clear the wakeup event received from PC1.
1388:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG_ALL : Clear the wakeup events received from
1389:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      all wake up pins.
1390:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
1391:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 65


1392:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1393:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1394:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag (uint32_t WakeUpFlag)
1395:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1116              		.loc 1 1395 1 is_stmt 1 view -0
 1117              		.cfi_startproc
 1118              		@ args = 0, pretend = 0, frame = 0
 1119              		@ frame_needed = 0, uses_anonymous_args = 0
 1120              		@ link register save eliminated.
1396:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1397:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));
 1121              		.loc 1 1397 3 view .LVU265
1398:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1399:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear the wake up event received from wake up pin x */
1400:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->WKUPCR, WakeUpFlag);
 1122              		.loc 1 1400 3 view .LVU266
 1123 0000 054B     		ldr	r3, .L98
 1124 0002 1A6A     		ldr	r2, [r3, #32]
 1125 0004 0243     		orrs	r2, r2, r0
 1126 0006 1A62     		str	r2, [r3, #32]
1401:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1402:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the wake up event is well cleared */
1403:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->WKUPFR & WakeUpFlag) != 0U)
 1127              		.loc 1 1403 3 view .LVU267
 1128              		.loc 1 1403 11 is_stmt 0 view .LVU268
 1129 0008 5B6A     		ldr	r3, [r3, #36]
 1130              		.loc 1 1403 6 view .LVU269
 1131 000a 0342     		tst	r3, r0
 1132 000c 01D1     		bne	.L97
1404:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1405:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     return HAL_ERROR;
1406:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1407:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1408:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1133              		.loc 1 1408 10 view .LVU270
 1134 000e 0020     		movs	r0, #0
 1135              	.LVL68:
 1136              		.loc 1 1408 10 view .LVU271
 1137 0010 7047     		bx	lr
 1138              	.LVL69:
 1139              	.L97:
1405:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1140              		.loc 1 1405 12 view .LVU272
 1141 0012 0120     		movs	r0, #1
 1142              	.LVL70:
1409:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1143              		.loc 1 1409 1 view .LVU273
 1144 0014 7047     		bx	lr
 1145              	.L99:
 1146 0016 00BF     		.align	2
 1147              	.L98:
 1148 0018 00480258 		.word	1476544512
 1149              		.cfi_endproc
 1150              	.LFE159:
 1152              		.section	.text.HAL_PWREx_WKUP1_Callback,"ax",%progbits
 1153              		.align	1
 1154              		.weak	HAL_PWREx_WKUP1_Callback
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 66


 1155              		.syntax unified
 1156              		.thumb
 1157              		.thumb_func
 1159              	HAL_PWREx_WKUP1_Callback:
 1160              	.LFB161:
1410:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1411:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1412:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief This function handles the PWR WAKEUP PIN interrupt request.
1413:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
1414:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1415:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1416:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_WAKEUP_PIN_IRQHandler (void)
1417:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1418:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wakeup pin EXTI line interrupt detected */
1419:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF1) != 0U)
1420:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1421:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF1 flag */
1422:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP1);
1423:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1424:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP1 interrupt user callback */
1425:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP1_Callback ();
1426:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1427:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF2) != 0U)
1428:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1429:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF2 flag */
1430:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP2);
1431:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1432:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP2 interrupt user callback */
1433:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP2_Callback ();
1434:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1435:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF3)
1436:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF3) != 0U)
1437:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1438:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF3 flag */
1439:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP3);
1440:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1441:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP3 interrupt user callback */
1442:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP3_Callback ();
1443:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1444:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF3) */
1445:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF4) != 0U)
1446:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1447:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF4 flag */
1448:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP4);
1449:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1450:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP4 interrupt user callback */
1451:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP4_Callback ();
1452:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1453:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF5)
1454:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF5) != 0U)
1455:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1456:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF5 flag */
1457:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP5);
1458:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1459:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP5 interrupt user callback */
1460:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP5_Callback ();
1461:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 67


1462:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF5) */
1463:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1464:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1465:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF6 flag */
1466:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);
1467:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1468:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP6 interrupt user callback */
1469:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP6_Callback ();
1470:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1471:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1472:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1473:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1474:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP1 interrupt callback.
1475:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1476:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1477:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP1_Callback (void)
1478:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1161              		.loc 1 1478 1 is_stmt 1 view -0
 1162              		.cfi_startproc
 1163              		@ args = 0, pretend = 0, frame = 0
 1164              		@ frame_needed = 0, uses_anonymous_args = 0
 1165              		@ link register save eliminated.
1479:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1480:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP1Callback can be implemented in the user file
1481:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1482:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1166              		.loc 1 1482 1 view .LVU275
 1167 0000 7047     		bx	lr
 1168              		.cfi_endproc
 1169              	.LFE161:
 1171              		.section	.text.HAL_PWREx_WKUP2_Callback,"ax",%progbits
 1172              		.align	1
 1173              		.weak	HAL_PWREx_WKUP2_Callback
 1174              		.syntax unified
 1175              		.thumb
 1176              		.thumb_func
 1178              	HAL_PWREx_WKUP2_Callback:
 1179              	.LFB162:
1483:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1484:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1485:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP2 interrupt callback.
1486:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1487:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1488:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP2_Callback (void)
1489:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1180              		.loc 1 1489 1 view -0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 0
 1183              		@ frame_needed = 0, uses_anonymous_args = 0
 1184              		@ link register save eliminated.
1490:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1491:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP2Callback can be implemented in the user file
1492:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1493:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1185              		.loc 1 1493 1 view .LVU277
 1186 0000 7047     		bx	lr
 1187              		.cfi_endproc
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 68


 1188              	.LFE162:
 1190              		.section	.text.HAL_PWREx_WKUP3_Callback,"ax",%progbits
 1191              		.align	1
 1192              		.weak	HAL_PWREx_WKUP3_Callback
 1193              		.syntax unified
 1194              		.thumb
 1195              		.thumb_func
 1197              	HAL_PWREx_WKUP3_Callback:
 1198              	.LFB163:
1494:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1495:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF3)
1496:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1497:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP3 interrupt callback.
1498:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1499:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1500:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP3_Callback (void)
1501:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1199              		.loc 1 1501 1 view -0
 1200              		.cfi_startproc
 1201              		@ args = 0, pretend = 0, frame = 0
 1202              		@ frame_needed = 0, uses_anonymous_args = 0
 1203              		@ link register save eliminated.
1502:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1503:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP3Callback can be implemented in the user file
1504:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1505:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1204              		.loc 1 1505 1 view .LVU279
 1205 0000 7047     		bx	lr
 1206              		.cfi_endproc
 1207              	.LFE163:
 1209              		.section	.text.HAL_PWREx_WKUP4_Callback,"ax",%progbits
 1210              		.align	1
 1211              		.weak	HAL_PWREx_WKUP4_Callback
 1212              		.syntax unified
 1213              		.thumb
 1214              		.thumb_func
 1216              	HAL_PWREx_WKUP4_Callback:
 1217              	.LFB164:
1506:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF3) */
1507:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1508:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1509:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP4 interrupt callback.
1510:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1511:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1512:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP4_Callback (void)
1513:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1218              		.loc 1 1513 1 view -0
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 0
 1221              		@ frame_needed = 0, uses_anonymous_args = 0
 1222              		@ link register save eliminated.
1514:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1515:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP4Callback can be implemented in the user file
1516:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1517:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1223              		.loc 1 1517 1 view .LVU281
 1224 0000 7047     		bx	lr
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 69


 1225              		.cfi_endproc
 1226              	.LFE164:
 1228              		.section	.text.HAL_PWREx_WKUP5_Callback,"ax",%progbits
 1229              		.align	1
 1230              		.weak	HAL_PWREx_WKUP5_Callback
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
 1235              	HAL_PWREx_WKUP5_Callback:
 1236              	.LFB165:
1518:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1519:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF5)
1520:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1521:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP5 interrupt callback.
1522:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1523:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1524:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP5_Callback (void)
1525:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1237              		.loc 1 1525 1 view -0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 0
 1240              		@ frame_needed = 0, uses_anonymous_args = 0
 1241              		@ link register save eliminated.
1526:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1527:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP5Callback can be implemented in the user file
1528:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1529:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1242              		.loc 1 1529 1 view .LVU283
 1243 0000 7047     		bx	lr
 1244              		.cfi_endproc
 1245              	.LFE165:
 1247              		.section	.text.HAL_PWREx_WKUP6_Callback,"ax",%progbits
 1248              		.align	1
 1249              		.weak	HAL_PWREx_WKUP6_Callback
 1250              		.syntax unified
 1251              		.thumb
 1252              		.thumb_func
 1254              	HAL_PWREx_WKUP6_Callback:
 1255              	.LFB166:
1530:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF5) */
1531:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1532:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1533:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP6 interrupt callback.
1534:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1535:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1536:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP6_Callback (void)
1537:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1256              		.loc 1 1537 1 view -0
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 0
 1259              		@ frame_needed = 0, uses_anonymous_args = 0
 1260              		@ link register save eliminated.
1538:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1539:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP6Callback can be implemented in the user file
1540:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1541:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1261              		.loc 1 1541 1 view .LVU285
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 70


 1262 0000 7047     		bx	lr
 1263              		.cfi_endproc
 1264              	.LFE166:
 1266              		.section	.text.HAL_PWREx_WAKEUP_PIN_IRQHandler,"ax",%progbits
 1267              		.align	1
 1268              		.global	HAL_PWREx_WAKEUP_PIN_IRQHandler
 1269              		.syntax unified
 1270              		.thumb
 1271              		.thumb_func
 1273              	HAL_PWREx_WAKEUP_PIN_IRQHandler:
 1274              	.LFB160:
1417:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wakeup pin EXTI line interrupt detected */
 1275              		.loc 1 1417 1 view -0
 1276              		.cfi_startproc
 1277              		@ args = 0, pretend = 0, frame = 0
 1278              		@ frame_needed = 0, uses_anonymous_args = 0
 1279 0000 08B5     		push	{r3, lr}
 1280              	.LCFI9:
 1281              		.cfi_def_cfa_offset 8
 1282              		.cfi_offset 3, -8
 1283              		.cfi_offset 14, -4
1419:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1284              		.loc 1 1419 3 view .LVU287
1419:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1285              		.loc 1 1419 7 is_stmt 0 view .LVU288
 1286 0002 244B     		ldr	r3, .L118
 1287 0004 5B6A     		ldr	r3, [r3, #36]
1419:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1288              		.loc 1 1419 6 view .LVU289
 1289 0006 13F0010F 		tst	r3, #1
 1290 000a 1BD1     		bne	.L114
1427:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1291              		.loc 1 1427 8 is_stmt 1 view .LVU290
1427:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1292              		.loc 1 1427 12 is_stmt 0 view .LVU291
 1293 000c 214B     		ldr	r3, .L118
 1294 000e 5B6A     		ldr	r3, [r3, #36]
1427:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1295              		.loc 1 1427 11 view .LVU292
 1296 0010 13F0020F 		tst	r3, #2
 1297 0014 1ED1     		bne	.L115
1436:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1298              		.loc 1 1436 8 is_stmt 1 view .LVU293
1436:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1299              		.loc 1 1436 12 is_stmt 0 view .LVU294
 1300 0016 1F4B     		ldr	r3, .L118
 1301 0018 5B6A     		ldr	r3, [r3, #36]
1436:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1302              		.loc 1 1436 11 view .LVU295
 1303 001a 13F0040F 		tst	r3, #4
 1304 001e 21D1     		bne	.L116
1445:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1305              		.loc 1 1445 8 is_stmt 1 view .LVU296
1445:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1306              		.loc 1 1445 12 is_stmt 0 view .LVU297
 1307 0020 1C4B     		ldr	r3, .L118
 1308 0022 5B6A     		ldr	r3, [r3, #36]
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 71


1445:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1309              		.loc 1 1445 11 view .LVU298
 1310 0024 13F0080F 		tst	r3, #8
 1311 0028 24D1     		bne	.L117
1454:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1312              		.loc 1 1454 8 is_stmt 1 view .LVU299
1454:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1313              		.loc 1 1454 12 is_stmt 0 view .LVU300
 1314 002a 1A4B     		ldr	r3, .L118
 1315 002c 5B6A     		ldr	r3, [r3, #36]
1454:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1316              		.loc 1 1454 11 view .LVU301
 1317 002e 13F0100F 		tst	r3, #16
 1318 0032 27D0     		beq	.L112
1457:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1319              		.loc 1 1457 5 is_stmt 1 view .LVU302
 1320 0034 174A     		ldr	r2, .L118
 1321 0036 136A     		ldr	r3, [r2, #32]
 1322 0038 43F01003 		orr	r3, r3, #16
 1323 003c 1362     		str	r3, [r2, #32]
1460:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1324              		.loc 1 1460 5 view .LVU303
 1325 003e FFF7FEFF 		bl	HAL_PWREx_WKUP5_Callback
 1326              	.LVL71:
 1327 0042 06E0     		b	.L106
 1328              	.L114:
1422:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1329              		.loc 1 1422 5 view .LVU304
 1330 0044 134A     		ldr	r2, .L118
 1331 0046 136A     		ldr	r3, [r2, #32]
 1332 0048 43F00103 		orr	r3, r3, #1
 1333 004c 1362     		str	r3, [r2, #32]
1425:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1334              		.loc 1 1425 5 view .LVU305
 1335 004e FFF7FEFF 		bl	HAL_PWREx_WKUP1_Callback
 1336              	.LVL72:
 1337              	.L106:
1471:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1338              		.loc 1 1471 1 is_stmt 0 view .LVU306
 1339 0052 08BD     		pop	{r3, pc}
 1340              	.L115:
1430:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1341              		.loc 1 1430 5 is_stmt 1 view .LVU307
 1342 0054 0F4A     		ldr	r2, .L118
 1343 0056 136A     		ldr	r3, [r2, #32]
 1344 0058 43F00203 		orr	r3, r3, #2
 1345 005c 1362     		str	r3, [r2, #32]
1433:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1346              		.loc 1 1433 5 view .LVU308
 1347 005e FFF7FEFF 		bl	HAL_PWREx_WKUP2_Callback
 1348              	.LVL73:
 1349 0062 F6E7     		b	.L106
 1350              	.L116:
1439:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1351              		.loc 1 1439 5 view .LVU309
 1352 0064 0B4A     		ldr	r2, .L118
 1353 0066 136A     		ldr	r3, [r2, #32]
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 72


 1354 0068 43F00403 		orr	r3, r3, #4
 1355 006c 1362     		str	r3, [r2, #32]
1442:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1356              		.loc 1 1442 5 view .LVU310
 1357 006e FFF7FEFF 		bl	HAL_PWREx_WKUP3_Callback
 1358              	.LVL74:
 1359 0072 EEE7     		b	.L106
 1360              	.L117:
1448:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1361              		.loc 1 1448 5 view .LVU311
 1362 0074 074A     		ldr	r2, .L118
 1363 0076 136A     		ldr	r3, [r2, #32]
 1364 0078 43F00803 		orr	r3, r3, #8
 1365 007c 1362     		str	r3, [r2, #32]
1451:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1366              		.loc 1 1451 5 view .LVU312
 1367 007e FFF7FEFF 		bl	HAL_PWREx_WKUP4_Callback
 1368              	.LVL75:
 1369 0082 E6E7     		b	.L106
 1370              	.L112:
1466:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1371              		.loc 1 1466 5 view .LVU313
 1372 0084 034A     		ldr	r2, .L118
 1373 0086 136A     		ldr	r3, [r2, #32]
 1374 0088 43F02003 		orr	r3, r3, #32
 1375 008c 1362     		str	r3, [r2, #32]
1469:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1376              		.loc 1 1469 5 view .LVU314
 1377 008e FFF7FEFF 		bl	HAL_PWREx_WKUP6_Callback
 1378              	.LVL76:
1471:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1379              		.loc 1 1471 1 is_stmt 0 view .LVU315
 1380 0092 DEE7     		b	.L106
 1381              	.L119:
 1382              		.align	2
 1383              	.L118:
 1384 0094 00480258 		.word	1476544512
 1385              		.cfi_endproc
 1386              	.LFE160:
 1388              		.section	.text.HAL_PWREx_EnableBkUpReg,"ax",%progbits
 1389              		.align	1
 1390              		.global	HAL_PWREx_EnableBkUpReg
 1391              		.syntax unified
 1392              		.thumb
 1393              		.thumb_func
 1395              	HAL_PWREx_EnableBkUpReg:
 1396              	.LFB167:
1542:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1543:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
1544:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1545:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1546:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group3 Peripherals control functions
1547:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Peripherals control functions
1548:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
1549:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
1550:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1551:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                  ##### Peripherals control functions #####
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 73


1552:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1553:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1554:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Main and Backup Regulators configuration ***
1555:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ================================================
1556:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1557:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The backup domain includes 4 Kbytes of backup SRAM accessible only
1558:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           from the CPU, and addressed in 32-bit, 16-bit or 8-bit mode. Its
1559:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           content is retained even in Standby or VBAT mode when the low power
1560:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           backup regulator is enabled. It can be considered as an internal
1561:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           EEPROM when VBAT is always present. You can use the
1562:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_EnableBkUpReg() function to enable the low power backup
1563:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           regulator.
1564:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When the backup domain is supplied by VDD (analog switch connected to
1565:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           VDD) the backup SRAM is powered from VDD which replaces the VBAT power
1566:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           supply to save battery life.
1567:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The backup SRAM is not mass erased by a tamper event. It is read
1568:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           protected to prevent confidential data, such as cryptographic private
1569:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           key, from being accessed. The backup SRAM can be erased only through
1570:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           the Flash interface when a protection level change from level 1 to
1571:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           level 0 is requested.
1572:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       -@- Refer to the description of Read protection (RDP) in the Flash
1573:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           programming manual.
1574:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The main internal regulator can be configured to have a tradeoff
1575:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           between performance and power consumption when the device does not
1576:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           operate at the maximum frequency. This is done through
1577:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_ControlVoltageScaling(VOS) function which configure the VOS
1578:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           bit in PWR_D3CR register.
1579:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The main internal regulator can be configured to operate in Low Power
1580:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           mode when the system enters STOP mode to further reduce power
1581:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           consumption.
1582:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           This is done through HAL_PWREx_ControlStopModeVoltageScaling(SVOS)
1583:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function which configure the SVOS bit in PWR_CR1 register.
1584:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           The selected SVOS4 and SVOS5 levels add an additional startup delay
1585:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           when exiting from system Stop mode.
1586:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     -@- Refer to the product datasheets for more details.
1587:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1588:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** USB Regulator configuration ***
1589:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ===================================
1590:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1591:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB transceivers are supplied from a dedicated VDD33USB supply
1592:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           that can be provided either by the integrated USB regulator, or by an
1593:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           external USB supply.
1594:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB regulator is enabled by HAL_PWREx_EnableUSBReg() function, the
1595:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           VDD33USB is then provided from the USB regulator.
1596:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When the USB regulator is enabled, the VDD33USB supply level detector
1597:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           shall be enabled through  HAL_PWREx_EnableUSBVoltageDetector()
1598:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function.
1599:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB regulator is disabled through HAL_PWREx_DisableUSBReg()
1600:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function and VDD33USB can be provided from an external supply. In this
1601:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           case VDD33USB and VDD50USB shall be connected together.
1602:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1603:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** VBAT battery charging ***
1604:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =============================
1605:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1606:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When VDD is present, the external battery connected to VBAT can be
1607:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           charged through an internal resistance. VBAT charging can be performed
1608:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           either through a 5 KOhm resistor or through a 1.5 KOhm resistor.
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 74


1609:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) VBAT charging is enabled by HAL_PWREx_EnableBatteryCharging
1610:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (ResistorValue) function with:
1611:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) ResistorValue:
1612:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_BATTERY_CHARGING_RESISTOR_5: 5 KOhm resistor.
1613:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_BATTERY_CHARGING_RESISTOR_1_5: 1.5 KOhm resistor.
1614:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) VBAT charging is disabled by HAL_PWREx_DisableBatteryCharging()
1615:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function.
1616:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1617:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
1618:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
1619:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1620:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1621:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1622:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Backup Regulator.
1623:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1624:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1625:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void)
1626:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1397              		.loc 1 1626 1 is_stmt 1 view -0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 0
 1400              		@ frame_needed = 0, uses_anonymous_args = 0
 1401 0000 10B5     		push	{r4, lr}
 1402              	.LCFI10:
 1403              		.cfi_def_cfa_offset 8
 1404              		.cfi_offset 4, -8
 1405              		.cfi_offset 14, -4
1627:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1406              		.loc 1 1627 3 view .LVU317
1628:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1629:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Backup regulator */
1630:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR2, PWR_CR2_BREN);
 1407              		.loc 1 1630 3 view .LVU318
 1408 0002 0B4A     		ldr	r2, .L127
 1409 0004 9368     		ldr	r3, [r2, #8]
 1410 0006 43F00103 		orr	r3, r3, #1
 1411 000a 9360     		str	r3, [r2, #8]
1631:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1632:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1633:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 1412              		.loc 1 1633 3 view .LVU319
 1413              		.loc 1 1633 15 is_stmt 0 view .LVU320
 1414 000c FFF7FEFF 		bl	HAL_GetTick
 1415              	.LVL77:
 1416 0010 0446     		mov	r4, r0
 1417              	.LVL78:
1634:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1635:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is set */
1636:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
 1418              		.loc 1 1636 3 is_stmt 1 view .LVU321
 1419              	.L121:
 1420              		.loc 1 1636 9 view .LVU322
 1421              		.loc 1 1636 10 is_stmt 0 view .LVU323
 1422 0012 074B     		ldr	r3, .L127
 1423 0014 9B68     		ldr	r3, [r3, #8]
 1424              		.loc 1 1636 9 view .LVU324
 1425 0016 13F4803F 		tst	r3, #65536
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 75


 1426 001a 07D1     		bne	.L126
1637:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1638:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1427              		.loc 1 1638 5 is_stmt 1 view .LVU325
 1428              		.loc 1 1638 10 is_stmt 0 view .LVU326
 1429 001c FFF7FEFF 		bl	HAL_GetTick
 1430              	.LVL79:
 1431              		.loc 1 1638 24 view .LVU327
 1432 0020 001B     		subs	r0, r0, r4
 1433              		.loc 1 1638 8 view .LVU328
 1434 0022 B0F57A7F 		cmp	r0, #1000
 1435 0026 F4D9     		bls	.L121
1639:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1640:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 1436              		.loc 1 1640 14 view .LVU329
 1437 0028 0120     		movs	r0, #1
 1438 002a 00E0     		b	.L122
 1439              	.L126:
1641:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1642:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1643:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1644:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1440              		.loc 1 1644 10 view .LVU330
 1441 002c 0020     		movs	r0, #0
 1442              	.L122:
1645:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1443              		.loc 1 1645 1 view .LVU331
 1444 002e 10BD     		pop	{r4, pc}
 1445              	.LVL80:
 1446              	.L128:
 1447              		.loc 1 1645 1 view .LVU332
 1448              		.align	2
 1449              	.L127:
 1450 0030 00480258 		.word	1476544512
 1451              		.cfi_endproc
 1452              	.LFE167:
 1454              		.section	.text.HAL_PWREx_DisableBkUpReg,"ax",%progbits
 1455              		.align	1
 1456              		.global	HAL_PWREx_DisableBkUpReg
 1457              		.syntax unified
 1458              		.thumb
 1459              		.thumb_func
 1461              	HAL_PWREx_DisableBkUpReg:
 1462              	.LFB168:
1646:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1647:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1648:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Backup Regulator.
1649:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1650:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1651:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void)
1652:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1463              		.loc 1 1652 1 is_stmt 1 view -0
 1464              		.cfi_startproc
 1465              		@ args = 0, pretend = 0, frame = 0
 1466              		@ frame_needed = 0, uses_anonymous_args = 0
 1467 0000 10B5     		push	{r4, lr}
 1468              	.LCFI11:
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 76


 1469              		.cfi_def_cfa_offset 8
 1470              		.cfi_offset 4, -8
 1471              		.cfi_offset 14, -4
1653:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1472              		.loc 1 1653 3 view .LVU334
1654:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1655:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Backup regulator */
1656:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR2, PWR_CR2_BREN);
 1473              		.loc 1 1656 3 view .LVU335
 1474 0002 0B4A     		ldr	r2, .L136
 1475 0004 9368     		ldr	r3, [r2, #8]
 1476 0006 23F00103 		bic	r3, r3, #1
 1477 000a 9360     		str	r3, [r2, #8]
1657:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1658:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1659:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 1478              		.loc 1 1659 3 view .LVU336
 1479              		.loc 1 1659 15 is_stmt 0 view .LVU337
 1480 000c FFF7FEFF 		bl	HAL_GetTick
 1481              	.LVL81:
 1482 0010 0446     		mov	r4, r0
 1483              	.LVL82:
1660:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1661:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is reset */
1662:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
 1484              		.loc 1 1662 3 is_stmt 1 view .LVU338
 1485              	.L130:
 1486              		.loc 1 1662 9 view .LVU339
 1487              		.loc 1 1662 10 is_stmt 0 view .LVU340
 1488 0012 074B     		ldr	r3, .L136
 1489 0014 9B68     		ldr	r3, [r3, #8]
 1490              		.loc 1 1662 9 view .LVU341
 1491 0016 13F4803F 		tst	r3, #65536
 1492 001a 07D0     		beq	.L135
1663:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1664:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1493              		.loc 1 1664 5 is_stmt 1 view .LVU342
 1494              		.loc 1 1664 10 is_stmt 0 view .LVU343
 1495 001c FFF7FEFF 		bl	HAL_GetTick
 1496              	.LVL83:
 1497              		.loc 1 1664 24 view .LVU344
 1498 0020 001B     		subs	r0, r0, r4
 1499              		.loc 1 1664 8 view .LVU345
 1500 0022 B0F57A7F 		cmp	r0, #1000
 1501 0026 F4D9     		bls	.L130
1665:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1666:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 1502              		.loc 1 1666 14 view .LVU346
 1503 0028 0120     		movs	r0, #1
 1504 002a 00E0     		b	.L131
 1505              	.L135:
1667:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1668:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1669:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1670:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1506              		.loc 1 1670 10 view .LVU347
 1507 002c 0020     		movs	r0, #0
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 77


 1508              	.L131:
1671:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1509              		.loc 1 1671 1 view .LVU348
 1510 002e 10BD     		pop	{r4, pc}
 1511              	.LVL84:
 1512              	.L137:
 1513              		.loc 1 1671 1 view .LVU349
 1514              		.align	2
 1515              	.L136:
 1516 0030 00480258 		.word	1476544512
 1517              		.cfi_endproc
 1518              	.LFE168:
 1520              		.section	.text.HAL_PWREx_EnableUSBReg,"ax",%progbits
 1521              		.align	1
 1522              		.global	HAL_PWREx_EnableUSBReg
 1523              		.syntax unified
 1524              		.thumb
 1525              		.thumb_func
 1527              	HAL_PWREx_EnableUSBReg:
 1528              	.LFB169:
1672:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1673:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1674:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the USB Regulator.
1675:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1676:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1677:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableUSBReg (void)
1678:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1529              		.loc 1 1678 1 is_stmt 1 view -0
 1530              		.cfi_startproc
 1531              		@ args = 0, pretend = 0, frame = 0
 1532              		@ frame_needed = 0, uses_anonymous_args = 0
 1533 0000 10B5     		push	{r4, lr}
 1534              	.LCFI12:
 1535              		.cfi_def_cfa_offset 8
 1536              		.cfi_offset 4, -8
 1537              		.cfi_offset 14, -4
1679:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1538              		.loc 1 1679 3 view .LVU351
1680:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1681:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the USB regulator */
1682:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_USBREGEN);
 1539              		.loc 1 1682 3 view .LVU352
 1540 0002 0B4A     		ldr	r2, .L145
 1541 0004 D368     		ldr	r3, [r2, #12]
 1542 0006 43F00073 		orr	r3, r3, #33554432
 1543 000a D360     		str	r3, [r2, #12]
1683:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1684:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1685:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 1544              		.loc 1 1685 3 view .LVU353
 1545              		.loc 1 1685 15 is_stmt 0 view .LVU354
 1546 000c FFF7FEFF 		bl	HAL_GetTick
 1547              	.LVL85:
 1548 0010 0446     		mov	r4, r0
 1549              	.LVL86:
1686:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1687:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till the USB regulator ready flag is set */
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 78


1688:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
 1550              		.loc 1 1688 3 is_stmt 1 view .LVU355
 1551              	.L139:
 1552              		.loc 1 1688 9 view .LVU356
 1553              		.loc 1 1688 10 is_stmt 0 view .LVU357
 1554 0012 074B     		ldr	r3, .L145
 1555 0014 DB68     		ldr	r3, [r3, #12]
 1556              		.loc 1 1688 9 view .LVU358
 1557 0016 13F0806F 		tst	r3, #67108864
 1558 001a 07D1     		bne	.L144
1689:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1690:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1559              		.loc 1 1690 5 is_stmt 1 view .LVU359
 1560              		.loc 1 1690 10 is_stmt 0 view .LVU360
 1561 001c FFF7FEFF 		bl	HAL_GetTick
 1562              	.LVL87:
 1563              		.loc 1 1690 24 view .LVU361
 1564 0020 001B     		subs	r0, r0, r4
 1565              		.loc 1 1690 8 view .LVU362
 1566 0022 B0F57A7F 		cmp	r0, #1000
 1567 0026 F4D9     		bls	.L139
1691:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1692:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 1568              		.loc 1 1692 14 view .LVU363
 1569 0028 0120     		movs	r0, #1
 1570 002a 00E0     		b	.L140
 1571              	.L144:
1693:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1694:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1695:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1696:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1572              		.loc 1 1696 10 view .LVU364
 1573 002c 0020     		movs	r0, #0
 1574              	.L140:
1697:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1575              		.loc 1 1697 1 view .LVU365
 1576 002e 10BD     		pop	{r4, pc}
 1577              	.LVL88:
 1578              	.L146:
 1579              		.loc 1 1697 1 view .LVU366
 1580              		.align	2
 1581              	.L145:
 1582 0030 00480258 		.word	1476544512
 1583              		.cfi_endproc
 1584              	.LFE169:
 1586              		.section	.text.HAL_PWREx_DisableUSBReg,"ax",%progbits
 1587              		.align	1
 1588              		.global	HAL_PWREx_DisableUSBReg
 1589              		.syntax unified
 1590              		.thumb
 1591              		.thumb_func
 1593              	HAL_PWREx_DisableUSBReg:
 1594              	.LFB170:
1698:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1699:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1700:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the USB Regulator.
1701:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 79


1702:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1703:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableUSBReg (void)
1704:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1595              		.loc 1 1704 1 is_stmt 1 view -0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 0
 1598              		@ frame_needed = 0, uses_anonymous_args = 0
 1599 0000 10B5     		push	{r4, lr}
 1600              	.LCFI13:
 1601              		.cfi_def_cfa_offset 8
 1602              		.cfi_offset 4, -8
 1603              		.cfi_offset 14, -4
1705:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1604              		.loc 1 1705 3 view .LVU368
1706:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1707:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the USB regulator */
1708:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_USBREGEN);
 1605              		.loc 1 1708 3 view .LVU369
 1606 0002 0B4A     		ldr	r2, .L154
 1607 0004 D368     		ldr	r3, [r2, #12]
 1608 0006 23F00073 		bic	r3, r3, #33554432
 1609 000a D360     		str	r3, [r2, #12]
1709:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1710:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1711:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 1610              		.loc 1 1711 3 view .LVU370
 1611              		.loc 1 1711 15 is_stmt 0 view .LVU371
 1612 000c FFF7FEFF 		bl	HAL_GetTick
 1613              	.LVL89:
 1614 0010 0446     		mov	r4, r0
 1615              	.LVL90:
1712:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1713:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till the USB regulator ready flag is reset */
1714:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
 1616              		.loc 1 1714 3 is_stmt 1 view .LVU372
 1617              	.L148:
 1618              		.loc 1 1714 8 view .LVU373
 1619              		.loc 1 1714 9 is_stmt 0 view .LVU374
 1620 0012 074B     		ldr	r3, .L154
 1621 0014 DB68     		ldr	r3, [r3, #12]
 1622              		.loc 1 1714 8 view .LVU375
 1623 0016 13F0806F 		tst	r3, #67108864
 1624 001a 07D0     		beq	.L153
1715:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1716:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1625              		.loc 1 1716 5 is_stmt 1 view .LVU376
 1626              		.loc 1 1716 10 is_stmt 0 view .LVU377
 1627 001c FFF7FEFF 		bl	HAL_GetTick
 1628              	.LVL91:
 1629              		.loc 1 1716 24 view .LVU378
 1630 0020 001B     		subs	r0, r0, r4
 1631              		.loc 1 1716 8 view .LVU379
 1632 0022 B0F57A7F 		cmp	r0, #1000
 1633 0026 F4D9     		bls	.L148
1717:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1718:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 1634              		.loc 1 1718 14 view .LVU380
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 80


 1635 0028 0120     		movs	r0, #1
 1636 002a 00E0     		b	.L149
 1637              	.L153:
1719:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1720:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1721:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1722:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1638              		.loc 1 1722 10 view .LVU381
 1639 002c 0020     		movs	r0, #0
 1640              	.L149:
1723:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1641              		.loc 1 1723 1 view .LVU382
 1642 002e 10BD     		pop	{r4, pc}
 1643              	.LVL92:
 1644              	.L155:
 1645              		.loc 1 1723 1 view .LVU383
 1646              		.align	2
 1647              	.L154:
 1648 0030 00480258 		.word	1476544512
 1649              		.cfi_endproc
 1650              	.LFE170:
 1652              		.section	.text.HAL_PWREx_EnableUSBVoltageDetector,"ax",%progbits
 1653              		.align	1
 1654              		.global	HAL_PWREx_EnableUSBVoltageDetector
 1655              		.syntax unified
 1656              		.thumb
 1657              		.thumb_func
 1659              	HAL_PWREx_EnableUSBVoltageDetector:
 1660              	.LFB171:
1724:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1725:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1726:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the USB voltage level detector.
1727:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1728:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1729:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableUSBVoltageDetector (void)
1730:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1661              		.loc 1 1730 1 is_stmt 1 view -0
 1662              		.cfi_startproc
 1663              		@ args = 0, pretend = 0, frame = 0
 1664              		@ frame_needed = 0, uses_anonymous_args = 0
 1665              		@ link register save eliminated.
1731:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the USB voltage detector */
1732:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 1666              		.loc 1 1732 3 view .LVU385
 1667 0000 024A     		ldr	r2, .L157
 1668 0002 D368     		ldr	r3, [r2, #12]
 1669 0004 43F08073 		orr	r3, r3, #16777216
 1670 0008 D360     		str	r3, [r2, #12]
1733:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1671              		.loc 1 1733 1 is_stmt 0 view .LVU386
 1672 000a 7047     		bx	lr
 1673              	.L158:
 1674              		.align	2
 1675              	.L157:
 1676 000c 00480258 		.word	1476544512
 1677              		.cfi_endproc
 1678              	.LFE171:
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 81


 1680              		.section	.text.HAL_PWREx_DisableUSBVoltageDetector,"ax",%progbits
 1681              		.align	1
 1682              		.global	HAL_PWREx_DisableUSBVoltageDetector
 1683              		.syntax unified
 1684              		.thumb
 1685              		.thumb_func
 1687              	HAL_PWREx_DisableUSBVoltageDetector:
 1688              	.LFB172:
1734:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1735:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1736:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the USB voltage level detector.
1737:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1738:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1739:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableUSBVoltageDetector (void)
1740:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1689              		.loc 1 1740 1 is_stmt 1 view -0
 1690              		.cfi_startproc
 1691              		@ args = 0, pretend = 0, frame = 0
 1692              		@ frame_needed = 0, uses_anonymous_args = 0
 1693              		@ link register save eliminated.
1741:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the USB voltage detector */
1742:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 1694              		.loc 1 1742 3 view .LVU388
 1695 0000 024A     		ldr	r2, .L160
 1696 0002 D368     		ldr	r3, [r2, #12]
 1697 0004 23F08073 		bic	r3, r3, #16777216
 1698 0008 D360     		str	r3, [r2, #12]
1743:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1699              		.loc 1 1743 1 is_stmt 0 view .LVU389
 1700 000a 7047     		bx	lr
 1701              	.L161:
 1702              		.align	2
 1703              	.L160:
 1704 000c 00480258 		.word	1476544512
 1705              		.cfi_endproc
 1706              	.LFE172:
 1708              		.section	.text.HAL_PWREx_EnableBatteryCharging,"ax",%progbits
 1709              		.align	1
 1710              		.global	HAL_PWREx_EnableBatteryCharging
 1711              		.syntax unified
 1712              		.thumb
 1713              		.thumb_func
 1715              	HAL_PWREx_EnableBatteryCharging:
 1716              	.LVL93:
 1717              	.LFB173:
1744:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1745:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1746:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Battery charging.
1747:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When VDD is present, charge the external battery through an internal
1748:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         resistor.
1749:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  ResistorValue : Specifies the charging resistor.
1750:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
1751:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_BATTERY_CHARGING_RESISTOR_5 : 5 KOhm resistor.
1752:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_BATTERY_CHARGING_RESISTOR_1_5 : 1.5 KOhm resistor.
1753:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1754:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1755:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableBatteryCharging (uint32_t ResistorValue)
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 82


1756:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1718              		.loc 1 1756 1 is_stmt 1 view -0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 0
 1721              		@ frame_needed = 0, uses_anonymous_args = 0
 1722              		@ link register save eliminated.
1757:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1758:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_BATTERY_RESISTOR_SELECT (ResistorValue));
 1723              		.loc 1 1758 3 view .LVU391
1759:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1760:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Specify the charging resistor */
1761:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR3, PWR_CR3_VBRS, ResistorValue);
 1724              		.loc 1 1761 3 view .LVU392
 1725 0000 054A     		ldr	r2, .L163
 1726 0002 D368     		ldr	r3, [r2, #12]
 1727 0004 23F40073 		bic	r3, r3, #512
 1728 0008 0343     		orrs	r3, r3, r0
 1729 000a D360     		str	r3, [r2, #12]
1762:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1763:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Battery charging */
1764:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_VBE);
 1730              		.loc 1 1764 3 view .LVU393
 1731 000c D368     		ldr	r3, [r2, #12]
 1732 000e 43F48073 		orr	r3, r3, #256
 1733 0012 D360     		str	r3, [r2, #12]
1765:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1734              		.loc 1 1765 1 is_stmt 0 view .LVU394
 1735 0014 7047     		bx	lr
 1736              	.L164:
 1737 0016 00BF     		.align	2
 1738              	.L163:
 1739 0018 00480258 		.word	1476544512
 1740              		.cfi_endproc
 1741              	.LFE173:
 1743              		.section	.text.HAL_PWREx_DisableBatteryCharging,"ax",%progbits
 1744              		.align	1
 1745              		.global	HAL_PWREx_DisableBatteryCharging
 1746              		.syntax unified
 1747              		.thumb
 1748              		.thumb_func
 1750              	HAL_PWREx_DisableBatteryCharging:
 1751              	.LFB174:
1766:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1767:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1768:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Battery charging.
1769:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1770:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1771:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableBatteryCharging (void)
1772:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1752              		.loc 1 1772 1 is_stmt 1 view -0
 1753              		.cfi_startproc
 1754              		@ args = 0, pretend = 0, frame = 0
 1755              		@ frame_needed = 0, uses_anonymous_args = 0
 1756              		@ link register save eliminated.
1773:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Battery charging */
1774:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_VBE);
 1757              		.loc 1 1774 3 view .LVU396
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 83


 1758 0000 024A     		ldr	r2, .L166
 1759 0002 D368     		ldr	r3, [r2, #12]
 1760 0004 23F48073 		bic	r3, r3, #256
 1761 0008 D360     		str	r3, [r2, #12]
1775:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1762              		.loc 1 1775 1 is_stmt 0 view .LVU397
 1763 000a 7047     		bx	lr
 1764              	.L167:
 1765              		.align	2
 1766              	.L166:
 1767 000c 00480258 		.word	1476544512
 1768              		.cfi_endproc
 1769              	.LFE174:
 1771              		.section	.text.HAL_PWREx_EnableMonitoring,"ax",%progbits
 1772              		.align	1
 1773              		.global	HAL_PWREx_EnableMonitoring
 1774              		.syntax unified
 1775              		.thumb
 1776              		.thumb_func
 1778              	HAL_PWREx_EnableMonitoring:
 1779              	.LFB175:
1776:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1777:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CR1_BOOSTE)
1778:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1779:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the booster to guarantee the analog switch AC performance when
1780:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the VDD supply voltage is below 2V7.
1781:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The VDD supply voltage can be monitored through the PVD and the PLS
1782:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         field bits.
1783:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1784:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1785:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableAnalogBooster (void)
1786:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1787:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Analog voltage */
1788:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_AVD_READY);
1789:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1790:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable VDDA booster */
1791:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_BOOSTE);
1792:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1793:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1794:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1795:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the analog booster.
1796:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1797:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1798:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableAnalogBooster (void)
1799:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1800:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable VDDA booster */
1801:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_BOOSTE);
1802:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1803:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Analog voltage */
1804:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_AVD_READY);
1805:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1806:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CR1_BOOSTE) */
1807:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1808:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
1809:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1810:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1811:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group4 Power Monitoring functions
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 84


1812:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Power Monitoring functions
1813:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
1814:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
1815:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1816:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                  ##### Power Monitoring functions #####
1817:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1818:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1819:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** VBAT and Temperature supervision ***
1820:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ========================================
1821:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1822:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The VBAT battery voltage supply can be monitored by comparing it with
1823:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           two threshold levels: VBAThigh and VBATlow. VBATH flag and VBATL flags
1824:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           in the PWR control register 2 (PWR_CR2), indicate if VBAT is higher or
1825:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           lower than the threshold.
1826:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The temperature can be monitored by comparing it with two threshold
1827:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           levels, TEMPhigh and TEMPlow. TEMPH and TEMPL flags, in the PWR
1828:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           control register 2 (PWR_CR2), indicate whether the device temperature
1829:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           is higher or lower than the threshold.
1830:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The VBAT and the temperature monitoring is enabled by
1831:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_EnableMonitoring() function and disabled by
1832:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_DisableMonitoring() function.
1833:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The HAL_PWREx_GetVBATLevel() function returns the VBAT level which can
1834:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           be : PWR_VBAT_BELOW_LOW_THRESHOLD or PWR_VBAT_ABOVE_HIGH_THRESHOLD or
1835:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD.
1836:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The HAL_PWREx_GetTemperatureLevel() function returns the Temperature
1837:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           level which can be :
1838:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_TEMP_BELOW_LOW_THRESHOLD or PWR_TEMP_ABOVE_HIGH_THRESHOLD or
1839:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD.
1840:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1841:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** AVD configuration ***
1842:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =========================
1843:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1844:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The AVD is used to monitor the VDDA power supply by comparing it to a
1845:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           threshold selected by the AVD Level (ALS[3:0] bits in the PWR_CR1
1846:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           register).
1847:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) A AVDO flag is available to indicate if VDDA is higher or lower
1848:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           than the AVD threshold. This event is internally connected to the EXTI
1849:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           line 16 to generate an interrupt if enabled.
1850:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           It is configurable through __HAL_PWR_AVD_EXTI_ENABLE_IT() macro.
1851:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The AVD is stopped in System Standby mode.
1852:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1853:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
1854:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
1855:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1856:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1857:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1858:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the VBAT and temperature monitoring.
1859:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1860:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1861:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableMonitoring (void)
1862:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1780              		.loc 1 1862 1 is_stmt 1 view -0
 1781              		.cfi_startproc
 1782              		@ args = 0, pretend = 0, frame = 0
 1783              		@ frame_needed = 0, uses_anonymous_args = 0
 1784              		@ link register save eliminated.
1863:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the VBAT and Temperature monitoring */
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 85


1864:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR2, PWR_CR2_MONEN);
 1785              		.loc 1 1864 3 view .LVU399
 1786 0000 024A     		ldr	r2, .L169
 1787 0002 9368     		ldr	r3, [r2, #8]
 1788 0004 43F01003 		orr	r3, r3, #16
 1789 0008 9360     		str	r3, [r2, #8]
1865:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1790              		.loc 1 1865 1 is_stmt 0 view .LVU400
 1791 000a 7047     		bx	lr
 1792              	.L170:
 1793              		.align	2
 1794              	.L169:
 1795 000c 00480258 		.word	1476544512
 1796              		.cfi_endproc
 1797              	.LFE175:
 1799              		.section	.text.HAL_PWREx_DisableMonitoring,"ax",%progbits
 1800              		.align	1
 1801              		.global	HAL_PWREx_DisableMonitoring
 1802              		.syntax unified
 1803              		.thumb
 1804              		.thumb_func
 1806              	HAL_PWREx_DisableMonitoring:
 1807              	.LFB176:
1866:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1867:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1868:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the VBAT and temperature monitoring.
1869:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1870:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1871:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableMonitoring (void)
1872:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1808              		.loc 1 1872 1 is_stmt 1 view -0
 1809              		.cfi_startproc
 1810              		@ args = 0, pretend = 0, frame = 0
 1811              		@ frame_needed = 0, uses_anonymous_args = 0
 1812              		@ link register save eliminated.
1873:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the VBAT and Temperature monitoring */
1874:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR2, PWR_CR2_MONEN);
 1813              		.loc 1 1874 3 view .LVU402
 1814 0000 024A     		ldr	r2, .L172
 1815 0002 9368     		ldr	r3, [r2, #8]
 1816 0004 23F01003 		bic	r3, r3, #16
 1817 0008 9360     		str	r3, [r2, #8]
1875:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1818              		.loc 1 1875 1 is_stmt 0 view .LVU403
 1819 000a 7047     		bx	lr
 1820              	.L173:
 1821              		.align	2
 1822              	.L172:
 1823 000c 00480258 		.word	1476544512
 1824              		.cfi_endproc
 1825              	.LFE176:
 1827              		.section	.text.HAL_PWREx_GetTemperatureLevel,"ax",%progbits
 1828              		.align	1
 1829              		.global	HAL_PWREx_GetTemperatureLevel
 1830              		.syntax unified
 1831              		.thumb
 1832              		.thumb_func
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 86


 1834              	HAL_PWREx_GetTemperatureLevel:
 1835              	.LFB177:
1876:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1877:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1878:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Indicate whether the junction temperature is between, above or below
1879:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the thresholds.
1880:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval Temperature level.
1881:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1882:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetTemperatureLevel (void)
1883:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1836              		.loc 1 1883 1 is_stmt 1 view -0
 1837              		.cfi_startproc
 1838              		@ args = 0, pretend = 0, frame = 0
 1839              		@ frame_needed = 0, uses_anonymous_args = 0
 1840              		@ link register save eliminated.
1884:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tempLevel, regValue;
 1841              		.loc 1 1884 3 view .LVU405
1885:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1886:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Read the temperature flags */
1887:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regValue = READ_BIT (PWR->CR2, (PWR_CR2_TEMPH | PWR_CR2_TEMPL));
 1842              		.loc 1 1887 3 view .LVU406
 1843              		.loc 1 1887 14 is_stmt 0 view .LVU407
 1844 0000 054B     		ldr	r3, .L177
 1845 0002 9868     		ldr	r0, [r3, #8]
 1846              		.loc 1 1887 12 view .LVU408
 1847 0004 00F44000 		and	r0, r0, #12582912
 1848              	.LVL94:
1888:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1889:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the temperature is below the threshold */
1890:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (regValue == PWR_CR2_TEMPL)
 1849              		.loc 1 1890 3 is_stmt 1 view .LVU409
 1850              		.loc 1 1890 6 is_stmt 0 view .LVU410
 1851 0008 B0F5800F 		cmp	r0, #4194304
 1852 000c 03D0     		beq	.L174
1891:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1892:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
1893:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1894:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the temperature is above the threshold */
1895:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (regValue == PWR_CR2_TEMPH)
 1853              		.loc 1 1895 8 is_stmt 1 view .LVU411
 1854              		.loc 1 1895 11 is_stmt 0 view .LVU412
 1855 000e B0F5000F 		cmp	r0, #8388608
 1856 0012 00D0     		beq	.L174
1896:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1897:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
1898:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1899:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* The temperature is between the thresholds */
1900:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1901:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1902:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
 1857              		.loc 1 1902 15 view .LVU413
 1858 0014 0020     		movs	r0, #0
 1859              	.LVL95:
1903:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1904:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1905:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return tempLevel;
 1860              		.loc 1 1905 3 is_stmt 1 view .LVU414
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 87


 1861              	.L174:
1906:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1862              		.loc 1 1906 1 is_stmt 0 view .LVU415
 1863 0016 7047     		bx	lr
 1864              	.L178:
 1865              		.align	2
 1866              	.L177:
 1867 0018 00480258 		.word	1476544512
 1868              		.cfi_endproc
 1869              	.LFE177:
 1871              		.section	.text.HAL_PWREx_GetVBATLevel,"ax",%progbits
 1872              		.align	1
 1873              		.global	HAL_PWREx_GetVBATLevel
 1874              		.syntax unified
 1875              		.thumb
 1876              		.thumb_func
 1878              	HAL_PWREx_GetVBATLevel:
 1879              	.LFB178:
1907:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1908:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1909:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Indicate whether the Battery voltage level is between, above or below
1910:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the thresholds.
1911:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval VBAT level.
1912:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1913:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVBATLevel (void)
1914:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1880              		.loc 1 1914 1 is_stmt 1 view -0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 0
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 1884              		@ link register save eliminated.
1915:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t VBATLevel, regValue;
 1885              		.loc 1 1915 3 view .LVU417
1916:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1917:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Read the VBAT flags */
1918:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regValue = READ_BIT (PWR->CR2, (PWR_CR2_VBATH | PWR_CR2_VBATL));
 1886              		.loc 1 1918 3 view .LVU418
 1887              		.loc 1 1918 14 is_stmt 0 view .LVU419
 1888 0000 054B     		ldr	r3, .L182
 1889 0002 9868     		ldr	r0, [r3, #8]
 1890              		.loc 1 1918 12 view .LVU420
 1891 0004 00F44010 		and	r0, r0, #3145728
 1892              	.LVL96:
1919:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1920:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the VBAT is below the threshold */
1921:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (regValue == PWR_CR2_VBATL)
 1893              		.loc 1 1921 3 is_stmt 1 view .LVU421
 1894              		.loc 1 1921 6 is_stmt 0 view .LVU422
 1895 0008 B0F5801F 		cmp	r0, #1048576
 1896 000c 03D0     		beq	.L179
1922:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1923:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
1924:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1925:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the VBAT is above the threshold */
1926:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (regValue == PWR_CR2_VBATH)
 1897              		.loc 1 1926 8 is_stmt 1 view .LVU423
 1898              		.loc 1 1926 11 is_stmt 0 view .LVU424
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 88


 1899 000e B0F5001F 		cmp	r0, #2097152
 1900 0012 00D0     		beq	.L179
1927:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1928:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
1929:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1930:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* The VBAT is between the thresholds */
1931:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1932:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1933:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
 1901              		.loc 1 1933 15 view .LVU425
 1902 0014 0020     		movs	r0, #0
 1903              	.LVL97:
1934:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1935:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1936:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return VBATLevel;
 1904              		.loc 1 1936 3 is_stmt 1 view .LVU426
 1905              	.L179:
1937:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1906              		.loc 1 1937 1 is_stmt 0 view .LVU427
 1907 0016 7047     		bx	lr
 1908              	.L183:
 1909              		.align	2
 1910              	.L182:
 1911 0018 00480258 		.word	1476544512
 1912              		.cfi_endproc
 1913              	.LFE178:
 1915              		.section	.text.HAL_PWREx_ConfigAVD,"ax",%progbits
 1916              		.align	1
 1917              		.global	HAL_PWREx_ConfigAVD
 1918              		.syntax unified
 1919              		.thumb
 1920              		.thumb_func
 1922              	HAL_PWREx_ConfigAVD:
 1923              	.LVL98:
 1924              	.LFB179:
1938:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1939:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CSR1_MMCVDO)
1940:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1941:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the VDDMMC voltage level.
1942:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The VDDMMC voltage level.
1943:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1944:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** PWREx_MMC_VoltageLevel HAL_PWREx_GetMMCVoltage (void)
1945:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1946:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   PWREx_MMC_VoltageLevel mmc_voltage;
1947:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1948:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check voltage detector output on VDDMMC value */
1949:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CSR1 & PWR_CSR1_MMCVDO_Msk) == 0U)
1950:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1951:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     mmc_voltage = PWR_MMC_VOLTAGE_BELOW_1V2;
1952:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1953:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1954:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1955:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     mmc_voltage = PWR_MMC_VOLTAGE_EQUAL_ABOVE_1V2;
1956:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1957:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1958:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return mmc_voltage;
1959:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 89


1960:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CSR1_MMCVDO) */
1961:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1962:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1963:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Configure the event mode and the voltage threshold detected by the
1964:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Analog Voltage Detector (AVD).
1965:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  sConfigAVD : Pointer to an PWREx_AVDTypeDef structure that contains
1966:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      the configuration information for the AVD.
1967:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
1968:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         more details about the voltage threshold corresponding to each
1969:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         detection level.
1970:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For dual core devices, please ensure to configure the EXTI lines for
1971:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the different Cortex-Mx through PWR_Exported_Macro provided by this
1972:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         driver. All combination are allowed: wake up only Cortex-M7, wake up
1973:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         only Cortex-M4 and wake up Cortex-M7 and Cortex-M4.
1974:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1975:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1976:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ConfigAVD (PWREx_AVDTypeDef *sConfigAVD)
1977:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1925              		.loc 1 1977 1 is_stmt 1 view -0
 1926              		.cfi_startproc
 1927              		@ args = 0, pretend = 0, frame = 0
 1928              		@ frame_needed = 0, uses_anonymous_args = 0
 1929              		@ link register save eliminated.
1978:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1979:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_AVD_LEVEL (sConfigAVD->AVDLevel));
 1930              		.loc 1 1979 3 view .LVU429
1980:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_AVD_MODE (sConfigAVD->Mode));
 1931              		.loc 1 1980 3 view .LVU430
1981:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1982:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the ALS[18:17] bits according to AVDLevel value */
1983:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_ALS, sConfigAVD->AVDLevel);
 1932              		.loc 1 1983 3 view .LVU431
 1933 0000 244A     		ldr	r2, .L189
 1934 0002 1368     		ldr	r3, [r2]
 1935 0004 23F4C023 		bic	r3, r3, #393216
 1936 0008 0168     		ldr	r1, [r0]
 1937 000a 0B43     		orrs	r3, r3, r1
 1938 000c 1360     		str	r3, [r2]
1984:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1985:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear any previous config */
1986:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if !defined (DUAL_CORE)
1987:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_EVENT ();
 1939              		.loc 1 1987 3 view .LVU432
 1940 000e 4FF0B043 		mov	r3, #1476395008
 1941 0012 D3F88420 		ldr	r2, [r3, #132]
 1942 0016 22F48032 		bic	r2, r2, #65536
 1943 001a C3F88420 		str	r2, [r3, #132]
1988:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_IT ();
 1944              		.loc 1 1988 3 view .LVU433
 1945 001e D3F88020 		ldr	r2, [r3, #128]
 1946 0022 22F48032 		bic	r2, r2, #65536
 1947 0026 C3F88020 		str	r2, [r3, #128]
1989:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !defined (DUAL_CORE) */
1990:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1991:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_RISING_EDGE ();
 1948              		.loc 1 1991 3 view .LVU434
 1949 002a 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 90


 1950 002c 22F48032 		bic	r2, r2, #65536
 1951 0030 1A60     		str	r2, [r3]
1992:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_FALLING_EDGE ();
 1952              		.loc 1 1992 3 view .LVU435
 1953 0032 5A68     		ldr	r2, [r3, #4]
 1954 0034 22F48032 		bic	r2, r2, #65536
 1955 0038 5A60     		str	r2, [r3, #4]
1993:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1994:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if !defined (DUAL_CORE)
1995:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the interrupt mode */
1996:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_MODE_IT) == AVD_MODE_IT)
 1956              		.loc 1 1996 3 view .LVU436
 1957              		.loc 1 1996 18 is_stmt 0 view .LVU437
 1958 003a 4368     		ldr	r3, [r0, #4]
 1959              		.loc 1 1996 6 view .LVU438
 1960 003c 13F4803F 		tst	r3, #65536
 1961 0040 07D0     		beq	.L185
1997:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1998:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_IT ();
 1962              		.loc 1 1998 5 is_stmt 1 view .LVU439
 1963 0042 4FF0B042 		mov	r2, #1476395008
 1964 0046 D2F88030 		ldr	r3, [r2, #128]
 1965 004a 43F48033 		orr	r3, r3, #65536
 1966 004e C2F88030 		str	r3, [r2, #128]
 1967              	.L185:
1999:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2000:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2001:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the event mode */
2002:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_MODE_EVT) == AVD_MODE_EVT)
 1968              		.loc 1 2002 3 view .LVU440
 1969              		.loc 1 2002 18 is_stmt 0 view .LVU441
 1970 0052 4368     		ldr	r3, [r0, #4]
 1971              		.loc 1 2002 6 view .LVU442
 1972 0054 13F4003F 		tst	r3, #131072
 1973 0058 07D0     		beq	.L186
2003:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2004:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_EVENT ();
 1974              		.loc 1 2004 5 is_stmt 1 view .LVU443
 1975 005a 4FF0B042 		mov	r2, #1476395008
 1976 005e D2F88430 		ldr	r3, [r2, #132]
 1977 0062 43F48033 		orr	r3, r3, #65536
 1978 0066 C2F88430 		str	r3, [r2, #132]
 1979              	.L186:
2005:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2006:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !defined (DUAL_CORE) */
2007:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2008:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Rising edge configuration */
2009:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_RISING_EDGE) == AVD_RISING_EDGE)
 1980              		.loc 1 2009 3 view .LVU444
 1981              		.loc 1 2009 18 is_stmt 0 view .LVU445
 1982 006a 4368     		ldr	r3, [r0, #4]
 1983              		.loc 1 2009 6 view .LVU446
 1984 006c 13F0010F 		tst	r3, #1
 1985 0070 05D0     		beq	.L187
2010:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2011:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_RISING_EDGE ();
 1986              		.loc 1 2011 5 is_stmt 1 view .LVU447
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 91


 1987 0072 4FF0B042 		mov	r2, #1476395008
 1988 0076 1368     		ldr	r3, [r2]
 1989 0078 43F48033 		orr	r3, r3, #65536
 1990 007c 1360     		str	r3, [r2]
 1991              	.L187:
2012:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2013:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2014:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Falling edge configuration */
2015:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_FALLING_EDGE) == AVD_FALLING_EDGE)
 1992              		.loc 1 2015 3 view .LVU448
 1993              		.loc 1 2015 18 is_stmt 0 view .LVU449
 1994 007e 4368     		ldr	r3, [r0, #4]
 1995              		.loc 1 2015 6 view .LVU450
 1996 0080 13F0020F 		tst	r3, #2
 1997 0084 05D0     		beq	.L184
2016:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2017:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_FALLING_EDGE ();
 1998              		.loc 1 2017 5 is_stmt 1 view .LVU451
 1999 0086 4FF0B042 		mov	r2, #1476395008
 2000 008a 5368     		ldr	r3, [r2, #4]
 2001 008c 43F48033 		orr	r3, r3, #65536
 2002 0090 5360     		str	r3, [r2, #4]
 2003              	.L184:
2018:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2019:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2004              		.loc 1 2019 1 is_stmt 0 view .LVU452
 2005 0092 7047     		bx	lr
 2006              	.L190:
 2007              		.align	2
 2008              	.L189:
 2009 0094 00480258 		.word	1476544512
 2010              		.cfi_endproc
 2011              	.LFE179:
 2013              		.section	.text.HAL_PWREx_EnableAVD,"ax",%progbits
 2014              		.align	1
 2015              		.global	HAL_PWREx_EnableAVD
 2016              		.syntax unified
 2017              		.thumb
 2018              		.thumb_func
 2020              	HAL_PWREx_EnableAVD:
 2021              	.LFB180:
2020:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2021:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2022:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Analog Voltage Detector (AVD).
2023:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
2024:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2025:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableAVD (void)
2026:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2022              		.loc 1 2026 1 is_stmt 1 view -0
 2023              		.cfi_startproc
 2024              		@ args = 0, pretend = 0, frame = 0
 2025              		@ frame_needed = 0, uses_anonymous_args = 0
 2026              		@ link register save eliminated.
2027:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Analog Voltage Detector */
2028:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_AVDEN);
 2027              		.loc 1 2028 3 view .LVU454
 2028 0000 024A     		ldr	r2, .L192
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 92


 2029 0002 1368     		ldr	r3, [r2]
 2030 0004 43F48033 		orr	r3, r3, #65536
 2031 0008 1360     		str	r3, [r2]
2029:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2032              		.loc 1 2029 1 is_stmt 0 view .LVU455
 2033 000a 7047     		bx	lr
 2034              	.L193:
 2035              		.align	2
 2036              	.L192:
 2037 000c 00480258 		.word	1476544512
 2038              		.cfi_endproc
 2039              	.LFE180:
 2041              		.section	.text.HAL_PWREx_DisableAVD,"ax",%progbits
 2042              		.align	1
 2043              		.global	HAL_PWREx_DisableAVD
 2044              		.syntax unified
 2045              		.thumb
 2046              		.thumb_func
 2048              	HAL_PWREx_DisableAVD:
 2049              	.LFB181:
2030:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2031:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2032:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Analog Voltage Detector(AVD).
2033:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
2034:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2035:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableAVD (void)
2036:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2050              		.loc 1 2036 1 is_stmt 1 view -0
 2051              		.cfi_startproc
 2052              		@ args = 0, pretend = 0, frame = 0
 2053              		@ frame_needed = 0, uses_anonymous_args = 0
 2054              		@ link register save eliminated.
2037:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Analog Voltage Detector */
2038:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_AVDEN);
 2055              		.loc 1 2038 3 view .LVU457
 2056 0000 024A     		ldr	r2, .L195
 2057 0002 1368     		ldr	r3, [r2]
 2058 0004 23F48033 		bic	r3, r3, #65536
 2059 0008 1360     		str	r3, [r2]
2039:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2060              		.loc 1 2039 1 is_stmt 0 view .LVU458
 2061 000a 7047     		bx	lr
 2062              	.L196:
 2063              		.align	2
 2064              	.L195:
 2065 000c 00480258 		.word	1476544512
 2066              		.cfi_endproc
 2067              	.LFE181:
 2069              		.section	.text.HAL_PWREx_AVDCallback,"ax",%progbits
 2070              		.align	1
 2071              		.weak	HAL_PWREx_AVDCallback
 2072              		.syntax unified
 2073              		.thumb
 2074              		.thumb_func
 2076              	HAL_PWREx_AVDCallback:
 2077              	.LFB183:
2040:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 93


2041:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2042:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  This function handles the PWR PVD/AVD interrupt request.
2043:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API should be called under the PVD_AVD_IRQHandler().
2044:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
2045:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2046:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_PVD_AVD_IRQHandler (void)
2047:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
2048:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the Programmable Voltage Detector is enabled (PVD) */
2049:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
2050:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2051:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2052:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
2053:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2054:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2055:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR D1/CD EXTI flag */
2056:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
2057:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2058:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR PVD interrupt user callback */
2059:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWR_PVDCallback ();
2060:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2061:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D1/CD pending bit */
2062:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
2063:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2064:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2065:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2066:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
2067:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2068:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D2 flag */
2069:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_PVD_EXTID2_GET_FLAG () != 0U)
2070:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2071:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR PVD interrupt user callback */
2072:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWR_PVDCallback ();
2073:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2074:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D2 pending bit */
2075:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_PVD_EXTID2_CLEAR_FLAG();
2076:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2077:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2078:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2079:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2080:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2081:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the Analog Voltage Detector is enabled (AVD) */
2082:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
2083:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2084:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2085:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
2086:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2087:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2088:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D1/CD flag */
2089:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
2090:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2091:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR AVD interrupt user callback */
2092:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWREx_AVDCallback ();
2093:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2094:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D1/CD pending bit */
2095:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
2096:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2097:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 94


2098:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2099:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
2100:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2101:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D2 flag */
2102:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_AVD_EXTID2_GET_FLAG () != 0U)
2103:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2104:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR AVD interrupt user callback */
2105:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWREx_AVDCallback ();
2106:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2107:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D2 pending bit */
2108:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
2109:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2110:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2111:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2112:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2113:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
2114:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2115:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2116:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR AVD interrupt callback.
2117:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
2118:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2119:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_AVDCallback (void)
2120:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2078              		.loc 1 2120 1 is_stmt 1 view -0
 2079              		.cfi_startproc
 2080              		@ args = 0, pretend = 0, frame = 0
 2081              		@ frame_needed = 0, uses_anonymous_args = 0
 2082              		@ link register save eliminated.
2121:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2122:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWR_AVDCallback can be implemented in the user file
2123:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2124:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2083              		.loc 1 2124 1 view .LVU460
 2084 0000 7047     		bx	lr
 2085              		.cfi_endproc
 2086              	.LFE183:
 2088              		.section	.text.HAL_PWREx_PVD_AVD_IRQHandler,"ax",%progbits
 2089              		.align	1
 2090              		.global	HAL_PWREx_PVD_AVD_IRQHandler
 2091              		.syntax unified
 2092              		.thumb
 2093              		.thumb_func
 2095              	HAL_PWREx_PVD_AVD_IRQHandler:
 2096              	.LFB182:
2047:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the Programmable Voltage Detector is enabled (PVD) */
 2097              		.loc 1 2047 1 view -0
 2098              		.cfi_startproc
 2099              		@ args = 0, pretend = 0, frame = 0
 2100              		@ frame_needed = 0, uses_anonymous_args = 0
 2101 0000 08B5     		push	{r3, lr}
 2102              	.LCFI14:
 2103              		.cfi_def_cfa_offset 8
 2104              		.cfi_offset 3, -8
 2105              		.cfi_offset 14, -4
2049:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2106              		.loc 1 2049 3 view .LVU462
2049:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 95


 2107              		.loc 1 2049 7 is_stmt 0 view .LVU463
 2108 0002 174B     		ldr	r3, .L204
 2109 0004 1B68     		ldr	r3, [r3]
2049:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2110              		.loc 1 2049 6 view .LVU464
 2111 0006 13F0100F 		tst	r3, #16
 2112 000a 06D0     		beq	.L199
2056:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2113              		.loc 1 2056 7 is_stmt 1 view .LVU465
2056:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2114              		.loc 1 2056 11 is_stmt 0 view .LVU466
 2115 000c 4FF0B043 		mov	r3, #1476395008
 2116 0010 D3F88830 		ldr	r3, [r3, #136]
2056:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2117              		.loc 1 2056 10 view .LVU467
 2118 0014 13F4803F 		tst	r3, #65536
 2119 0018 0CD1     		bne	.L202
 2120              	.L199:
2082:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2121              		.loc 1 2082 3 is_stmt 1 view .LVU468
2082:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2122              		.loc 1 2082 7 is_stmt 0 view .LVU469
 2123 001a 114B     		ldr	r3, .L204
 2124 001c 1B68     		ldr	r3, [r3]
2082:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2125              		.loc 1 2082 6 view .LVU470
 2126 001e 13F4803F 		tst	r3, #65536
 2127 0022 06D0     		beq	.L198
2089:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2128              		.loc 1 2089 7 is_stmt 1 view .LVU471
2089:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2129              		.loc 1 2089 11 is_stmt 0 view .LVU472
 2130 0024 4FF0B043 		mov	r3, #1476395008
 2131 0028 D3F88830 		ldr	r3, [r3, #136]
2089:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2132              		.loc 1 2089 10 view .LVU473
 2133 002c 13F4803F 		tst	r3, #65536
 2134 0030 0BD1     		bne	.L203
 2135              	.L198:
2113:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2136              		.loc 1 2113 1 view .LVU474
 2137 0032 08BD     		pop	{r3, pc}
 2138              	.L202:
2059:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2139              		.loc 1 2059 9 is_stmt 1 view .LVU475
 2140 0034 FFF7FEFF 		bl	HAL_PWR_PVDCallback
 2141              	.LVL99:
2062:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 2142              		.loc 1 2062 9 view .LVU476
 2143 0038 4FF0B042 		mov	r2, #1476395008
 2144 003c D2F88830 		ldr	r3, [r2, #136]
 2145 0040 43F48033 		orr	r3, r3, #65536
 2146 0044 C2F88830 		str	r3, [r2, #136]
 2147 0048 E7E7     		b	.L199
 2148              	.L203:
2092:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2149              		.loc 1 2092 9 view .LVU477
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 96


 2150 004a FFF7FEFF 		bl	HAL_PWREx_AVDCallback
 2151              	.LVL100:
2095:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 2152              		.loc 1 2095 9 view .LVU478
 2153 004e 4FF0B042 		mov	r2, #1476395008
 2154 0052 D2F88830 		ldr	r3, [r2, #136]
 2155 0056 43F48033 		orr	r3, r3, #65536
 2156 005a C2F88830 		str	r3, [r2, #136]
2113:HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2157              		.loc 1 2113 1 is_stmt 0 view .LVU479
 2158 005e E8E7     		b	.L198
 2159              	.L205:
 2160              		.align	2
 2161              	.L204:
 2162 0060 00480258 		.word	1476544512
 2163              		.cfi_endproc
 2164              	.LFE182:
 2166              		.text
 2167              	.Letext0:
 2168              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 2169              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 2170              		.file 5 "HAL_Lib/CMSIS/Core/Include/core_cm7.h"
 2171              		.file 6 "HAL_Lib/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 2172              		.file 7 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 2173              		.file 8 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr_ex.h"
 2174              		.file 9 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr.h"
 2175              		.file 10 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 97


DEFINED SYMBOLS
                            *ABS*:00000000 stm32h7xx_hal_pwr_ex.c
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:19     .text.HAL_PWREx_ConfigSupply:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:25     .text.HAL_PWREx_ConfigSupply:00000000 HAL_PWREx_ConfigSupply
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:119    .text.HAL_PWREx_ConfigSupply:00000050 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:124    .text.HAL_PWREx_GetSupplyConfig:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:130    .text.HAL_PWREx_GetSupplyConfig:00000000 HAL_PWREx_GetSupplyConfig
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:147    .text.HAL_PWREx_GetSupplyConfig:0000000c $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:152    .text.HAL_PWREx_ControlVoltageScaling:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:158    .text.HAL_PWREx_ControlVoltageScaling:00000000 HAL_PWREx_ControlVoltageScaling
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:351    .text.HAL_PWREx_ControlVoltageScaling:000000cc $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:357    .text.HAL_PWREx_GetVoltageRange:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:363    .text.HAL_PWREx_GetVoltageRange:00000000 HAL_PWREx_GetVoltageRange
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:380    .text.HAL_PWREx_GetVoltageRange:0000000c $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:385    .text.HAL_PWREx_ControlStopModeVoltageScaling:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:391    .text.HAL_PWREx_ControlStopModeVoltageScaling:00000000 HAL_PWREx_ControlStopModeVoltageScaling
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:415    .text.HAL_PWREx_ControlStopModeVoltageScaling:00000010 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:420    .text.HAL_PWREx_GetStopModeVoltageRange:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:426    .text.HAL_PWREx_GetStopModeVoltageRange:00000000 HAL_PWREx_GetStopModeVoltageRange
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:443    .text.HAL_PWREx_GetStopModeVoltageRange:0000000c $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:448    .text.HAL_PWREx_EnterSTOPMode:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:454    .text.HAL_PWREx_EnterSTOPMode:00000000 HAL_PWREx_EnterSTOPMode
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:583    .text.HAL_PWREx_EnterSTOPMode:00000060 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:589    .text.HAL_PWREx_ClearPendingEvent:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:595    .text.HAL_PWREx_ClearPendingEvent:00000000 HAL_PWREx_ClearPendingEvent
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:615    .text.HAL_PWREx_EnterSTANDBYMode:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:621    .text.HAL_PWREx_EnterSTANDBYMode:00000000 HAL_PWREx_EnterSTANDBYMode
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:673    .text.HAL_PWREx_EnterSTANDBYMode:00000038 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:679    .text.HAL_PWREx_ConfigD3Domain:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:685    .text.HAL_PWREx_ConfigD3Domain:00000000 HAL_PWREx_ConfigD3Domain
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:705    .text.HAL_PWREx_ConfigD3Domain:00000010 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:710    .text.HAL_PWREx_EnableFlashPowerDown:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:716    .text.HAL_PWREx_EnableFlashPowerDown:00000000 HAL_PWREx_EnableFlashPowerDown
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:733    .text.HAL_PWREx_EnableFlashPowerDown:0000000c $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:738    .text.HAL_PWREx_DisableFlashPowerDown:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:744    .text.HAL_PWREx_DisableFlashPowerDown:00000000 HAL_PWREx_DisableFlashPowerDown
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:761    .text.HAL_PWREx_DisableFlashPowerDown:0000000c $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:766    .text.HAL_PWREx_EnableWakeUpPin:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:772    .text.HAL_PWREx_EnableWakeUpPin:00000000 HAL_PWREx_EnableWakeUpPin
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1038   .text.HAL_PWREx_EnableWakeUpPin:000000a4 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1045   .text.HAL_PWREx_DisableWakeUpPin:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1051   .text.HAL_PWREx_DisableWakeUpPin:00000000 HAL_PWREx_DisableWakeUpPin
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1070   .text.HAL_PWREx_DisableWakeUpPin:0000000c $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1075   .text.HAL_PWREx_GetWakeupFlag:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1081   .text.HAL_PWREx_GetWakeupFlag:00000000 HAL_PWREx_GetWakeupFlag
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1102   .text.HAL_PWREx_GetWakeupFlag:00000008 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1107   .text.HAL_PWREx_ClearWakeupFlag:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1113   .text.HAL_PWREx_ClearWakeupFlag:00000000 HAL_PWREx_ClearWakeupFlag
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1148   .text.HAL_PWREx_ClearWakeupFlag:00000018 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1153   .text.HAL_PWREx_WKUP1_Callback:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1159   .text.HAL_PWREx_WKUP1_Callback:00000000 HAL_PWREx_WKUP1_Callback
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1172   .text.HAL_PWREx_WKUP2_Callback:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1178   .text.HAL_PWREx_WKUP2_Callback:00000000 HAL_PWREx_WKUP2_Callback
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1191   .text.HAL_PWREx_WKUP3_Callback:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1197   .text.HAL_PWREx_WKUP3_Callback:00000000 HAL_PWREx_WKUP3_Callback
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1210   .text.HAL_PWREx_WKUP4_Callback:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1216   .text.HAL_PWREx_WKUP4_Callback:00000000 HAL_PWREx_WKUP4_Callback
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 98


C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1229   .text.HAL_PWREx_WKUP5_Callback:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1235   .text.HAL_PWREx_WKUP5_Callback:00000000 HAL_PWREx_WKUP5_Callback
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1248   .text.HAL_PWREx_WKUP6_Callback:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1254   .text.HAL_PWREx_WKUP6_Callback:00000000 HAL_PWREx_WKUP6_Callback
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1267   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1273   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:00000000 HAL_PWREx_WAKEUP_PIN_IRQHandler
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1384   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:00000094 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1389   .text.HAL_PWREx_EnableBkUpReg:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1395   .text.HAL_PWREx_EnableBkUpReg:00000000 HAL_PWREx_EnableBkUpReg
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1450   .text.HAL_PWREx_EnableBkUpReg:00000030 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1455   .text.HAL_PWREx_DisableBkUpReg:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1461   .text.HAL_PWREx_DisableBkUpReg:00000000 HAL_PWREx_DisableBkUpReg
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1516   .text.HAL_PWREx_DisableBkUpReg:00000030 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1521   .text.HAL_PWREx_EnableUSBReg:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1527   .text.HAL_PWREx_EnableUSBReg:00000000 HAL_PWREx_EnableUSBReg
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1582   .text.HAL_PWREx_EnableUSBReg:00000030 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1587   .text.HAL_PWREx_DisableUSBReg:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1593   .text.HAL_PWREx_DisableUSBReg:00000000 HAL_PWREx_DisableUSBReg
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1648   .text.HAL_PWREx_DisableUSBReg:00000030 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1653   .text.HAL_PWREx_EnableUSBVoltageDetector:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1659   .text.HAL_PWREx_EnableUSBVoltageDetector:00000000 HAL_PWREx_EnableUSBVoltageDetector
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1676   .text.HAL_PWREx_EnableUSBVoltageDetector:0000000c $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1681   .text.HAL_PWREx_DisableUSBVoltageDetector:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1687   .text.HAL_PWREx_DisableUSBVoltageDetector:00000000 HAL_PWREx_DisableUSBVoltageDetector
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1704   .text.HAL_PWREx_DisableUSBVoltageDetector:0000000c $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1709   .text.HAL_PWREx_EnableBatteryCharging:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1715   .text.HAL_PWREx_EnableBatteryCharging:00000000 HAL_PWREx_EnableBatteryCharging
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1739   .text.HAL_PWREx_EnableBatteryCharging:00000018 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1744   .text.HAL_PWREx_DisableBatteryCharging:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1750   .text.HAL_PWREx_DisableBatteryCharging:00000000 HAL_PWREx_DisableBatteryCharging
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1767   .text.HAL_PWREx_DisableBatteryCharging:0000000c $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1772   .text.HAL_PWREx_EnableMonitoring:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1778   .text.HAL_PWREx_EnableMonitoring:00000000 HAL_PWREx_EnableMonitoring
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1795   .text.HAL_PWREx_EnableMonitoring:0000000c $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1800   .text.HAL_PWREx_DisableMonitoring:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1806   .text.HAL_PWREx_DisableMonitoring:00000000 HAL_PWREx_DisableMonitoring
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1823   .text.HAL_PWREx_DisableMonitoring:0000000c $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1828   .text.HAL_PWREx_GetTemperatureLevel:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1834   .text.HAL_PWREx_GetTemperatureLevel:00000000 HAL_PWREx_GetTemperatureLevel
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1867   .text.HAL_PWREx_GetTemperatureLevel:00000018 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1872   .text.HAL_PWREx_GetVBATLevel:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1878   .text.HAL_PWREx_GetVBATLevel:00000000 HAL_PWREx_GetVBATLevel
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1911   .text.HAL_PWREx_GetVBATLevel:00000018 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1916   .text.HAL_PWREx_ConfigAVD:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:1922   .text.HAL_PWREx_ConfigAVD:00000000 HAL_PWREx_ConfigAVD
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:2009   .text.HAL_PWREx_ConfigAVD:00000094 $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:2014   .text.HAL_PWREx_EnableAVD:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:2020   .text.HAL_PWREx_EnableAVD:00000000 HAL_PWREx_EnableAVD
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:2037   .text.HAL_PWREx_EnableAVD:0000000c $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:2042   .text.HAL_PWREx_DisableAVD:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:2048   .text.HAL_PWREx_DisableAVD:00000000 HAL_PWREx_DisableAVD
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:2065   .text.HAL_PWREx_DisableAVD:0000000c $d
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:2070   .text.HAL_PWREx_AVDCallback:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:2076   .text.HAL_PWREx_AVDCallback:00000000 HAL_PWREx_AVDCallback
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:2089   .text.HAL_PWREx_PVD_AVD_IRQHandler:00000000 $t
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:2095   .text.HAL_PWREx_PVD_AVD_IRQHandler:00000000 HAL_PWREx_PVD_AVD_IRQHandler
C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s:2162   .text.HAL_PWREx_PVD_AVD_IRQHandler:00000060 $d
ARM GAS  C:\Users\HUAV\AppData\Local\Temp\ccI4W5px.s 			page 99



UNDEFINED SYMBOLS
HAL_GetTick
HAL_PWR_PVDCallback
