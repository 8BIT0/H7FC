ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"freertos.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vApplicationTickHook,"ax",%progbits
  20              		.align	1
  21              		.global	vApplicationTickHook
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	vApplicationTickHook:
  27              	.LFB5:
  28              		.file 1 "System/FreeRTOS/freertos.c"
   1:System/FreeRTOS/freertos.c **** /**
   2:System/FreeRTOS/freertos.c ****   ******************************************************************************
   3:System/FreeRTOS/freertos.c ****   * File Name          : freertos.c
   4:System/FreeRTOS/freertos.c ****   * Description        : Code for freertos applications
   5:System/FreeRTOS/freertos.c ****   ******************************************************************************
   6:System/FreeRTOS/freertos.c ****   * @attention
   7:System/FreeRTOS/freertos.c ****   *
   8:System/FreeRTOS/freertos.c ****   * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
   9:System/FreeRTOS/freertos.c ****   * All rights reserved.</center></h2>
  10:System/FreeRTOS/freertos.c ****   *
  11:System/FreeRTOS/freertos.c ****   * This software component is licensed by ST under Ultimate Liberty license
  12:System/FreeRTOS/freertos.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  13:System/FreeRTOS/freertos.c ****   * the License. You may obtain a copy of the License at:
  14:System/FreeRTOS/freertos.c ****   *                             www.st.com/SLA0044
  15:System/FreeRTOS/freertos.c ****   *
  16:System/FreeRTOS/freertos.c ****   ******************************************************************************
  17:System/FreeRTOS/freertos.c ****   */
  18:System/FreeRTOS/freertos.c **** 
  19:System/FreeRTOS/freertos.c **** /* Includes ------------------------------------------------------------------*/
  20:System/FreeRTOS/freertos.c **** #include "FreeRTOS.h"
  21:System/FreeRTOS/freertos.c **** #include "task.h"
  22:System/FreeRTOS/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  23:System/FreeRTOS/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  24:System/FreeRTOS/freertos.c **** 
  25:System/FreeRTOS/freertos.c **** /* Hook prototypes */
  26:System/FreeRTOS/freertos.c **** void vApplicationTickHook(void);
  27:System/FreeRTOS/freertos.c **** void vApplicationMallocFailedHook(void);
  28:System/FreeRTOS/freertos.c **** 
  29:System/FreeRTOS/freertos.c **** __attribute__((__weak)) void vApplicationTickHook( void )
  30:System/FreeRTOS/freertos.c **** {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s 			page 2


  29              		.loc 1 30 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  31:System/FreeRTOS/freertos.c ****    /* This function will be called by each tick interrupt if
  32:System/FreeRTOS/freertos.c ****    configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
  33:System/FreeRTOS/freertos.c ****    added here, but the tick hook is called from an interrupt context, so
  34:System/FreeRTOS/freertos.c ****    code must not attempt to block, and only the interrupt safe FreeRTOS API
  35:System/FreeRTOS/freertos.c ****    functions can be used (those that end in FromISR()). */
  36:System/FreeRTOS/freertos.c **** }
  34              		.loc 1 36 1 view .LVU1
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE5:
  39              		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
  40              		.align	1
  41              		.global	vApplicationMallocFailedHook
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  46              	vApplicationMallocFailedHook:
  47              	.LFB6:
  37:System/FreeRTOS/freertos.c **** 
  38:System/FreeRTOS/freertos.c **** __attribute__((__weak)) void vApplicationMallocFailedHook(void)
  39:System/FreeRTOS/freertos.c **** {
  48              		.loc 1 39 1 view -0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  40:System/FreeRTOS/freertos.c ****    /* vApplicationMallocFailedHook() will only be called if
  41:System/FreeRTOS/freertos.c ****    configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h. It is a hook
  42:System/FreeRTOS/freertos.c ****    function that will get called if a call to pvPortMalloc() fails.
  43:System/FreeRTOS/freertos.c ****    pvPortMalloc() is called internally by the kernel whenever a task, queue,
  44:System/FreeRTOS/freertos.c ****    timer or semaphore is created. It is also called by various parts of the
  45:System/FreeRTOS/freertos.c ****    demo application. If heap_1.c or heap_2.c are used, then the size of the
  46:System/FreeRTOS/freertos.c ****    heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
  47:System/FreeRTOS/freertos.c ****    FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
  48:System/FreeRTOS/freertos.c ****    to query the size of free heap space that remains (although it does not
  49:System/FreeRTOS/freertos.c ****    provide information on how the remaining heap might be fragmented). */
  50:System/FreeRTOS/freertos.c **** }
  53              		.loc 1 50 1 view .LVU3
  54 0000 7047     		bx	lr
  55              		.cfi_endproc
  56              	.LFE6:
  58              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
  59              		.align	1
  60              		.global	vApplicationGetIdleTaskMemory
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  65              	vApplicationGetIdleTaskMemory:
  66              	.LVL0:
  67              	.LFB7:
  51:System/FreeRTOS/freertos.c **** 
  52:System/FreeRTOS/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s 			page 3


  53:System/FreeRTOS/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  54:System/FreeRTOS/freertos.c **** 
  55:System/FreeRTOS/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  56:System/FreeRTOS/freertos.c **** {
  68              		.loc 1 56 1 view -0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  57:System/FreeRTOS/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  73              		.loc 1 57 3 view .LVU5
  74              		.loc 1 57 25 is_stmt 0 view .LVU6
  75 0000 034B     		ldr	r3, .L4
  76 0002 0360     		str	r3, [r0]
  58:System/FreeRTOS/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  77              		.loc 1 58 3 is_stmt 1 view .LVU7
  78              		.loc 1 58 27 is_stmt 0 view .LVU8
  79 0004 034B     		ldr	r3, .L4+4
  80 0006 0B60     		str	r3, [r1]
  59:System/FreeRTOS/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  81              		.loc 1 59 3 is_stmt 1 view .LVU9
  82              		.loc 1 59 25 is_stmt 0 view .LVU10
  83 0008 8023     		movs	r3, #128
  84 000a 1360     		str	r3, [r2]
  60:System/FreeRTOS/freertos.c ****   /* place for user code */
  61:System/FreeRTOS/freertos.c **** }
  85              		.loc 1 61 1 view .LVU11
  86 000c 7047     		bx	lr
  87              	.L5:
  88 000e 00BF     		.align	2
  89              	.L4:
  90 0010 00000000 		.word	.LANCHOR0
  91 0014 00000000 		.word	.LANCHOR1
  92              		.cfi_endproc
  93              	.LFE7:
  95              		.section	.bss.xIdleStack,"aw",%nobits
  96              		.align	2
  97              		.set	.LANCHOR1,. + 0
 100              	xIdleStack:
 101 0000 00000000 		.space	512
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 103              		.align	2
 104              		.set	.LANCHOR0,. + 0
 107              	xIdleTaskTCBBuffer:
 108 0000 00000000 		.space	96
 108      00000000 
 108      00000000 
 108      00000000 
 108      00000000 
 109              		.text
 110              	.Letext0:
 111              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 112              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s 			page 4


 113              		.file 4 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
 114              		.file 5 "System/FreeRTOS/include/FreeRTOS.h"
 115              		.file 6 "System/FreeRTOS/FreeRTOSConfig.h"
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s 			page 5


DEFINED SYMBOLS
                            *ABS*:00000000 freertos.c
C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s:20     .text.vApplicationTickHook:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s:26     .text.vApplicationTickHook:00000000 vApplicationTickHook
C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s:40     .text.vApplicationMallocFailedHook:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s:46     .text.vApplicationMallocFailedHook:00000000 vApplicationMallocFailedHook
C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s:59     .text.vApplicationGetIdleTaskMemory:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s:65     .text.vApplicationGetIdleTaskMemory:00000000 vApplicationGetIdleTaskMemory
C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s:90     .text.vApplicationGetIdleTaskMemory:00000010 $d
C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s:96     .bss.xIdleStack:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s:100    .bss.xIdleStack:00000000 xIdleStack
C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s:103    .bss.xIdleTaskTCBBuffer:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccDyNMoT.s:107    .bss.xIdleTaskTCBBuffer:00000000 xIdleTaskTCBBuffer

NO UNDEFINED SYMBOLS
