ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	prvTaskIsTaskSuspended:
  26              	.LVL0:
  27              	.LFB17:
  28              		.file 1 "System/FreeRTOS/tasks.c"
   1:System/FreeRTOS/tasks.c **** /*
   2:System/FreeRTOS/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:System/FreeRTOS/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:System/FreeRTOS/tasks.c ****  *
   5:System/FreeRTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:System/FreeRTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:System/FreeRTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:System/FreeRTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:System/FreeRTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:System/FreeRTOS/tasks.c ****  * subject to the following conditions:
  11:System/FreeRTOS/tasks.c ****  *
  12:System/FreeRTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:System/FreeRTOS/tasks.c ****  * copies or substantial portions of the Software.
  14:System/FreeRTOS/tasks.c ****  *
  15:System/FreeRTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:System/FreeRTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:System/FreeRTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:System/FreeRTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:System/FreeRTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:System/FreeRTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:System/FreeRTOS/tasks.c ****  *
  22:System/FreeRTOS/tasks.c ****  * http://www.FreeRTOS.org
  23:System/FreeRTOS/tasks.c ****  * http://aws.amazon.com/freertos
  24:System/FreeRTOS/tasks.c ****  *
  25:System/FreeRTOS/tasks.c ****  * 1 tab == 4 spaces!
  26:System/FreeRTOS/tasks.c ****  */
  27:System/FreeRTOS/tasks.c **** 
  28:System/FreeRTOS/tasks.c **** /* Standard includes. */
  29:System/FreeRTOS/tasks.c **** #include <stdlib.h>
  30:System/FreeRTOS/tasks.c **** #include <string.h>
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 2


  31:System/FreeRTOS/tasks.c **** 
  32:System/FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:System/FreeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:System/FreeRTOS/tasks.c **** task.h is included from an application file. */
  35:System/FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:System/FreeRTOS/tasks.c **** 
  37:System/FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  38:System/FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  39:System/FreeRTOS/tasks.c **** #include "task.h"
  40:System/FreeRTOS/tasks.c **** #include "timers.h"
  41:System/FreeRTOS/tasks.c **** #include "stack_macros.h"
  42:System/FreeRTOS/tasks.c **** 
  43:System/FreeRTOS/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:System/FreeRTOS/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:System/FreeRTOS/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:System/FreeRTOS/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:System/FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:System/FreeRTOS/tasks.c **** 
  49:System/FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:System/FreeRTOS/tasks.c **** functions but without including stdio.h here. */
  51:System/FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:System/FreeRTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:System/FreeRTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:System/FreeRTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:System/FreeRTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:System/FreeRTOS/tasks.c **** 	#include <stdio.h>
  57:System/FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:System/FreeRTOS/tasks.c **** 
  59:System/FreeRTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:System/FreeRTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:System/FreeRTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:System/FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:System/FreeRTOS/tasks.c **** #else
  64:System/FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:System/FreeRTOS/tasks.c **** #endif
  66:System/FreeRTOS/tasks.c **** 
  67:System/FreeRTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:System/FreeRTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:System/FreeRTOS/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:System/FreeRTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:System/FreeRTOS/tasks.c **** 
  72:System/FreeRTOS/tasks.c **** /*
  73:System/FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:System/FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:System/FreeRTOS/tasks.c ****  */
  76:System/FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:System/FreeRTOS/tasks.c **** 
  78:System/FreeRTOS/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:System/FreeRTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:System/FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:System/FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:System/FreeRTOS/tasks.c **** 
  83:System/FreeRTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:System/FreeRTOS/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:System/FreeRTOS/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:System/FreeRTOS/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:System/FreeRTOS/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 3


  88:System/FreeRTOS/tasks.c **** #else
  89:System/FreeRTOS/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:System/FreeRTOS/tasks.c **** #endif
  91:System/FreeRTOS/tasks.c **** 
  92:System/FreeRTOS/tasks.c **** /*
  93:System/FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:System/FreeRTOS/tasks.c ****  */
  95:System/FreeRTOS/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:System/FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:System/FreeRTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:System/FreeRTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:System/FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:System/FreeRTOS/tasks.c **** 
 101:System/FreeRTOS/tasks.c **** /*
 102:System/FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:System/FreeRTOS/tasks.c ****  * global, rather than file scope.
 104:System/FreeRTOS/tasks.c ****  */
 105:System/FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:System/FreeRTOS/tasks.c **** 	#define static
 107:System/FreeRTOS/tasks.c **** #endif
 108:System/FreeRTOS/tasks.c **** 
 109:System/FreeRTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:System/FreeRTOS/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:System/FreeRTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:System/FreeRTOS/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:System/FreeRTOS/tasks.c **** #endif
 114:System/FreeRTOS/tasks.c **** 
 115:System/FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:System/FreeRTOS/tasks.c **** 
 117:System/FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:System/FreeRTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:System/FreeRTOS/tasks.c **** 	microcontroller architecture. */
 120:System/FreeRTOS/tasks.c **** 
 121:System/FreeRTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:System/FreeRTOS/tasks.c **** 	state task. */
 123:System/FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:System/FreeRTOS/tasks.c **** 	{																									\
 125:System/FreeRTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:System/FreeRTOS/tasks.c **** 		{																								\
 127:System/FreeRTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:System/FreeRTOS/tasks.c **** 		}																								\
 129:System/FreeRTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:System/FreeRTOS/tasks.c **** 
 131:System/FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 132:System/FreeRTOS/tasks.c **** 
 133:System/FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:System/FreeRTOS/tasks.c **** 	{																									\
 135:System/FreeRTOS/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:System/FreeRTOS/tasks.c **** 																										\
 137:System/FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:System/FreeRTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:System/FreeRTOS/tasks.c **** 		{																								\
 140:System/FreeRTOS/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:System/FreeRTOS/tasks.c **** 			--uxTopPriority;																			\
 142:System/FreeRTOS/tasks.c **** 		}																								\
 143:System/FreeRTOS/tasks.c **** 																										\
 144:System/FreeRTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 4


 145:System/FreeRTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:System/FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:System/FreeRTOS/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:System/FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:System/FreeRTOS/tasks.c **** 
 150:System/FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 151:System/FreeRTOS/tasks.c **** 
 152:System/FreeRTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:System/FreeRTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:System/FreeRTOS/tasks.c **** 	being used. */
 155:System/FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:System/FreeRTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:System/FreeRTOS/tasks.c **** 
 158:System/FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:System/FreeRTOS/tasks.c **** 
 160:System/FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:System/FreeRTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:System/FreeRTOS/tasks.c **** 	architecture being used. */
 163:System/FreeRTOS/tasks.c **** 
 164:System/FreeRTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:System/FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:System/FreeRTOS/tasks.c **** 
 167:System/FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 168:System/FreeRTOS/tasks.c **** 
 169:System/FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:System/FreeRTOS/tasks.c **** 	{																								\
 171:System/FreeRTOS/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:System/FreeRTOS/tasks.c **** 																									\
 173:System/FreeRTOS/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:System/FreeRTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:System/FreeRTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:System/FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:System/FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:System/FreeRTOS/tasks.c **** 
 179:System/FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 180:System/FreeRTOS/tasks.c **** 
 181:System/FreeRTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:System/FreeRTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:System/FreeRTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:System/FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:System/FreeRTOS/tasks.c **** 	{																									\
 186:System/FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:System/FreeRTOS/tasks.c **** 		{																								\
 188:System/FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:System/FreeRTOS/tasks.c **** 		}																								\
 190:System/FreeRTOS/tasks.c **** 	}
 191:System/FreeRTOS/tasks.c **** 
 192:System/FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:System/FreeRTOS/tasks.c **** 
 194:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 195:System/FreeRTOS/tasks.c **** 
 196:System/FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:System/FreeRTOS/tasks.c **** count overflows. */
 198:System/FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:System/FreeRTOS/tasks.c **** {																									\
 200:System/FreeRTOS/tasks.c **** 	List_t *pxTemp;																					\
 201:System/FreeRTOS/tasks.c **** 																									\
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 5


 202:System/FreeRTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:System/FreeRTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:System/FreeRTOS/tasks.c **** 																									\
 205:System/FreeRTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:System/FreeRTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:System/FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:System/FreeRTOS/tasks.c **** 	xNumOfOverflows++;																				\
 209:System/FreeRTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:System/FreeRTOS/tasks.c **** }
 211:System/FreeRTOS/tasks.c **** 
 212:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 213:System/FreeRTOS/tasks.c **** 
 214:System/FreeRTOS/tasks.c **** /*
 215:System/FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:System/FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:System/FreeRTOS/tasks.c ****  */
 218:System/FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:System/FreeRTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:System/FreeRTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:System/FreeRTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:System/FreeRTOS/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 224:System/FreeRTOS/tasks.c **** 
 225:System/FreeRTOS/tasks.c **** /*
 226:System/FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:System/FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:System/FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:System/FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:System/FreeRTOS/tasks.c ****  */
 231:System/FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:System/FreeRTOS/tasks.c **** 
 233:System/FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:System/FreeRTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:System/FreeRTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:System/FreeRTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:System/FreeRTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:System/FreeRTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:System/FreeRTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:System/FreeRTOS/tasks.c **** to its original value when it is released. */
 241:System/FreeRTOS/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:System/FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:System/FreeRTOS/tasks.c **** #else
 244:System/FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:System/FreeRTOS/tasks.c **** #endif
 246:System/FreeRTOS/tasks.c **** 
 247:System/FreeRTOS/tasks.c **** /*
 248:System/FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:System/FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:System/FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 251:System/FreeRTOS/tasks.c ****  */
 252:System/FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:System/FreeRTOS/tasks.c **** {
 254:System/FreeRTOS/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:System/FreeRTOS/tasks.c **** 
 256:System/FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:System/FreeRTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:System/FreeRTOS/tasks.c **** 	#endif
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 6


 259:System/FreeRTOS/tasks.c **** 
 260:System/FreeRTOS/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:System/FreeRTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:System/FreeRTOS/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:System/FreeRTOS/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:System/FreeRTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:System/FreeRTOS/tasks.c **** 
 266:System/FreeRTOS/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:System/FreeRTOS/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:System/FreeRTOS/tasks.c **** 	#endif
 269:System/FreeRTOS/tasks.c **** 
 270:System/FreeRTOS/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 271:System/FreeRTOS/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 272:System/FreeRTOS/tasks.c **** 	#else
 273:System/FreeRTOS/tasks.c ****         UBaseType_t     uxSizeOfStack;      /*< Support For CmBacktrace >*/
 274:System/FreeRTOS/tasks.c ****     #endif /* ( portSTACK_GROWTH > 0 )*/
 275:System/FreeRTOS/tasks.c **** 
 276:System/FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 277:System/FreeRTOS/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 278:System/FreeRTOS/tasks.c **** 	#endif
 279:System/FreeRTOS/tasks.c **** 
 280:System/FreeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 281:System/FreeRTOS/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 282:System/FreeRTOS/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 283:System/FreeRTOS/tasks.c **** 	#endif
 284:System/FreeRTOS/tasks.c **** 
 285:System/FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 286:System/FreeRTOS/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 287:System/FreeRTOS/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 288:System/FreeRTOS/tasks.c **** 	#endif
 289:System/FreeRTOS/tasks.c **** 
 290:System/FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 291:System/FreeRTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 292:System/FreeRTOS/tasks.c **** 	#endif
 293:System/FreeRTOS/tasks.c **** 
 294:System/FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 295:System/FreeRTOS/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 296:System/FreeRTOS/tasks.c **** 	#endif
 297:System/FreeRTOS/tasks.c **** 
 298:System/FreeRTOS/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 299:System/FreeRTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 300:System/FreeRTOS/tasks.c **** 	#endif
 301:System/FreeRTOS/tasks.c **** 
 302:System/FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 303:System/FreeRTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 304:System/FreeRTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 305:System/FreeRTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 306:System/FreeRTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 307:System/FreeRTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 308:System/FreeRTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 309:System/FreeRTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 310:System/FreeRTOS/tasks.c **** 
 311:System/FreeRTOS/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 312:System/FreeRTOS/tasks.c **** 		for additional information. */
 313:System/FreeRTOS/tasks.c **** 		struct	_reent xNewLib_reent;
 314:System/FreeRTOS/tasks.c **** 	#endif
 315:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 7


 316:System/FreeRTOS/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 317:System/FreeRTOS/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 318:System/FreeRTOS/tasks.c **** 		volatile uint8_t ucNotifyState;
 319:System/FreeRTOS/tasks.c **** 	#endif
 320:System/FreeRTOS/tasks.c **** 
 321:System/FreeRTOS/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 322:System/FreeRTOS/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 323:System/FreeRTOS/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 324:System/FreeRTOS/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 325:System/FreeRTOS/tasks.c **** 	#endif
 326:System/FreeRTOS/tasks.c **** 
 327:System/FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 328:System/FreeRTOS/tasks.c **** 		uint8_t ucDelayAborted;
 329:System/FreeRTOS/tasks.c **** 	#endif
 330:System/FreeRTOS/tasks.c **** 
 331:System/FreeRTOS/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 332:System/FreeRTOS/tasks.c **** 		int iTaskErrno;
 333:System/FreeRTOS/tasks.c **** 	#endif
 334:System/FreeRTOS/tasks.c **** 
 335:System/FreeRTOS/tasks.c **** } tskTCB;
 336:System/FreeRTOS/tasks.c **** 
 337:System/FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 338:System/FreeRTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 339:System/FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 340:System/FreeRTOS/tasks.c **** 
 341:System/FreeRTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 342:System/FreeRTOS/tasks.c **** which static variables must be declared volatile. */
 343:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 344:System/FreeRTOS/tasks.c **** 
 345:System/FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 346:System/FreeRTOS/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 347:System/FreeRTOS/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 348:System/FreeRTOS/tasks.c **** the static qualifier. */
 349:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 350:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 351:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 352:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 353:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 354:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 355:System/FreeRTOS/tasks.c **** 
 356:System/FreeRTOS/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 357:System/FreeRTOS/tasks.c **** 
 358:System/FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 359:System/FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 360:System/FreeRTOS/tasks.c **** 
 361:System/FreeRTOS/tasks.c **** #endif
 362:System/FreeRTOS/tasks.c **** 
 363:System/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 364:System/FreeRTOS/tasks.c **** 
 365:System/FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 366:System/FreeRTOS/tasks.c **** 
 367:System/FreeRTOS/tasks.c **** #endif
 368:System/FreeRTOS/tasks.c **** 
 369:System/FreeRTOS/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 370:System/FreeRTOS/tasks.c **** the errno of the currently running task. */
 371:System/FreeRTOS/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 372:System/FreeRTOS/tasks.c **** 	int FreeRTOS_errno = 0;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 8


 373:System/FreeRTOS/tasks.c **** #endif
 374:System/FreeRTOS/tasks.c **** 
 375:System/FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 376:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 377:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 378:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 379:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 380:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 381:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 382:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 383:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 384:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 385:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 386:System/FreeRTOS/tasks.c **** 
 387:System/FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 388:System/FreeRTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 389:System/FreeRTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 390:System/FreeRTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 391:System/FreeRTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 392:System/FreeRTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 393:System/FreeRTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 394:System/FreeRTOS/tasks.c **** accessed from a critical section. */
 395:System/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 396:System/FreeRTOS/tasks.c **** 
 397:System/FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 398:System/FreeRTOS/tasks.c **** 
 399:System/FreeRTOS/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 400:System/FreeRTOS/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 401:System/FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 402:System/FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 403:System/FreeRTOS/tasks.c **** 
 404:System/FreeRTOS/tasks.c **** #endif
 405:System/FreeRTOS/tasks.c **** 
 406:System/FreeRTOS/tasks.c **** /*lint -restore */
 407:System/FreeRTOS/tasks.c **** 
 408:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 409:System/FreeRTOS/tasks.c **** 
 410:System/FreeRTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 411:System/FreeRTOS/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 412:System/FreeRTOS/tasks.c **** 
 413:System/FreeRTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 414:System/FreeRTOS/tasks.c **** 
 415:System/FreeRTOS/tasks.c **** #endif
 416:System/FreeRTOS/tasks.c **** 
 417:System/FreeRTOS/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 418:System/FreeRTOS/tasks.c **** 
 419:System/FreeRTOS/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 420:System/FreeRTOS/tasks.c **** 
 421:System/FreeRTOS/tasks.c **** #endif
 422:System/FreeRTOS/tasks.c **** 
 423:System/FreeRTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 424:System/FreeRTOS/tasks.c **** 
 425:System/FreeRTOS/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 426:System/FreeRTOS/tasks.c **** 
 427:System/FreeRTOS/tasks.c **** #endif
 428:System/FreeRTOS/tasks.c **** 
 429:System/FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 9


 430:System/FreeRTOS/tasks.c **** 
 431:System/FreeRTOS/tasks.c **** /**
 432:System/FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 433:System/FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 434:System/FreeRTOS/tasks.c ****  * is in any other state.
 435:System/FreeRTOS/tasks.c ****  */
 436:System/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 437:System/FreeRTOS/tasks.c **** 
 438:System/FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 439:System/FreeRTOS/tasks.c **** 
 440:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 441:System/FreeRTOS/tasks.c **** 
 442:System/FreeRTOS/tasks.c **** /*
 443:System/FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 444:System/FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 445:System/FreeRTOS/tasks.c ****  */
 446:System/FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 447:System/FreeRTOS/tasks.c **** 
 448:System/FreeRTOS/tasks.c **** /*
 449:System/FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 450:System/FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 451:System/FreeRTOS/tasks.c ****  * creation of the first user task.
 452:System/FreeRTOS/tasks.c ****  *
 453:System/FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 454:System/FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 455:System/FreeRTOS/tasks.c ****  *
 456:System/FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 457:System/FreeRTOS/tasks.c ****  *
 458:System/FreeRTOS/tasks.c ****  */
 459:System/FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 460:System/FreeRTOS/tasks.c **** 
 461:System/FreeRTOS/tasks.c **** /*
 462:System/FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 463:System/FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 464:System/FreeRTOS/tasks.c ****  *
 465:System/FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 466:System/FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 467:System/FreeRTOS/tasks.c ****  */
 468:System/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 469:System/FreeRTOS/tasks.c **** 
 470:System/FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 471:System/FreeRTOS/tasks.c **** 
 472:System/FreeRTOS/tasks.c **** #endif
 473:System/FreeRTOS/tasks.c **** 
 474:System/FreeRTOS/tasks.c **** /*
 475:System/FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 476:System/FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 477:System/FreeRTOS/tasks.c ****  * and its TCB deleted.
 478:System/FreeRTOS/tasks.c ****  */
 479:System/FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 480:System/FreeRTOS/tasks.c **** 
 481:System/FreeRTOS/tasks.c **** /*
 482:System/FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 483:System/FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 484:System/FreeRTOS/tasks.c ****  */
 485:System/FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 486:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 10


 487:System/FreeRTOS/tasks.c **** /*
 488:System/FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 489:System/FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 490:System/FreeRTOS/tasks.c ****  * a suspended list, etc.).
 491:System/FreeRTOS/tasks.c ****  *
 492:System/FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 493:System/FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 494:System/FreeRTOS/tasks.c ****  */
 495:System/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 496:System/FreeRTOS/tasks.c **** 
 497:System/FreeRTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 498:System/FreeRTOS/tasks.c **** 
 499:System/FreeRTOS/tasks.c **** #endif
 500:System/FreeRTOS/tasks.c **** 
 501:System/FreeRTOS/tasks.c **** /*
 502:System/FreeRTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 503:System/FreeRTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 504:System/FreeRTOS/tasks.c ****  */
 505:System/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 506:System/FreeRTOS/tasks.c **** 
 507:System/FreeRTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 508:System/FreeRTOS/tasks.c **** 
 509:System/FreeRTOS/tasks.c **** #endif
 510:System/FreeRTOS/tasks.c **** 
 511:System/FreeRTOS/tasks.c **** /*
 512:System/FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 513:System/FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 514:System/FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 515:System/FreeRTOS/tasks.c ****  */
 516:System/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 517:System/FreeRTOS/tasks.c **** 
 518:System/FreeRTOS/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 519:System/FreeRTOS/tasks.c **** 
 520:System/FreeRTOS/tasks.c **** #endif
 521:System/FreeRTOS/tasks.c **** 
 522:System/FreeRTOS/tasks.c **** /*
 523:System/FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 524:System/FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 525:System/FreeRTOS/tasks.c ****  *
 526:System/FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 527:System/FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 528:System/FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 529:System/FreeRTOS/tasks.c ****  * set to a value other than 1.
 530:System/FreeRTOS/tasks.c ****  */
 531:System/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 532:System/FreeRTOS/tasks.c **** 
 533:System/FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 534:System/FreeRTOS/tasks.c **** 
 535:System/FreeRTOS/tasks.c **** #endif
 536:System/FreeRTOS/tasks.c **** 
 537:System/FreeRTOS/tasks.c **** /*
 538:System/FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 539:System/FreeRTOS/tasks.c ****  * will exit the Blocked state.
 540:System/FreeRTOS/tasks.c ****  */
 541:System/FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 542:System/FreeRTOS/tasks.c **** 
 543:System/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 11


 544:System/FreeRTOS/tasks.c **** 
 545:System/FreeRTOS/tasks.c **** 	/*
 546:System/FreeRTOS/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 547:System/FreeRTOS/tasks.c **** 	 * human readable tables of task information.
 548:System/FreeRTOS/tasks.c **** 	 */
 549:System/FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 550:System/FreeRTOS/tasks.c **** 
 551:System/FreeRTOS/tasks.c **** #endif
 552:System/FreeRTOS/tasks.c **** 
 553:System/FreeRTOS/tasks.c **** /*
 554:System/FreeRTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 555:System/FreeRTOS/tasks.c ****  * dynamically to fill in the structure's members.
 556:System/FreeRTOS/tasks.c ****  */
 557:System/FreeRTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 558:System/FreeRTOS/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 559:System/FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 560:System/FreeRTOS/tasks.c **** 									void * const pvParameters,
 561:System/FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 562:System/FreeRTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 563:System/FreeRTOS/tasks.c **** 									TCB_t *pxNewTCB,
 564:System/FreeRTOS/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 565:System/FreeRTOS/tasks.c **** 
 566:System/FreeRTOS/tasks.c **** /*
 567:System/FreeRTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 568:System/FreeRTOS/tasks.c ****  * under the control of the scheduler.
 569:System/FreeRTOS/tasks.c ****  */
 570:System/FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 571:System/FreeRTOS/tasks.c **** 
 572:System/FreeRTOS/tasks.c **** /*
 573:System/FreeRTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 574:System/FreeRTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 575:System/FreeRTOS/tasks.c ****  * called by the function.
 576:System/FreeRTOS/tasks.c ****  */
 577:System/FreeRTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 578:System/FreeRTOS/tasks.c **** 
 579:System/FreeRTOS/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 580:System/FreeRTOS/tasks.c **** 
 581:System/FreeRTOS/tasks.c **** #endif
 582:System/FreeRTOS/tasks.c **** 
 583:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 584:System/FreeRTOS/tasks.c **** 
 585:System/FreeRTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 586:System/FreeRTOS/tasks.c **** 
 587:System/FreeRTOS/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 588:System/FreeRTOS/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 589:System/FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 590:System/FreeRTOS/tasks.c **** 									void * const pvParameters,
 591:System/FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 592:System/FreeRTOS/tasks.c **** 									StackType_t * const puxStackBuffer,
 593:System/FreeRTOS/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 594:System/FreeRTOS/tasks.c **** 	{
 595:System/FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 596:System/FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
 597:System/FreeRTOS/tasks.c **** 
 598:System/FreeRTOS/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 599:System/FreeRTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 600:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 12


 601:System/FreeRTOS/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 602:System/FreeRTOS/tasks.c **** 		{
 603:System/FreeRTOS/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 604:System/FreeRTOS/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 605:System/FreeRTOS/tasks.c **** 			structure. */
 606:System/FreeRTOS/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 607:System/FreeRTOS/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 608:System/FreeRTOS/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 609:System/FreeRTOS/tasks.c **** 		}
 610:System/FreeRTOS/tasks.c **** 		#endif /* configASSERT_DEFINED */
 611:System/FreeRTOS/tasks.c **** 
 612:System/FreeRTOS/tasks.c **** 
 613:System/FreeRTOS/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 614:System/FreeRTOS/tasks.c **** 		{
 615:System/FreeRTOS/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 616:System/FreeRTOS/tasks.c **** 			function - use them. */
 617:System/FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 618:System/FreeRTOS/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 619:System/FreeRTOS/tasks.c **** 
 620:System/FreeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 621:System/FreeRTOS/tasks.c **** 			{
 622:System/FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 623:System/FreeRTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 624:System/FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 625:System/FreeRTOS/tasks.c **** 			}
 626:System/FreeRTOS/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 627:System/FreeRTOS/tasks.c **** 
 628:System/FreeRTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 629:System/FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 630:System/FreeRTOS/tasks.c **** 		}
 631:System/FreeRTOS/tasks.c **** 		else
 632:System/FreeRTOS/tasks.c **** 		{
 633:System/FreeRTOS/tasks.c **** 			xReturn = NULL;
 634:System/FreeRTOS/tasks.c **** 		}
 635:System/FreeRTOS/tasks.c **** 
 636:System/FreeRTOS/tasks.c **** 		return xReturn;
 637:System/FreeRTOS/tasks.c **** 	}
 638:System/FreeRTOS/tasks.c **** 
 639:System/FreeRTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 640:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 641:System/FreeRTOS/tasks.c **** 
 642:System/FreeRTOS/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 643:System/FreeRTOS/tasks.c **** 
 644:System/FreeRTOS/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 645:System/FreeRTOS/tasks.c **** 	{
 646:System/FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 647:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 648:System/FreeRTOS/tasks.c **** 
 649:System/FreeRTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 650:System/FreeRTOS/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 651:System/FreeRTOS/tasks.c **** 
 652:System/FreeRTOS/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 653:System/FreeRTOS/tasks.c **** 		{
 654:System/FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 655:System/FreeRTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 656:System/FreeRTOS/tasks.c **** 			not static allocation is being used. */
 657:System/FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 13


 658:System/FreeRTOS/tasks.c **** 
 659:System/FreeRTOS/tasks.c **** 			/* Store the stack location in the TCB. */
 660:System/FreeRTOS/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 661:System/FreeRTOS/tasks.c **** 
 662:System/FreeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 663:System/FreeRTOS/tasks.c **** 			{
 664:System/FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 665:System/FreeRTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 666:System/FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 667:System/FreeRTOS/tasks.c **** 			}
 668:System/FreeRTOS/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 669:System/FreeRTOS/tasks.c **** 
 670:System/FreeRTOS/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 671:System/FreeRTOS/tasks.c **** 									pxTaskDefinition->pcName,
 672:System/FreeRTOS/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 673:System/FreeRTOS/tasks.c **** 									pxTaskDefinition->pvParameters,
 674:System/FreeRTOS/tasks.c **** 									pxTaskDefinition->uxPriority,
 675:System/FreeRTOS/tasks.c **** 									pxCreatedTask, pxNewTCB,
 676:System/FreeRTOS/tasks.c **** 									pxTaskDefinition->xRegions );
 677:System/FreeRTOS/tasks.c **** 
 678:System/FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 679:System/FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 680:System/FreeRTOS/tasks.c **** 		}
 681:System/FreeRTOS/tasks.c **** 
 682:System/FreeRTOS/tasks.c **** 		return xReturn;
 683:System/FreeRTOS/tasks.c **** 	}
 684:System/FreeRTOS/tasks.c **** 
 685:System/FreeRTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 686:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 687:System/FreeRTOS/tasks.c **** 
 688:System/FreeRTOS/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 689:System/FreeRTOS/tasks.c **** 
 690:System/FreeRTOS/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 691:System/FreeRTOS/tasks.c **** 	{
 692:System/FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 693:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 694:System/FreeRTOS/tasks.c **** 
 695:System/FreeRTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 696:System/FreeRTOS/tasks.c **** 
 697:System/FreeRTOS/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 698:System/FreeRTOS/tasks.c **** 		{
 699:System/FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 700:System/FreeRTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 701:System/FreeRTOS/tasks.c **** 			not static allocation is being used. */
 702:System/FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 703:System/FreeRTOS/tasks.c **** 
 704:System/FreeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
 705:System/FreeRTOS/tasks.c **** 			{
 706:System/FreeRTOS/tasks.c **** 				/* Store the stack location in the TCB. */
 707:System/FreeRTOS/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 708:System/FreeRTOS/tasks.c **** 
 709:System/FreeRTOS/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 710:System/FreeRTOS/tasks.c **** 				{
 711:System/FreeRTOS/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 712:System/FreeRTOS/tasks.c **** 					this task had a statically allocated stack in case it is
 713:System/FreeRTOS/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 714:System/FreeRTOS/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 14


 715:System/FreeRTOS/tasks.c **** 				}
 716:System/FreeRTOS/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 717:System/FreeRTOS/tasks.c **** 
 718:System/FreeRTOS/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 719:System/FreeRTOS/tasks.c **** 										pxTaskDefinition->pcName,
 720:System/FreeRTOS/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 721:System/FreeRTOS/tasks.c **** 										pxTaskDefinition->pvParameters,
 722:System/FreeRTOS/tasks.c **** 										pxTaskDefinition->uxPriority,
 723:System/FreeRTOS/tasks.c **** 										pxCreatedTask, pxNewTCB,
 724:System/FreeRTOS/tasks.c **** 										pxTaskDefinition->xRegions );
 725:System/FreeRTOS/tasks.c **** 
 726:System/FreeRTOS/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 727:System/FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 728:System/FreeRTOS/tasks.c **** 			}
 729:System/FreeRTOS/tasks.c **** 		}
 730:System/FreeRTOS/tasks.c **** 
 731:System/FreeRTOS/tasks.c **** 		return xReturn;
 732:System/FreeRTOS/tasks.c **** 	}
 733:System/FreeRTOS/tasks.c **** 
 734:System/FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 735:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 736:System/FreeRTOS/tasks.c **** 
 737:System/FreeRTOS/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 738:System/FreeRTOS/tasks.c **** 
 739:System/FreeRTOS/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 740:System/FreeRTOS/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 741:System/FreeRTOS/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 742:System/FreeRTOS/tasks.c **** 							void * const pvParameters,
 743:System/FreeRTOS/tasks.c **** 							UBaseType_t uxPriority,
 744:System/FreeRTOS/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 745:System/FreeRTOS/tasks.c **** 	{
 746:System/FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 747:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 748:System/FreeRTOS/tasks.c **** 
 749:System/FreeRTOS/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 750:System/FreeRTOS/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 751:System/FreeRTOS/tasks.c **** 		the TCB then the stack. */
 752:System/FreeRTOS/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 753:System/FreeRTOS/tasks.c **** 		{
 754:System/FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 755:System/FreeRTOS/tasks.c **** 			the implementation of the port malloc function and whether or not static
 756:System/FreeRTOS/tasks.c **** 			allocation is being used. */
 757:System/FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 758:System/FreeRTOS/tasks.c **** 
 759:System/FreeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
 760:System/FreeRTOS/tasks.c **** 			{
 761:System/FreeRTOS/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 762:System/FreeRTOS/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 763:System/FreeRTOS/tasks.c **** 				be deleted later if required. */
 764:System/FreeRTOS/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 765:System/FreeRTOS/tasks.c **** 
 766:System/FreeRTOS/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 767:System/FreeRTOS/tasks.c **** 				{
 768:System/FreeRTOS/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 769:System/FreeRTOS/tasks.c **** 					vPortFree( pxNewTCB );
 770:System/FreeRTOS/tasks.c **** 					pxNewTCB = NULL;
 771:System/FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 15


 772:System/FreeRTOS/tasks.c **** 			}
 773:System/FreeRTOS/tasks.c **** 		}
 774:System/FreeRTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 775:System/FreeRTOS/tasks.c **** 		{
 776:System/FreeRTOS/tasks.c **** 		StackType_t *pxStack;
 777:System/FreeRTOS/tasks.c **** 
 778:System/FreeRTOS/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 779:System/FreeRTOS/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 780:System/FreeRTOS/tasks.c **** 
 781:System/FreeRTOS/tasks.c **** 			if( pxStack != NULL )
 782:System/FreeRTOS/tasks.c **** 			{
 783:System/FreeRTOS/tasks.c **** 				/* Allocate space for the TCB. */
 784:System/FreeRTOS/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 785:System/FreeRTOS/tasks.c **** 
 786:System/FreeRTOS/tasks.c **** 				if( pxNewTCB != NULL )
 787:System/FreeRTOS/tasks.c **** 				{
 788:System/FreeRTOS/tasks.c **** 					/* Store the stack location in the TCB. */
 789:System/FreeRTOS/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 790:System/FreeRTOS/tasks.c **** 				}
 791:System/FreeRTOS/tasks.c **** 				else
 792:System/FreeRTOS/tasks.c **** 				{
 793:System/FreeRTOS/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 794:System/FreeRTOS/tasks.c **** 					it again. */
 795:System/FreeRTOS/tasks.c **** 					vPortFree( pxStack );
 796:System/FreeRTOS/tasks.c **** 				}
 797:System/FreeRTOS/tasks.c **** 			}
 798:System/FreeRTOS/tasks.c **** 			else
 799:System/FreeRTOS/tasks.c **** 			{
 800:System/FreeRTOS/tasks.c **** 				pxNewTCB = NULL;
 801:System/FreeRTOS/tasks.c **** 			}
 802:System/FreeRTOS/tasks.c **** 		}
 803:System/FreeRTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 804:System/FreeRTOS/tasks.c **** 
 805:System/FreeRTOS/tasks.c **** 		if( pxNewTCB != NULL )
 806:System/FreeRTOS/tasks.c **** 		{
 807:System/FreeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 808:System/FreeRTOS/tasks.c **** 			{
 809:System/FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 810:System/FreeRTOS/tasks.c **** 				task was created dynamically in case it is later deleted. */
 811:System/FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 812:System/FreeRTOS/tasks.c **** 			}
 813:System/FreeRTOS/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 814:System/FreeRTOS/tasks.c **** 
 815:System/FreeRTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 816:System/FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 817:System/FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 818:System/FreeRTOS/tasks.c **** 		}
 819:System/FreeRTOS/tasks.c **** 		else
 820:System/FreeRTOS/tasks.c **** 		{
 821:System/FreeRTOS/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 822:System/FreeRTOS/tasks.c **** 		}
 823:System/FreeRTOS/tasks.c **** 
 824:System/FreeRTOS/tasks.c **** 		return xReturn;
 825:System/FreeRTOS/tasks.c **** 	}
 826:System/FreeRTOS/tasks.c **** 
 827:System/FreeRTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 828:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 16


 829:System/FreeRTOS/tasks.c **** 
 830:System/FreeRTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 831:System/FreeRTOS/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 832:System/FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 833:System/FreeRTOS/tasks.c **** 									void * const pvParameters,
 834:System/FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 835:System/FreeRTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 836:System/FreeRTOS/tasks.c **** 									TCB_t *pxNewTCB,
 837:System/FreeRTOS/tasks.c **** 									const MemoryRegion_t * const xRegions )
 838:System/FreeRTOS/tasks.c **** {
 839:System/FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 840:System/FreeRTOS/tasks.c **** UBaseType_t x;
 841:System/FreeRTOS/tasks.c **** 
 842:System/FreeRTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 843:System/FreeRTOS/tasks.c **** 		/* Should the task be created in privileged mode? */
 844:System/FreeRTOS/tasks.c **** 		BaseType_t xRunPrivileged;
 845:System/FreeRTOS/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 846:System/FreeRTOS/tasks.c **** 		{
 847:System/FreeRTOS/tasks.c **** 			xRunPrivileged = pdTRUE;
 848:System/FreeRTOS/tasks.c **** 		}
 849:System/FreeRTOS/tasks.c **** 		else
 850:System/FreeRTOS/tasks.c **** 		{
 851:System/FreeRTOS/tasks.c **** 			xRunPrivileged = pdFALSE;
 852:System/FreeRTOS/tasks.c **** 		}
 853:System/FreeRTOS/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 854:System/FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 855:System/FreeRTOS/tasks.c **** 
 856:System/FreeRTOS/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 857:System/FreeRTOS/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 858:System/FreeRTOS/tasks.c **** 	{
 859:System/FreeRTOS/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 860:System/FreeRTOS/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 861:System/FreeRTOS/tasks.c **** 	}
 862:System/FreeRTOS/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 863:System/FreeRTOS/tasks.c **** 
 864:System/FreeRTOS/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 865:System/FreeRTOS/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 866:System/FreeRTOS/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 867:System/FreeRTOS/tasks.c **** 	by the port. */
 868:System/FreeRTOS/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 869:System/FreeRTOS/tasks.c **** 	{
 870:System/FreeRTOS/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 871:System/FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 872:System/FreeRTOS/tasks.c **** 
 873:System/FreeRTOS/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 874:System/FreeRTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 875:System/FreeRTOS/tasks.c **** 
 876:System/FreeRTOS/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 877:System/FreeRTOS/tasks.c **** 		{
 878:System/FreeRTOS/tasks.c **** 			/* Also record the stack's high address, which may assist
 879:System/FreeRTOS/tasks.c **** 			debugging. */
 880:System/FreeRTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 881:System/FreeRTOS/tasks.c **** 		}
 882:System/FreeRTOS/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 883:System/FreeRTOS/tasks.c **** 	}
 884:System/FreeRTOS/tasks.c **** 	#else /* portSTACK_GROWTH */
 885:System/FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 17


 886:System/FreeRTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 887:System/FreeRTOS/tasks.c **** 
 888:System/FreeRTOS/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 889:System/FreeRTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 890:System/FreeRTOS/tasks.c **** 
 891:System/FreeRTOS/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 892:System/FreeRTOS/tasks.c **** 		performed. */
 893:System/FreeRTOS/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 894:System/FreeRTOS/tasks.c **** 	}
 895:System/FreeRTOS/tasks.c **** 	#endif /* portSTACK_GROWTH */
 896:System/FreeRTOS/tasks.c **** 
 897:System/FreeRTOS/tasks.c **** 	/* Store the task name in the TCB. */
 898:System/FreeRTOS/tasks.c **** 	if( pcName != NULL )
 899:System/FreeRTOS/tasks.c **** 	{
 900:System/FreeRTOS/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 901:System/FreeRTOS/tasks.c **** 		{
 902:System/FreeRTOS/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 903:System/FreeRTOS/tasks.c **** 
 904:System/FreeRTOS/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 905:System/FreeRTOS/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 906:System/FreeRTOS/tasks.c **** 			string is not accessible (extremely unlikely). */
 907:System/FreeRTOS/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 908:System/FreeRTOS/tasks.c **** 			{
 909:System/FreeRTOS/tasks.c **** 				break;
 910:System/FreeRTOS/tasks.c **** 			}
 911:System/FreeRTOS/tasks.c **** 			else
 912:System/FreeRTOS/tasks.c **** 			{
 913:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 914:System/FreeRTOS/tasks.c **** 			}
 915:System/FreeRTOS/tasks.c **** 		}
 916:System/FreeRTOS/tasks.c **** 
 917:System/FreeRTOS/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 918:System/FreeRTOS/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 919:System/FreeRTOS/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 920:System/FreeRTOS/tasks.c **** 	}
 921:System/FreeRTOS/tasks.c **** 	else
 922:System/FreeRTOS/tasks.c **** 	{
 923:System/FreeRTOS/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 924:System/FreeRTOS/tasks.c **** 		terminator when it is read out. */
 925:System/FreeRTOS/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 926:System/FreeRTOS/tasks.c **** 	}
 927:System/FreeRTOS/tasks.c **** 
 928:System/FreeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 929:System/FreeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
 930:System/FreeRTOS/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 931:System/FreeRTOS/tasks.c **** 	{
 932:System/FreeRTOS/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 933:System/FreeRTOS/tasks.c **** 	}
 934:System/FreeRTOS/tasks.c **** 	else
 935:System/FreeRTOS/tasks.c **** 	{
 936:System/FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 937:System/FreeRTOS/tasks.c **** 	}
 938:System/FreeRTOS/tasks.c **** 
 939:System/FreeRTOS/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 940:System/FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 941:System/FreeRTOS/tasks.c **** 	{
 942:System/FreeRTOS/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 18


 943:System/FreeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 944:System/FreeRTOS/tasks.c **** 	}
 945:System/FreeRTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
 946:System/FreeRTOS/tasks.c **** 
 947:System/FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 948:System/FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 949:System/FreeRTOS/tasks.c **** 
 950:System/FreeRTOS/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 951:System/FreeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 952:System/FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 953:System/FreeRTOS/tasks.c **** 
 954:System/FreeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
 955:System/FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 956:System/FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 957:System/FreeRTOS/tasks.c **** 
 958:System/FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 959:System/FreeRTOS/tasks.c **** 	{
 960:System/FreeRTOS/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 961:System/FreeRTOS/tasks.c **** 	}
 962:System/FreeRTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 963:System/FreeRTOS/tasks.c **** 
 964:System/FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 965:System/FreeRTOS/tasks.c **** 	{
 966:System/FreeRTOS/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 967:System/FreeRTOS/tasks.c **** 	}
 968:System/FreeRTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 969:System/FreeRTOS/tasks.c **** 
 970:System/FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 971:System/FreeRTOS/tasks.c **** 	{
 972:System/FreeRTOS/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 973:System/FreeRTOS/tasks.c **** 	}
 974:System/FreeRTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 975:System/FreeRTOS/tasks.c **** 
 976:System/FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 977:System/FreeRTOS/tasks.c **** 	{
 978:System/FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 979:System/FreeRTOS/tasks.c **** 	}
 980:System/FreeRTOS/tasks.c **** 	#else
 981:System/FreeRTOS/tasks.c **** 	{
 982:System/FreeRTOS/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 983:System/FreeRTOS/tasks.c **** 		( void ) xRegions;
 984:System/FreeRTOS/tasks.c **** 	}
 985:System/FreeRTOS/tasks.c **** 	#endif
 986:System/FreeRTOS/tasks.c **** 
 987:System/FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 988:System/FreeRTOS/tasks.c **** 	{
 989:System/FreeRTOS/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 990:System/FreeRTOS/tasks.c **** 		{
 991:System/FreeRTOS/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 992:System/FreeRTOS/tasks.c **** 		}
 993:System/FreeRTOS/tasks.c **** 	}
 994:System/FreeRTOS/tasks.c **** 	#endif
 995:System/FreeRTOS/tasks.c **** 
 996:System/FreeRTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 997:System/FreeRTOS/tasks.c **** 	{
 998:System/FreeRTOS/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 999:System/FreeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 19


1000:System/FreeRTOS/tasks.c **** 	}
1001:System/FreeRTOS/tasks.c **** 	#endif
1002:System/FreeRTOS/tasks.c **** 
1003:System/FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
1004:System/FreeRTOS/tasks.c **** 	{
1005:System/FreeRTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1006:System/FreeRTOS/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1007:System/FreeRTOS/tasks.c **** 		for additional information. */
1008:System/FreeRTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1009:System/FreeRTOS/tasks.c **** 	}
1010:System/FreeRTOS/tasks.c **** 	#endif
1011:System/FreeRTOS/tasks.c **** 
1012:System/FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1013:System/FreeRTOS/tasks.c **** 	{
1014:System/FreeRTOS/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1015:System/FreeRTOS/tasks.c **** 	}
1016:System/FreeRTOS/tasks.c **** 	#endif
1017:System/FreeRTOS/tasks.c **** 
1018:System/FreeRTOS/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1019:System/FreeRTOS/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1020:System/FreeRTOS/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1021:System/FreeRTOS/tasks.c **** 	the top of stack variable is updated. */
1022:System/FreeRTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1023:System/FreeRTOS/tasks.c **** 	{
1024:System/FreeRTOS/tasks.c **** 		/* If the port has capability to detect stack overflow,
1025:System/FreeRTOS/tasks.c **** 		pass the stack end address to the stack initialization
1026:System/FreeRTOS/tasks.c **** 		function as well. */
1027:System/FreeRTOS/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1028:System/FreeRTOS/tasks.c **** 		{
1029:System/FreeRTOS/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1030:System/FreeRTOS/tasks.c **** 			{
1031:System/FreeRTOS/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1032:System/FreeRTOS/tasks.c **** 			}
1033:System/FreeRTOS/tasks.c **** 			#else /* portSTACK_GROWTH */
1034:System/FreeRTOS/tasks.c **** 			{
1035:System/FreeRTOS/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1036:System/FreeRTOS/tasks.c **** 			}
1037:System/FreeRTOS/tasks.c **** 			#endif /* portSTACK_GROWTH */
1038:System/FreeRTOS/tasks.c **** 		}
1039:System/FreeRTOS/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1040:System/FreeRTOS/tasks.c **** 		{
1041:System/FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1042:System/FreeRTOS/tasks.c **** 		}
1043:System/FreeRTOS/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1044:System/FreeRTOS/tasks.c **** 	}
1045:System/FreeRTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1046:System/FreeRTOS/tasks.c **** 	{
1047:System/FreeRTOS/tasks.c **** 		/* If the port has capability to detect stack overflow,
1048:System/FreeRTOS/tasks.c **** 		pass the stack end address to the stack initialization
1049:System/FreeRTOS/tasks.c **** 		function as well. */
1050:System/FreeRTOS/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1051:System/FreeRTOS/tasks.c **** 		{
1052:System/FreeRTOS/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1053:System/FreeRTOS/tasks.c **** 			{
1054:System/FreeRTOS/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1055:System/FreeRTOS/tasks.c **** 			}
1056:System/FreeRTOS/tasks.c **** 			#else /* portSTACK_GROWTH */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 20


1057:System/FreeRTOS/tasks.c **** 			{
1058:System/FreeRTOS/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1059:System/FreeRTOS/tasks.c **** 			}
1060:System/FreeRTOS/tasks.c **** 			#endif /* portSTACK_GROWTH */
1061:System/FreeRTOS/tasks.c **** 		}
1062:System/FreeRTOS/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1063:System/FreeRTOS/tasks.c **** 		{
1064:System/FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1065:System/FreeRTOS/tasks.c **** 		}
1066:System/FreeRTOS/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1067:System/FreeRTOS/tasks.c **** 	}
1068:System/FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1069:System/FreeRTOS/tasks.c **** 
1070:System/FreeRTOS/tasks.c **** 	if( pxCreatedTask != NULL )
1071:System/FreeRTOS/tasks.c **** 	{
1072:System/FreeRTOS/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1073:System/FreeRTOS/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1074:System/FreeRTOS/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1075:System/FreeRTOS/tasks.c **** 		pxNewTCB->uxSizeOfStack = ulStackDepth;
1076:System/FreeRTOS/tasks.c **** 	}
1077:System/FreeRTOS/tasks.c **** 	else
1078:System/FreeRTOS/tasks.c **** 	{
1079:System/FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1080:System/FreeRTOS/tasks.c **** 	}
1081:System/FreeRTOS/tasks.c **** }
1082:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1083:System/FreeRTOS/tasks.c **** 
1084:System/FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1085:System/FreeRTOS/tasks.c **** {
1086:System/FreeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1087:System/FreeRTOS/tasks.c **** 	updated. */
1088:System/FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
1089:System/FreeRTOS/tasks.c **** 	{
1090:System/FreeRTOS/tasks.c **** 		uxCurrentNumberOfTasks++;
1091:System/FreeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
1092:System/FreeRTOS/tasks.c **** 		{
1093:System/FreeRTOS/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1094:System/FreeRTOS/tasks.c **** 			the suspended state - make this the current task. */
1095:System/FreeRTOS/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1096:System/FreeRTOS/tasks.c **** 
1097:System/FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1098:System/FreeRTOS/tasks.c **** 			{
1099:System/FreeRTOS/tasks.c **** 				/* This is the first task to be created so do the preliminary
1100:System/FreeRTOS/tasks.c **** 				initialisation required.  We will not recover if this call
1101:System/FreeRTOS/tasks.c **** 				fails, but we will report the failure. */
1102:System/FreeRTOS/tasks.c **** 				prvInitialiseTaskLists();
1103:System/FreeRTOS/tasks.c **** 			}
1104:System/FreeRTOS/tasks.c **** 			else
1105:System/FreeRTOS/tasks.c **** 			{
1106:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1107:System/FreeRTOS/tasks.c **** 			}
1108:System/FreeRTOS/tasks.c **** 		}
1109:System/FreeRTOS/tasks.c **** 		else
1110:System/FreeRTOS/tasks.c **** 		{
1111:System/FreeRTOS/tasks.c **** 			/* If the scheduler is not already running, make this task the
1112:System/FreeRTOS/tasks.c **** 			current task if it is the highest priority task to be created
1113:System/FreeRTOS/tasks.c **** 			so far. */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 21


1114:System/FreeRTOS/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1115:System/FreeRTOS/tasks.c **** 			{
1116:System/FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1117:System/FreeRTOS/tasks.c **** 				{
1118:System/FreeRTOS/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1119:System/FreeRTOS/tasks.c **** 				}
1120:System/FreeRTOS/tasks.c **** 				else
1121:System/FreeRTOS/tasks.c **** 				{
1122:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1123:System/FreeRTOS/tasks.c **** 				}
1124:System/FreeRTOS/tasks.c **** 			}
1125:System/FreeRTOS/tasks.c **** 			else
1126:System/FreeRTOS/tasks.c **** 			{
1127:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1128:System/FreeRTOS/tasks.c **** 			}
1129:System/FreeRTOS/tasks.c **** 		}
1130:System/FreeRTOS/tasks.c **** 
1131:System/FreeRTOS/tasks.c **** 		uxTaskNumber++;
1132:System/FreeRTOS/tasks.c **** 
1133:System/FreeRTOS/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1134:System/FreeRTOS/tasks.c **** 		{
1135:System/FreeRTOS/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1136:System/FreeRTOS/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1137:System/FreeRTOS/tasks.c **** 		}
1138:System/FreeRTOS/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1139:System/FreeRTOS/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1140:System/FreeRTOS/tasks.c **** 
1141:System/FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1142:System/FreeRTOS/tasks.c **** 
1143:System/FreeRTOS/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1144:System/FreeRTOS/tasks.c **** 	}
1145:System/FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
1146:System/FreeRTOS/tasks.c **** 
1147:System/FreeRTOS/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1148:System/FreeRTOS/tasks.c **** 	{
1149:System/FreeRTOS/tasks.c **** 		/* If the created task is of a higher priority than the current task
1150:System/FreeRTOS/tasks.c **** 		then it should run now. */
1151:System/FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1152:System/FreeRTOS/tasks.c **** 		{
1153:System/FreeRTOS/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1154:System/FreeRTOS/tasks.c **** 		}
1155:System/FreeRTOS/tasks.c **** 		else
1156:System/FreeRTOS/tasks.c **** 		{
1157:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1158:System/FreeRTOS/tasks.c **** 		}
1159:System/FreeRTOS/tasks.c **** 	}
1160:System/FreeRTOS/tasks.c **** 	else
1161:System/FreeRTOS/tasks.c **** 	{
1162:System/FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1163:System/FreeRTOS/tasks.c **** 	}
1164:System/FreeRTOS/tasks.c **** }
1165:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1166:System/FreeRTOS/tasks.c **** 
1167:System/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1168:System/FreeRTOS/tasks.c **** 
1169:System/FreeRTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1170:System/FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 22


1171:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1172:System/FreeRTOS/tasks.c **** 
1173:System/FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1174:System/FreeRTOS/tasks.c **** 		{
1175:System/FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1176:System/FreeRTOS/tasks.c **** 			being deleted. */
1177:System/FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1178:System/FreeRTOS/tasks.c **** 
1179:System/FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list. */
1180:System/FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1181:System/FreeRTOS/tasks.c **** 			{
1182:System/FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1183:System/FreeRTOS/tasks.c **** 			}
1184:System/FreeRTOS/tasks.c **** 			else
1185:System/FreeRTOS/tasks.c **** 			{
1186:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1187:System/FreeRTOS/tasks.c **** 			}
1188:System/FreeRTOS/tasks.c **** 
1189:System/FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1190:System/FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1191:System/FreeRTOS/tasks.c **** 			{
1192:System/FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1193:System/FreeRTOS/tasks.c **** 			}
1194:System/FreeRTOS/tasks.c **** 			else
1195:System/FreeRTOS/tasks.c **** 			{
1196:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1197:System/FreeRTOS/tasks.c **** 			}
1198:System/FreeRTOS/tasks.c **** 
1199:System/FreeRTOS/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1200:System/FreeRTOS/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1201:System/FreeRTOS/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1202:System/FreeRTOS/tasks.c **** 			not return. */
1203:System/FreeRTOS/tasks.c **** 			uxTaskNumber++;
1204:System/FreeRTOS/tasks.c **** 
1205:System/FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1206:System/FreeRTOS/tasks.c **** 			{
1207:System/FreeRTOS/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1208:System/FreeRTOS/tasks.c **** 				task itself, as a context switch to another task is required.
1209:System/FreeRTOS/tasks.c **** 				Place the task in the termination list.  The idle task will
1210:System/FreeRTOS/tasks.c **** 				check the termination list and free up any memory allocated by
1211:System/FreeRTOS/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1212:System/FreeRTOS/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1213:System/FreeRTOS/tasks.c **** 
1214:System/FreeRTOS/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1215:System/FreeRTOS/tasks.c **** 				there is a task that has been deleted and that it should therefore
1216:System/FreeRTOS/tasks.c **** 				check the xTasksWaitingTermination list. */
1217:System/FreeRTOS/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1218:System/FreeRTOS/tasks.c **** 
1219:System/FreeRTOS/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1220:System/FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1221:System/FreeRTOS/tasks.c **** 				traceTASK_DELETE( pxTCB );
1222:System/FreeRTOS/tasks.c **** 
1223:System/FreeRTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1224:System/FreeRTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
1225:System/FreeRTOS/tasks.c **** 				after which it is not possible to yield away from this task -
1226:System/FreeRTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1227:System/FreeRTOS/tasks.c **** 				required. */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 23


1228:System/FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1229:System/FreeRTOS/tasks.c **** 			}
1230:System/FreeRTOS/tasks.c **** 			else
1231:System/FreeRTOS/tasks.c **** 			{
1232:System/FreeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
1233:System/FreeRTOS/tasks.c **** 				traceTASK_DELETE( pxTCB );
1234:System/FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
1235:System/FreeRTOS/tasks.c **** 
1236:System/FreeRTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1237:System/FreeRTOS/tasks.c **** 				the task that has just been deleted. */
1238:System/FreeRTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
1239:System/FreeRTOS/tasks.c **** 			}
1240:System/FreeRTOS/tasks.c **** 		}
1241:System/FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1242:System/FreeRTOS/tasks.c **** 
1243:System/FreeRTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1244:System/FreeRTOS/tasks.c **** 		been deleted. */
1245:System/FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1246:System/FreeRTOS/tasks.c **** 		{
1247:System/FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1248:System/FreeRTOS/tasks.c **** 			{
1249:System/FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1250:System/FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
1251:System/FreeRTOS/tasks.c **** 			}
1252:System/FreeRTOS/tasks.c **** 			else
1253:System/FreeRTOS/tasks.c **** 			{
1254:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1255:System/FreeRTOS/tasks.c **** 			}
1256:System/FreeRTOS/tasks.c **** 		}
1257:System/FreeRTOS/tasks.c **** 	}
1258:System/FreeRTOS/tasks.c **** 
1259:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1260:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1261:System/FreeRTOS/tasks.c **** 
1262:System/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1263:System/FreeRTOS/tasks.c **** 
1264:System/FreeRTOS/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1265:System/FreeRTOS/tasks.c **** 	{
1266:System/FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
1267:System/FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1268:System/FreeRTOS/tasks.c **** 
1269:System/FreeRTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1270:System/FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1271:System/FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1272:System/FreeRTOS/tasks.c **** 
1273:System/FreeRTOS/tasks.c **** 		vTaskSuspendAll();
1274:System/FreeRTOS/tasks.c **** 		{
1275:System/FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1276:System/FreeRTOS/tasks.c **** 			block. */
1277:System/FreeRTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1278:System/FreeRTOS/tasks.c **** 
1279:System/FreeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1280:System/FreeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1281:System/FreeRTOS/tasks.c **** 
1282:System/FreeRTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1283:System/FreeRTOS/tasks.c **** 			{
1284:System/FreeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 24


1285:System/FreeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
1286:System/FreeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1287:System/FreeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
1288:System/FreeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
1289:System/FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1290:System/FreeRTOS/tasks.c **** 				{
1291:System/FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
1292:System/FreeRTOS/tasks.c **** 				}
1293:System/FreeRTOS/tasks.c **** 				else
1294:System/FreeRTOS/tasks.c **** 				{
1295:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1296:System/FreeRTOS/tasks.c **** 				}
1297:System/FreeRTOS/tasks.c **** 			}
1298:System/FreeRTOS/tasks.c **** 			else
1299:System/FreeRTOS/tasks.c **** 			{
1300:System/FreeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1301:System/FreeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1302:System/FreeRTOS/tasks.c **** 				tick time is less than the wake time. */
1303:System/FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1304:System/FreeRTOS/tasks.c **** 				{
1305:System/FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
1306:System/FreeRTOS/tasks.c **** 				}
1307:System/FreeRTOS/tasks.c **** 				else
1308:System/FreeRTOS/tasks.c **** 				{
1309:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1310:System/FreeRTOS/tasks.c **** 				}
1311:System/FreeRTOS/tasks.c **** 			}
1312:System/FreeRTOS/tasks.c **** 
1313:System/FreeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
1314:System/FreeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1315:System/FreeRTOS/tasks.c **** 
1316:System/FreeRTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
1317:System/FreeRTOS/tasks.c **** 			{
1318:System/FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1319:System/FreeRTOS/tasks.c **** 
1320:System/FreeRTOS/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1321:System/FreeRTOS/tasks.c **** 				the time to wake, so subtract the current tick count. */
1322:System/FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1323:System/FreeRTOS/tasks.c **** 			}
1324:System/FreeRTOS/tasks.c **** 			else
1325:System/FreeRTOS/tasks.c **** 			{
1326:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1327:System/FreeRTOS/tasks.c **** 			}
1328:System/FreeRTOS/tasks.c **** 		}
1329:System/FreeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1330:System/FreeRTOS/tasks.c **** 
1331:System/FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1332:System/FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
1333:System/FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1334:System/FreeRTOS/tasks.c **** 		{
1335:System/FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
1336:System/FreeRTOS/tasks.c **** 		}
1337:System/FreeRTOS/tasks.c **** 		else
1338:System/FreeRTOS/tasks.c **** 		{
1339:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1340:System/FreeRTOS/tasks.c **** 		}
1341:System/FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 25


1342:System/FreeRTOS/tasks.c **** 
1343:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1344:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1345:System/FreeRTOS/tasks.c **** 
1346:System/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1347:System/FreeRTOS/tasks.c **** 
1348:System/FreeRTOS/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1349:System/FreeRTOS/tasks.c **** 	{
1350:System/FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1351:System/FreeRTOS/tasks.c **** 
1352:System/FreeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1353:System/FreeRTOS/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1354:System/FreeRTOS/tasks.c **** 		{
1355:System/FreeRTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1356:System/FreeRTOS/tasks.c **** 			vTaskSuspendAll();
1357:System/FreeRTOS/tasks.c **** 			{
1358:System/FreeRTOS/tasks.c **** 				traceTASK_DELAY();
1359:System/FreeRTOS/tasks.c **** 
1360:System/FreeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
1361:System/FreeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
1362:System/FreeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
1363:System/FreeRTOS/tasks.c **** 				is resumed.
1364:System/FreeRTOS/tasks.c **** 
1365:System/FreeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
1366:System/FreeRTOS/tasks.c **** 				executing task. */
1367:System/FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1368:System/FreeRTOS/tasks.c **** 			}
1369:System/FreeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1370:System/FreeRTOS/tasks.c **** 		}
1371:System/FreeRTOS/tasks.c **** 		else
1372:System/FreeRTOS/tasks.c **** 		{
1373:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1374:System/FreeRTOS/tasks.c **** 		}
1375:System/FreeRTOS/tasks.c **** 
1376:System/FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1377:System/FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
1378:System/FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1379:System/FreeRTOS/tasks.c **** 		{
1380:System/FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
1381:System/FreeRTOS/tasks.c **** 		}
1382:System/FreeRTOS/tasks.c **** 		else
1383:System/FreeRTOS/tasks.c **** 		{
1384:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1385:System/FreeRTOS/tasks.c **** 		}
1386:System/FreeRTOS/tasks.c **** 	}
1387:System/FreeRTOS/tasks.c **** 
1388:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1389:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1390:System/FreeRTOS/tasks.c **** 
1391:System/FreeRTOS/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1392:System/FreeRTOS/tasks.c **** 
1393:System/FreeRTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1394:System/FreeRTOS/tasks.c **** 	{
1395:System/FreeRTOS/tasks.c **** 	eTaskState eReturn;
1396:System/FreeRTOS/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1397:System/FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1398:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 26


1399:System/FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
1400:System/FreeRTOS/tasks.c **** 
1401:System/FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1402:System/FreeRTOS/tasks.c **** 		{
1403:System/FreeRTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
1404:System/FreeRTOS/tasks.c **** 			eReturn = eRunning;
1405:System/FreeRTOS/tasks.c **** 		}
1406:System/FreeRTOS/tasks.c **** 		else
1407:System/FreeRTOS/tasks.c **** 		{
1408:System/FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1409:System/FreeRTOS/tasks.c **** 			{
1410:System/FreeRTOS/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1411:System/FreeRTOS/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1412:System/FreeRTOS/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1413:System/FreeRTOS/tasks.c **** 			}
1414:System/FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1415:System/FreeRTOS/tasks.c **** 
1416:System/FreeRTOS/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1417:System/FreeRTOS/tasks.c **** 			{
1418:System/FreeRTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1419:System/FreeRTOS/tasks.c **** 				lists. */
1420:System/FreeRTOS/tasks.c **** 				eReturn = eBlocked;
1421:System/FreeRTOS/tasks.c **** 			}
1422:System/FreeRTOS/tasks.c **** 
1423:System/FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1424:System/FreeRTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1425:System/FreeRTOS/tasks.c **** 				{
1426:System/FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
1427:System/FreeRTOS/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1428:System/FreeRTOS/tasks.c **** 					indefinitely? */
1429:System/FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1430:System/FreeRTOS/tasks.c **** 					{
1431:System/FreeRTOS/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1432:System/FreeRTOS/tasks.c **** 						{
1433:System/FreeRTOS/tasks.c **** 							/* The task does not appear on the event list item of
1434:System/FreeRTOS/tasks.c **** 							and of the RTOS objects, but could still be in the
1435:System/FreeRTOS/tasks.c **** 							blocked state if it is waiting on its notification
1436:System/FreeRTOS/tasks.c **** 							rather than waiting on an object. */
1437:System/FreeRTOS/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1438:System/FreeRTOS/tasks.c **** 							{
1439:System/FreeRTOS/tasks.c **** 								eReturn = eBlocked;
1440:System/FreeRTOS/tasks.c **** 							}
1441:System/FreeRTOS/tasks.c **** 							else
1442:System/FreeRTOS/tasks.c **** 							{
1443:System/FreeRTOS/tasks.c **** 								eReturn = eSuspended;
1444:System/FreeRTOS/tasks.c **** 							}
1445:System/FreeRTOS/tasks.c **** 						}
1446:System/FreeRTOS/tasks.c **** 						#else
1447:System/FreeRTOS/tasks.c **** 						{
1448:System/FreeRTOS/tasks.c **** 							eReturn = eSuspended;
1449:System/FreeRTOS/tasks.c **** 						}
1450:System/FreeRTOS/tasks.c **** 						#endif
1451:System/FreeRTOS/tasks.c **** 					}
1452:System/FreeRTOS/tasks.c **** 					else
1453:System/FreeRTOS/tasks.c **** 					{
1454:System/FreeRTOS/tasks.c **** 						eReturn = eBlocked;
1455:System/FreeRTOS/tasks.c **** 					}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 27


1456:System/FreeRTOS/tasks.c **** 				}
1457:System/FreeRTOS/tasks.c **** 			#endif
1458:System/FreeRTOS/tasks.c **** 
1459:System/FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1460:System/FreeRTOS/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1461:System/FreeRTOS/tasks.c **** 				{
1462:System/FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
1463:System/FreeRTOS/tasks.c **** 					tasks list, or it is not referenced from any lists at
1464:System/FreeRTOS/tasks.c **** 					all. */
1465:System/FreeRTOS/tasks.c **** 					eReturn = eDeleted;
1466:System/FreeRTOS/tasks.c **** 				}
1467:System/FreeRTOS/tasks.c **** 			#endif
1468:System/FreeRTOS/tasks.c **** 
1469:System/FreeRTOS/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1470:System/FreeRTOS/tasks.c **** 			{
1471:System/FreeRTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
1472:System/FreeRTOS/tasks.c **** 				Ready (including pending ready) state. */
1473:System/FreeRTOS/tasks.c **** 				eReturn = eReady;
1474:System/FreeRTOS/tasks.c **** 			}
1475:System/FreeRTOS/tasks.c **** 		}
1476:System/FreeRTOS/tasks.c **** 
1477:System/FreeRTOS/tasks.c **** 		return eReturn;
1478:System/FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1479:System/FreeRTOS/tasks.c **** 
1480:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1481:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1482:System/FreeRTOS/tasks.c **** 
1483:System/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1484:System/FreeRTOS/tasks.c **** 
1485:System/FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1486:System/FreeRTOS/tasks.c **** 	{
1487:System/FreeRTOS/tasks.c **** 	TCB_t const *pxTCB;
1488:System/FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
1489:System/FreeRTOS/tasks.c **** 
1490:System/FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1491:System/FreeRTOS/tasks.c **** 		{
1492:System/FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1493:System/FreeRTOS/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1494:System/FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1495:System/FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1496:System/FreeRTOS/tasks.c **** 		}
1497:System/FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1498:System/FreeRTOS/tasks.c **** 
1499:System/FreeRTOS/tasks.c **** 		return uxReturn;
1500:System/FreeRTOS/tasks.c **** 	}
1501:System/FreeRTOS/tasks.c **** 
1502:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1503:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1504:System/FreeRTOS/tasks.c **** 
1505:System/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1506:System/FreeRTOS/tasks.c **** 
1507:System/FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1508:System/FreeRTOS/tasks.c **** 	{
1509:System/FreeRTOS/tasks.c **** 	TCB_t const *pxTCB;
1510:System/FreeRTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1511:System/FreeRTOS/tasks.c **** 
1512:System/FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 28


1513:System/FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1514:System/FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1515:System/FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1516:System/FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1517:System/FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1518:System/FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1519:System/FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1520:System/FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1521:System/FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1522:System/FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1523:System/FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1524:System/FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1525:System/FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1526:System/FreeRTOS/tasks.c **** 		provided on the following link:
1527:System/FreeRTOS/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1528:System/FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1529:System/FreeRTOS/tasks.c **** 
1530:System/FreeRTOS/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1531:System/FreeRTOS/tasks.c **** 		{
1532:System/FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1533:System/FreeRTOS/tasks.c **** 			task that is being queried. */
1534:System/FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1535:System/FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1536:System/FreeRTOS/tasks.c **** 		}
1537:System/FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1538:System/FreeRTOS/tasks.c **** 
1539:System/FreeRTOS/tasks.c **** 		return uxReturn;
1540:System/FreeRTOS/tasks.c **** 	}
1541:System/FreeRTOS/tasks.c **** 
1542:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1543:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1544:System/FreeRTOS/tasks.c **** 
1545:System/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1546:System/FreeRTOS/tasks.c **** 
1547:System/FreeRTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1548:System/FreeRTOS/tasks.c **** 	{
1549:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1550:System/FreeRTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1551:System/FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1552:System/FreeRTOS/tasks.c **** 
1553:System/FreeRTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1554:System/FreeRTOS/tasks.c **** 
1555:System/FreeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1556:System/FreeRTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1557:System/FreeRTOS/tasks.c **** 		{
1558:System/FreeRTOS/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1559:System/FreeRTOS/tasks.c **** 		}
1560:System/FreeRTOS/tasks.c **** 		else
1561:System/FreeRTOS/tasks.c **** 		{
1562:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1563:System/FreeRTOS/tasks.c **** 		}
1564:System/FreeRTOS/tasks.c **** 
1565:System/FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1566:System/FreeRTOS/tasks.c **** 		{
1567:System/FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1568:System/FreeRTOS/tasks.c **** 			task that is being changed. */
1569:System/FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 29


1570:System/FreeRTOS/tasks.c **** 
1571:System/FreeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1572:System/FreeRTOS/tasks.c **** 
1573:System/FreeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1574:System/FreeRTOS/tasks.c **** 			{
1575:System/FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1576:System/FreeRTOS/tasks.c **** 			}
1577:System/FreeRTOS/tasks.c **** 			#else
1578:System/FreeRTOS/tasks.c **** 			{
1579:System/FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1580:System/FreeRTOS/tasks.c **** 			}
1581:System/FreeRTOS/tasks.c **** 			#endif
1582:System/FreeRTOS/tasks.c **** 
1583:System/FreeRTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1584:System/FreeRTOS/tasks.c **** 			{
1585:System/FreeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1586:System/FreeRTOS/tasks.c **** 				priority than the calling task. */
1587:System/FreeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1588:System/FreeRTOS/tasks.c **** 				{
1589:System/FreeRTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1590:System/FreeRTOS/tasks.c **** 					{
1591:System/FreeRTOS/tasks.c **** 						/* The priority of a task other than the currently
1592:System/FreeRTOS/tasks.c **** 						running task is being raised.  Is the priority being
1593:System/FreeRTOS/tasks.c **** 						raised above that of the running task? */
1594:System/FreeRTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1595:System/FreeRTOS/tasks.c **** 						{
1596:System/FreeRTOS/tasks.c **** 							xYieldRequired = pdTRUE;
1597:System/FreeRTOS/tasks.c **** 						}
1598:System/FreeRTOS/tasks.c **** 						else
1599:System/FreeRTOS/tasks.c **** 						{
1600:System/FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1601:System/FreeRTOS/tasks.c **** 						}
1602:System/FreeRTOS/tasks.c **** 					}
1603:System/FreeRTOS/tasks.c **** 					else
1604:System/FreeRTOS/tasks.c **** 					{
1605:System/FreeRTOS/tasks.c **** 						/* The priority of the running task is being raised,
1606:System/FreeRTOS/tasks.c **** 						but the running task must already be the highest
1607:System/FreeRTOS/tasks.c **** 						priority task able to run so no yield is required. */
1608:System/FreeRTOS/tasks.c **** 					}
1609:System/FreeRTOS/tasks.c **** 				}
1610:System/FreeRTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1611:System/FreeRTOS/tasks.c **** 				{
1612:System/FreeRTOS/tasks.c **** 					/* Setting the priority of the running task down means
1613:System/FreeRTOS/tasks.c **** 					there may now be another task of higher priority that
1614:System/FreeRTOS/tasks.c **** 					is ready to execute. */
1615:System/FreeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
1616:System/FreeRTOS/tasks.c **** 				}
1617:System/FreeRTOS/tasks.c **** 				else
1618:System/FreeRTOS/tasks.c **** 				{
1619:System/FreeRTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1620:System/FreeRTOS/tasks.c **** 					require a yield as the running task must be above the
1621:System/FreeRTOS/tasks.c **** 					new priority of the task being modified. */
1622:System/FreeRTOS/tasks.c **** 				}
1623:System/FreeRTOS/tasks.c **** 
1624:System/FreeRTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1625:System/FreeRTOS/tasks.c **** 				before its uxPriority member is changed so the
1626:System/FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 30


1627:System/FreeRTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1628:System/FreeRTOS/tasks.c **** 
1629:System/FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1630:System/FreeRTOS/tasks.c **** 				{
1631:System/FreeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1632:System/FreeRTOS/tasks.c **** 					currently using an inherited priority. */
1633:System/FreeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1634:System/FreeRTOS/tasks.c **** 					{
1635:System/FreeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1636:System/FreeRTOS/tasks.c **** 					}
1637:System/FreeRTOS/tasks.c **** 					else
1638:System/FreeRTOS/tasks.c **** 					{
1639:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1640:System/FreeRTOS/tasks.c **** 					}
1641:System/FreeRTOS/tasks.c **** 
1642:System/FreeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
1643:System/FreeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1644:System/FreeRTOS/tasks.c **** 				}
1645:System/FreeRTOS/tasks.c **** 				#else
1646:System/FreeRTOS/tasks.c **** 				{
1647:System/FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1648:System/FreeRTOS/tasks.c **** 				}
1649:System/FreeRTOS/tasks.c **** 				#endif
1650:System/FreeRTOS/tasks.c **** 
1651:System/FreeRTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1652:System/FreeRTOS/tasks.c **** 				being used for anything else. */
1653:System/FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1654:System/FreeRTOS/tasks.c **** 				{
1655:System/FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1656:System/FreeRTOS/tasks.c **** 				}
1657:System/FreeRTOS/tasks.c **** 				else
1658:System/FreeRTOS/tasks.c **** 				{
1659:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1660:System/FreeRTOS/tasks.c **** 				}
1661:System/FreeRTOS/tasks.c **** 
1662:System/FreeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1663:System/FreeRTOS/tasks.c **** 				nothing more than change its priority variable. However, if
1664:System/FreeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1665:System/FreeRTOS/tasks.c **** 				in the list appropriate to its new priority. */
1666:System/FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1667:System/FreeRTOS/tasks.c **** 				{
1668:System/FreeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before
1669:System/FreeRTOS/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1670:System/FreeRTOS/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1671:System/FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1672:System/FreeRTOS/tasks.c **** 					{
1673:System/FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1674:System/FreeRTOS/tasks.c **** 						there is no need to check again and the port level
1675:System/FreeRTOS/tasks.c **** 						reset macro can be called directly. */
1676:System/FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1677:System/FreeRTOS/tasks.c **** 					}
1678:System/FreeRTOS/tasks.c **** 					else
1679:System/FreeRTOS/tasks.c **** 					{
1680:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1681:System/FreeRTOS/tasks.c **** 					}
1682:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1683:System/FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 31


1684:System/FreeRTOS/tasks.c **** 				else
1685:System/FreeRTOS/tasks.c **** 				{
1686:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1687:System/FreeRTOS/tasks.c **** 				}
1688:System/FreeRTOS/tasks.c **** 
1689:System/FreeRTOS/tasks.c **** 				if( xYieldRequired != pdFALSE )
1690:System/FreeRTOS/tasks.c **** 				{
1691:System/FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1692:System/FreeRTOS/tasks.c **** 				}
1693:System/FreeRTOS/tasks.c **** 				else
1694:System/FreeRTOS/tasks.c **** 				{
1695:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1696:System/FreeRTOS/tasks.c **** 				}
1697:System/FreeRTOS/tasks.c **** 
1698:System/FreeRTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1699:System/FreeRTOS/tasks.c **** 				optimised task selection is not being used. */
1700:System/FreeRTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1701:System/FreeRTOS/tasks.c **** 			}
1702:System/FreeRTOS/tasks.c **** 		}
1703:System/FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1704:System/FreeRTOS/tasks.c **** 	}
1705:System/FreeRTOS/tasks.c **** 
1706:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1707:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1708:System/FreeRTOS/tasks.c **** 
1709:System/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1710:System/FreeRTOS/tasks.c **** 
1711:System/FreeRTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1712:System/FreeRTOS/tasks.c **** 	{
1713:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1714:System/FreeRTOS/tasks.c **** 
1715:System/FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1716:System/FreeRTOS/tasks.c **** 		{
1717:System/FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1718:System/FreeRTOS/tasks.c **** 			being suspended. */
1719:System/FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1720:System/FreeRTOS/tasks.c **** 
1721:System/FreeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1722:System/FreeRTOS/tasks.c **** 
1723:System/FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1724:System/FreeRTOS/tasks.c **** 			suspended list. */
1725:System/FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1726:System/FreeRTOS/tasks.c **** 			{
1727:System/FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1728:System/FreeRTOS/tasks.c **** 			}
1729:System/FreeRTOS/tasks.c **** 			else
1730:System/FreeRTOS/tasks.c **** 			{
1731:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1732:System/FreeRTOS/tasks.c **** 			}
1733:System/FreeRTOS/tasks.c **** 
1734:System/FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1735:System/FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1736:System/FreeRTOS/tasks.c **** 			{
1737:System/FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1738:System/FreeRTOS/tasks.c **** 			}
1739:System/FreeRTOS/tasks.c **** 			else
1740:System/FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 32


1741:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1742:System/FreeRTOS/tasks.c **** 			}
1743:System/FreeRTOS/tasks.c **** 
1744:System/FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1745:System/FreeRTOS/tasks.c **** 
1746:System/FreeRTOS/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1747:System/FreeRTOS/tasks.c **** 			{
1748:System/FreeRTOS/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1749:System/FreeRTOS/tasks.c **** 				{
1750:System/FreeRTOS/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1751:System/FreeRTOS/tasks.c **** 					now suspended, so no notification was received. */
1752:System/FreeRTOS/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1753:System/FreeRTOS/tasks.c **** 				}
1754:System/FreeRTOS/tasks.c **** 			}
1755:System/FreeRTOS/tasks.c **** 			#endif
1756:System/FreeRTOS/tasks.c **** 		}
1757:System/FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1758:System/FreeRTOS/tasks.c **** 
1759:System/FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1760:System/FreeRTOS/tasks.c **** 		{
1761:System/FreeRTOS/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1762:System/FreeRTOS/tasks.c **** 			task that is now in the Suspended state. */
1763:System/FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1764:System/FreeRTOS/tasks.c **** 			{
1765:System/FreeRTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
1766:System/FreeRTOS/tasks.c **** 			}
1767:System/FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1768:System/FreeRTOS/tasks.c **** 		}
1769:System/FreeRTOS/tasks.c **** 		else
1770:System/FreeRTOS/tasks.c **** 		{
1771:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1772:System/FreeRTOS/tasks.c **** 		}
1773:System/FreeRTOS/tasks.c **** 
1774:System/FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1775:System/FreeRTOS/tasks.c **** 		{
1776:System/FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1777:System/FreeRTOS/tasks.c **** 			{
1778:System/FreeRTOS/tasks.c **** 				/* The current task has just been suspended. */
1779:System/FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1780:System/FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
1781:System/FreeRTOS/tasks.c **** 			}
1782:System/FreeRTOS/tasks.c **** 			else
1783:System/FreeRTOS/tasks.c **** 			{
1784:System/FreeRTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1785:System/FreeRTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1786:System/FreeRTOS/tasks.c **** 				must be adjusted to point to a different task. */
1787:System/FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1788:System/FreeRTOS/tasks.c **** 				{
1789:System/FreeRTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1790:System/FreeRTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1791:System/FreeRTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1792:System/FreeRTOS/tasks.c **** 					is. */
1793:System/FreeRTOS/tasks.c **** 					pxCurrentTCB = NULL;
1794:System/FreeRTOS/tasks.c **** 				}
1795:System/FreeRTOS/tasks.c **** 				else
1796:System/FreeRTOS/tasks.c **** 				{
1797:System/FreeRTOS/tasks.c **** 					vTaskSwitchContext();
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 33


1798:System/FreeRTOS/tasks.c **** 				}
1799:System/FreeRTOS/tasks.c **** 			}
1800:System/FreeRTOS/tasks.c **** 		}
1801:System/FreeRTOS/tasks.c **** 		else
1802:System/FreeRTOS/tasks.c **** 		{
1803:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1804:System/FreeRTOS/tasks.c **** 		}
1805:System/FreeRTOS/tasks.c **** 	}
1806:System/FreeRTOS/tasks.c **** 
1807:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1808:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1809:System/FreeRTOS/tasks.c **** 
1810:System/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1811:System/FreeRTOS/tasks.c **** 
1812:System/FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1813:System/FreeRTOS/tasks.c **** 	{
  29              		.loc 1 1813 2 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
1814:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
  34              		.loc 1 1814 2 view .LVU1
1815:System/FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  35              		.loc 1 1815 2 view .LVU2
1816:System/FreeRTOS/tasks.c **** 
1817:System/FreeRTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1818:System/FreeRTOS/tasks.c **** 		section. */
1819:System/FreeRTOS/tasks.c **** 
1820:System/FreeRTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1821:System/FreeRTOS/tasks.c **** 		configASSERT( xTask );
  36              		.loc 1 1821 3 view .LVU3
  37 0000 28B1     		cbz	r0, .L8
  38              		.loc 1 1821 24 discriminator 2 view .LVU4
1822:System/FreeRTOS/tasks.c **** 
1823:System/FreeRTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1824:System/FreeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  39              		.loc 1 1824 3 discriminator 2 view .LVU5
  40              		.loc 1 1824 7 is_stmt 0 discriminator 2 view .LVU6
  41 0002 4169     		ldr	r1, [r0, #20]
  42              		.loc 1 1824 5 discriminator 2 view .LVU7
  43 0004 0C4A     		ldr	r2, .L10
  44 0006 9142     		cmp	r1, r2
  45 0008 0AD0     		beq	.L9
1814:System/FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  46              		.loc 1 1814 13 view .LVU8
  47 000a 0020     		movs	r0, #0
  48              	.LVL1:
1814:System/FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  49              		.loc 1 1814 13 view .LVU9
  50 000c 7047     		bx	lr
  51              	.LVL2:
  52              	.L8:
1821:System/FreeRTOS/tasks.c **** 
  53              		.loc 1 1821 3 is_stmt 1 view .LVU10
  54              	.LBB123:
  55              	.LBI123:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 34


  56              		.file 2 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 35


  57:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 36


 114:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 37


 171:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  57              		.loc 2 191 30 view .LVU11
  58              	.LBB124:
 192:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
  59              		.loc 2 193 1 view .LVU12
 194:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  60              		.loc 2 195 2 view .LVU13
  61              		.syntax unified
  62              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
  63 000e 4FF05003 			mov r3, #80												
  64 0012 83F31188 		msr basepri, r3											
  65 0016 BFF36F8F 		isb														
  66 001a BFF34F8F 		dsb														
  67              	
  68              	@ 0 "" 2
  69              	.LVL3:
  70              		.thumb
  71              		.syntax unified
  72              	.L3:
  73              		.loc 2 195 2 is_stmt 0 view .LVU14
  74              	.LBE124:
  75              	.LBE123:
1821:System/FreeRTOS/tasks.c **** 
  76              		.loc 1 1821 3 is_stmt 1 discriminator 1 view .LVU15
1821:System/FreeRTOS/tasks.c **** 
  77              		.loc 1 1821 3 discriminator 1 view .LVU16
1821:System/FreeRTOS/tasks.c **** 
  78              		.loc 1 1821 3 discriminator 1 view .LVU17
  79 001e FEE7     		b	.L3
  80              	.L9:
1825:System/FreeRTOS/tasks.c **** 		{
1826:System/FreeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1827:System/FreeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  81              		.loc 1 1827 4 view .LVU18
  82              		.loc 1 1827 8 is_stmt 0 view .LVU19
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 38


  83 0020 836A     		ldr	r3, [r0, #40]
  84              		.loc 1 1827 6 view .LVU20
  85 0022 064A     		ldr	r2, .L10+4
  86 0024 9342     		cmp	r3, r2
  87 0026 02D0     		beq	.L6
1828:System/FreeRTOS/tasks.c **** 			{
1829:System/FreeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1830:System/FreeRTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1831:System/FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  88              		.loc 1 1831 5 is_stmt 1 view .LVU21
  89              		.loc 1 1831 7 is_stmt 0 view .LVU22
  90 0028 1BB1     		cbz	r3, .L7
1814:System/FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  91              		.loc 1 1814 13 view .LVU23
  92 002a 0020     		movs	r0, #0
  93              	.LVL4:
1814:System/FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  94              		.loc 1 1814 13 view .LVU24
  95 002c 7047     		bx	lr
  96              	.LVL5:
  97              	.L6:
1814:System/FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  98              		.loc 1 1814 13 view .LVU25
  99 002e 0020     		movs	r0, #0
 100              	.LVL6:
1814:System/FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 101              		.loc 1 1814 13 view .LVU26
 102 0030 7047     		bx	lr
 103              	.LVL7:
 104              	.L7:
1832:System/FreeRTOS/tasks.c **** 				{
1833:System/FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 105              		.loc 1 1833 14 view .LVU27
 106 0032 0120     		movs	r0, #1
 107              	.LVL8:
1834:System/FreeRTOS/tasks.c **** 				}
1835:System/FreeRTOS/tasks.c **** 				else
1836:System/FreeRTOS/tasks.c **** 				{
1837:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1838:System/FreeRTOS/tasks.c **** 				}
1839:System/FreeRTOS/tasks.c **** 			}
1840:System/FreeRTOS/tasks.c **** 			else
1841:System/FreeRTOS/tasks.c **** 			{
1842:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1843:System/FreeRTOS/tasks.c **** 			}
1844:System/FreeRTOS/tasks.c **** 		}
1845:System/FreeRTOS/tasks.c **** 		else
1846:System/FreeRTOS/tasks.c **** 		{
1847:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 108              		.loc 1 1847 28 is_stmt 1 view .LVU28
1848:System/FreeRTOS/tasks.c **** 		}
1849:System/FreeRTOS/tasks.c **** 
1850:System/FreeRTOS/tasks.c **** 		return xReturn;
 109              		.loc 1 1850 3 view .LVU29
1851:System/FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 110              		.loc 1 1851 2 is_stmt 0 view .LVU30
 111 0034 7047     		bx	lr
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 39


 112              	.L11:
 113 0036 00BF     		.align	2
 114              	.L10:
 115 0038 00000000 		.word	.LANCHOR0
 116 003c 00000000 		.word	.LANCHOR1
 117              		.cfi_endproc
 118              	.LFE17:
 120              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 121              		.align	1
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 126              	prvTaskCheckFreeStackSpace:
 127              	.LVL9:
 128              	.LFB47:
1852:System/FreeRTOS/tasks.c **** 
1853:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1854:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1855:System/FreeRTOS/tasks.c **** 
1856:System/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1857:System/FreeRTOS/tasks.c **** 
1858:System/FreeRTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1859:System/FreeRTOS/tasks.c **** 	{
1860:System/FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1861:System/FreeRTOS/tasks.c **** 
1862:System/FreeRTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1863:System/FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1864:System/FreeRTOS/tasks.c **** 
1865:System/FreeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1866:System/FreeRTOS/tasks.c **** 		currently executing task. */
1867:System/FreeRTOS/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1868:System/FreeRTOS/tasks.c **** 		{
1869:System/FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1870:System/FreeRTOS/tasks.c **** 			{
1871:System/FreeRTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1872:System/FreeRTOS/tasks.c **** 				{
1873:System/FreeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1874:System/FreeRTOS/tasks.c **** 
1875:System/FreeRTOS/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1876:System/FreeRTOS/tasks.c **** 					suspended because this is inside a critical section. */
1877:System/FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1878:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1879:System/FreeRTOS/tasks.c **** 
1880:System/FreeRTOS/tasks.c **** 					/* A higher priority task may have just been resumed. */
1881:System/FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1882:System/FreeRTOS/tasks.c **** 					{
1883:System/FreeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1884:System/FreeRTOS/tasks.c **** 						but will leave the lists in the correct state for the
1885:System/FreeRTOS/tasks.c **** 						next yield. */
1886:System/FreeRTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1887:System/FreeRTOS/tasks.c **** 					}
1888:System/FreeRTOS/tasks.c **** 					else
1889:System/FreeRTOS/tasks.c **** 					{
1890:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1891:System/FreeRTOS/tasks.c **** 					}
1892:System/FreeRTOS/tasks.c **** 				}
1893:System/FreeRTOS/tasks.c **** 				else
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 40


1894:System/FreeRTOS/tasks.c **** 				{
1895:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1896:System/FreeRTOS/tasks.c **** 				}
1897:System/FreeRTOS/tasks.c **** 			}
1898:System/FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1899:System/FreeRTOS/tasks.c **** 		}
1900:System/FreeRTOS/tasks.c **** 		else
1901:System/FreeRTOS/tasks.c **** 		{
1902:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1903:System/FreeRTOS/tasks.c **** 		}
1904:System/FreeRTOS/tasks.c **** 	}
1905:System/FreeRTOS/tasks.c **** 
1906:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1907:System/FreeRTOS/tasks.c **** 
1908:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1909:System/FreeRTOS/tasks.c **** 
1910:System/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1911:System/FreeRTOS/tasks.c **** 
1912:System/FreeRTOS/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1913:System/FreeRTOS/tasks.c **** 	{
1914:System/FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1915:System/FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1916:System/FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1917:System/FreeRTOS/tasks.c **** 
1918:System/FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1919:System/FreeRTOS/tasks.c **** 
1920:System/FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1921:System/FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1922:System/FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1923:System/FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1924:System/FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1925:System/FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1926:System/FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1927:System/FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1928:System/FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1929:System/FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1930:System/FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1931:System/FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1932:System/FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1933:System/FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1934:System/FreeRTOS/tasks.c **** 		provided on the following link:
1935:System/FreeRTOS/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1936:System/FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1937:System/FreeRTOS/tasks.c **** 
1938:System/FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1939:System/FreeRTOS/tasks.c **** 		{
1940:System/FreeRTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1941:System/FreeRTOS/tasks.c **** 			{
1942:System/FreeRTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1943:System/FreeRTOS/tasks.c **** 
1944:System/FreeRTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1945:System/FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1946:System/FreeRTOS/tasks.c **** 				{
1947:System/FreeRTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1948:System/FreeRTOS/tasks.c **** 					suspended list to the ready list directly. */
1949:System/FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1950:System/FreeRTOS/tasks.c **** 					{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 41


1951:System/FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
1952:System/FreeRTOS/tasks.c **** 					}
1953:System/FreeRTOS/tasks.c **** 					else
1954:System/FreeRTOS/tasks.c **** 					{
1955:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1956:System/FreeRTOS/tasks.c **** 					}
1957:System/FreeRTOS/tasks.c **** 
1958:System/FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1959:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1960:System/FreeRTOS/tasks.c **** 				}
1961:System/FreeRTOS/tasks.c **** 				else
1962:System/FreeRTOS/tasks.c **** 				{
1963:System/FreeRTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1964:System/FreeRTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1965:System/FreeRTOS/tasks.c **** 					unsuspended. */
1966:System/FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1967:System/FreeRTOS/tasks.c **** 				}
1968:System/FreeRTOS/tasks.c **** 			}
1969:System/FreeRTOS/tasks.c **** 			else
1970:System/FreeRTOS/tasks.c **** 			{
1971:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1972:System/FreeRTOS/tasks.c **** 			}
1973:System/FreeRTOS/tasks.c **** 		}
1974:System/FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1975:System/FreeRTOS/tasks.c **** 
1976:System/FreeRTOS/tasks.c **** 		return xYieldRequired;
1977:System/FreeRTOS/tasks.c **** 	}
1978:System/FreeRTOS/tasks.c **** 
1979:System/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1980:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1981:System/FreeRTOS/tasks.c **** 
1982:System/FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1983:System/FreeRTOS/tasks.c **** {
1984:System/FreeRTOS/tasks.c **** BaseType_t xReturn;
1985:System/FreeRTOS/tasks.c **** 
1986:System/FreeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1987:System/FreeRTOS/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1988:System/FreeRTOS/tasks.c **** 	{
1989:System/FreeRTOS/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1990:System/FreeRTOS/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1991:System/FreeRTOS/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1992:System/FreeRTOS/tasks.c **** 
1993:System/FreeRTOS/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1994:System/FreeRTOS/tasks.c **** 		address of the RAM then create the idle task. */
1995:System/FreeRTOS/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1996:System/FreeRTOS/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1997:System/FreeRTOS/tasks.c **** 												configIDLE_TASK_NAME,
1998:System/FreeRTOS/tasks.c **** 												ulIdleTaskStackSize,
1999:System/FreeRTOS/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
2000:System/FreeRTOS/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
2001:System/FreeRTOS/tasks.c **** 												pxIdleTaskStackBuffer,
2002:System/FreeRTOS/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
2003:System/FreeRTOS/tasks.c **** 
2004:System/FreeRTOS/tasks.c **** 		if( xIdleTaskHandle != NULL )
2005:System/FreeRTOS/tasks.c **** 		{
2006:System/FreeRTOS/tasks.c **** 			xReturn = pdPASS;
2007:System/FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 42


2008:System/FreeRTOS/tasks.c **** 		else
2009:System/FreeRTOS/tasks.c **** 		{
2010:System/FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
2011:System/FreeRTOS/tasks.c **** 		}
2012:System/FreeRTOS/tasks.c **** 	}
2013:System/FreeRTOS/tasks.c **** 	#else
2014:System/FreeRTOS/tasks.c **** 	{
2015:System/FreeRTOS/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2016:System/FreeRTOS/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2017:System/FreeRTOS/tasks.c **** 								configIDLE_TASK_NAME,
2018:System/FreeRTOS/tasks.c **** 								configMINIMAL_STACK_SIZE,
2019:System/FreeRTOS/tasks.c **** 								( void * ) NULL,
2020:System/FreeRTOS/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2021:System/FreeRTOS/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2022:System/FreeRTOS/tasks.c **** 	}
2023:System/FreeRTOS/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2024:System/FreeRTOS/tasks.c **** 
2025:System/FreeRTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2026:System/FreeRTOS/tasks.c **** 	{
2027:System/FreeRTOS/tasks.c **** 		if( xReturn == pdPASS )
2028:System/FreeRTOS/tasks.c **** 		{
2029:System/FreeRTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2030:System/FreeRTOS/tasks.c **** 		}
2031:System/FreeRTOS/tasks.c **** 		else
2032:System/FreeRTOS/tasks.c **** 		{
2033:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2034:System/FreeRTOS/tasks.c **** 		}
2035:System/FreeRTOS/tasks.c **** 	}
2036:System/FreeRTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
2037:System/FreeRTOS/tasks.c **** 
2038:System/FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
2039:System/FreeRTOS/tasks.c **** 	{
2040:System/FreeRTOS/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2041:System/FreeRTOS/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2042:System/FreeRTOS/tasks.c **** 		the only macro called by the function. */
2043:System/FreeRTOS/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2044:System/FreeRTOS/tasks.c **** 		{
2045:System/FreeRTOS/tasks.c **** 			freertos_tasks_c_additions_init();
2046:System/FreeRTOS/tasks.c **** 		}
2047:System/FreeRTOS/tasks.c **** 		#endif
2048:System/FreeRTOS/tasks.c **** 
2049:System/FreeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2050:System/FreeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2051:System/FreeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2052:System/FreeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2053:System/FreeRTOS/tasks.c **** 		starts to run. */
2054:System/FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
2055:System/FreeRTOS/tasks.c **** 
2056:System/FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2057:System/FreeRTOS/tasks.c **** 		{
2058:System/FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2059:System/FreeRTOS/tasks.c **** 			structure specific to the task that will run first.
2060:System/FreeRTOS/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2061:System/FreeRTOS/tasks.c **** 			for additional information. */
2062:System/FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2063:System/FreeRTOS/tasks.c **** 		}
2064:System/FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 43


2065:System/FreeRTOS/tasks.c **** 
2066:System/FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2067:System/FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
2068:System/FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2069:System/FreeRTOS/tasks.c **** 
2070:System/FreeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2071:System/FreeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2072:System/FreeRTOS/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2073:System/FreeRTOS/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2074:System/FreeRTOS/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2075:System/FreeRTOS/tasks.c **** 		FreeRTOSConfig.h file. */
2076:System/FreeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2077:System/FreeRTOS/tasks.c **** 
2078:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2079:System/FreeRTOS/tasks.c **** 
2080:System/FreeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2081:System/FreeRTOS/tasks.c **** 		portable interface. */
2082:System/FreeRTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2083:System/FreeRTOS/tasks.c **** 		{
2084:System/FreeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2085:System/FreeRTOS/tasks.c **** 			function will not return. */
2086:System/FreeRTOS/tasks.c **** 		}
2087:System/FreeRTOS/tasks.c **** 		else
2088:System/FreeRTOS/tasks.c **** 		{
2089:System/FreeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2090:System/FreeRTOS/tasks.c **** 		}
2091:System/FreeRTOS/tasks.c **** 	}
2092:System/FreeRTOS/tasks.c **** 	else
2093:System/FreeRTOS/tasks.c **** 	{
2094:System/FreeRTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2095:System/FreeRTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2096:System/FreeRTOS/tasks.c **** 		or the timer task. */
2097:System/FreeRTOS/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2098:System/FreeRTOS/tasks.c **** 	}
2099:System/FreeRTOS/tasks.c **** 
2100:System/FreeRTOS/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2101:System/FreeRTOS/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2102:System/FreeRTOS/tasks.c **** 	( void ) xIdleTaskHandle;
2103:System/FreeRTOS/tasks.c **** }
2104:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2105:System/FreeRTOS/tasks.c **** 
2106:System/FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
2107:System/FreeRTOS/tasks.c **** {
2108:System/FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2109:System/FreeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2110:System/FreeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2111:System/FreeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
2112:System/FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
2113:System/FreeRTOS/tasks.c **** 	vPortEndScheduler();
2114:System/FreeRTOS/tasks.c **** }
2115:System/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2116:System/FreeRTOS/tasks.c **** 
2117:System/FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
2118:System/FreeRTOS/tasks.c **** {
2119:System/FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
2120:System/FreeRTOS/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2121:System/FreeRTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 44


2122:System/FreeRTOS/tasks.c **** 	http://goo.gl/wu4acr */
2123:System/FreeRTOS/tasks.c **** 
2124:System/FreeRTOS/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2125:System/FreeRTOS/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2126:System/FreeRTOS/tasks.c **** 	portSOFTWARE_BARRIER();
2127:System/FreeRTOS/tasks.c **** 
2128:System/FreeRTOS/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2129:System/FreeRTOS/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2130:System/FreeRTOS/tasks.c **** 	++uxSchedulerSuspended;
2131:System/FreeRTOS/tasks.c **** 
2132:System/FreeRTOS/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2133:System/FreeRTOS/tasks.c **** 	the above increment elsewhere. */
2134:System/FreeRTOS/tasks.c **** 	portMEMORY_BARRIER();
2135:System/FreeRTOS/tasks.c **** }
2136:System/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2137:System/FreeRTOS/tasks.c **** 
2138:System/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2139:System/FreeRTOS/tasks.c **** 
2140:System/FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2141:System/FreeRTOS/tasks.c **** 	{
2142:System/FreeRTOS/tasks.c **** 	TickType_t xReturn;
2143:System/FreeRTOS/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2144:System/FreeRTOS/tasks.c **** 
2145:System/FreeRTOS/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2146:System/FreeRTOS/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2147:System/FreeRTOS/tasks.c **** 		task that are in the Ready state, even though the idle task is
2148:System/FreeRTOS/tasks.c **** 		running. */
2149:System/FreeRTOS/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2150:System/FreeRTOS/tasks.c **** 		{
2151:System/FreeRTOS/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2152:System/FreeRTOS/tasks.c **** 			{
2153:System/FreeRTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2154:System/FreeRTOS/tasks.c **** 			}
2155:System/FreeRTOS/tasks.c **** 		}
2156:System/FreeRTOS/tasks.c **** 		#else
2157:System/FreeRTOS/tasks.c **** 		{
2158:System/FreeRTOS/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2159:System/FreeRTOS/tasks.c **** 
2160:System/FreeRTOS/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2161:System/FreeRTOS/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2162:System/FreeRTOS/tasks.c **** 			significant bit are set then there are tasks that have a priority
2163:System/FreeRTOS/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2164:System/FreeRTOS/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2165:System/FreeRTOS/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2166:System/FreeRTOS/tasks.c **** 			{
2167:System/FreeRTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2168:System/FreeRTOS/tasks.c **** 			}
2169:System/FreeRTOS/tasks.c **** 		}
2170:System/FreeRTOS/tasks.c **** 		#endif
2171:System/FreeRTOS/tasks.c **** 
2172:System/FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2173:System/FreeRTOS/tasks.c **** 		{
2174:System/FreeRTOS/tasks.c **** 			xReturn = 0;
2175:System/FreeRTOS/tasks.c **** 		}
2176:System/FreeRTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2177:System/FreeRTOS/tasks.c **** 		{
2178:System/FreeRTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 45


2179:System/FreeRTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2180:System/FreeRTOS/tasks.c **** 			processed. */
2181:System/FreeRTOS/tasks.c **** 			xReturn = 0;
2182:System/FreeRTOS/tasks.c **** 		}
2183:System/FreeRTOS/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2184:System/FreeRTOS/tasks.c **** 		{
2185:System/FreeRTOS/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2186:System/FreeRTOS/tasks.c **** 			idle priority.  This path can only be reached if
2187:System/FreeRTOS/tasks.c **** 			configUSE_PREEMPTION is 0. */
2188:System/FreeRTOS/tasks.c **** 			xReturn = 0;
2189:System/FreeRTOS/tasks.c **** 		}
2190:System/FreeRTOS/tasks.c **** 		else
2191:System/FreeRTOS/tasks.c **** 		{
2192:System/FreeRTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2193:System/FreeRTOS/tasks.c **** 		}
2194:System/FreeRTOS/tasks.c **** 
2195:System/FreeRTOS/tasks.c **** 		return xReturn;
2196:System/FreeRTOS/tasks.c **** 	}
2197:System/FreeRTOS/tasks.c **** 
2198:System/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2199:System/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2200:System/FreeRTOS/tasks.c **** 
2201:System/FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2202:System/FreeRTOS/tasks.c **** {
2203:System/FreeRTOS/tasks.c **** TCB_t *pxTCB = NULL;
2204:System/FreeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2205:System/FreeRTOS/tasks.c **** 
2206:System/FreeRTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2207:System/FreeRTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
2208:System/FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2209:System/FreeRTOS/tasks.c **** 
2210:System/FreeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2211:System/FreeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2212:System/FreeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2213:System/FreeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2214:System/FreeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
2215:System/FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
2216:System/FreeRTOS/tasks.c **** 	{
2217:System/FreeRTOS/tasks.c **** 		--uxSchedulerSuspended;
2218:System/FreeRTOS/tasks.c **** 
2219:System/FreeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2220:System/FreeRTOS/tasks.c **** 		{
2221:System/FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2222:System/FreeRTOS/tasks.c **** 			{
2223:System/FreeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
2224:System/FreeRTOS/tasks.c **** 				appropriate ready list. */
2225:System/FreeRTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2226:System/FreeRTOS/tasks.c **** 				{
2227:System/FreeRTOS/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2228:System/FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2229:System/FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2230:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2231:System/FreeRTOS/tasks.c **** 
2232:System/FreeRTOS/tasks.c **** 					/* If the moved task has a priority higher than the current
2233:System/FreeRTOS/tasks.c **** 					task then a yield must be performed. */
2234:System/FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2235:System/FreeRTOS/tasks.c **** 					{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 46


2236:System/FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
2237:System/FreeRTOS/tasks.c **** 					}
2238:System/FreeRTOS/tasks.c **** 					else
2239:System/FreeRTOS/tasks.c **** 					{
2240:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2241:System/FreeRTOS/tasks.c **** 					}
2242:System/FreeRTOS/tasks.c **** 				}
2243:System/FreeRTOS/tasks.c **** 
2244:System/FreeRTOS/tasks.c **** 				if( pxTCB != NULL )
2245:System/FreeRTOS/tasks.c **** 				{
2246:System/FreeRTOS/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2247:System/FreeRTOS/tasks.c **** 					which may have prevented the next unblock time from being
2248:System/FreeRTOS/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2249:System/FreeRTOS/tasks.c **** 					important for low power tickless implementations, where
2250:System/FreeRTOS/tasks.c **** 					this can prevent an unnecessary exit from low power
2251:System/FreeRTOS/tasks.c **** 					state. */
2252:System/FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
2253:System/FreeRTOS/tasks.c **** 				}
2254:System/FreeRTOS/tasks.c **** 
2255:System/FreeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2256:System/FreeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
2257:System/FreeRTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2258:System/FreeRTOS/tasks.c **** 				time. */
2259:System/FreeRTOS/tasks.c **** 				{
2260:System/FreeRTOS/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2261:System/FreeRTOS/tasks.c **** 
2262:System/FreeRTOS/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
2263:System/FreeRTOS/tasks.c **** 					{
2264:System/FreeRTOS/tasks.c **** 						do
2265:System/FreeRTOS/tasks.c **** 						{
2266:System/FreeRTOS/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2267:System/FreeRTOS/tasks.c **** 							{
2268:System/FreeRTOS/tasks.c **** 								xYieldPending = pdTRUE;
2269:System/FreeRTOS/tasks.c **** 							}
2270:System/FreeRTOS/tasks.c **** 							else
2271:System/FreeRTOS/tasks.c **** 							{
2272:System/FreeRTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2273:System/FreeRTOS/tasks.c **** 							}
2274:System/FreeRTOS/tasks.c **** 							--xPendedCounts;
2275:System/FreeRTOS/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
2276:System/FreeRTOS/tasks.c **** 
2277:System/FreeRTOS/tasks.c **** 						xPendedTicks = 0;
2278:System/FreeRTOS/tasks.c **** 					}
2279:System/FreeRTOS/tasks.c **** 					else
2280:System/FreeRTOS/tasks.c **** 					{
2281:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2282:System/FreeRTOS/tasks.c **** 					}
2283:System/FreeRTOS/tasks.c **** 				}
2284:System/FreeRTOS/tasks.c **** 
2285:System/FreeRTOS/tasks.c **** 				if( xYieldPending != pdFALSE )
2286:System/FreeRTOS/tasks.c **** 				{
2287:System/FreeRTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2288:System/FreeRTOS/tasks.c **** 					{
2289:System/FreeRTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
2290:System/FreeRTOS/tasks.c **** 					}
2291:System/FreeRTOS/tasks.c **** 					#endif
2292:System/FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 47


2293:System/FreeRTOS/tasks.c **** 				}
2294:System/FreeRTOS/tasks.c **** 				else
2295:System/FreeRTOS/tasks.c **** 				{
2296:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2297:System/FreeRTOS/tasks.c **** 				}
2298:System/FreeRTOS/tasks.c **** 			}
2299:System/FreeRTOS/tasks.c **** 		}
2300:System/FreeRTOS/tasks.c **** 		else
2301:System/FreeRTOS/tasks.c **** 		{
2302:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2303:System/FreeRTOS/tasks.c **** 		}
2304:System/FreeRTOS/tasks.c **** 	}
2305:System/FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
2306:System/FreeRTOS/tasks.c **** 
2307:System/FreeRTOS/tasks.c **** 	return xAlreadyYielded;
2308:System/FreeRTOS/tasks.c **** }
2309:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2310:System/FreeRTOS/tasks.c **** 
2311:System/FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2312:System/FreeRTOS/tasks.c **** {
2313:System/FreeRTOS/tasks.c **** TickType_t xTicks;
2314:System/FreeRTOS/tasks.c **** 
2315:System/FreeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2316:System/FreeRTOS/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2317:System/FreeRTOS/tasks.c **** 	{
2318:System/FreeRTOS/tasks.c **** 		xTicks = xTickCount;
2319:System/FreeRTOS/tasks.c **** 	}
2320:System/FreeRTOS/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2321:System/FreeRTOS/tasks.c **** 
2322:System/FreeRTOS/tasks.c **** 	return xTicks;
2323:System/FreeRTOS/tasks.c **** }
2324:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2325:System/FreeRTOS/tasks.c **** 
2326:System/FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2327:System/FreeRTOS/tasks.c **** {
2328:System/FreeRTOS/tasks.c **** TickType_t xReturn;
2329:System/FreeRTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2330:System/FreeRTOS/tasks.c **** 
2331:System/FreeRTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2332:System/FreeRTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2333:System/FreeRTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2334:System/FreeRTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2335:System/FreeRTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2336:System/FreeRTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2337:System/FreeRTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2338:System/FreeRTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2339:System/FreeRTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2340:System/FreeRTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2341:System/FreeRTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2342:System/FreeRTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2343:System/FreeRTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2344:System/FreeRTOS/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2345:System/FreeRTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2346:System/FreeRTOS/tasks.c **** 
2347:System/FreeRTOS/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2348:System/FreeRTOS/tasks.c **** 	{
2349:System/FreeRTOS/tasks.c **** 		xReturn = xTickCount;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 48


2350:System/FreeRTOS/tasks.c **** 	}
2351:System/FreeRTOS/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2352:System/FreeRTOS/tasks.c **** 
2353:System/FreeRTOS/tasks.c **** 	return xReturn;
2354:System/FreeRTOS/tasks.c **** }
2355:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2356:System/FreeRTOS/tasks.c **** 
2357:System/FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2358:System/FreeRTOS/tasks.c **** {
2359:System/FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
2360:System/FreeRTOS/tasks.c **** 	BaseType_t. */
2361:System/FreeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
2362:System/FreeRTOS/tasks.c **** }
2363:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2364:System/FreeRTOS/tasks.c **** 
2365:System/FreeRTOS/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2366:System/FreeRTOS/tasks.c **** {
2367:System/FreeRTOS/tasks.c **** TCB_t *pxTCB;
2368:System/FreeRTOS/tasks.c **** 
2369:System/FreeRTOS/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2370:System/FreeRTOS/tasks.c **** 	queried. */
2371:System/FreeRTOS/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2372:System/FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
2373:System/FreeRTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2374:System/FreeRTOS/tasks.c **** }
2375:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2376:System/FreeRTOS/tasks.c **** 
2377:System/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2378:System/FreeRTOS/tasks.c **** 
2379:System/FreeRTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2380:System/FreeRTOS/tasks.c **** 	{
2381:System/FreeRTOS/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2382:System/FreeRTOS/tasks.c **** 	UBaseType_t x;
2383:System/FreeRTOS/tasks.c **** 	char cNextChar;
2384:System/FreeRTOS/tasks.c **** 	BaseType_t xBreakLoop;
2385:System/FreeRTOS/tasks.c **** 
2386:System/FreeRTOS/tasks.c **** 		/* This function is called with the scheduler suspended. */
2387:System/FreeRTOS/tasks.c **** 
2388:System/FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2389:System/FreeRTOS/tasks.c **** 		{
2390:System/FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2391:System/FreeRTOS/tasks.c **** 
2392:System/FreeRTOS/tasks.c **** 			do
2393:System/FreeRTOS/tasks.c **** 			{
2394:System/FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2395:System/FreeRTOS/tasks.c **** 
2396:System/FreeRTOS/tasks.c **** 				/* Check each character in the name looking for a match or
2397:System/FreeRTOS/tasks.c **** 				mismatch. */
2398:System/FreeRTOS/tasks.c **** 				xBreakLoop = pdFALSE;
2399:System/FreeRTOS/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2400:System/FreeRTOS/tasks.c **** 				{
2401:System/FreeRTOS/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2402:System/FreeRTOS/tasks.c **** 
2403:System/FreeRTOS/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2404:System/FreeRTOS/tasks.c **** 					{
2405:System/FreeRTOS/tasks.c **** 						/* Characters didn't match. */
2406:System/FreeRTOS/tasks.c **** 						xBreakLoop = pdTRUE;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 49


2407:System/FreeRTOS/tasks.c **** 					}
2408:System/FreeRTOS/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2409:System/FreeRTOS/tasks.c **** 					{
2410:System/FreeRTOS/tasks.c **** 						/* Both strings terminated, a match must have been
2411:System/FreeRTOS/tasks.c **** 						found. */
2412:System/FreeRTOS/tasks.c **** 						pxReturn = pxNextTCB;
2413:System/FreeRTOS/tasks.c **** 						xBreakLoop = pdTRUE;
2414:System/FreeRTOS/tasks.c **** 					}
2415:System/FreeRTOS/tasks.c **** 					else
2416:System/FreeRTOS/tasks.c **** 					{
2417:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2418:System/FreeRTOS/tasks.c **** 					}
2419:System/FreeRTOS/tasks.c **** 
2420:System/FreeRTOS/tasks.c **** 					if( xBreakLoop != pdFALSE )
2421:System/FreeRTOS/tasks.c **** 					{
2422:System/FreeRTOS/tasks.c **** 						break;
2423:System/FreeRTOS/tasks.c **** 					}
2424:System/FreeRTOS/tasks.c **** 				}
2425:System/FreeRTOS/tasks.c **** 
2426:System/FreeRTOS/tasks.c **** 				if( pxReturn != NULL )
2427:System/FreeRTOS/tasks.c **** 				{
2428:System/FreeRTOS/tasks.c **** 					/* The handle has been found. */
2429:System/FreeRTOS/tasks.c **** 					break;
2430:System/FreeRTOS/tasks.c **** 				}
2431:System/FreeRTOS/tasks.c **** 
2432:System/FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2433:System/FreeRTOS/tasks.c **** 		}
2434:System/FreeRTOS/tasks.c **** 		else
2435:System/FreeRTOS/tasks.c **** 		{
2436:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2437:System/FreeRTOS/tasks.c **** 		}
2438:System/FreeRTOS/tasks.c **** 
2439:System/FreeRTOS/tasks.c **** 		return pxReturn;
2440:System/FreeRTOS/tasks.c **** 	}
2441:System/FreeRTOS/tasks.c **** 
2442:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2443:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2444:System/FreeRTOS/tasks.c **** 
2445:System/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2446:System/FreeRTOS/tasks.c **** 
2447:System/FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2448:System/FreeRTOS/tasks.c **** 	{
2449:System/FreeRTOS/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2450:System/FreeRTOS/tasks.c **** 	TCB_t* pxTCB;
2451:System/FreeRTOS/tasks.c **** 
2452:System/FreeRTOS/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2453:System/FreeRTOS/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2454:System/FreeRTOS/tasks.c **** 
2455:System/FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2456:System/FreeRTOS/tasks.c **** 		{
2457:System/FreeRTOS/tasks.c **** 			/* Search the ready lists. */
2458:System/FreeRTOS/tasks.c **** 			do
2459:System/FreeRTOS/tasks.c **** 			{
2460:System/FreeRTOS/tasks.c **** 				uxQueue--;
2461:System/FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2462:System/FreeRTOS/tasks.c **** 
2463:System/FreeRTOS/tasks.c **** 				if( pxTCB != NULL )
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 50


2464:System/FreeRTOS/tasks.c **** 				{
2465:System/FreeRTOS/tasks.c **** 					/* Found the handle. */
2466:System/FreeRTOS/tasks.c **** 					break;
2467:System/FreeRTOS/tasks.c **** 				}
2468:System/FreeRTOS/tasks.c **** 
2469:System/FreeRTOS/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2470:System/FreeRTOS/tasks.c **** 
2471:System/FreeRTOS/tasks.c **** 			/* Search the delayed lists. */
2472:System/FreeRTOS/tasks.c **** 			if( pxTCB == NULL )
2473:System/FreeRTOS/tasks.c **** 			{
2474:System/FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2475:System/FreeRTOS/tasks.c **** 			}
2476:System/FreeRTOS/tasks.c **** 
2477:System/FreeRTOS/tasks.c **** 			if( pxTCB == NULL )
2478:System/FreeRTOS/tasks.c **** 			{
2479:System/FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2480:System/FreeRTOS/tasks.c **** 			}
2481:System/FreeRTOS/tasks.c **** 
2482:System/FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2483:System/FreeRTOS/tasks.c **** 			{
2484:System/FreeRTOS/tasks.c **** 				if( pxTCB == NULL )
2485:System/FreeRTOS/tasks.c **** 				{
2486:System/FreeRTOS/tasks.c **** 					/* Search the suspended list. */
2487:System/FreeRTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2488:System/FreeRTOS/tasks.c **** 				}
2489:System/FreeRTOS/tasks.c **** 			}
2490:System/FreeRTOS/tasks.c **** 			#endif
2491:System/FreeRTOS/tasks.c **** 
2492:System/FreeRTOS/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2493:System/FreeRTOS/tasks.c **** 			{
2494:System/FreeRTOS/tasks.c **** 				if( pxTCB == NULL )
2495:System/FreeRTOS/tasks.c **** 				{
2496:System/FreeRTOS/tasks.c **** 					/* Search the deleted list. */
2497:System/FreeRTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2498:System/FreeRTOS/tasks.c **** 				}
2499:System/FreeRTOS/tasks.c **** 			}
2500:System/FreeRTOS/tasks.c **** 			#endif
2501:System/FreeRTOS/tasks.c **** 		}
2502:System/FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2503:System/FreeRTOS/tasks.c **** 
2504:System/FreeRTOS/tasks.c **** 		return pxTCB;
2505:System/FreeRTOS/tasks.c **** 	}
2506:System/FreeRTOS/tasks.c **** 
2507:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2508:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2509:System/FreeRTOS/tasks.c **** 
2510:System/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2511:System/FreeRTOS/tasks.c **** 
2512:System/FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2513:System/FreeRTOS/tasks.c **** 	{
2514:System/FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2515:System/FreeRTOS/tasks.c **** 
2516:System/FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2517:System/FreeRTOS/tasks.c **** 		{
2518:System/FreeRTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2519:System/FreeRTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2520:System/FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 51


2521:System/FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2522:System/FreeRTOS/tasks.c **** 				task in the Ready state. */
2523:System/FreeRTOS/tasks.c **** 				do
2524:System/FreeRTOS/tasks.c **** 				{
2525:System/FreeRTOS/tasks.c **** 					uxQueue--;
2526:System/FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2527:System/FreeRTOS/tasks.c **** 
2528:System/FreeRTOS/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2529:System/FreeRTOS/tasks.c **** 
2530:System/FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2531:System/FreeRTOS/tasks.c **** 				task in the Blocked state. */
2532:System/FreeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2533:System/FreeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2534:System/FreeRTOS/tasks.c **** 
2535:System/FreeRTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2536:System/FreeRTOS/tasks.c **** 				{
2537:System/FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2538:System/FreeRTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2539:System/FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2540:System/FreeRTOS/tasks.c **** 				}
2541:System/FreeRTOS/tasks.c **** 				#endif
2542:System/FreeRTOS/tasks.c **** 
2543:System/FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2544:System/FreeRTOS/tasks.c **** 				{
2545:System/FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2546:System/FreeRTOS/tasks.c **** 					each task in the Suspended state. */
2547:System/FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2548:System/FreeRTOS/tasks.c **** 				}
2549:System/FreeRTOS/tasks.c **** 				#endif
2550:System/FreeRTOS/tasks.c **** 
2551:System/FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2552:System/FreeRTOS/tasks.c **** 				{
2553:System/FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2554:System/FreeRTOS/tasks.c **** 					{
2555:System/FreeRTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2556:System/FreeRTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2557:System/FreeRTOS/tasks.c **** 						#else
2558:System/FreeRTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2559:System/FreeRTOS/tasks.c **** 						#endif
2560:System/FreeRTOS/tasks.c **** 					}
2561:System/FreeRTOS/tasks.c **** 				}
2562:System/FreeRTOS/tasks.c **** 				#else
2563:System/FreeRTOS/tasks.c **** 				{
2564:System/FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2565:System/FreeRTOS/tasks.c **** 					{
2566:System/FreeRTOS/tasks.c **** 						*pulTotalRunTime = 0;
2567:System/FreeRTOS/tasks.c **** 					}
2568:System/FreeRTOS/tasks.c **** 				}
2569:System/FreeRTOS/tasks.c **** 				#endif
2570:System/FreeRTOS/tasks.c **** 			}
2571:System/FreeRTOS/tasks.c **** 			else
2572:System/FreeRTOS/tasks.c **** 			{
2573:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2574:System/FreeRTOS/tasks.c **** 			}
2575:System/FreeRTOS/tasks.c **** 		}
2576:System/FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2577:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 52


2578:System/FreeRTOS/tasks.c **** 		return uxTask;
2579:System/FreeRTOS/tasks.c **** 	}
2580:System/FreeRTOS/tasks.c **** 
2581:System/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2582:System/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2583:System/FreeRTOS/tasks.c **** 
2584:System/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2585:System/FreeRTOS/tasks.c **** 
2586:System/FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2587:System/FreeRTOS/tasks.c **** 	{
2588:System/FreeRTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2589:System/FreeRTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2590:System/FreeRTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2591:System/FreeRTOS/tasks.c **** 		return xIdleTaskHandle;
2592:System/FreeRTOS/tasks.c **** 	}
2593:System/FreeRTOS/tasks.c **** 
2594:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2595:System/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2596:System/FreeRTOS/tasks.c **** 
2597:System/FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2598:System/FreeRTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2599:System/FreeRTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2600:System/FreeRTOS/tasks.c **** 1. */
2601:System/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2602:System/FreeRTOS/tasks.c **** 
2603:System/FreeRTOS/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2604:System/FreeRTOS/tasks.c **** 	{
2605:System/FreeRTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2606:System/FreeRTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2607:System/FreeRTOS/tasks.c **** 		each stepped tick. */
2608:System/FreeRTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2609:System/FreeRTOS/tasks.c **** 		xTickCount += xTicksToJump;
2610:System/FreeRTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2611:System/FreeRTOS/tasks.c **** 	}
2612:System/FreeRTOS/tasks.c **** 
2613:System/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2614:System/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2615:System/FreeRTOS/tasks.c **** 
2616:System/FreeRTOS/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2617:System/FreeRTOS/tasks.c **** {
2618:System/FreeRTOS/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
2619:System/FreeRTOS/tasks.c **** 
2620:System/FreeRTOS/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2621:System/FreeRTOS/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2622:System/FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
2623:System/FreeRTOS/tasks.c **** 
2624:System/FreeRTOS/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2625:System/FreeRTOS/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2626:System/FreeRTOS/tasks.c **** 	vTaskSuspendAll();
2627:System/FreeRTOS/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
2628:System/FreeRTOS/tasks.c **** 	xYieldRequired = xTaskResumeAll();
2629:System/FreeRTOS/tasks.c **** 
2630:System/FreeRTOS/tasks.c **** 	return xYieldRequired;
2631:System/FreeRTOS/tasks.c **** }
2632:System/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2633:System/FreeRTOS/tasks.c **** 
2634:System/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 53


2635:System/FreeRTOS/tasks.c **** 
2636:System/FreeRTOS/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2637:System/FreeRTOS/tasks.c **** 	{
2638:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB = xTask;
2639:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn;
2640:System/FreeRTOS/tasks.c **** 
2641:System/FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
2642:System/FreeRTOS/tasks.c **** 
2643:System/FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2644:System/FreeRTOS/tasks.c **** 		{
2645:System/FreeRTOS/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2646:System/FreeRTOS/tasks.c **** 			it is actually in the Blocked state. */
2647:System/FreeRTOS/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2648:System/FreeRTOS/tasks.c **** 			{
2649:System/FreeRTOS/tasks.c **** 				xReturn = pdPASS;
2650:System/FreeRTOS/tasks.c **** 
2651:System/FreeRTOS/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2652:System/FreeRTOS/tasks.c **** 				interrupt won't touch the xStateListItem because the
2653:System/FreeRTOS/tasks.c **** 				scheduler is suspended. */
2654:System/FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2655:System/FreeRTOS/tasks.c **** 
2656:System/FreeRTOS/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2657:System/FreeRTOS/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2658:System/FreeRTOS/tasks.c **** 				even though the scheduler is suspended, so a critical section
2659:System/FreeRTOS/tasks.c **** 				is used. */
2660:System/FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
2661:System/FreeRTOS/tasks.c **** 				{
2662:System/FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2663:System/FreeRTOS/tasks.c **** 					{
2664:System/FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2665:System/FreeRTOS/tasks.c **** 
2666:System/FreeRTOS/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2667:System/FreeRTOS/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2668:System/FreeRTOS/tasks.c **** 						then block again. */
2669:System/FreeRTOS/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2670:System/FreeRTOS/tasks.c **** 					}
2671:System/FreeRTOS/tasks.c **** 					else
2672:System/FreeRTOS/tasks.c **** 					{
2673:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2674:System/FreeRTOS/tasks.c **** 					}
2675:System/FreeRTOS/tasks.c **** 				}
2676:System/FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
2677:System/FreeRTOS/tasks.c **** 
2678:System/FreeRTOS/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2679:System/FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2680:System/FreeRTOS/tasks.c **** 
2681:System/FreeRTOS/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2682:System/FreeRTOS/tasks.c **** 				switch if preemption is turned off. */
2683:System/FreeRTOS/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2684:System/FreeRTOS/tasks.c **** 				{
2685:System/FreeRTOS/tasks.c **** 					/* Preemption is on, but a context switch should only be
2686:System/FreeRTOS/tasks.c **** 					performed if the unblocked task has a priority that is
2687:System/FreeRTOS/tasks.c **** 					equal to or higher than the currently executing task. */
2688:System/FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2689:System/FreeRTOS/tasks.c **** 					{
2690:System/FreeRTOS/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2691:System/FreeRTOS/tasks.c **** 						is unsuspended. */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 54


2692:System/FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
2693:System/FreeRTOS/tasks.c **** 					}
2694:System/FreeRTOS/tasks.c **** 					else
2695:System/FreeRTOS/tasks.c **** 					{
2696:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2697:System/FreeRTOS/tasks.c **** 					}
2698:System/FreeRTOS/tasks.c **** 				}
2699:System/FreeRTOS/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2700:System/FreeRTOS/tasks.c **** 			}
2701:System/FreeRTOS/tasks.c **** 			else
2702:System/FreeRTOS/tasks.c **** 			{
2703:System/FreeRTOS/tasks.c **** 				xReturn = pdFAIL;
2704:System/FreeRTOS/tasks.c **** 			}
2705:System/FreeRTOS/tasks.c **** 		}
2706:System/FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2707:System/FreeRTOS/tasks.c **** 
2708:System/FreeRTOS/tasks.c **** 		return xReturn;
2709:System/FreeRTOS/tasks.c **** 	}
2710:System/FreeRTOS/tasks.c **** 
2711:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2712:System/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2713:System/FreeRTOS/tasks.c **** 
2714:System/FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2715:System/FreeRTOS/tasks.c **** {
2716:System/FreeRTOS/tasks.c **** TCB_t * pxTCB;
2717:System/FreeRTOS/tasks.c **** TickType_t xItemValue;
2718:System/FreeRTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2719:System/FreeRTOS/tasks.c **** 
2720:System/FreeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2721:System/FreeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2722:System/FreeRTOS/tasks.c **** 	tasks to be unblocked. */
2723:System/FreeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2724:System/FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2725:System/FreeRTOS/tasks.c **** 	{
2726:System/FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2727:System/FreeRTOS/tasks.c **** 		block. */
2728:System/FreeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2729:System/FreeRTOS/tasks.c **** 
2730:System/FreeRTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2731:System/FreeRTOS/tasks.c **** 		delayed lists if it wraps to 0. */
2732:System/FreeRTOS/tasks.c **** 		xTickCount = xConstTickCount;
2733:System/FreeRTOS/tasks.c **** 
2734:System/FreeRTOS/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2735:System/FreeRTOS/tasks.c **** 		{
2736:System/FreeRTOS/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2737:System/FreeRTOS/tasks.c **** 		}
2738:System/FreeRTOS/tasks.c **** 		else
2739:System/FreeRTOS/tasks.c **** 		{
2740:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2741:System/FreeRTOS/tasks.c **** 		}
2742:System/FreeRTOS/tasks.c **** 
2743:System/FreeRTOS/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2744:System/FreeRTOS/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2745:System/FreeRTOS/tasks.c **** 		has been found whose block time has not expired there is no need to
2746:System/FreeRTOS/tasks.c **** 		look any further down the list. */
2747:System/FreeRTOS/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2748:System/FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 55


2749:System/FreeRTOS/tasks.c **** 			for( ;; )
2750:System/FreeRTOS/tasks.c **** 			{
2751:System/FreeRTOS/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2752:System/FreeRTOS/tasks.c **** 				{
2753:System/FreeRTOS/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2754:System/FreeRTOS/tasks.c **** 					to the maximum possible value so it is extremely
2755:System/FreeRTOS/tasks.c **** 					unlikely that the
2756:System/FreeRTOS/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2757:System/FreeRTOS/tasks.c **** 					next time through. */
2758:System/FreeRTOS/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2759:System/FreeRTOS/tasks.c **** 					break;
2760:System/FreeRTOS/tasks.c **** 				}
2761:System/FreeRTOS/tasks.c **** 				else
2762:System/FreeRTOS/tasks.c **** 				{
2763:System/FreeRTOS/tasks.c **** 					/* The delayed list is not empty, get the value of the
2764:System/FreeRTOS/tasks.c **** 					item at the head of the delayed list.  This is the time
2765:System/FreeRTOS/tasks.c **** 					at which the task at the head of the delayed list must
2766:System/FreeRTOS/tasks.c **** 					be removed from the Blocked state. */
2767:System/FreeRTOS/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2768:System/FreeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2769:System/FreeRTOS/tasks.c **** 
2770:System/FreeRTOS/tasks.c **** 					if( xConstTickCount < xItemValue )
2771:System/FreeRTOS/tasks.c **** 					{
2772:System/FreeRTOS/tasks.c **** 						/* It is not time to unblock this item yet, but the
2773:System/FreeRTOS/tasks.c **** 						item value is the time at which the task at the head
2774:System/FreeRTOS/tasks.c **** 						of the blocked list must be removed from the Blocked
2775:System/FreeRTOS/tasks.c **** 						state -	so record the item value in
2776:System/FreeRTOS/tasks.c **** 						xNextTaskUnblockTime. */
2777:System/FreeRTOS/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2778:System/FreeRTOS/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2779:System/FreeRTOS/tasks.c **** 					}
2780:System/FreeRTOS/tasks.c **** 					else
2781:System/FreeRTOS/tasks.c **** 					{
2782:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2783:System/FreeRTOS/tasks.c **** 					}
2784:System/FreeRTOS/tasks.c **** 
2785:System/FreeRTOS/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2786:System/FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2787:System/FreeRTOS/tasks.c **** 
2788:System/FreeRTOS/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2789:System/FreeRTOS/tasks.c **** 					it from the event list. */
2790:System/FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2791:System/FreeRTOS/tasks.c **** 					{
2792:System/FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2793:System/FreeRTOS/tasks.c **** 					}
2794:System/FreeRTOS/tasks.c **** 					else
2795:System/FreeRTOS/tasks.c **** 					{
2796:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2797:System/FreeRTOS/tasks.c **** 					}
2798:System/FreeRTOS/tasks.c **** 
2799:System/FreeRTOS/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2800:System/FreeRTOS/tasks.c **** 					list. */
2801:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2802:System/FreeRTOS/tasks.c **** 
2803:System/FreeRTOS/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2804:System/FreeRTOS/tasks.c **** 					context switch if preemption is turned off. */
2805:System/FreeRTOS/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 56


2806:System/FreeRTOS/tasks.c **** 					{
2807:System/FreeRTOS/tasks.c **** 						/* Preemption is on, but a context switch should
2808:System/FreeRTOS/tasks.c **** 						only be performed if the unblocked task has a
2809:System/FreeRTOS/tasks.c **** 						priority that is equal to or higher than the
2810:System/FreeRTOS/tasks.c **** 						currently executing task. */
2811:System/FreeRTOS/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2812:System/FreeRTOS/tasks.c **** 						{
2813:System/FreeRTOS/tasks.c **** 							xSwitchRequired = pdTRUE;
2814:System/FreeRTOS/tasks.c **** 						}
2815:System/FreeRTOS/tasks.c **** 						else
2816:System/FreeRTOS/tasks.c **** 						{
2817:System/FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2818:System/FreeRTOS/tasks.c **** 						}
2819:System/FreeRTOS/tasks.c **** 					}
2820:System/FreeRTOS/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2821:System/FreeRTOS/tasks.c **** 				}
2822:System/FreeRTOS/tasks.c **** 			}
2823:System/FreeRTOS/tasks.c **** 		}
2824:System/FreeRTOS/tasks.c **** 
2825:System/FreeRTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2826:System/FreeRTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2827:System/FreeRTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
2828:System/FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2829:System/FreeRTOS/tasks.c **** 		{
2830:System/FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2831:System/FreeRTOS/tasks.c **** 			{
2832:System/FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
2833:System/FreeRTOS/tasks.c **** 			}
2834:System/FreeRTOS/tasks.c **** 			else
2835:System/FreeRTOS/tasks.c **** 			{
2836:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2837:System/FreeRTOS/tasks.c **** 			}
2838:System/FreeRTOS/tasks.c **** 		}
2839:System/FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2840:System/FreeRTOS/tasks.c **** 
2841:System/FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2842:System/FreeRTOS/tasks.c **** 		{
2843:System/FreeRTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2844:System/FreeRTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2845:System/FreeRTOS/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2846:System/FreeRTOS/tasks.c **** 			{
2847:System/FreeRTOS/tasks.c **** 				vApplicationTickHook();
2848:System/FreeRTOS/tasks.c **** 			}
2849:System/FreeRTOS/tasks.c **** 			else
2850:System/FreeRTOS/tasks.c **** 			{
2851:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2852:System/FreeRTOS/tasks.c **** 			}
2853:System/FreeRTOS/tasks.c **** 		}
2854:System/FreeRTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2855:System/FreeRTOS/tasks.c **** 
2856:System/FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2857:System/FreeRTOS/tasks.c **** 		{
2858:System/FreeRTOS/tasks.c **** 			if( xYieldPending != pdFALSE )
2859:System/FreeRTOS/tasks.c **** 			{
2860:System/FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
2861:System/FreeRTOS/tasks.c **** 			}
2862:System/FreeRTOS/tasks.c **** 			else
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 57


2863:System/FreeRTOS/tasks.c **** 			{
2864:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2865:System/FreeRTOS/tasks.c **** 			}
2866:System/FreeRTOS/tasks.c **** 		}
2867:System/FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2868:System/FreeRTOS/tasks.c **** 	}
2869:System/FreeRTOS/tasks.c **** 	else
2870:System/FreeRTOS/tasks.c **** 	{
2871:System/FreeRTOS/tasks.c **** 		++xPendedTicks;
2872:System/FreeRTOS/tasks.c **** 
2873:System/FreeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2874:System/FreeRTOS/tasks.c **** 		scheduler is locked. */
2875:System/FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2876:System/FreeRTOS/tasks.c **** 		{
2877:System/FreeRTOS/tasks.c **** 			vApplicationTickHook();
2878:System/FreeRTOS/tasks.c **** 		}
2879:System/FreeRTOS/tasks.c **** 		#endif
2880:System/FreeRTOS/tasks.c **** 	}
2881:System/FreeRTOS/tasks.c **** 
2882:System/FreeRTOS/tasks.c **** 	return xSwitchRequired;
2883:System/FreeRTOS/tasks.c **** }
2884:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2885:System/FreeRTOS/tasks.c **** 
2886:System/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2887:System/FreeRTOS/tasks.c **** 
2888:System/FreeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2889:System/FreeRTOS/tasks.c **** 	{
2890:System/FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2891:System/FreeRTOS/tasks.c **** 
2892:System/FreeRTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2893:System/FreeRTOS/tasks.c **** 		getting set. */
2894:System/FreeRTOS/tasks.c **** 		if( xTask == NULL )
2895:System/FreeRTOS/tasks.c **** 		{
2896:System/FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2897:System/FreeRTOS/tasks.c **** 		}
2898:System/FreeRTOS/tasks.c **** 		else
2899:System/FreeRTOS/tasks.c **** 		{
2900:System/FreeRTOS/tasks.c **** 			xTCB = xTask;
2901:System/FreeRTOS/tasks.c **** 		}
2902:System/FreeRTOS/tasks.c **** 
2903:System/FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2904:System/FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2905:System/FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2906:System/FreeRTOS/tasks.c **** 		{
2907:System/FreeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2908:System/FreeRTOS/tasks.c **** 		}
2909:System/FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2910:System/FreeRTOS/tasks.c **** 	}
2911:System/FreeRTOS/tasks.c **** 
2912:System/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2913:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2914:System/FreeRTOS/tasks.c **** 
2915:System/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2916:System/FreeRTOS/tasks.c **** 
2917:System/FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2918:System/FreeRTOS/tasks.c **** 	{
2919:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 58


2920:System/FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2921:System/FreeRTOS/tasks.c **** 
2922:System/FreeRTOS/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2923:System/FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2924:System/FreeRTOS/tasks.c **** 
2925:System/FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2926:System/FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2927:System/FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2928:System/FreeRTOS/tasks.c **** 		{
2929:System/FreeRTOS/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2930:System/FreeRTOS/tasks.c **** 		}
2931:System/FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2932:System/FreeRTOS/tasks.c **** 
2933:System/FreeRTOS/tasks.c **** 		return xReturn;
2934:System/FreeRTOS/tasks.c **** 	}
2935:System/FreeRTOS/tasks.c **** 
2936:System/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2937:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2938:System/FreeRTOS/tasks.c **** 
2939:System/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2940:System/FreeRTOS/tasks.c **** 
2941:System/FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2942:System/FreeRTOS/tasks.c **** 	{
2943:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2944:System/FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2945:System/FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2946:System/FreeRTOS/tasks.c **** 
2947:System/FreeRTOS/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2948:System/FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2949:System/FreeRTOS/tasks.c **** 
2950:System/FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2951:System/FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2952:System/FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2953:System/FreeRTOS/tasks.c **** 		{
2954:System/FreeRTOS/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2955:System/FreeRTOS/tasks.c **** 		}
2956:System/FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2957:System/FreeRTOS/tasks.c **** 
2958:System/FreeRTOS/tasks.c **** 		return xReturn;
2959:System/FreeRTOS/tasks.c **** 	}
2960:System/FreeRTOS/tasks.c **** 
2961:System/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2962:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2963:System/FreeRTOS/tasks.c **** 
2964:System/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2965:System/FreeRTOS/tasks.c **** 
2966:System/FreeRTOS/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2967:System/FreeRTOS/tasks.c **** 	{
2968:System/FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2969:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn;
2970:System/FreeRTOS/tasks.c **** 
2971:System/FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2972:System/FreeRTOS/tasks.c **** 		if( xTask == NULL )
2973:System/FreeRTOS/tasks.c **** 		{
2974:System/FreeRTOS/tasks.c **** 			xTCB = pxCurrentTCB;
2975:System/FreeRTOS/tasks.c **** 		}
2976:System/FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 59


2977:System/FreeRTOS/tasks.c **** 		{
2978:System/FreeRTOS/tasks.c **** 			xTCB = xTask;
2979:System/FreeRTOS/tasks.c **** 		}
2980:System/FreeRTOS/tasks.c **** 
2981:System/FreeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2982:System/FreeRTOS/tasks.c **** 		{
2983:System/FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2984:System/FreeRTOS/tasks.c **** 		}
2985:System/FreeRTOS/tasks.c **** 		else
2986:System/FreeRTOS/tasks.c **** 		{
2987:System/FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
2988:System/FreeRTOS/tasks.c **** 		}
2989:System/FreeRTOS/tasks.c **** 
2990:System/FreeRTOS/tasks.c **** 		return xReturn;
2991:System/FreeRTOS/tasks.c **** 	}
2992:System/FreeRTOS/tasks.c **** 
2993:System/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2994:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2995:System/FreeRTOS/tasks.c **** 
2996:System/FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
2997:System/FreeRTOS/tasks.c **** {
2998:System/FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2999:System/FreeRTOS/tasks.c **** 	{
3000:System/FreeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
3001:System/FreeRTOS/tasks.c **** 		switch. */
3002:System/FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
3003:System/FreeRTOS/tasks.c **** 	}
3004:System/FreeRTOS/tasks.c **** 	else
3005:System/FreeRTOS/tasks.c **** 	{
3006:System/FreeRTOS/tasks.c **** 		xYieldPending = pdFALSE;
3007:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
3008:System/FreeRTOS/tasks.c **** 
3009:System/FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3010:System/FreeRTOS/tasks.c **** 		{
3011:System/FreeRTOS/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3012:System/FreeRTOS/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3013:System/FreeRTOS/tasks.c **** 			#else
3014:System/FreeRTOS/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3015:System/FreeRTOS/tasks.c **** 			#endif
3016:System/FreeRTOS/tasks.c **** 
3017:System/FreeRTOS/tasks.c **** 			/* Add the amount of time the task has been running to the
3018:System/FreeRTOS/tasks.c **** 			accumulated time so far.  The time the task started running was
3019:System/FreeRTOS/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3020:System/FreeRTOS/tasks.c **** 			protection here so count values are only valid until the timer
3021:System/FreeRTOS/tasks.c **** 			overflows.  The guard against negative values is to protect
3022:System/FreeRTOS/tasks.c **** 			against suspect run time stat counter implementations - which
3023:System/FreeRTOS/tasks.c **** 			are provided by the application, not the kernel. */
3024:System/FreeRTOS/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3025:System/FreeRTOS/tasks.c **** 			{
3026:System/FreeRTOS/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3027:System/FreeRTOS/tasks.c **** 			}
3028:System/FreeRTOS/tasks.c **** 			else
3029:System/FreeRTOS/tasks.c **** 			{
3030:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3031:System/FreeRTOS/tasks.c **** 			}
3032:System/FreeRTOS/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3033:System/FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 60


3034:System/FreeRTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3035:System/FreeRTOS/tasks.c **** 
3036:System/FreeRTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
3037:System/FreeRTOS/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3038:System/FreeRTOS/tasks.c **** 
3039:System/FreeRTOS/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3040:System/FreeRTOS/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3041:System/FreeRTOS/tasks.c **** 		{
3042:System/FreeRTOS/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3043:System/FreeRTOS/tasks.c **** 		}
3044:System/FreeRTOS/tasks.c **** 		#endif
3045:System/FreeRTOS/tasks.c **** 
3046:System/FreeRTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
3047:System/FreeRTOS/tasks.c **** 		optimised asm code. */
3048:System/FreeRTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3049:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
3050:System/FreeRTOS/tasks.c **** 
3051:System/FreeRTOS/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3052:System/FreeRTOS/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3053:System/FreeRTOS/tasks.c **** 		{
3054:System/FreeRTOS/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3055:System/FreeRTOS/tasks.c **** 		}
3056:System/FreeRTOS/tasks.c **** 		#endif
3057:System/FreeRTOS/tasks.c **** 
3058:System/FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3059:System/FreeRTOS/tasks.c **** 		{
3060:System/FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3061:System/FreeRTOS/tasks.c **** 			structure specific to this task.
3062:System/FreeRTOS/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3063:System/FreeRTOS/tasks.c **** 			for additional information. */
3064:System/FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3065:System/FreeRTOS/tasks.c **** 		}
3066:System/FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3067:System/FreeRTOS/tasks.c **** 	}
3068:System/FreeRTOS/tasks.c **** }
3069:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3070:System/FreeRTOS/tasks.c **** 
3071:System/FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3072:System/FreeRTOS/tasks.c **** {
3073:System/FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
3074:System/FreeRTOS/tasks.c **** 
3075:System/FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3076:System/FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3077:System/FreeRTOS/tasks.c **** 
3078:System/FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3079:System/FreeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3080:System/FreeRTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3081:System/FreeRTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3082:System/FreeRTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3083:System/FreeRTOS/tasks.c **** 
3084:System/FreeRTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3085:System/FreeRTOS/tasks.c **** }
3086:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3087:System/FreeRTOS/tasks.c **** 
3088:System/FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3089:System/FreeRTOS/tasks.c **** {
3090:System/FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 61


3091:System/FreeRTOS/tasks.c **** 
3092:System/FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3093:System/FreeRTOS/tasks.c **** 	the event groups implementation. */
3094:System/FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3095:System/FreeRTOS/tasks.c **** 
3096:System/FreeRTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3097:System/FreeRTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3098:System/FreeRTOS/tasks.c **** 	task that is not in the Blocked state. */
3099:System/FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3100:System/FreeRTOS/tasks.c **** 
3101:System/FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3102:System/FreeRTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3103:System/FreeRTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
3104:System/FreeRTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3105:System/FreeRTOS/tasks.c **** 	the task level). */
3106:System/FreeRTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3107:System/FreeRTOS/tasks.c **** 
3108:System/FreeRTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3109:System/FreeRTOS/tasks.c **** }
3110:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3111:System/FreeRTOS/tasks.c **** 
3112:System/FreeRTOS/tasks.c **** #if( configUSE_TIMERS == 1 )
3113:System/FreeRTOS/tasks.c **** 
3114:System/FreeRTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3115:System/FreeRTOS/tasks.c **** 	{
3116:System/FreeRTOS/tasks.c **** 		configASSERT( pxEventList );
3117:System/FreeRTOS/tasks.c **** 
3118:System/FreeRTOS/tasks.c **** 		/* This function should not be called by application code hence the
3119:System/FreeRTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3120:System/FreeRTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3121:System/FreeRTOS/tasks.c **** 		it should be called with the scheduler suspended. */
3122:System/FreeRTOS/tasks.c **** 
3123:System/FreeRTOS/tasks.c **** 
3124:System/FreeRTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3125:System/FreeRTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
3126:System/FreeRTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3127:System/FreeRTOS/tasks.c **** 		can be used in place of vListInsert. */
3128:System/FreeRTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3129:System/FreeRTOS/tasks.c **** 
3130:System/FreeRTOS/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3131:System/FreeRTOS/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3132:System/FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3133:System/FreeRTOS/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3134:System/FreeRTOS/tasks.c **** 		{
3135:System/FreeRTOS/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3136:System/FreeRTOS/tasks.c **** 		}
3137:System/FreeRTOS/tasks.c **** 
3138:System/FreeRTOS/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3139:System/FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3140:System/FreeRTOS/tasks.c **** 	}
3141:System/FreeRTOS/tasks.c **** 
3142:System/FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
3143:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3144:System/FreeRTOS/tasks.c **** 
3145:System/FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3146:System/FreeRTOS/tasks.c **** {
3147:System/FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 62


3148:System/FreeRTOS/tasks.c **** BaseType_t xReturn;
3149:System/FreeRTOS/tasks.c **** 
3150:System/FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3151:System/FreeRTOS/tasks.c **** 	called from a critical section within an ISR. */
3152:System/FreeRTOS/tasks.c **** 
3153:System/FreeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3154:System/FreeRTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3155:System/FreeRTOS/tasks.c **** 	the delayed list, and add it to the ready list.
3156:System/FreeRTOS/tasks.c **** 
3157:System/FreeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
3158:System/FreeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3159:System/FreeRTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3160:System/FreeRTOS/tasks.c **** 
3161:System/FreeRTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
3162:System/FreeRTOS/tasks.c **** 	pxEventList is not empty. */
3163:System/FreeRTOS/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3164:System/FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
3165:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3166:System/FreeRTOS/tasks.c **** 
3167:System/FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3168:System/FreeRTOS/tasks.c **** 	{
3169:System/FreeRTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3170:System/FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3171:System/FreeRTOS/tasks.c **** 
3172:System/FreeRTOS/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3173:System/FreeRTOS/tasks.c **** 		{
3174:System/FreeRTOS/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3175:System/FreeRTOS/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3176:System/FreeRTOS/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3177:System/FreeRTOS/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3178:System/FreeRTOS/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3179:System/FreeRTOS/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3180:System/FreeRTOS/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3181:System/FreeRTOS/tasks.c **** 			ensure it is updated at the earliest possible time. */
3182:System/FreeRTOS/tasks.c **** 			prvResetNextTaskUnblockTime();
3183:System/FreeRTOS/tasks.c **** 		}
3184:System/FreeRTOS/tasks.c **** 		#endif
3185:System/FreeRTOS/tasks.c **** 	}
3186:System/FreeRTOS/tasks.c **** 	else
3187:System/FreeRTOS/tasks.c **** 	{
3188:System/FreeRTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3189:System/FreeRTOS/tasks.c **** 		pending until the scheduler is resumed. */
3190:System/FreeRTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3191:System/FreeRTOS/tasks.c **** 	}
3192:System/FreeRTOS/tasks.c **** 
3193:System/FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3194:System/FreeRTOS/tasks.c **** 	{
3195:System/FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3196:System/FreeRTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3197:System/FreeRTOS/tasks.c **** 		it should force a context switch now. */
3198:System/FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
3199:System/FreeRTOS/tasks.c **** 
3200:System/FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3201:System/FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3202:System/FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
3203:System/FreeRTOS/tasks.c **** 	}
3204:System/FreeRTOS/tasks.c **** 	else
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 63


3205:System/FreeRTOS/tasks.c **** 	{
3206:System/FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
3207:System/FreeRTOS/tasks.c **** 	}
3208:System/FreeRTOS/tasks.c **** 
3209:System/FreeRTOS/tasks.c **** 	return xReturn;
3210:System/FreeRTOS/tasks.c **** }
3211:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3212:System/FreeRTOS/tasks.c **** 
3213:System/FreeRTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3214:System/FreeRTOS/tasks.c **** {
3215:System/FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
3216:System/FreeRTOS/tasks.c **** 
3217:System/FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3218:System/FreeRTOS/tasks.c **** 	the event flags implementation. */
3219:System/FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3220:System/FreeRTOS/tasks.c **** 
3221:System/FreeRTOS/tasks.c **** 	/* Store the new item value in the event list. */
3222:System/FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3223:System/FreeRTOS/tasks.c **** 
3224:System/FreeRTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3225:System/FreeRTOS/tasks.c **** 	event flags. */
3226:System/FreeRTOS/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3227:System/FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
3228:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3229:System/FreeRTOS/tasks.c **** 
3230:System/FreeRTOS/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3231:System/FreeRTOS/tasks.c **** 	{
3232:System/FreeRTOS/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3233:System/FreeRTOS/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3234:System/FreeRTOS/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3235:System/FreeRTOS/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3236:System/FreeRTOS/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3237:System/FreeRTOS/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3238:System/FreeRTOS/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3239:System/FreeRTOS/tasks.c **** 		ensure it is updated at the earliest possible time. */
3240:System/FreeRTOS/tasks.c **** 		prvResetNextTaskUnblockTime();
3241:System/FreeRTOS/tasks.c **** 	}
3242:System/FreeRTOS/tasks.c **** 	#endif
3243:System/FreeRTOS/tasks.c **** 
3244:System/FreeRTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3245:System/FreeRTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3246:System/FreeRTOS/tasks.c **** 	lists. */
3247:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3248:System/FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3249:System/FreeRTOS/tasks.c **** 
3250:System/FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3251:System/FreeRTOS/tasks.c **** 	{
3252:System/FreeRTOS/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3253:System/FreeRTOS/tasks.c **** 		a context switch is required.  This function is called with the
3254:System/FreeRTOS/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3255:System/FreeRTOS/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3256:System/FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
3257:System/FreeRTOS/tasks.c **** 	}
3258:System/FreeRTOS/tasks.c **** }
3259:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3260:System/FreeRTOS/tasks.c **** 
3261:System/FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 64


3262:System/FreeRTOS/tasks.c **** {
3263:System/FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
3264:System/FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
3265:System/FreeRTOS/tasks.c **** 	{
3266:System/FreeRTOS/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3267:System/FreeRTOS/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3268:System/FreeRTOS/tasks.c **** 	}
3269:System/FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
3270:System/FreeRTOS/tasks.c **** }
3271:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3272:System/FreeRTOS/tasks.c **** 
3273:System/FreeRTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3274:System/FreeRTOS/tasks.c **** {
3275:System/FreeRTOS/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3276:System/FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3277:System/FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3278:System/FreeRTOS/tasks.c **** }
3279:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3280:System/FreeRTOS/tasks.c **** 
3281:System/FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3282:System/FreeRTOS/tasks.c **** {
3283:System/FreeRTOS/tasks.c **** BaseType_t xReturn;
3284:System/FreeRTOS/tasks.c **** 
3285:System/FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
3286:System/FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
3287:System/FreeRTOS/tasks.c **** 
3288:System/FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
3289:System/FreeRTOS/tasks.c **** 	{
3290:System/FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3291:System/FreeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3292:System/FreeRTOS/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3293:System/FreeRTOS/tasks.c **** 
3294:System/FreeRTOS/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3295:System/FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3296:System/FreeRTOS/tasks.c **** 			{
3297:System/FreeRTOS/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3298:System/FreeRTOS/tasks.c **** 				but has the same result. */
3299:System/FreeRTOS/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3300:System/FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
3301:System/FreeRTOS/tasks.c **** 			}
3302:System/FreeRTOS/tasks.c **** 			else
3303:System/FreeRTOS/tasks.c **** 		#endif
3304:System/FreeRTOS/tasks.c **** 
3305:System/FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3306:System/FreeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3307:System/FreeRTOS/tasks.c **** 			{
3308:System/FreeRTOS/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3309:System/FreeRTOS/tasks.c **** 				specified is the maximum block time then the task should block
3310:System/FreeRTOS/tasks.c **** 				indefinitely, and therefore never time out. */
3311:System/FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
3312:System/FreeRTOS/tasks.c **** 			}
3313:System/FreeRTOS/tasks.c **** 			else
3314:System/FreeRTOS/tasks.c **** 		#endif
3315:System/FreeRTOS/tasks.c **** 
3316:System/FreeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3317:System/FreeRTOS/tasks.c **** 		{
3318:System/FreeRTOS/tasks.c **** 			/* The tick count is greater than the time at which
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 65


3319:System/FreeRTOS/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3320:System/FreeRTOS/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3321:System/FreeRTOS/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3322:System/FreeRTOS/tasks.c **** 			was called. */
3323:System/FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
3324:System/FreeRTOS/tasks.c **** 		}
3325:System/FreeRTOS/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3326:System/FreeRTOS/tasks.c **** 		{
3327:System/FreeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3328:System/FreeRTOS/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3329:System/FreeRTOS/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3330:System/FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
3331:System/FreeRTOS/tasks.c **** 		}
3332:System/FreeRTOS/tasks.c **** 		else
3333:System/FreeRTOS/tasks.c **** 		{
3334:System/FreeRTOS/tasks.c **** 			*pxTicksToWait = 0;
3335:System/FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
3336:System/FreeRTOS/tasks.c **** 		}
3337:System/FreeRTOS/tasks.c **** 	}
3338:System/FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
3339:System/FreeRTOS/tasks.c **** 
3340:System/FreeRTOS/tasks.c **** 	return xReturn;
3341:System/FreeRTOS/tasks.c **** }
3342:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3343:System/FreeRTOS/tasks.c **** 
3344:System/FreeRTOS/tasks.c **** void vTaskMissedYield( void )
3345:System/FreeRTOS/tasks.c **** {
3346:System/FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
3347:System/FreeRTOS/tasks.c **** }
3348:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3349:System/FreeRTOS/tasks.c **** 
3350:System/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3351:System/FreeRTOS/tasks.c **** 
3352:System/FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3353:System/FreeRTOS/tasks.c **** 	{
3354:System/FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3355:System/FreeRTOS/tasks.c **** 	TCB_t const *pxTCB;
3356:System/FreeRTOS/tasks.c **** 
3357:System/FreeRTOS/tasks.c **** 		if( xTask != NULL )
3358:System/FreeRTOS/tasks.c **** 		{
3359:System/FreeRTOS/tasks.c **** 			pxTCB = xTask;
3360:System/FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3361:System/FreeRTOS/tasks.c **** 		}
3362:System/FreeRTOS/tasks.c **** 		else
3363:System/FreeRTOS/tasks.c **** 		{
3364:System/FreeRTOS/tasks.c **** 			uxReturn = 0U;
3365:System/FreeRTOS/tasks.c **** 		}
3366:System/FreeRTOS/tasks.c **** 
3367:System/FreeRTOS/tasks.c **** 		return uxReturn;
3368:System/FreeRTOS/tasks.c **** 	}
3369:System/FreeRTOS/tasks.c **** 
3370:System/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3371:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3372:System/FreeRTOS/tasks.c **** 
3373:System/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3374:System/FreeRTOS/tasks.c **** 
3375:System/FreeRTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 66


3376:System/FreeRTOS/tasks.c **** 	{
3377:System/FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
3378:System/FreeRTOS/tasks.c **** 
3379:System/FreeRTOS/tasks.c **** 		if( xTask != NULL )
3380:System/FreeRTOS/tasks.c **** 		{
3381:System/FreeRTOS/tasks.c **** 			pxTCB = xTask;
3382:System/FreeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3383:System/FreeRTOS/tasks.c **** 		}
3384:System/FreeRTOS/tasks.c **** 	}
3385:System/FreeRTOS/tasks.c **** 
3386:System/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3387:System/FreeRTOS/tasks.c **** 
3388:System/FreeRTOS/tasks.c **** /*
3389:System/FreeRTOS/tasks.c ****  * -----------------------------------------------------------
3390:System/FreeRTOS/tasks.c ****  * The Idle task.
3391:System/FreeRTOS/tasks.c ****  * ----------------------------------------------------------
3392:System/FreeRTOS/tasks.c ****  *
3393:System/FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3394:System/FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3395:System/FreeRTOS/tasks.c ****  *
3396:System/FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3397:System/FreeRTOS/tasks.c ****  *
3398:System/FreeRTOS/tasks.c ****  */
3399:System/FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3400:System/FreeRTOS/tasks.c **** {
3401:System/FreeRTOS/tasks.c **** 	/* Stop warnings. */
3402:System/FreeRTOS/tasks.c **** 	( void ) pvParameters;
3403:System/FreeRTOS/tasks.c **** 
3404:System/FreeRTOS/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3405:System/FreeRTOS/tasks.c **** 	SCHEDULER IS STARTED. **/
3406:System/FreeRTOS/tasks.c **** 
3407:System/FreeRTOS/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3408:System/FreeRTOS/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3409:System/FreeRTOS/tasks.c **** 	any. */
3410:System/FreeRTOS/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3411:System/FreeRTOS/tasks.c **** 
3412:System/FreeRTOS/tasks.c **** 	for( ;; )
3413:System/FreeRTOS/tasks.c **** 	{
3414:System/FreeRTOS/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3415:System/FreeRTOS/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3416:System/FreeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
3417:System/FreeRTOS/tasks.c **** 
3418:System/FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3419:System/FreeRTOS/tasks.c **** 		{
3420:System/FreeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3421:System/FreeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
3422:System/FreeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
3423:System/FreeRTOS/tasks.c **** 			will automatically get the processor anyway. */
3424:System/FreeRTOS/tasks.c **** 			taskYIELD();
3425:System/FreeRTOS/tasks.c **** 		}
3426:System/FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3427:System/FreeRTOS/tasks.c **** 
3428:System/FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3429:System/FreeRTOS/tasks.c **** 		{
3430:System/FreeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
3431:System/FreeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3432:System/FreeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 67


3433:System/FreeRTOS/tasks.c **** 			timeslice.
3434:System/FreeRTOS/tasks.c **** 
3435:System/FreeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
3436:System/FreeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3437:System/FreeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
3438:System/FreeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
3439:System/FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3440:System/FreeRTOS/tasks.c **** 			{
3441:System/FreeRTOS/tasks.c **** 				taskYIELD();
3442:System/FreeRTOS/tasks.c **** 			}
3443:System/FreeRTOS/tasks.c **** 			else
3444:System/FreeRTOS/tasks.c **** 			{
3445:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3446:System/FreeRTOS/tasks.c **** 			}
3447:System/FreeRTOS/tasks.c **** 		}
3448:System/FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3449:System/FreeRTOS/tasks.c **** 
3450:System/FreeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3451:System/FreeRTOS/tasks.c **** 		{
3452:System/FreeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
3453:System/FreeRTOS/tasks.c **** 
3454:System/FreeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3455:System/FreeRTOS/tasks.c **** 			allows the application designer to add background functionality
3456:System/FreeRTOS/tasks.c **** 			without the overhead of a separate task.
3457:System/FreeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3458:System/FreeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3459:System/FreeRTOS/tasks.c **** 			vApplicationIdleHook();
3460:System/FreeRTOS/tasks.c **** 		}
3461:System/FreeRTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3462:System/FreeRTOS/tasks.c **** 
3463:System/FreeRTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3464:System/FreeRTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3465:System/FreeRTOS/tasks.c **** 		user defined low power mode	implementations require
3466:System/FreeRTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3467:System/FreeRTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3468:System/FreeRTOS/tasks.c **** 		{
3469:System/FreeRTOS/tasks.c **** 		TickType_t xExpectedIdleTime;
3470:System/FreeRTOS/tasks.c **** 
3471:System/FreeRTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3472:System/FreeRTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3473:System/FreeRTOS/tasks.c **** 			test of the expected idle time is performed without the
3474:System/FreeRTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3475:System/FreeRTOS/tasks.c **** 			valid. */
3476:System/FreeRTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3477:System/FreeRTOS/tasks.c **** 
3478:System/FreeRTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3479:System/FreeRTOS/tasks.c **** 			{
3480:System/FreeRTOS/tasks.c **** 				vTaskSuspendAll();
3481:System/FreeRTOS/tasks.c **** 				{
3482:System/FreeRTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3483:System/FreeRTOS/tasks.c **** 					time can be sampled again, and this time its value can
3484:System/FreeRTOS/tasks.c **** 					be used. */
3485:System/FreeRTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3486:System/FreeRTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3487:System/FreeRTOS/tasks.c **** 
3488:System/FreeRTOS/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3489:System/FreeRTOS/tasks.c **** 					if the application does not want
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 68


3490:System/FreeRTOS/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3491:System/FreeRTOS/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3492:System/FreeRTOS/tasks.c **** 
3493:System/FreeRTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3494:System/FreeRTOS/tasks.c **** 					{
3495:System/FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3496:System/FreeRTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3497:System/FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
3498:System/FreeRTOS/tasks.c **** 					}
3499:System/FreeRTOS/tasks.c **** 					else
3500:System/FreeRTOS/tasks.c **** 					{
3501:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3502:System/FreeRTOS/tasks.c **** 					}
3503:System/FreeRTOS/tasks.c **** 				}
3504:System/FreeRTOS/tasks.c **** 				( void ) xTaskResumeAll();
3505:System/FreeRTOS/tasks.c **** 			}
3506:System/FreeRTOS/tasks.c **** 			else
3507:System/FreeRTOS/tasks.c **** 			{
3508:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3509:System/FreeRTOS/tasks.c **** 			}
3510:System/FreeRTOS/tasks.c **** 		}
3511:System/FreeRTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3512:System/FreeRTOS/tasks.c **** 	}
3513:System/FreeRTOS/tasks.c **** }
3514:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3515:System/FreeRTOS/tasks.c **** 
3516:System/FreeRTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3517:System/FreeRTOS/tasks.c **** 
3518:System/FreeRTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3519:System/FreeRTOS/tasks.c **** 	{
3520:System/FreeRTOS/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3521:System/FreeRTOS/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3522:System/FreeRTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3523:System/FreeRTOS/tasks.c **** 
3524:System/FreeRTOS/tasks.c **** 		/* This function must be called from a critical section. */
3525:System/FreeRTOS/tasks.c **** 
3526:System/FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3527:System/FreeRTOS/tasks.c **** 		{
3528:System/FreeRTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3529:System/FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
3530:System/FreeRTOS/tasks.c **** 		}
3531:System/FreeRTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
3532:System/FreeRTOS/tasks.c **** 		{
3533:System/FreeRTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3534:System/FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
3535:System/FreeRTOS/tasks.c **** 		}
3536:System/FreeRTOS/tasks.c **** 		else
3537:System/FreeRTOS/tasks.c **** 		{
3538:System/FreeRTOS/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3539:System/FreeRTOS/tasks.c **** 			have an infinite block time rather than actually being suspended)
3540:System/FreeRTOS/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3541:System/FreeRTOS/tasks.c **** 			interrupts. */
3542:System/FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3543:System/FreeRTOS/tasks.c **** 			{
3544:System/FreeRTOS/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3545:System/FreeRTOS/tasks.c **** 			}
3546:System/FreeRTOS/tasks.c **** 			else
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 69


3547:System/FreeRTOS/tasks.c **** 			{
3548:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3549:System/FreeRTOS/tasks.c **** 			}
3550:System/FreeRTOS/tasks.c **** 		}
3551:System/FreeRTOS/tasks.c **** 
3552:System/FreeRTOS/tasks.c **** 		return eReturn;
3553:System/FreeRTOS/tasks.c **** 	}
3554:System/FreeRTOS/tasks.c **** 
3555:System/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3556:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3557:System/FreeRTOS/tasks.c **** 
3558:System/FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3559:System/FreeRTOS/tasks.c **** 
3560:System/FreeRTOS/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3561:System/FreeRTOS/tasks.c **** 	{
3562:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3563:System/FreeRTOS/tasks.c **** 
3564:System/FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3565:System/FreeRTOS/tasks.c **** 		{
3566:System/FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3567:System/FreeRTOS/tasks.c **** 			configASSERT( pxTCB != NULL );
3568:System/FreeRTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3569:System/FreeRTOS/tasks.c **** 		}
3570:System/FreeRTOS/tasks.c **** 	}
3571:System/FreeRTOS/tasks.c **** 
3572:System/FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3573:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3574:System/FreeRTOS/tasks.c **** 
3575:System/FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3576:System/FreeRTOS/tasks.c **** 
3577:System/FreeRTOS/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3578:System/FreeRTOS/tasks.c **** 	{
3579:System/FreeRTOS/tasks.c **** 	void *pvReturn = NULL;
3580:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3581:System/FreeRTOS/tasks.c **** 
3582:System/FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3583:System/FreeRTOS/tasks.c **** 		{
3584:System/FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3585:System/FreeRTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3586:System/FreeRTOS/tasks.c **** 		}
3587:System/FreeRTOS/tasks.c **** 		else
3588:System/FreeRTOS/tasks.c **** 		{
3589:System/FreeRTOS/tasks.c **** 			pvReturn = NULL;
3590:System/FreeRTOS/tasks.c **** 		}
3591:System/FreeRTOS/tasks.c **** 
3592:System/FreeRTOS/tasks.c **** 		return pvReturn;
3593:System/FreeRTOS/tasks.c **** 	}
3594:System/FreeRTOS/tasks.c **** 
3595:System/FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3596:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3597:System/FreeRTOS/tasks.c **** 
3598:System/FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3599:System/FreeRTOS/tasks.c **** 
3600:System/FreeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3601:System/FreeRTOS/tasks.c **** 	{
3602:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3603:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 70


3604:System/FreeRTOS/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3605:System/FreeRTOS/tasks.c **** 		the calling task. */
3606:System/FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3607:System/FreeRTOS/tasks.c **** 
3608:System/FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3609:System/FreeRTOS/tasks.c **** 	}
3610:System/FreeRTOS/tasks.c **** 
3611:System/FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3612:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3613:System/FreeRTOS/tasks.c **** 
3614:System/FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3615:System/FreeRTOS/tasks.c **** {
3616:System/FreeRTOS/tasks.c **** UBaseType_t uxPriority;
3617:System/FreeRTOS/tasks.c **** 
3618:System/FreeRTOS/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3619:System/FreeRTOS/tasks.c **** 	{
3620:System/FreeRTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3621:System/FreeRTOS/tasks.c **** 	}
3622:System/FreeRTOS/tasks.c **** 
3623:System/FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3624:System/FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3625:System/FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
3626:System/FreeRTOS/tasks.c **** 
3627:System/FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3628:System/FreeRTOS/tasks.c **** 	{
3629:System/FreeRTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3630:System/FreeRTOS/tasks.c **** 	}
3631:System/FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3632:System/FreeRTOS/tasks.c **** 
3633:System/FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3634:System/FreeRTOS/tasks.c **** 	{
3635:System/FreeRTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3636:System/FreeRTOS/tasks.c **** 	}
3637:System/FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3638:System/FreeRTOS/tasks.c **** 
3639:System/FreeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3640:System/FreeRTOS/tasks.c **** 	using list2. */
3641:System/FreeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3642:System/FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3643:System/FreeRTOS/tasks.c **** }
3644:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3645:System/FreeRTOS/tasks.c **** 
3646:System/FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3647:System/FreeRTOS/tasks.c **** {
3648:System/FreeRTOS/tasks.c **** 
3649:System/FreeRTOS/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3650:System/FreeRTOS/tasks.c **** 
3651:System/FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3652:System/FreeRTOS/tasks.c **** 	{
3653:System/FreeRTOS/tasks.c **** 		TCB_t *pxTCB;
3654:System/FreeRTOS/tasks.c **** 
3655:System/FreeRTOS/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3656:System/FreeRTOS/tasks.c **** 		being called too often in the idle task. */
3657:System/FreeRTOS/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3658:System/FreeRTOS/tasks.c **** 		{
3659:System/FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
3660:System/FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 71


3661:System/FreeRTOS/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3662:System/FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3663:System/FreeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
3664:System/FreeRTOS/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3665:System/FreeRTOS/tasks.c **** 			}
3666:System/FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
3667:System/FreeRTOS/tasks.c **** 
3668:System/FreeRTOS/tasks.c **** 			prvDeleteTCB( pxTCB );
3669:System/FreeRTOS/tasks.c **** 		}
3670:System/FreeRTOS/tasks.c **** 	}
3671:System/FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3672:System/FreeRTOS/tasks.c **** }
3673:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3674:System/FreeRTOS/tasks.c **** 
3675:System/FreeRTOS/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3676:System/FreeRTOS/tasks.c **** 
3677:System/FreeRTOS/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3678:System/FreeRTOS/tasks.c **** 	{
3679:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3680:System/FreeRTOS/tasks.c **** 
3681:System/FreeRTOS/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3682:System/FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3683:System/FreeRTOS/tasks.c **** 
3684:System/FreeRTOS/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3685:System/FreeRTOS/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3686:System/FreeRTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3687:System/FreeRTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3688:System/FreeRTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3689:System/FreeRTOS/tasks.c **** 
3690:System/FreeRTOS/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3691:System/FreeRTOS/tasks.c **** 		{
3692:System/FreeRTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3693:System/FreeRTOS/tasks.c **** 		}
3694:System/FreeRTOS/tasks.c **** 		#else
3695:System/FreeRTOS/tasks.c **** 		{
3696:System/FreeRTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3697:System/FreeRTOS/tasks.c **** 		}
3698:System/FreeRTOS/tasks.c **** 		#endif
3699:System/FreeRTOS/tasks.c **** 
3700:System/FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3701:System/FreeRTOS/tasks.c **** 		{
3702:System/FreeRTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3703:System/FreeRTOS/tasks.c **** 		}
3704:System/FreeRTOS/tasks.c **** 		#else
3705:System/FreeRTOS/tasks.c **** 		{
3706:System/FreeRTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3707:System/FreeRTOS/tasks.c **** 		}
3708:System/FreeRTOS/tasks.c **** 		#endif
3709:System/FreeRTOS/tasks.c **** 
3710:System/FreeRTOS/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3711:System/FreeRTOS/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3712:System/FreeRTOS/tasks.c **** 		state is just set to whatever is passed in. */
3713:System/FreeRTOS/tasks.c **** 		if( eState != eInvalid )
3714:System/FreeRTOS/tasks.c **** 		{
3715:System/FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3716:System/FreeRTOS/tasks.c **** 			{
3717:System/FreeRTOS/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 72


3718:System/FreeRTOS/tasks.c **** 			}
3719:System/FreeRTOS/tasks.c **** 			else
3720:System/FreeRTOS/tasks.c **** 			{
3721:System/FreeRTOS/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3722:System/FreeRTOS/tasks.c **** 
3723:System/FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3724:System/FreeRTOS/tasks.c **** 				{
3725:System/FreeRTOS/tasks.c **** 					/* If the task is in the suspended list then there is a
3726:System/FreeRTOS/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3727:System/FreeRTOS/tasks.c **** 					it should be reported as being in the Blocked state. */
3728:System/FreeRTOS/tasks.c **** 					if( eState == eSuspended )
3729:System/FreeRTOS/tasks.c **** 					{
3730:System/FreeRTOS/tasks.c **** 						vTaskSuspendAll();
3731:System/FreeRTOS/tasks.c **** 						{
3732:System/FreeRTOS/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3733:System/FreeRTOS/tasks.c **** 							{
3734:System/FreeRTOS/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3735:System/FreeRTOS/tasks.c **** 							}
3736:System/FreeRTOS/tasks.c **** 						}
3737:System/FreeRTOS/tasks.c **** 						( void ) xTaskResumeAll();
3738:System/FreeRTOS/tasks.c **** 					}
3739:System/FreeRTOS/tasks.c **** 				}
3740:System/FreeRTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3741:System/FreeRTOS/tasks.c **** 			}
3742:System/FreeRTOS/tasks.c **** 		}
3743:System/FreeRTOS/tasks.c **** 		else
3744:System/FreeRTOS/tasks.c **** 		{
3745:System/FreeRTOS/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3746:System/FreeRTOS/tasks.c **** 		}
3747:System/FreeRTOS/tasks.c **** 
3748:System/FreeRTOS/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3749:System/FreeRTOS/tasks.c **** 		parameter is provided to allow it to be skipped. */
3750:System/FreeRTOS/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3751:System/FreeRTOS/tasks.c **** 		{
3752:System/FreeRTOS/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3753:System/FreeRTOS/tasks.c **** 			{
3754:System/FreeRTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3755:System/FreeRTOS/tasks.c **** 			}
3756:System/FreeRTOS/tasks.c **** 			#else
3757:System/FreeRTOS/tasks.c **** 			{
3758:System/FreeRTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3759:System/FreeRTOS/tasks.c **** 			}
3760:System/FreeRTOS/tasks.c **** 			#endif
3761:System/FreeRTOS/tasks.c **** 		}
3762:System/FreeRTOS/tasks.c **** 		else
3763:System/FreeRTOS/tasks.c **** 		{
3764:System/FreeRTOS/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3765:System/FreeRTOS/tasks.c **** 		}
3766:System/FreeRTOS/tasks.c **** 	}
3767:System/FreeRTOS/tasks.c **** 
3768:System/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3769:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3770:System/FreeRTOS/tasks.c **** 
3771:System/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3772:System/FreeRTOS/tasks.c **** 
3773:System/FreeRTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3774:System/FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 73


3775:System/FreeRTOS/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3776:System/FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0;
3777:System/FreeRTOS/tasks.c **** 
3778:System/FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3779:System/FreeRTOS/tasks.c **** 		{
3780:System/FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3781:System/FreeRTOS/tasks.c **** 
3782:System/FreeRTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3783:System/FreeRTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3784:System/FreeRTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3785:System/FreeRTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3786:System/FreeRTOS/tasks.c **** 			do
3787:System/FreeRTOS/tasks.c **** 			{
3788:System/FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3789:System/FreeRTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3790:System/FreeRTOS/tasks.c **** 				uxTask++;
3791:System/FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3792:System/FreeRTOS/tasks.c **** 		}
3793:System/FreeRTOS/tasks.c **** 		else
3794:System/FreeRTOS/tasks.c **** 		{
3795:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3796:System/FreeRTOS/tasks.c **** 		}
3797:System/FreeRTOS/tasks.c **** 
3798:System/FreeRTOS/tasks.c **** 		return uxTask;
3799:System/FreeRTOS/tasks.c **** 	}
3800:System/FreeRTOS/tasks.c **** 
3801:System/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3802:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3803:System/FreeRTOS/tasks.c **** 
3804:System/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3805:System/FreeRTOS/tasks.c **** 
3806:System/FreeRTOS/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3807:System/FreeRTOS/tasks.c **** 	{
 129              		.loc 1 3807 2 is_stmt 1 view -0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
3808:System/FreeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
 134              		.loc 1 3808 2 view .LVU32
3809:System/FreeRTOS/tasks.c **** 
3810:System/FreeRTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 135              		.loc 1 3810 3 view .LVU33
3808:System/FreeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
 136              		.loc 1 3808 11 is_stmt 0 view .LVU34
 137 0000 0023     		movs	r3, #0
 138              		.loc 1 3810 8 view .LVU35
 139 0002 01E0     		b	.L13
 140              	.LVL10:
 141              	.L14:
3811:System/FreeRTOS/tasks.c **** 		{
3812:System/FreeRTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 142              		.loc 1 3812 4 is_stmt 1 view .LVU36
 143              		.loc 1 3812 17 is_stmt 0 view .LVU37
 144 0004 0130     		adds	r0, r0, #1
 145              	.LVL11:
3813:System/FreeRTOS/tasks.c **** 			ulCount++;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 74


 146              		.loc 1 3813 4 is_stmt 1 view .LVU38
 147              		.loc 1 3813 11 is_stmt 0 view .LVU39
 148 0006 0133     		adds	r3, r3, #1
 149              	.LVL12:
 150              	.L13:
3810:System/FreeRTOS/tasks.c **** 		{
 151              		.loc 1 3810 8 is_stmt 1 view .LVU40
3810:System/FreeRTOS/tasks.c **** 		{
 152              		.loc 1 3810 10 is_stmt 0 view .LVU41
 153 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
3810:System/FreeRTOS/tasks.c **** 		{
 154              		.loc 1 3810 8 view .LVU42
 155 000a A52A     		cmp	r2, #165
 156 000c FAD0     		beq	.L14
3814:System/FreeRTOS/tasks.c **** 		}
3815:System/FreeRTOS/tasks.c **** 
3816:System/FreeRTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 157              		.loc 1 3816 3 is_stmt 1 view .LVU43
 158              	.LVL13:
3817:System/FreeRTOS/tasks.c **** 
3818:System/FreeRTOS/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 159              		.loc 1 3818 3 view .LVU44
3819:System/FreeRTOS/tasks.c **** 	}
 160              		.loc 1 3819 2 is_stmt 0 view .LVU45
 161 000e C3F38F00 		ubfx	r0, r3, #2, #16
 162              	.LVL14:
 163              		.loc 1 3819 2 view .LVU46
 164 0012 7047     		bx	lr
 165              		.cfi_endproc
 166              	.LFE47:
 168              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 169              		.align	1
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 174              	prvResetNextTaskUnblockTime:
 175              	.LFB50:
3820:System/FreeRTOS/tasks.c **** 
3821:System/FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3822:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3823:System/FreeRTOS/tasks.c **** 
3824:System/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3825:System/FreeRTOS/tasks.c **** 
3826:System/FreeRTOS/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3827:System/FreeRTOS/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3828:System/FreeRTOS/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3829:System/FreeRTOS/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3830:System/FreeRTOS/tasks.c **** 	applications that expect an 8-bit return type. */
3831:System/FreeRTOS/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3832:System/FreeRTOS/tasks.c **** 	{
3833:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3834:System/FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3835:System/FreeRTOS/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3836:System/FreeRTOS/tasks.c **** 
3837:System/FreeRTOS/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3838:System/FreeRTOS/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3839:System/FreeRTOS/tasks.c **** 		allows the user to determine the return type.  It gets around the
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 75


3840:System/FreeRTOS/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3841:System/FreeRTOS/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3842:System/FreeRTOS/tasks.c **** 		type. */
3843:System/FreeRTOS/tasks.c **** 
3844:System/FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3845:System/FreeRTOS/tasks.c **** 
3846:System/FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3847:System/FreeRTOS/tasks.c **** 		{
3848:System/FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3849:System/FreeRTOS/tasks.c **** 		}
3850:System/FreeRTOS/tasks.c **** 		#else
3851:System/FreeRTOS/tasks.c **** 		{
3852:System/FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3853:System/FreeRTOS/tasks.c **** 		}
3854:System/FreeRTOS/tasks.c **** 		#endif
3855:System/FreeRTOS/tasks.c **** 
3856:System/FreeRTOS/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3857:System/FreeRTOS/tasks.c **** 
3858:System/FreeRTOS/tasks.c **** 		return uxReturn;
3859:System/FreeRTOS/tasks.c **** 	}
3860:System/FreeRTOS/tasks.c **** 
3861:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3862:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3863:System/FreeRTOS/tasks.c **** 
3864:System/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3865:System/FreeRTOS/tasks.c **** 
3866:System/FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3867:System/FreeRTOS/tasks.c **** 	{
3868:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3869:System/FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3870:System/FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3871:System/FreeRTOS/tasks.c **** 
3872:System/FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3873:System/FreeRTOS/tasks.c **** 
3874:System/FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3875:System/FreeRTOS/tasks.c **** 		{
3876:System/FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3877:System/FreeRTOS/tasks.c **** 		}
3878:System/FreeRTOS/tasks.c **** 		#else
3879:System/FreeRTOS/tasks.c **** 		{
3880:System/FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3881:System/FreeRTOS/tasks.c **** 		}
3882:System/FreeRTOS/tasks.c **** 		#endif
3883:System/FreeRTOS/tasks.c **** 
3884:System/FreeRTOS/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3885:System/FreeRTOS/tasks.c **** 
3886:System/FreeRTOS/tasks.c **** 		return uxReturn;
3887:System/FreeRTOS/tasks.c **** 	}
3888:System/FreeRTOS/tasks.c **** 
3889:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3890:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3891:System/FreeRTOS/tasks.c **** 
3892:System/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3893:System/FreeRTOS/tasks.c **** 
3894:System/FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3895:System/FreeRTOS/tasks.c **** 	{
3896:System/FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 76


3897:System/FreeRTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3898:System/FreeRTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3899:System/FreeRTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3900:System/FreeRTOS/tasks.c **** 
3901:System/FreeRTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3902:System/FreeRTOS/tasks.c **** 		to the task to free any memory allocated at the application level.
3903:System/FreeRTOS/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3904:System/FreeRTOS/tasks.c **** 		for additional information. */
3905:System/FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3906:System/FreeRTOS/tasks.c **** 		{
3907:System/FreeRTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3908:System/FreeRTOS/tasks.c **** 		}
3909:System/FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3910:System/FreeRTOS/tasks.c **** 
3911:System/FreeRTOS/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3912:System/FreeRTOS/tasks.c **** 		{
3913:System/FreeRTOS/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3914:System/FreeRTOS/tasks.c **** 			the stack and TCB. */
3915:System/FreeRTOS/tasks.c **** 			vPortFree( pxTCB->pxStack );
3916:System/FreeRTOS/tasks.c **** 			vPortFree( pxTCB );
3917:System/FreeRTOS/tasks.c **** 		}
3918:System/FreeRTOS/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3919:System/FreeRTOS/tasks.c **** 		{
3920:System/FreeRTOS/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3921:System/FreeRTOS/tasks.c **** 			check what was statically allocated before trying to free the
3922:System/FreeRTOS/tasks.c **** 			memory. */
3923:System/FreeRTOS/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3924:System/FreeRTOS/tasks.c **** 			{
3925:System/FreeRTOS/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3926:System/FreeRTOS/tasks.c **** 				must be freed. */
3927:System/FreeRTOS/tasks.c **** 				vPortFree( pxTCB->pxStack );
3928:System/FreeRTOS/tasks.c **** 				vPortFree( pxTCB );
3929:System/FreeRTOS/tasks.c **** 			}
3930:System/FreeRTOS/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3931:System/FreeRTOS/tasks.c **** 			{
3932:System/FreeRTOS/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3933:System/FreeRTOS/tasks.c **** 				only memory that must be freed. */
3934:System/FreeRTOS/tasks.c **** 				vPortFree( pxTCB );
3935:System/FreeRTOS/tasks.c **** 			}
3936:System/FreeRTOS/tasks.c **** 			else
3937:System/FreeRTOS/tasks.c **** 			{
3938:System/FreeRTOS/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3939:System/FreeRTOS/tasks.c **** 				nothing needs to be freed. */
3940:System/FreeRTOS/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3941:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3942:System/FreeRTOS/tasks.c **** 			}
3943:System/FreeRTOS/tasks.c **** 		}
3944:System/FreeRTOS/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3945:System/FreeRTOS/tasks.c **** 	}
3946:System/FreeRTOS/tasks.c **** 
3947:System/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3948:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3949:System/FreeRTOS/tasks.c **** 
3950:System/FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3951:System/FreeRTOS/tasks.c **** {
 176              		.loc 1 3951 1 is_stmt 1 view -0
 177              		.cfi_startproc
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 77


 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
3952:System/FreeRTOS/tasks.c **** TCB_t *pxTCB;
 181              		.loc 1 3952 1 view .LVU48
3953:System/FreeRTOS/tasks.c **** 
3954:System/FreeRTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 182              		.loc 1 3954 2 view .LVU49
 183              		.loc 1 3954 6 is_stmt 0 view .LVU50
 184 0000 084B     		ldr	r3, .L18
 185 0002 1B68     		ldr	r3, [r3]
 186 0004 1B68     		ldr	r3, [r3]
 187              		.loc 1 3954 4 view .LVU51
 188 0006 23B9     		cbnz	r3, .L16
3955:System/FreeRTOS/tasks.c **** 	{
3956:System/FreeRTOS/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3957:System/FreeRTOS/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3958:System/FreeRTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3959:System/FreeRTOS/tasks.c **** 		there is an item in the delayed list. */
3960:System/FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 189              		.loc 1 3960 3 is_stmt 1 view .LVU52
 190              		.loc 1 3960 24 is_stmt 0 view .LVU53
 191 0008 074B     		ldr	r3, .L18+4
 192 000a 4FF0FF32 		mov	r2, #-1
 193 000e 1A60     		str	r2, [r3]
 194 0010 7047     		bx	lr
 195              	.L16:
3961:System/FreeRTOS/tasks.c **** 	}
3962:System/FreeRTOS/tasks.c **** 	else
3963:System/FreeRTOS/tasks.c **** 	{
3964:System/FreeRTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3965:System/FreeRTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3966:System/FreeRTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3967:System/FreeRTOS/tasks.c **** 		from the Blocked state. */
3968:System/FreeRTOS/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 196              		.loc 1 3968 3 is_stmt 1 view .LVU54
 197              		.loc 1 3968 15 is_stmt 0 view .LVU55
 198 0012 044B     		ldr	r3, .L18
 199 0014 1B68     		ldr	r3, [r3]
 200 0016 DB68     		ldr	r3, [r3, #12]
 201              		.loc 1 3968 13 view .LVU56
 202 0018 DB68     		ldr	r3, [r3, #12]
 203              	.LVL15:
3969:System/FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 204              		.loc 1 3969 3 is_stmt 1 view .LVU57
 205              		.loc 1 3969 26 is_stmt 0 view .LVU58
 206 001a 5A68     		ldr	r2, [r3, #4]
 207              		.loc 1 3969 24 view .LVU59
 208 001c 024B     		ldr	r3, .L18+4
 209              	.LVL16:
 210              		.loc 1 3969 24 view .LVU60
 211 001e 1A60     		str	r2, [r3]
3970:System/FreeRTOS/tasks.c **** 	}
3971:System/FreeRTOS/tasks.c **** }
 212              		.loc 1 3971 1 view .LVU61
 213 0020 7047     		bx	lr
 214              	.L19:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 78


 215 0022 00BF     		.align	2
 216              	.L18:
 217 0024 00000000 		.word	.LANCHOR2
 218 0028 00000000 		.word	.LANCHOR3
 219              		.cfi_endproc
 220              	.LFE50:
 222              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 223              		.align	1
 224              		.syntax unified
 225              		.thumb
 226              		.thumb_func
 228              	prvInitialiseNewTask:
 229              	.LVL17:
 230              	.LFB7:
 838:System/FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 231              		.loc 1 838 1 is_stmt 1 view -0
 232              		.cfi_startproc
 233              		@ args = 16, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 838:System/FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 235              		.loc 1 838 1 is_stmt 0 view .LVU63
 236 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 237              	.LCFI0:
 238              		.cfi_def_cfa_offset 40
 239              		.cfi_offset 3, -40
 240              		.cfi_offset 4, -36
 241              		.cfi_offset 5, -32
 242              		.cfi_offset 6, -28
 243              		.cfi_offset 7, -24
 244              		.cfi_offset 8, -20
 245              		.cfi_offset 9, -16
 246              		.cfi_offset 10, -12
 247              		.cfi_offset 11, -8
 248              		.cfi_offset 14, -4
 249 0004 8146     		mov	r9, r0
 250 0006 0D46     		mov	r5, r1
 251 0008 9046     		mov	r8, r2
 252 000a 9A46     		mov	r10, r3
 253 000c 0A9E     		ldr	r6, [sp, #40]
 254 000e DDF82CB0 		ldr	fp, [sp, #44]
 255 0012 0C9C     		ldr	r4, [sp, #48]
 839:System/FreeRTOS/tasks.c **** UBaseType_t x;
 256              		.loc 1 839 1 is_stmt 1 view .LVU64
 840:System/FreeRTOS/tasks.c **** 
 257              		.loc 1 840 1 view .LVU65
 860:System/FreeRTOS/tasks.c **** 	}
 258              		.loc 1 860 3 view .LVU66
 860:System/FreeRTOS/tasks.c **** 	}
 259              		.loc 1 860 12 is_stmt 0 view .LVU67
 260 0014 9200     		lsls	r2, r2, #2
 261              	.LVL18:
 860:System/FreeRTOS/tasks.c **** 	}
 262              		.loc 1 860 12 view .LVU68
 263 0016 A521     		movs	r1, #165
 264              	.LVL19:
 860:System/FreeRTOS/tasks.c **** 	}
 265              		.loc 1 860 12 view .LVU69
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 79


 266 0018 206B     		ldr	r0, [r4, #48]
 267              	.LVL20:
 860:System/FreeRTOS/tasks.c **** 	}
 268              		.loc 1 860 12 view .LVU70
 269 001a FFF7FEFF 		bl	memset
 270              	.LVL21:
 870:System/FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 271              		.loc 1 870 3 is_stmt 1 view .LVU71
 870:System/FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 272              		.loc 1 870 29 is_stmt 0 view .LVU72
 273 001e 276B     		ldr	r7, [r4, #48]
 870:System/FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 274              		.loc 1 870 38 view .LVU73
 275 0020 08F18043 		add	r3, r8, #1073741824
 276 0024 013B     		subs	r3, r3, #1
 870:System/FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 277              		.loc 1 870 16 view .LVU74
 278 0026 07EB8307 		add	r7, r7, r3, lsl #2
 279              	.LVL22:
 871:System/FreeRTOS/tasks.c **** 
 280              		.loc 1 871 3 is_stmt 1 view .LVU75
 871:System/FreeRTOS/tasks.c **** 
 281              		.loc 1 871 81 is_stmt 0 view .LVU76
 282 002a 27F00707 		bic	r7, r7, #7
 283              	.LVL23:
 874:System/FreeRTOS/tasks.c **** 
 284              		.loc 1 874 3 is_stmt 1 view .LVU77
 874:System/FreeRTOS/tasks.c **** 
 285              		.loc 1 874 124 view .LVU78
 898:System/FreeRTOS/tasks.c **** 	{
 286              		.loc 1 898 2 view .LVU79
 898:System/FreeRTOS/tasks.c **** 	{
 287              		.loc 1 898 4 is_stmt 0 view .LVU80
 288 002e 95B3     		cbz	r5, .L32
 900:System/FreeRTOS/tasks.c **** 		{
 289              		.loc 1 900 10 view .LVU81
 290 0030 0023     		movs	r3, #0
 291              	.L21:
 292              	.LVL24:
 900:System/FreeRTOS/tasks.c **** 		{
 293              		.loc 1 900 31 is_stmt 1 discriminator 1 view .LVU82
 900:System/FreeRTOS/tasks.c **** 		{
 294              		.loc 1 900 3 is_stmt 0 discriminator 1 view .LVU83
 295 0032 0F2B     		cmp	r3, #15
 296 0034 07D8     		bhi	.L23
 902:System/FreeRTOS/tasks.c **** 
 297              		.loc 1 902 4 is_stmt 1 view .LVU84
 902:System/FreeRTOS/tasks.c **** 
 298              		.loc 1 902 38 is_stmt 0 view .LVU85
 299 0036 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 902:System/FreeRTOS/tasks.c **** 
 300              		.loc 1 902 30 view .LVU86
 301 0038 E218     		adds	r2, r4, r3
 302 003a 82F83410 		strb	r1, [r2, #52]
 907:System/FreeRTOS/tasks.c **** 			{
 303              		.loc 1 907 4 is_stmt 1 view .LVU87
 907:System/FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 80


 304              		.loc 1 907 14 is_stmt 0 view .LVU88
 305 003e EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 907:System/FreeRTOS/tasks.c **** 			{
 306              		.loc 1 907 6 view .LVU89
 307 0040 0AB1     		cbz	r2, .L23
 913:System/FreeRTOS/tasks.c **** 			}
 308              		.loc 1 913 29 is_stmt 1 discriminator 2 view .LVU90
 900:System/FreeRTOS/tasks.c **** 		{
 309              		.loc 1 900 76 discriminator 2 view .LVU91
 900:System/FreeRTOS/tasks.c **** 		{
 310              		.loc 1 900 77 is_stmt 0 discriminator 2 view .LVU92
 311 0042 0133     		adds	r3, r3, #1
 312              	.LVL25:
 900:System/FreeRTOS/tasks.c **** 		{
 313              		.loc 1 900 77 discriminator 2 view .LVU93
 314 0044 F5E7     		b	.L21
 315              	.L23:
 919:System/FreeRTOS/tasks.c **** 	}
 316              		.loc 1 919 3 is_stmt 1 view .LVU94
 919:System/FreeRTOS/tasks.c **** 	}
 317              		.loc 1 919 55 is_stmt 0 view .LVU95
 318 0046 0023     		movs	r3, #0
 319              	.LVL26:
 919:System/FreeRTOS/tasks.c **** 	}
 320              		.loc 1 919 55 view .LVU96
 321 0048 84F84330 		strb	r3, [r4, #67]
 322              	.L25:
 930:System/FreeRTOS/tasks.c **** 	{
 323              		.loc 1 930 2 is_stmt 1 view .LVU97
 930:System/FreeRTOS/tasks.c **** 	{
 324              		.loc 1 930 4 is_stmt 0 view .LVU98
 325 004c 042E     		cmp	r6, #4
 326 004e 00D9     		bls	.L26
 932:System/FreeRTOS/tasks.c **** 	}
 327              		.loc 1 932 14 view .LVU99
 328 0050 0426     		movs	r6, #4
 329              	.L26:
 330              	.LVL27:
 936:System/FreeRTOS/tasks.c **** 	}
 331              		.loc 1 936 27 is_stmt 1 view .LVU100
 939:System/FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 332              		.loc 1 939 2 view .LVU101
 939:System/FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 333              		.loc 1 939 23 is_stmt 0 view .LVU102
 334 0052 E662     		str	r6, [r4, #44]
 942:System/FreeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 335              		.loc 1 942 3 is_stmt 1 view .LVU103
 942:System/FreeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 336              		.loc 1 942 28 is_stmt 0 view .LVU104
 337 0054 2665     		str	r6, [r4, #80]
 943:System/FreeRTOS/tasks.c **** 	}
 338              		.loc 1 943 3 is_stmt 1 view .LVU105
 943:System/FreeRTOS/tasks.c **** 	}
 339              		.loc 1 943 27 is_stmt 0 view .LVU106
 340 0056 0025     		movs	r5, #0
 341              	.LVL28:
 943:System/FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 81


 342              		.loc 1 943 27 view .LVU107
 343 0058 6565     		str	r5, [r4, #84]
 947:System/FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 344              		.loc 1 947 2 is_stmt 1 view .LVU108
 345 005a 201D     		adds	r0, r4, #4
 346 005c FFF7FEFF 		bl	vListInitialiseItem
 347              	.LVL29:
 948:System/FreeRTOS/tasks.c **** 
 348              		.loc 1 948 2 view .LVU109
 349 0060 04F11800 		add	r0, r4, #24
 350 0064 FFF7FEFF 		bl	vListInitialiseItem
 351              	.LVL30:
 952:System/FreeRTOS/tasks.c **** 
 352              		.loc 1 952 2 view .LVU110
 353 0068 2461     		str	r4, [r4, #16]
 955:System/FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 354              		.loc 1 955 2 view .LVU111
 355 006a C6F10506 		rsb	r6, r6, #5
 356              	.LVL31:
 955:System/FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 357              		.loc 1 955 2 is_stmt 0 view .LVU112
 358 006e A661     		str	r6, [r4, #24]
 956:System/FreeRTOS/tasks.c **** 
 359              		.loc 1 956 2 is_stmt 1 view .LVU113
 360 0070 6462     		str	r4, [r4, #36]
 983:System/FreeRTOS/tasks.c **** 	}
 361              		.loc 1 983 3 view .LVU114
 998:System/FreeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 362              		.loc 1 998 3 view .LVU115
 998:System/FreeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 363              		.loc 1 998 29 is_stmt 0 view .LVU116
 364 0072 A565     		str	r5, [r4, #88]
 999:System/FreeRTOS/tasks.c **** 	}
 365              		.loc 1 999 3 is_stmt 1 view .LVU117
 999:System/FreeRTOS/tasks.c **** 	}
 366              		.loc 1 999 27 is_stmt 0 view .LVU118
 367 0074 84F85C50 		strb	r5, [r4, #92]
1064:System/FreeRTOS/tasks.c **** 		}
 368              		.loc 1 1064 4 is_stmt 1 view .LVU119
1064:System/FreeRTOS/tasks.c **** 		}
 369              		.loc 1 1064 29 is_stmt 0 view .LVU120
 370 0078 5246     		mov	r2, r10
 371 007a 4946     		mov	r1, r9
 372 007c 3846     		mov	r0, r7
 373 007e FFF7FEFF 		bl	pxPortInitialiseStack
 374              	.LVL32:
1064:System/FreeRTOS/tasks.c **** 		}
 375              		.loc 1 1064 27 view .LVU121
 376 0082 2060     		str	r0, [r4]
1070:System/FreeRTOS/tasks.c **** 	{
 377              		.loc 1 1070 2 is_stmt 1 view .LVU122
1070:System/FreeRTOS/tasks.c **** 	{
 378              		.loc 1 1070 4 is_stmt 0 view .LVU123
 379 0084 BBF1000F 		cmp	fp, #0
 380 0088 03D0     		beq	.L20
1074:System/FreeRTOS/tasks.c **** 		pxNewTCB->uxSizeOfStack = ulStackDepth;
 381              		.loc 1 1074 3 is_stmt 1 view .LVU124
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 82


1074:System/FreeRTOS/tasks.c **** 		pxNewTCB->uxSizeOfStack = ulStackDepth;
 382              		.loc 1 1074 18 is_stmt 0 view .LVU125
 383 008a CBF80040 		str	r4, [fp]
1075:System/FreeRTOS/tasks.c **** 	}
 384              		.loc 1 1075 3 is_stmt 1 view .LVU126
1075:System/FreeRTOS/tasks.c **** 	}
 385              		.loc 1 1075 27 is_stmt 0 view .LVU127
 386 008e C4F84480 		str	r8, [r4, #68]
1079:System/FreeRTOS/tasks.c **** 	}
 387              		.loc 1 1079 27 is_stmt 1 view .LVU128
 388              	.L20:
1081:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 389              		.loc 1 1081 1 is_stmt 0 view .LVU129
 390 0092 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 391              	.LVL33:
 392              	.L32:
 925:System/FreeRTOS/tasks.c **** 	}
 393              		.loc 1 925 3 is_stmt 1 view .LVU130
 925:System/FreeRTOS/tasks.c **** 	}
 394              		.loc 1 925 29 is_stmt 0 view .LVU131
 395 0096 0023     		movs	r3, #0
 396 0098 84F83430 		strb	r3, [r4, #52]
 397 009c D6E7     		b	.L25
 398              		.cfi_endproc
 399              	.LFE7:
 401              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 402              		.align	1
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 407              	prvInitialiseTaskLists:
 408              	.LFB43:
3615:System/FreeRTOS/tasks.c **** UBaseType_t uxPriority;
 409              		.loc 1 3615 1 is_stmt 1 view -0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413 0000 38B5     		push	{r3, r4, r5, lr}
 414              	.LCFI1:
 415              		.cfi_def_cfa_offset 16
 416              		.cfi_offset 3, -16
 417              		.cfi_offset 4, -12
 418              		.cfi_offset 5, -8
 419              		.cfi_offset 14, -4
3616:System/FreeRTOS/tasks.c **** 
 420              		.loc 1 3616 1 view .LVU133
3618:System/FreeRTOS/tasks.c **** 	{
 421              		.loc 1 3618 2 view .LVU134
 422              	.LVL34:
3618:System/FreeRTOS/tasks.c **** 	{
 423              		.loc 1 3618 18 is_stmt 0 view .LVU135
 424 0002 0024     		movs	r4, #0
3618:System/FreeRTOS/tasks.c **** 	{
 425              		.loc 1 3618 2 view .LVU136
 426 0004 07E0     		b	.L34
 427              	.LVL35:
 428              	.L35:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 83


3620:System/FreeRTOS/tasks.c **** 	}
 429              		.loc 1 3620 3 is_stmt 1 discriminator 3 view .LVU137
 430 0006 04EB8402 		add	r2, r4, r4, lsl #2
 431 000a 9300     		lsls	r3, r2, #2
 432 000c 0E48     		ldr	r0, .L37
 433 000e 1844     		add	r0, r0, r3
 434 0010 FFF7FEFF 		bl	vListInitialise
 435              	.LVL36:
3618:System/FreeRTOS/tasks.c **** 	{
 436              		.loc 1 3618 91 discriminator 3 view .LVU138
3618:System/FreeRTOS/tasks.c **** 	{
 437              		.loc 1 3618 101 is_stmt 0 discriminator 3 view .LVU139
 438 0014 0134     		adds	r4, r4, #1
 439              	.LVL37:
 440              	.L34:
3618:System/FreeRTOS/tasks.c **** 	{
 441              		.loc 1 3618 40 is_stmt 1 discriminator 1 view .LVU140
3618:System/FreeRTOS/tasks.c **** 	{
 442              		.loc 1 3618 2 is_stmt 0 discriminator 1 view .LVU141
 443 0016 042C     		cmp	r4, #4
 444 0018 F5D9     		bls	.L35
3623:System/FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 445              		.loc 1 3623 2 is_stmt 1 view .LVU142
 446 001a 0C4D     		ldr	r5, .L37+4
 447 001c 2846     		mov	r0, r5
 448 001e FFF7FEFF 		bl	vListInitialise
 449              	.LVL38:
3624:System/FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 450              		.loc 1 3624 2 view .LVU143
 451 0022 0B4C     		ldr	r4, .L37+8
 452              	.LVL39:
3624:System/FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 453              		.loc 1 3624 2 is_stmt 0 view .LVU144
 454 0024 2046     		mov	r0, r4
 455 0026 FFF7FEFF 		bl	vListInitialise
 456              	.LVL40:
3625:System/FreeRTOS/tasks.c **** 
 457              		.loc 1 3625 2 is_stmt 1 view .LVU145
 458 002a 0A48     		ldr	r0, .L37+12
 459 002c FFF7FEFF 		bl	vListInitialise
 460              	.LVL41:
3629:System/FreeRTOS/tasks.c **** 	}
 461              		.loc 1 3629 3 view .LVU146
 462 0030 0948     		ldr	r0, .L37+16
 463 0032 FFF7FEFF 		bl	vListInitialise
 464              	.LVL42:
3635:System/FreeRTOS/tasks.c **** 	}
 465              		.loc 1 3635 3 view .LVU147
 466 0036 0948     		ldr	r0, .L37+20
 467 0038 FFF7FEFF 		bl	vListInitialise
 468              	.LVL43:
3641:System/FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 469              		.loc 1 3641 2 view .LVU148
3641:System/FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 470              		.loc 1 3641 20 is_stmt 0 view .LVU149
 471 003c 084B     		ldr	r3, .L37+24
 472 003e 1D60     		str	r5, [r3]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 84


3642:System/FreeRTOS/tasks.c **** }
 473              		.loc 1 3642 2 is_stmt 1 view .LVU150
3642:System/FreeRTOS/tasks.c **** }
 474              		.loc 1 3642 28 is_stmt 0 view .LVU151
 475 0040 084B     		ldr	r3, .L37+28
 476 0042 1C60     		str	r4, [r3]
3643:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 477              		.loc 1 3643 1 view .LVU152
 478 0044 38BD     		pop	{r3, r4, r5, pc}
 479              	.L38:
 480 0046 00BF     		.align	2
 481              	.L37:
 482 0048 00000000 		.word	.LANCHOR4
 483 004c 00000000 		.word	.LANCHOR5
 484 0050 00000000 		.word	.LANCHOR6
 485 0054 00000000 		.word	.LANCHOR1
 486 0058 00000000 		.word	.LANCHOR7
 487 005c 00000000 		.word	.LANCHOR0
 488 0060 00000000 		.word	.LANCHOR2
 489 0064 00000000 		.word	.LANCHOR8
 490              		.cfi_endproc
 491              	.LFE43:
 493              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 494              		.align	1
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 499              	prvAddNewTaskToReadyList:
 500              	.LVL44:
 501              	.LFB8:
1085:System/FreeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 502              		.loc 1 1085 1 is_stmt 1 view -0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
1085:System/FreeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 506              		.loc 1 1085 1 is_stmt 0 view .LVU154
 507 0000 10B5     		push	{r4, lr}
 508              	.LCFI2:
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 4, -8
 511              		.cfi_offset 14, -4
 512 0002 0446     		mov	r4, r0
1088:System/FreeRTOS/tasks.c **** 	{
 513              		.loc 1 1088 2 is_stmt 1 view .LVU155
 514 0004 FFF7FEFF 		bl	vPortEnterCritical
 515              	.LVL45:
1090:System/FreeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 516              		.loc 1 1090 3 view .LVU156
1090:System/FreeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 517              		.loc 1 1090 25 is_stmt 0 view .LVU157
 518 0008 224A     		ldr	r2, .L46
 519 000a 1368     		ldr	r3, [r2]
 520 000c 0133     		adds	r3, r3, #1
 521 000e 1360     		str	r3, [r2]
1091:System/FreeRTOS/tasks.c **** 		{
 522              		.loc 1 1091 3 is_stmt 1 view .LVU158
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 85


1091:System/FreeRTOS/tasks.c **** 		{
 523              		.loc 1 1091 20 is_stmt 0 view .LVU159
 524 0010 214B     		ldr	r3, .L46+4
 525 0012 1B68     		ldr	r3, [r3]
1091:System/FreeRTOS/tasks.c **** 		{
 526              		.loc 1 1091 5 view .LVU160
 527 0014 5BB1     		cbz	r3, .L44
1114:System/FreeRTOS/tasks.c **** 			{
 528              		.loc 1 1114 4 is_stmt 1 view .LVU161
1114:System/FreeRTOS/tasks.c **** 			{
 529              		.loc 1 1114 26 is_stmt 0 view .LVU162
 530 0016 214B     		ldr	r3, .L46+8
 531 0018 1B68     		ldr	r3, [r3]
1114:System/FreeRTOS/tasks.c **** 			{
 532              		.loc 1 1114 6 view .LVU163
 533 001a 6BB9     		cbnz	r3, .L41
1116:System/FreeRTOS/tasks.c **** 				{
 534              		.loc 1 1116 5 is_stmt 1 view .LVU164
1116:System/FreeRTOS/tasks.c **** 				{
 535              		.loc 1 1116 21 is_stmt 0 view .LVU165
 536 001c 1E4B     		ldr	r3, .L46+4
 537 001e 1B68     		ldr	r3, [r3]
 538 0020 DA6A     		ldr	r2, [r3, #44]
1116:System/FreeRTOS/tasks.c **** 				{
 539              		.loc 1 1116 45 view .LVU166
 540 0022 E36A     		ldr	r3, [r4, #44]
1116:System/FreeRTOS/tasks.c **** 				{
 541              		.loc 1 1116 7 view .LVU167
 542 0024 9A42     		cmp	r2, r3
 543 0026 07D8     		bhi	.L41
1118:System/FreeRTOS/tasks.c **** 				}
 544              		.loc 1 1118 6 is_stmt 1 view .LVU168
1118:System/FreeRTOS/tasks.c **** 				}
 545              		.loc 1 1118 19 is_stmt 0 view .LVU169
 546 0028 1B4B     		ldr	r3, .L46+4
 547 002a 1C60     		str	r4, [r3]
 548 002c 04E0     		b	.L41
 549              	.L44:
1095:System/FreeRTOS/tasks.c **** 
 550              		.loc 1 1095 4 is_stmt 1 view .LVU170
1095:System/FreeRTOS/tasks.c **** 
 551              		.loc 1 1095 17 is_stmt 0 view .LVU171
 552 002e 1A4B     		ldr	r3, .L46+4
 553 0030 1C60     		str	r4, [r3]
1097:System/FreeRTOS/tasks.c **** 			{
 554              		.loc 1 1097 4 is_stmt 1 view .LVU172
1097:System/FreeRTOS/tasks.c **** 			{
 555              		.loc 1 1097 31 is_stmt 0 view .LVU173
 556 0032 1368     		ldr	r3, [r2]
1097:System/FreeRTOS/tasks.c **** 			{
 557              		.loc 1 1097 6 view .LVU174
 558 0034 012B     		cmp	r3, #1
 559 0036 29D0     		beq	.L45
 560              	.L41:
1127:System/FreeRTOS/tasks.c **** 			}
 561              		.loc 1 1127 29 is_stmt 1 view .LVU175
1131:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 86


 562              		.loc 1 1131 3 view .LVU176
1131:System/FreeRTOS/tasks.c **** 
 563              		.loc 1 1131 15 is_stmt 0 view .LVU177
 564 0038 194A     		ldr	r2, .L46+12
 565 003a 1368     		ldr	r3, [r2]
 566 003c 0133     		adds	r3, r3, #1
 567 003e 1360     		str	r3, [r2]
1136:System/FreeRTOS/tasks.c **** 		}
 568              		.loc 1 1136 4 is_stmt 1 view .LVU178
1136:System/FreeRTOS/tasks.c **** 		}
 569              		.loc 1 1136 26 is_stmt 0 view .LVU179
 570 0040 A364     		str	r3, [r4, #72]
1139:System/FreeRTOS/tasks.c **** 
 571              		.loc 1 1139 31 is_stmt 1 view .LVU180
1141:System/FreeRTOS/tasks.c **** 
 572              		.loc 1 1141 3 view .LVU181
1141:System/FreeRTOS/tasks.c **** 
 573              		.loc 1 1141 3 view .LVU182
 574 0042 E06A     		ldr	r0, [r4, #44]
 575 0044 0123     		movs	r3, #1
 576 0046 8340     		lsls	r3, r3, r0
 577 0048 164A     		ldr	r2, .L46+16
 578 004a 1168     		ldr	r1, [r2]
 579 004c 0B43     		orrs	r3, r3, r1
 580 004e 1360     		str	r3, [r2]
1141:System/FreeRTOS/tasks.c **** 
 581              		.loc 1 1141 3 view .LVU183
 582 0050 00EB8000 		add	r0, r0, r0, lsl #2
 583 0054 211D     		adds	r1, r4, #4
 584 0056 144B     		ldr	r3, .L46+20
 585 0058 03EB8000 		add	r0, r3, r0, lsl #2
 586 005c FFF7FEFF 		bl	vListInsertEnd
 587              	.LVL46:
1141:System/FreeRTOS/tasks.c **** 
 588              		.loc 1 1141 36 view .LVU184
1143:System/FreeRTOS/tasks.c **** 	}
 589              		.loc 1 1143 3 view .LVU185
1145:System/FreeRTOS/tasks.c **** 
 590              		.loc 1 1145 2 view .LVU186
 591 0060 FFF7FEFF 		bl	vPortExitCritical
 592              	.LVL47:
1147:System/FreeRTOS/tasks.c **** 	{
 593              		.loc 1 1147 2 view .LVU187
1147:System/FreeRTOS/tasks.c **** 	{
 594              		.loc 1 1147 24 is_stmt 0 view .LVU188
 595 0064 0D4B     		ldr	r3, .L46+8
 596 0066 1B68     		ldr	r3, [r3]
1147:System/FreeRTOS/tasks.c **** 	{
 597              		.loc 1 1147 4 view .LVU189
 598 0068 7BB1     		cbz	r3, .L39
1151:System/FreeRTOS/tasks.c **** 		{
 599              		.loc 1 1151 3 is_stmt 1 view .LVU190
1151:System/FreeRTOS/tasks.c **** 		{
 600              		.loc 1 1151 19 is_stmt 0 view .LVU191
 601 006a 0B4B     		ldr	r3, .L46+4
 602 006c 1B68     		ldr	r3, [r3]
 603 006e DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 87


1151:System/FreeRTOS/tasks.c **** 		{
 604              		.loc 1 1151 42 view .LVU192
 605 0070 E36A     		ldr	r3, [r4, #44]
1151:System/FreeRTOS/tasks.c **** 		{
 606              		.loc 1 1151 5 view .LVU193
 607 0072 9A42     		cmp	r2, r3
 608 0074 09D2     		bcs	.L39
1153:System/FreeRTOS/tasks.c **** 		}
 609              		.loc 1 1153 4 is_stmt 1 view .LVU194
 610 0076 4FF0E023 		mov	r3, #-536813568
 611 007a 4FF08052 		mov	r2, #268435456
 612 007e C3F8042D 		str	r2, [r3, #3332]
1153:System/FreeRTOS/tasks.c **** 		}
 613              		.loc 1 1153 4 view .LVU195
 614              		.syntax unified
 615              	@ 1153 "System/FreeRTOS/tasks.c" 1
 616 0082 BFF34F8F 		dsb
 617              	@ 0 "" 2
1153:System/FreeRTOS/tasks.c **** 		}
 618              		.loc 1 1153 4 view .LVU196
 619              	@ 1153 "System/FreeRTOS/tasks.c" 1
 620 0086 BFF36F8F 		isb
 621              	@ 0 "" 2
1153:System/FreeRTOS/tasks.c **** 		}
 622              		.loc 1 1153 35 view .LVU197
1162:System/FreeRTOS/tasks.c **** 	}
 623              		.loc 1 1162 27 view .LVU198
 624              		.thumb
 625              		.syntax unified
 626              	.L39:
1164:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 627              		.loc 1 1164 1 is_stmt 0 view .LVU199
 628 008a 10BD     		pop	{r4, pc}
 629              	.LVL48:
 630              	.L45:
1102:System/FreeRTOS/tasks.c **** 			}
 631              		.loc 1 1102 5 is_stmt 1 view .LVU200
 632 008c FFF7FEFF 		bl	prvInitialiseTaskLists
 633              	.LVL49:
 634 0090 D2E7     		b	.L41
 635              	.L47:
 636 0092 00BF     		.align	2
 637              	.L46:
 638 0094 00000000 		.word	.LANCHOR9
 639 0098 00000000 		.word	.LANCHOR10
 640 009c 00000000 		.word	.LANCHOR11
 641 00a0 00000000 		.word	.LANCHOR12
 642 00a4 00000000 		.word	.LANCHOR13
 643 00a8 00000000 		.word	.LANCHOR4
 644              		.cfi_endproc
 645              	.LFE8:
 647              		.section	.text.prvDeleteTCB,"ax",%progbits
 648              		.align	1
 649              		.syntax unified
 650              		.thumb
 651              		.thumb_func
 653              	prvDeleteTCB:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 88


 654              	.LVL50:
 655              	.LFB49:
3895:System/FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 656              		.loc 1 3895 2 view -0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 0
 659              		@ frame_needed = 0, uses_anonymous_args = 0
3895:System/FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 660              		.loc 1 3895 2 is_stmt 0 view .LVU202
 661 0000 10B5     		push	{r4, lr}
 662              	.LCFI3:
 663              		.cfi_def_cfa_offset 8
 664              		.cfi_offset 4, -8
 665              		.cfi_offset 14, -4
 666 0002 0446     		mov	r4, r0
3899:System/FreeRTOS/tasks.c **** 
 667              		.loc 1 3899 3 is_stmt 1 view .LVU203
3923:System/FreeRTOS/tasks.c **** 			{
 668              		.loc 1 3923 4 view .LVU204
3923:System/FreeRTOS/tasks.c **** 			{
 669              		.loc 1 3923 13 is_stmt 0 view .LVU205
 670 0004 90F85D30 		ldrb	r3, [r0, #93]	@ zero_extendqisi2
3923:System/FreeRTOS/tasks.c **** 			{
 671              		.loc 1 3923 6 view .LVU206
 672 0008 63B1     		cbz	r3, .L54
3930:System/FreeRTOS/tasks.c **** 			{
 673              		.loc 1 3930 9 is_stmt 1 view .LVU207
3930:System/FreeRTOS/tasks.c **** 			{
 674              		.loc 1 3930 11 is_stmt 0 view .LVU208
 675 000a 012B     		cmp	r3, #1
 676 000c 11D0     		beq	.L55
3940:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 677              		.loc 1 3940 5 is_stmt 1 view .LVU209
 678 000e 022B     		cmp	r3, #2
 679 0010 0ED0     		beq	.L48
3940:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 680              		.loc 1 3940 5 view .LVU210
 681              	.LBB125:
 682              	.LBI125:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 683              		.loc 2 191 30 view .LVU211
 684              	.LBB126:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 685              		.loc 2 193 1 view .LVU212
 686              		.loc 2 195 2 view .LVU213
 687              		.syntax unified
 688              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 689 0012 4FF05003 			mov r3, #80												
 690 0016 83F31188 		msr basepri, r3											
 691 001a BFF36F8F 		isb														
 692 001e BFF34F8F 		dsb														
 693              	
 694              	@ 0 "" 2
 695              	.LVL51:
 696              		.thumb
 697              		.syntax unified
 698              	.L52:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 89


 699              		.loc 2 195 2 is_stmt 0 view .LVU214
 700              	.LBE126:
 701              	.LBE125:
3940:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 702              		.loc 1 3940 5 is_stmt 1 discriminator 1 view .LVU215
3940:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 703              		.loc 1 3940 5 discriminator 1 view .LVU216
3940:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 704              		.loc 1 3940 5 discriminator 1 view .LVU217
 705 0022 FEE7     		b	.L52
 706              	.L54:
3927:System/FreeRTOS/tasks.c **** 				vPortFree( pxTCB );
 707              		.loc 1 3927 5 view .LVU218
 708 0024 006B     		ldr	r0, [r0, #48]
 709              	.LVL52:
3927:System/FreeRTOS/tasks.c **** 				vPortFree( pxTCB );
 710              		.loc 1 3927 5 is_stmt 0 view .LVU219
 711 0026 FFF7FEFF 		bl	vPortFree
 712              	.LVL53:
3928:System/FreeRTOS/tasks.c **** 			}
 713              		.loc 1 3928 5 is_stmt 1 view .LVU220
 714 002a 2046     		mov	r0, r4
 715 002c FFF7FEFF 		bl	vPortFree
 716              	.LVL54:
 717              	.L48:
3945:System/FreeRTOS/tasks.c **** 
 718              		.loc 1 3945 2 is_stmt 0 view .LVU221
 719 0030 10BD     		pop	{r4, pc}
 720              	.LVL55:
 721              	.L55:
3934:System/FreeRTOS/tasks.c **** 			}
 722              		.loc 1 3934 5 is_stmt 1 view .LVU222
 723 0032 FFF7FEFF 		bl	vPortFree
 724              	.LVL56:
3934:System/FreeRTOS/tasks.c **** 			}
 725              		.loc 1 3934 5 is_stmt 0 view .LVU223
 726 0036 FBE7     		b	.L48
 727              		.cfi_endproc
 728              	.LFE49:
 730              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 731              		.align	1
 732              		.syntax unified
 733              		.thumb
 734              		.thumb_func
 736              	prvCheckTasksWaitingTermination:
 737              	.LFB44:
3647:System/FreeRTOS/tasks.c **** 
 738              		.loc 1 3647 1 is_stmt 1 view -0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 0
 741              		@ frame_needed = 0, uses_anonymous_args = 0
 742              	.LBB127:
3653:System/FreeRTOS/tasks.c **** 
 743              		.loc 1 3653 3 view .LVU225
3657:System/FreeRTOS/tasks.c **** 		{
 744              		.loc 1 3657 3 view .LVU226
3657:System/FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 90


 745              		.loc 1 3657 8 view .LVU227
3657:System/FreeRTOS/tasks.c **** 		{
 746              		.loc 1 3657 39 is_stmt 0 view .LVU228
 747 0000 0F4B     		ldr	r3, .L63
 748 0002 1B68     		ldr	r3, [r3]
3657:System/FreeRTOS/tasks.c **** 		{
 749              		.loc 1 3657 8 view .LVU229
 750 0004 D3B1     		cbz	r3, .L62
 751              	.LBE127:
3647:System/FreeRTOS/tasks.c **** 
 752              		.loc 1 3647 1 view .LVU230
 753 0006 10B5     		push	{r4, lr}
 754              	.LCFI4:
 755              		.cfi_def_cfa_offset 8
 756              		.cfi_offset 4, -8
 757              		.cfi_offset 14, -4
 758              	.L58:
 759              	.LBB128:
3659:System/FreeRTOS/tasks.c **** 			{
 760              		.loc 1 3659 4 is_stmt 1 view .LVU231
 761 0008 FFF7FEFF 		bl	vPortEnterCritical
 762              	.LVL57:
3661:System/FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 763              		.loc 1 3661 5 view .LVU232
3661:System/FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 764              		.loc 1 3661 13 is_stmt 0 view .LVU233
 765 000c 0D4B     		ldr	r3, .L63+4
 766 000e DB68     		ldr	r3, [r3, #12]
3661:System/FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 767              		.loc 1 3661 11 view .LVU234
 768 0010 DC68     		ldr	r4, [r3, #12]
 769              	.LVL58:
3662:System/FreeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
 770              		.loc 1 3662 5 is_stmt 1 view .LVU235
3662:System/FreeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
 771              		.loc 1 3662 14 is_stmt 0 view .LVU236
 772 0012 201D     		adds	r0, r4, #4
 773 0014 FFF7FEFF 		bl	uxListRemove
 774              	.LVL59:
3663:System/FreeRTOS/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 775              		.loc 1 3663 5 is_stmt 1 view .LVU237
 776 0018 0B4A     		ldr	r2, .L63+8
 777 001a 1368     		ldr	r3, [r2]
 778 001c 013B     		subs	r3, r3, #1
 779 001e 1360     		str	r3, [r2]
3664:System/FreeRTOS/tasks.c **** 			}
 780              		.loc 1 3664 5 view .LVU238
 781 0020 074A     		ldr	r2, .L63
 782 0022 1368     		ldr	r3, [r2]
 783 0024 013B     		subs	r3, r3, #1
 784 0026 1360     		str	r3, [r2]
3666:System/FreeRTOS/tasks.c **** 
 785              		.loc 1 3666 4 view .LVU239
 786 0028 FFF7FEFF 		bl	vPortExitCritical
 787              	.LVL60:
3668:System/FreeRTOS/tasks.c **** 		}
 788              		.loc 1 3668 4 view .LVU240
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 91


 789 002c 2046     		mov	r0, r4
 790 002e FFF7FEFF 		bl	prvDeleteTCB
 791              	.LVL61:
3657:System/FreeRTOS/tasks.c **** 		{
 792              		.loc 1 3657 8 view .LVU241
3657:System/FreeRTOS/tasks.c **** 		{
 793              		.loc 1 3657 39 is_stmt 0 view .LVU242
 794 0032 034B     		ldr	r3, .L63
 795 0034 1B68     		ldr	r3, [r3]
3657:System/FreeRTOS/tasks.c **** 		{
 796              		.loc 1 3657 8 view .LVU243
 797 0036 002B     		cmp	r3, #0
 798 0038 E6D1     		bne	.L58
 799              	.LBE128:
3672:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 800              		.loc 1 3672 1 view .LVU244
 801 003a 10BD     		pop	{r4, pc}
 802              	.LVL62:
 803              	.L62:
 804              	.LCFI5:
 805              		.cfi_def_cfa_offset 0
 806              		.cfi_restore 4
 807              		.cfi_restore 14
3672:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 808              		.loc 1 3672 1 view .LVU245
 809 003c 7047     		bx	lr
 810              	.L64:
 811 003e 00BF     		.align	2
 812              	.L63:
 813 0040 00000000 		.word	.LANCHOR14
 814 0044 00000000 		.word	.LANCHOR7
 815 0048 00000000 		.word	.LANCHOR9
 816              		.cfi_endproc
 817              	.LFE44:
 819              		.section	.text.prvIdleTask,"ax",%progbits
 820              		.align	1
 821              		.syntax unified
 822              		.thumb
 823              		.thumb_func
 825              	prvIdleTask:
 826              	.LFB42:
3400:System/FreeRTOS/tasks.c **** 	/* Stop warnings. */
 827              		.loc 1 3400 1 is_stmt 1 view -0
 828              		.cfi_startproc
 829              		@ Volatile: function does not return.
 830              		@ args = 0, pretend = 0, frame = 0
 831              		@ frame_needed = 0, uses_anonymous_args = 0
 832              	.LVL63:
3400:System/FreeRTOS/tasks.c **** 	/* Stop warnings. */
 833              		.loc 1 3400 1 is_stmt 0 view .LVU247
 834 0000 08B5     		push	{r3, lr}
 835              	.LCFI6:
 836              		.cfi_def_cfa_offset 8
 837              		.cfi_offset 3, -8
 838              		.cfi_offset 14, -4
 839              	.LVL64:
 840              	.L66:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 92


3402:System/FreeRTOS/tasks.c **** 
 841              		.loc 1 3402 2 is_stmt 1 view .LVU248
3410:System/FreeRTOS/tasks.c **** 
 842              		.loc 1 3410 64 view .LVU249
3412:System/FreeRTOS/tasks.c **** 	{
 843              		.loc 1 3412 2 view .LVU250
3416:System/FreeRTOS/tasks.c **** 
 844              		.loc 1 3416 3 view .LVU251
 845 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 846              	.LVL65:
3439:System/FreeRTOS/tasks.c **** 			{
 847              		.loc 1 3439 4 view .LVU252
3439:System/FreeRTOS/tasks.c **** 			{
 848              		.loc 1 3439 8 is_stmt 0 view .LVU253
 849 0006 074B     		ldr	r3, .L69
 850 0008 1B68     		ldr	r3, [r3]
3439:System/FreeRTOS/tasks.c **** 			{
 851              		.loc 1 3439 6 view .LVU254
 852 000a 012B     		cmp	r3, #1
 853 000c F9D9     		bls	.L66
3441:System/FreeRTOS/tasks.c **** 			}
 854              		.loc 1 3441 5 is_stmt 1 view .LVU255
 855 000e 4FF0E023 		mov	r3, #-536813568
 856 0012 4FF08052 		mov	r2, #268435456
 857 0016 C3F8042D 		str	r2, [r3, #3332]
3441:System/FreeRTOS/tasks.c **** 			}
 858              		.loc 1 3441 5 view .LVU256
 859              		.syntax unified
 860              	@ 3441 "System/FreeRTOS/tasks.c" 1
 861 001a BFF34F8F 		dsb
 862              	@ 0 "" 2
3441:System/FreeRTOS/tasks.c **** 			}
 863              		.loc 1 3441 5 view .LVU257
 864              	@ 3441 "System/FreeRTOS/tasks.c" 1
 865 001e BFF36F8F 		isb
 866              	@ 0 "" 2
3441:System/FreeRTOS/tasks.c **** 			}
 867              		.loc 1 3441 16 view .LVU258
 868              		.thumb
 869              		.syntax unified
 870 0022 EEE7     		b	.L66
 871              	.L70:
 872              		.align	2
 873              	.L69:
 874 0024 00000000 		.word	.LANCHOR4
 875              		.cfi_endproc
 876              	.LFE42:
 878              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 879              		.align	1
 880              		.syntax unified
 881              		.thumb
 882              		.thumb_func
 884              	prvAddCurrentTaskToDelayedList:
 885              	.LVL66:
 886              	.LFB67:
3972:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3973:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 93


3974:System/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3975:System/FreeRTOS/tasks.c **** 
3976:System/FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3977:System/FreeRTOS/tasks.c **** 	{
3978:System/FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
3979:System/FreeRTOS/tasks.c **** 
3980:System/FreeRTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3981:System/FreeRTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3982:System/FreeRTOS/tasks.c **** 		individual execution thread. */
3983:System/FreeRTOS/tasks.c **** 		xReturn = pxCurrentTCB;
3984:System/FreeRTOS/tasks.c **** 
3985:System/FreeRTOS/tasks.c **** 		return xReturn;
3986:System/FreeRTOS/tasks.c **** 	}
3987:System/FreeRTOS/tasks.c **** 
3988:System/FreeRTOS/tasks.c **** 	const uint32_t *xTaskGetCurrentTaskStack( TaskHandle_t xTaskToQuery )
3989:System/FreeRTOS/tasks.c **** 	{
3990:System/FreeRTOS/tasks.c **** 		volatile TCB_t *pxTCB;
3991:System/FreeRTOS/tasks.c **** 
3992:System/FreeRTOS/tasks.c **** 		/* If null is passed in here then the name of the calling task is being
3993:System/FreeRTOS/tasks.c **** 		queried. */
3994:System/FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3995:System/FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
3996:System/FreeRTOS/tasks.c **** 		return ( pxTCB->pxStack );
3997:System/FreeRTOS/tasks.c **** 	}
3998:System/FreeRTOS/tasks.c **** 
3999:System/FreeRTOS/tasks.c **** 	uint32_t xTaskGetCurrentTaskStackDeph( TaskHandle_t xTaskToQuery  )
4000:System/FreeRTOS/tasks.c **** 	{
4001:System/FreeRTOS/tasks.c **** 		volatile TCB_t *pxTCB;
4002:System/FreeRTOS/tasks.c **** 
4003:System/FreeRTOS/tasks.c **** 		/* If null is passed in here then the name of the calling task is being
4004:System/FreeRTOS/tasks.c **** 		queried. */
4005:System/FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
4006:System/FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
4007:System/FreeRTOS/tasks.c **** 		return ( pxTCB->uxSizeOfStack);
4008:System/FreeRTOS/tasks.c **** 	}
4009:System/FreeRTOS/tasks.c **** 
4010:System/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4011:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4012:System/FreeRTOS/tasks.c **** 
4013:System/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4014:System/FreeRTOS/tasks.c **** 
4015:System/FreeRTOS/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
4016:System/FreeRTOS/tasks.c **** 	{
4017:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4018:System/FreeRTOS/tasks.c **** 
4019:System/FreeRTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
4020:System/FreeRTOS/tasks.c **** 		{
4021:System/FreeRTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
4022:System/FreeRTOS/tasks.c **** 		}
4023:System/FreeRTOS/tasks.c **** 		else
4024:System/FreeRTOS/tasks.c **** 		{
4025:System/FreeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4026:System/FreeRTOS/tasks.c **** 			{
4027:System/FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
4028:System/FreeRTOS/tasks.c **** 			}
4029:System/FreeRTOS/tasks.c **** 			else
4030:System/FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 94


4031:System/FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
4032:System/FreeRTOS/tasks.c **** 			}
4033:System/FreeRTOS/tasks.c **** 		}
4034:System/FreeRTOS/tasks.c **** 
4035:System/FreeRTOS/tasks.c **** 		return xReturn;
4036:System/FreeRTOS/tasks.c **** 	}
4037:System/FreeRTOS/tasks.c **** 
4038:System/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4039:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4040:System/FreeRTOS/tasks.c **** 
4041:System/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4042:System/FreeRTOS/tasks.c **** 
4043:System/FreeRTOS/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4044:System/FreeRTOS/tasks.c **** 	{
4045:System/FreeRTOS/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4046:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4047:System/FreeRTOS/tasks.c **** 
4048:System/FreeRTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4049:System/FreeRTOS/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4050:System/FreeRTOS/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4051:System/FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
4052:System/FreeRTOS/tasks.c **** 		{
4053:System/FreeRTOS/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4054:System/FreeRTOS/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4055:System/FreeRTOS/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4056:System/FreeRTOS/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4057:System/FreeRTOS/tasks.c **** 			{
4058:System/FreeRTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4059:System/FreeRTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
4060:System/FreeRTOS/tasks.c **** 				not being used for anything else. */
4061:System/FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
4062:System/FreeRTOS/tasks.c **** 				{
4063:System/FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
4064:System/FreeRTOS/tasks.c **** 				}
4065:System/FreeRTOS/tasks.c **** 				else
4066:System/FreeRTOS/tasks.c **** 				{
4067:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4068:System/FreeRTOS/tasks.c **** 				}
4069:System/FreeRTOS/tasks.c **** 
4070:System/FreeRTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need
4071:System/FreeRTOS/tasks.c **** 				to be moved into a new list. */
4072:System/FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
4073:System/FreeRTOS/tasks.c **** 				{
4074:System/FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4075:System/FreeRTOS/tasks.c **** 					{
4076:System/FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
4077:System/FreeRTOS/tasks.c **** 						there is no need to check again and the port level
4078:System/FreeRTOS/tasks.c **** 						reset macro can be called directly. */
4079:System/FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4080:System/FreeRTOS/tasks.c **** 					}
4081:System/FreeRTOS/tasks.c **** 					else
4082:System/FreeRTOS/tasks.c **** 					{
4083:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4084:System/FreeRTOS/tasks.c **** 					}
4085:System/FreeRTOS/tasks.c **** 
4086:System/FreeRTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4087:System/FreeRTOS/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 95


4088:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
4089:System/FreeRTOS/tasks.c **** 				}
4090:System/FreeRTOS/tasks.c **** 				else
4091:System/FreeRTOS/tasks.c **** 				{
4092:System/FreeRTOS/tasks.c **** 					/* Just inherit the priority. */
4093:System/FreeRTOS/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4094:System/FreeRTOS/tasks.c **** 				}
4095:System/FreeRTOS/tasks.c **** 
4096:System/FreeRTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4097:System/FreeRTOS/tasks.c **** 
4098:System/FreeRTOS/tasks.c **** 				/* Inheritance occurred. */
4099:System/FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
4100:System/FreeRTOS/tasks.c **** 			}
4101:System/FreeRTOS/tasks.c **** 			else
4102:System/FreeRTOS/tasks.c **** 			{
4103:System/FreeRTOS/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4104:System/FreeRTOS/tasks.c **** 				{
4105:System/FreeRTOS/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4106:System/FreeRTOS/tasks.c **** 					priority of the task attempting to take the mutex, but the
4107:System/FreeRTOS/tasks.c **** 					current priority of the mutex holder is not lower than the
4108:System/FreeRTOS/tasks.c **** 					priority of the task attempting to take the mutex.
4109:System/FreeRTOS/tasks.c **** 					Therefore the mutex holder must have already inherited a
4110:System/FreeRTOS/tasks.c **** 					priority, but inheritance would have occurred if that had
4111:System/FreeRTOS/tasks.c **** 					not been the case. */
4112:System/FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
4113:System/FreeRTOS/tasks.c **** 				}
4114:System/FreeRTOS/tasks.c **** 				else
4115:System/FreeRTOS/tasks.c **** 				{
4116:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4117:System/FreeRTOS/tasks.c **** 				}
4118:System/FreeRTOS/tasks.c **** 			}
4119:System/FreeRTOS/tasks.c **** 		}
4120:System/FreeRTOS/tasks.c **** 		else
4121:System/FreeRTOS/tasks.c **** 		{
4122:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4123:System/FreeRTOS/tasks.c **** 		}
4124:System/FreeRTOS/tasks.c **** 
4125:System/FreeRTOS/tasks.c **** 		return xReturn;
4126:System/FreeRTOS/tasks.c **** 	}
4127:System/FreeRTOS/tasks.c **** 
4128:System/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4129:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4130:System/FreeRTOS/tasks.c **** 
4131:System/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4132:System/FreeRTOS/tasks.c **** 
4133:System/FreeRTOS/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4134:System/FreeRTOS/tasks.c **** 	{
4135:System/FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4136:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4137:System/FreeRTOS/tasks.c **** 
4138:System/FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
4139:System/FreeRTOS/tasks.c **** 		{
4140:System/FreeRTOS/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4141:System/FreeRTOS/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4142:System/FreeRTOS/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4143:System/FreeRTOS/tasks.c **** 			be the running state task. */
4144:System/FreeRTOS/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 96


4145:System/FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4146:System/FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4147:System/FreeRTOS/tasks.c **** 
4148:System/FreeRTOS/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4149:System/FreeRTOS/tasks.c **** 			task? */
4150:System/FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4151:System/FreeRTOS/tasks.c **** 			{
4152:System/FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4153:System/FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4154:System/FreeRTOS/tasks.c **** 				{
4155:System/FreeRTOS/tasks.c **** 					/* A task can only have an inherited priority if it holds
4156:System/FreeRTOS/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4157:System/FreeRTOS/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4158:System/FreeRTOS/tasks.c **** 					holding task then it must be the running state task.  Remove
4159:System/FreeRTOS/tasks.c **** 					the holding task from the ready/delayed list. */
4160:System/FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4161:System/FreeRTOS/tasks.c **** 					{
4162:System/FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4163:System/FreeRTOS/tasks.c **** 					}
4164:System/FreeRTOS/tasks.c **** 					else
4165:System/FreeRTOS/tasks.c **** 					{
4166:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4167:System/FreeRTOS/tasks.c **** 					}
4168:System/FreeRTOS/tasks.c **** 
4169:System/FreeRTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the
4170:System/FreeRTOS/tasks.c **** 					new	ready list. */
4171:System/FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4172:System/FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4173:System/FreeRTOS/tasks.c **** 
4174:System/FreeRTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4175:System/FreeRTOS/tasks.c **** 					any other purpose if this task is running, and it must be
4176:System/FreeRTOS/tasks.c **** 					running to give back the mutex. */
4177:System/FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4178:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4179:System/FreeRTOS/tasks.c **** 
4180:System/FreeRTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
4181:System/FreeRTOS/tasks.c **** 					This is only actually required in the corner case whereby
4182:System/FreeRTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4183:System/FreeRTOS/tasks.c **** 					in an order different to that in which they were taken.
4184:System/FreeRTOS/tasks.c **** 					If a context switch did not occur when the first mutex was
4185:System/FreeRTOS/tasks.c **** 					returned, even if a task was waiting on it, then a context
4186:System/FreeRTOS/tasks.c **** 					switch should occur when the last mutex is returned whether
4187:System/FreeRTOS/tasks.c **** 					a task is waiting on it or not. */
4188:System/FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
4189:System/FreeRTOS/tasks.c **** 				}
4190:System/FreeRTOS/tasks.c **** 				else
4191:System/FreeRTOS/tasks.c **** 				{
4192:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4193:System/FreeRTOS/tasks.c **** 				}
4194:System/FreeRTOS/tasks.c **** 			}
4195:System/FreeRTOS/tasks.c **** 			else
4196:System/FreeRTOS/tasks.c **** 			{
4197:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4198:System/FreeRTOS/tasks.c **** 			}
4199:System/FreeRTOS/tasks.c **** 		}
4200:System/FreeRTOS/tasks.c **** 		else
4201:System/FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 97


4202:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4203:System/FreeRTOS/tasks.c **** 		}
4204:System/FreeRTOS/tasks.c **** 
4205:System/FreeRTOS/tasks.c **** 		return xReturn;
4206:System/FreeRTOS/tasks.c **** 	}
4207:System/FreeRTOS/tasks.c **** 
4208:System/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4209:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4210:System/FreeRTOS/tasks.c **** 
4211:System/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4212:System/FreeRTOS/tasks.c **** 
4213:System/FreeRTOS/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4214:System/FreeRTOS/tasks.c **** 	{
4215:System/FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4216:System/FreeRTOS/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4217:System/FreeRTOS/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4218:System/FreeRTOS/tasks.c **** 
4219:System/FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
4220:System/FreeRTOS/tasks.c **** 		{
4221:System/FreeRTOS/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4222:System/FreeRTOS/tasks.c **** 			one mutex. */
4223:System/FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4224:System/FreeRTOS/tasks.c **** 
4225:System/FreeRTOS/tasks.c **** 			/* Determine the priority to which the priority of the task that
4226:System/FreeRTOS/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4227:System/FreeRTOS/tasks.c **** 			holding task's base priority and the priority of the highest
4228:System/FreeRTOS/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4229:System/FreeRTOS/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4230:System/FreeRTOS/tasks.c **** 			{
4231:System/FreeRTOS/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4232:System/FreeRTOS/tasks.c **** 			}
4233:System/FreeRTOS/tasks.c **** 			else
4234:System/FreeRTOS/tasks.c **** 			{
4235:System/FreeRTOS/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4236:System/FreeRTOS/tasks.c **** 			}
4237:System/FreeRTOS/tasks.c **** 
4238:System/FreeRTOS/tasks.c **** 			/* Does the priority need to change? */
4239:System/FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4240:System/FreeRTOS/tasks.c **** 			{
4241:System/FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4242:System/FreeRTOS/tasks.c **** 				simplification in the priority inheritance implementation.  If
4243:System/FreeRTOS/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4244:System/FreeRTOS/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4245:System/FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4246:System/FreeRTOS/tasks.c **** 				{
4247:System/FreeRTOS/tasks.c **** 					/* If a task has timed out because it already holds the
4248:System/FreeRTOS/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4249:System/FreeRTOS/tasks.c **** 					its own priority. */
4250:System/FreeRTOS/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4251:System/FreeRTOS/tasks.c **** 
4252:System/FreeRTOS/tasks.c **** 					/* Disinherit the priority, remembering the previous
4253:System/FreeRTOS/tasks.c **** 					priority to facilitate determining the subject task's
4254:System/FreeRTOS/tasks.c **** 					state. */
4255:System/FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4256:System/FreeRTOS/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4257:System/FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4258:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 98


4259:System/FreeRTOS/tasks.c **** 					/* Only reset the event list item value if the value is not
4260:System/FreeRTOS/tasks.c **** 					being used for anything else. */
4261:System/FreeRTOS/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4262:System/FreeRTOS/tasks.c **** 					{
4263:System/FreeRTOS/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4264:System/FreeRTOS/tasks.c **** 					}
4265:System/FreeRTOS/tasks.c **** 					else
4266:System/FreeRTOS/tasks.c **** 					{
4267:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4268:System/FreeRTOS/tasks.c **** 					}
4269:System/FreeRTOS/tasks.c **** 
4270:System/FreeRTOS/tasks.c **** 					/* If the running task is not the task that holds the mutex
4271:System/FreeRTOS/tasks.c **** 					then the task that holds the mutex could be in either the
4272:System/FreeRTOS/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4273:System/FreeRTOS/tasks.c **** 					from its current state list if it is in the Ready state as
4274:System/FreeRTOS/tasks.c **** 					the task's priority is going to change and there is one
4275:System/FreeRTOS/tasks.c **** 					Ready list per priority. */
4276:System/FreeRTOS/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4277:System/FreeRTOS/tasks.c **** 					{
4278:System/FreeRTOS/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4279:System/FreeRTOS/tasks.c **** 						{
4280:System/FreeRTOS/tasks.c **** 							/* It is known that the task is in its ready list so
4281:System/FreeRTOS/tasks.c **** 							there is no need to check again and the port level
4282:System/FreeRTOS/tasks.c **** 							reset macro can be called directly. */
4283:System/FreeRTOS/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4284:System/FreeRTOS/tasks.c **** 						}
4285:System/FreeRTOS/tasks.c **** 						else
4286:System/FreeRTOS/tasks.c **** 						{
4287:System/FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4288:System/FreeRTOS/tasks.c **** 						}
4289:System/FreeRTOS/tasks.c **** 
4290:System/FreeRTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4291:System/FreeRTOS/tasks.c **** 					}
4292:System/FreeRTOS/tasks.c **** 					else
4293:System/FreeRTOS/tasks.c **** 					{
4294:System/FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4295:System/FreeRTOS/tasks.c **** 					}
4296:System/FreeRTOS/tasks.c **** 				}
4297:System/FreeRTOS/tasks.c **** 				else
4298:System/FreeRTOS/tasks.c **** 				{
4299:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4300:System/FreeRTOS/tasks.c **** 				}
4301:System/FreeRTOS/tasks.c **** 			}
4302:System/FreeRTOS/tasks.c **** 			else
4303:System/FreeRTOS/tasks.c **** 			{
4304:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4305:System/FreeRTOS/tasks.c **** 			}
4306:System/FreeRTOS/tasks.c **** 		}
4307:System/FreeRTOS/tasks.c **** 		else
4308:System/FreeRTOS/tasks.c **** 		{
4309:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4310:System/FreeRTOS/tasks.c **** 		}
4311:System/FreeRTOS/tasks.c **** 	}
4312:System/FreeRTOS/tasks.c **** 
4313:System/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4314:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4315:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 99


4316:System/FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4317:System/FreeRTOS/tasks.c **** 
4318:System/FreeRTOS/tasks.c **** 	void vTaskEnterCritical( void )
4319:System/FreeRTOS/tasks.c **** 	{
4320:System/FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
4321:System/FreeRTOS/tasks.c **** 
4322:System/FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4323:System/FreeRTOS/tasks.c **** 		{
4324:System/FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4325:System/FreeRTOS/tasks.c **** 
4326:System/FreeRTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4327:System/FreeRTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
4328:System/FreeRTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4329:System/FreeRTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4330:System/FreeRTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
4331:System/FreeRTOS/tasks.c **** 			critical section. */
4332:System/FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4333:System/FreeRTOS/tasks.c **** 			{
4334:System/FreeRTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
4335:System/FreeRTOS/tasks.c **** 			}
4336:System/FreeRTOS/tasks.c **** 		}
4337:System/FreeRTOS/tasks.c **** 		else
4338:System/FreeRTOS/tasks.c **** 		{
4339:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4340:System/FreeRTOS/tasks.c **** 		}
4341:System/FreeRTOS/tasks.c **** 	}
4342:System/FreeRTOS/tasks.c **** 
4343:System/FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4344:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4345:System/FreeRTOS/tasks.c **** 
4346:System/FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4347:System/FreeRTOS/tasks.c **** 
4348:System/FreeRTOS/tasks.c **** 	void vTaskExitCritical( void )
4349:System/FreeRTOS/tasks.c **** 	{
4350:System/FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4351:System/FreeRTOS/tasks.c **** 		{
4352:System/FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4353:System/FreeRTOS/tasks.c **** 			{
4354:System/FreeRTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4355:System/FreeRTOS/tasks.c **** 
4356:System/FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4357:System/FreeRTOS/tasks.c **** 				{
4358:System/FreeRTOS/tasks.c **** 					portENABLE_INTERRUPTS();
4359:System/FreeRTOS/tasks.c **** 				}
4360:System/FreeRTOS/tasks.c **** 				else
4361:System/FreeRTOS/tasks.c **** 				{
4362:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4363:System/FreeRTOS/tasks.c **** 				}
4364:System/FreeRTOS/tasks.c **** 			}
4365:System/FreeRTOS/tasks.c **** 			else
4366:System/FreeRTOS/tasks.c **** 			{
4367:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4368:System/FreeRTOS/tasks.c **** 			}
4369:System/FreeRTOS/tasks.c **** 		}
4370:System/FreeRTOS/tasks.c **** 		else
4371:System/FreeRTOS/tasks.c **** 		{
4372:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 100


4373:System/FreeRTOS/tasks.c **** 		}
4374:System/FreeRTOS/tasks.c **** 	}
4375:System/FreeRTOS/tasks.c **** 
4376:System/FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4377:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4378:System/FreeRTOS/tasks.c **** 
4379:System/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4380:System/FreeRTOS/tasks.c **** 
4381:System/FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4382:System/FreeRTOS/tasks.c **** 	{
4383:System/FreeRTOS/tasks.c **** 	size_t x;
4384:System/FreeRTOS/tasks.c **** 
4385:System/FreeRTOS/tasks.c **** 		/* Start by copying the entire string. */
4386:System/FreeRTOS/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4387:System/FreeRTOS/tasks.c **** 
4388:System/FreeRTOS/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4389:System/FreeRTOS/tasks.c **** 		printed out. */
4390:System/FreeRTOS/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4391:System/FreeRTOS/tasks.c **** 		{
4392:System/FreeRTOS/tasks.c **** 			pcBuffer[ x ] = ' ';
4393:System/FreeRTOS/tasks.c **** 		}
4394:System/FreeRTOS/tasks.c **** 
4395:System/FreeRTOS/tasks.c **** 		/* Terminate. */
4396:System/FreeRTOS/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4397:System/FreeRTOS/tasks.c **** 
4398:System/FreeRTOS/tasks.c **** 		/* Return the new end of string. */
4399:System/FreeRTOS/tasks.c **** 		return &( pcBuffer[ x ] );
4400:System/FreeRTOS/tasks.c **** 	}
4401:System/FreeRTOS/tasks.c **** 
4402:System/FreeRTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4403:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4404:System/FreeRTOS/tasks.c **** 
4405:System/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4406:System/FreeRTOS/tasks.c **** 
4407:System/FreeRTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4408:System/FreeRTOS/tasks.c **** 	{
4409:System/FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4410:System/FreeRTOS/tasks.c **** 	UBaseType_t uxArraySize, x;
4411:System/FreeRTOS/tasks.c **** 	char cStatus;
4412:System/FreeRTOS/tasks.c **** 
4413:System/FreeRTOS/tasks.c **** 		/*
4414:System/FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
4415:System/FreeRTOS/tasks.c **** 		 *
4416:System/FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4417:System/FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4418:System/FreeRTOS/tasks.c **** 		 * scheduler.
4419:System/FreeRTOS/tasks.c **** 		 *
4420:System/FreeRTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4421:System/FreeRTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4422:System/FreeRTOS/tasks.c **** 		 * displays task names, states and stack usage.
4423:System/FreeRTOS/tasks.c **** 		 *
4424:System/FreeRTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4425:System/FreeRTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4426:System/FreeRTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4427:System/FreeRTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4428:System/FreeRTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4429:System/FreeRTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 101


4430:System/FreeRTOS/tasks.c **** 		 * snprintf() implementation!).
4431:System/FreeRTOS/tasks.c **** 		 *
4432:System/FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4433:System/FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4434:System/FreeRTOS/tasks.c **** 		 * through a call to vTaskList().
4435:System/FreeRTOS/tasks.c **** 		 */
4436:System/FreeRTOS/tasks.c **** 
4437:System/FreeRTOS/tasks.c **** 
4438:System/FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4439:System/FreeRTOS/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4440:System/FreeRTOS/tasks.c **** 
4441:System/FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4442:System/FreeRTOS/tasks.c **** 		function is executing. */
4443:System/FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4444:System/FreeRTOS/tasks.c **** 
4445:System/FreeRTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4446:System/FreeRTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4447:System/FreeRTOS/tasks.c **** 		equate to NULL. */
4448:System/FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4449:System/FreeRTOS/tasks.c **** 
4450:System/FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
4451:System/FreeRTOS/tasks.c **** 		{
4452:System/FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
4453:System/FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4454:System/FreeRTOS/tasks.c **** 
4455:System/FreeRTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
4456:System/FreeRTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4457:System/FreeRTOS/tasks.c **** 			{
4458:System/FreeRTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4459:System/FreeRTOS/tasks.c **** 				{
4460:System/FreeRTOS/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4461:System/FreeRTOS/tasks.c **** 										break;
4462:System/FreeRTOS/tasks.c **** 
4463:System/FreeRTOS/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4464:System/FreeRTOS/tasks.c **** 										break;
4465:System/FreeRTOS/tasks.c **** 
4466:System/FreeRTOS/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4467:System/FreeRTOS/tasks.c **** 										break;
4468:System/FreeRTOS/tasks.c **** 
4469:System/FreeRTOS/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4470:System/FreeRTOS/tasks.c **** 										break;
4471:System/FreeRTOS/tasks.c **** 
4472:System/FreeRTOS/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4473:System/FreeRTOS/tasks.c **** 										break;
4474:System/FreeRTOS/tasks.c **** 
4475:System/FreeRTOS/tasks.c **** 					case eInvalid:		/* Fall through. */
4476:System/FreeRTOS/tasks.c **** 					default:			/* Should not get here, but it is included
4477:System/FreeRTOS/tasks.c **** 										to prevent static checking errors. */
4478:System/FreeRTOS/tasks.c **** 										cStatus = ( char ) 0x00;
4479:System/FreeRTOS/tasks.c **** 										break;
4480:System/FreeRTOS/tasks.c **** 				}
4481:System/FreeRTOS/tasks.c **** 
4482:System/FreeRTOS/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4483:System/FreeRTOS/tasks.c **** 				can be printed in tabular form more easily. */
4484:System/FreeRTOS/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4485:System/FreeRTOS/tasks.c **** 
4486:System/FreeRTOS/tasks.c **** 				/* Write the rest of the string. */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 102


4487:System/FreeRTOS/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4488:System/FreeRTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4489:System/FreeRTOS/tasks.c **** 			}
4490:System/FreeRTOS/tasks.c **** 
4491:System/FreeRTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4492:System/FreeRTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4493:System/FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4494:System/FreeRTOS/tasks.c **** 		}
4495:System/FreeRTOS/tasks.c **** 		else
4496:System/FreeRTOS/tasks.c **** 		{
4497:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4498:System/FreeRTOS/tasks.c **** 		}
4499:System/FreeRTOS/tasks.c **** 	}
4500:System/FreeRTOS/tasks.c **** 
4501:System/FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4502:System/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
4503:System/FreeRTOS/tasks.c **** 
4504:System/FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4505:System/FreeRTOS/tasks.c **** 
4506:System/FreeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4507:System/FreeRTOS/tasks.c **** 	{
4508:System/FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4509:System/FreeRTOS/tasks.c **** 	UBaseType_t uxArraySize, x;
4510:System/FreeRTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4511:System/FreeRTOS/tasks.c **** 
4512:System/FreeRTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4513:System/FreeRTOS/tasks.c **** 		{
4514:System/FreeRTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4515:System/FreeRTOS/tasks.c **** 		}
4516:System/FreeRTOS/tasks.c **** 		#endif
4517:System/FreeRTOS/tasks.c **** 
4518:System/FreeRTOS/tasks.c **** 		/*
4519:System/FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
4520:System/FreeRTOS/tasks.c **** 		 *
4521:System/FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4522:System/FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4523:System/FreeRTOS/tasks.c **** 		 * scheduler.
4524:System/FreeRTOS/tasks.c **** 		 *
4525:System/FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4526:System/FreeRTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4527:System/FreeRTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4528:System/FreeRTOS/tasks.c **** 		 * in both absolute and percentage terms.
4529:System/FreeRTOS/tasks.c **** 		 *
4530:System/FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4531:System/FreeRTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4532:System/FreeRTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4533:System/FreeRTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4534:System/FreeRTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4535:System/FreeRTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4536:System/FreeRTOS/tasks.c **** 		 * a full snprintf() implementation!).
4537:System/FreeRTOS/tasks.c **** 		 *
4538:System/FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4539:System/FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4540:System/FreeRTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4541:System/FreeRTOS/tasks.c **** 		 */
4542:System/FreeRTOS/tasks.c **** 
4543:System/FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 103


4544:System/FreeRTOS/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4545:System/FreeRTOS/tasks.c **** 
4546:System/FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4547:System/FreeRTOS/tasks.c **** 		function is executing. */
4548:System/FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4549:System/FreeRTOS/tasks.c **** 
4550:System/FreeRTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4551:System/FreeRTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4552:System/FreeRTOS/tasks.c **** 		equate to NULL. */
4553:System/FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4554:System/FreeRTOS/tasks.c **** 
4555:System/FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
4556:System/FreeRTOS/tasks.c **** 		{
4557:System/FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
4558:System/FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4559:System/FreeRTOS/tasks.c **** 
4560:System/FreeRTOS/tasks.c **** 			/* For percentage calculations. */
4561:System/FreeRTOS/tasks.c **** 			ulTotalTime /= 100UL;
4562:System/FreeRTOS/tasks.c **** 
4563:System/FreeRTOS/tasks.c **** 			/* Avoid divide by zero errors. */
4564:System/FreeRTOS/tasks.c **** 			if( ulTotalTime > 0UL )
4565:System/FreeRTOS/tasks.c **** 			{
4566:System/FreeRTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
4567:System/FreeRTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4568:System/FreeRTOS/tasks.c **** 				{
4569:System/FreeRTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
4570:System/FreeRTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
4571:System/FreeRTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4572:System/FreeRTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4573:System/FreeRTOS/tasks.c **** 
4574:System/FreeRTOS/tasks.c **** 					/* Write the task name to the string, padding with
4575:System/FreeRTOS/tasks.c **** 					spaces so it can be printed in tabular form more
4576:System/FreeRTOS/tasks.c **** 					easily. */
4577:System/FreeRTOS/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4578:System/FreeRTOS/tasks.c **** 
4579:System/FreeRTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4580:System/FreeRTOS/tasks.c **** 					{
4581:System/FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4582:System/FreeRTOS/tasks.c **** 						{
4583:System/FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4584:System/FreeRTOS/tasks.c **** 						}
4585:System/FreeRTOS/tasks.c **** 						#else
4586:System/FreeRTOS/tasks.c **** 						{
4587:System/FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4588:System/FreeRTOS/tasks.c **** 							printf() library can be used. */
4589:System/FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4590:System/FreeRTOS/tasks.c **** 						}
4591:System/FreeRTOS/tasks.c **** 						#endif
4592:System/FreeRTOS/tasks.c **** 					}
4593:System/FreeRTOS/tasks.c **** 					else
4594:System/FreeRTOS/tasks.c **** 					{
4595:System/FreeRTOS/tasks.c **** 						/* If the percentage is zero here then the task has
4596:System/FreeRTOS/tasks.c **** 						consumed less than 1% of the total run time. */
4597:System/FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4598:System/FreeRTOS/tasks.c **** 						{
4599:System/FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4600:System/FreeRTOS/tasks.c **** 						}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 104


4601:System/FreeRTOS/tasks.c **** 						#else
4602:System/FreeRTOS/tasks.c **** 						{
4603:System/FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4604:System/FreeRTOS/tasks.c **** 							printf() library can be used. */
4605:System/FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4606:System/FreeRTOS/tasks.c **** 						}
4607:System/FreeRTOS/tasks.c **** 						#endif
4608:System/FreeRTOS/tasks.c **** 					}
4609:System/FreeRTOS/tasks.c **** 
4610:System/FreeRTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4611:System/FreeRTOS/tasks.c **** 				}
4612:System/FreeRTOS/tasks.c **** 			}
4613:System/FreeRTOS/tasks.c **** 			else
4614:System/FreeRTOS/tasks.c **** 			{
4615:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4616:System/FreeRTOS/tasks.c **** 			}
4617:System/FreeRTOS/tasks.c **** 
4618:System/FreeRTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4619:System/FreeRTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4620:System/FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4621:System/FreeRTOS/tasks.c **** 		}
4622:System/FreeRTOS/tasks.c **** 		else
4623:System/FreeRTOS/tasks.c **** 		{
4624:System/FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4625:System/FreeRTOS/tasks.c **** 		}
4626:System/FreeRTOS/tasks.c **** 	}
4627:System/FreeRTOS/tasks.c **** 
4628:System/FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4629:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4630:System/FreeRTOS/tasks.c **** 
4631:System/FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4632:System/FreeRTOS/tasks.c **** {
4633:System/FreeRTOS/tasks.c **** TickType_t uxReturn;
4634:System/FreeRTOS/tasks.c **** 
4635:System/FreeRTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4636:System/FreeRTOS/tasks.c **** 
4637:System/FreeRTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4638:System/FreeRTOS/tasks.c **** 	queues and semaphores. */
4639:System/FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4640:System/FreeRTOS/tasks.c **** 
4641:System/FreeRTOS/tasks.c **** 	return uxReturn;
4642:System/FreeRTOS/tasks.c **** }
4643:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4644:System/FreeRTOS/tasks.c **** 
4645:System/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4646:System/FreeRTOS/tasks.c **** 
4647:System/FreeRTOS/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4648:System/FreeRTOS/tasks.c **** 	{
4649:System/FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4650:System/FreeRTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
4651:System/FreeRTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
4652:System/FreeRTOS/tasks.c **** 		{
4653:System/FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4654:System/FreeRTOS/tasks.c **** 		}
4655:System/FreeRTOS/tasks.c **** 
4656:System/FreeRTOS/tasks.c **** 		return pxCurrentTCB;
4657:System/FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 105


4658:System/FreeRTOS/tasks.c **** 
4659:System/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4660:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4661:System/FreeRTOS/tasks.c **** 
4662:System/FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4663:System/FreeRTOS/tasks.c **** 
4664:System/FreeRTOS/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4665:System/FreeRTOS/tasks.c **** 	{
4666:System/FreeRTOS/tasks.c **** 	uint32_t ulReturn;
4667:System/FreeRTOS/tasks.c **** 
4668:System/FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4669:System/FreeRTOS/tasks.c **** 		{
4670:System/FreeRTOS/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4671:System/FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4672:System/FreeRTOS/tasks.c **** 			{
4673:System/FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4674:System/FreeRTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4675:System/FreeRTOS/tasks.c **** 
4676:System/FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4677:System/FreeRTOS/tasks.c **** 				{
4678:System/FreeRTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4679:System/FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4680:System/FreeRTOS/tasks.c **** 
4681:System/FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4682:System/FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4683:System/FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4684:System/FreeRTOS/tasks.c **** 					application code should ever do. */
4685:System/FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
4686:System/FreeRTOS/tasks.c **** 				}
4687:System/FreeRTOS/tasks.c **** 				else
4688:System/FreeRTOS/tasks.c **** 				{
4689:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4690:System/FreeRTOS/tasks.c **** 				}
4691:System/FreeRTOS/tasks.c **** 			}
4692:System/FreeRTOS/tasks.c **** 			else
4693:System/FreeRTOS/tasks.c **** 			{
4694:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4695:System/FreeRTOS/tasks.c **** 			}
4696:System/FreeRTOS/tasks.c **** 		}
4697:System/FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4698:System/FreeRTOS/tasks.c **** 
4699:System/FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4700:System/FreeRTOS/tasks.c **** 		{
4701:System/FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4702:System/FreeRTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4703:System/FreeRTOS/tasks.c **** 
4704:System/FreeRTOS/tasks.c **** 			if( ulReturn != 0UL )
4705:System/FreeRTOS/tasks.c **** 			{
4706:System/FreeRTOS/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4707:System/FreeRTOS/tasks.c **** 				{
4708:System/FreeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4709:System/FreeRTOS/tasks.c **** 				}
4710:System/FreeRTOS/tasks.c **** 				else
4711:System/FreeRTOS/tasks.c **** 				{
4712:System/FreeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4713:System/FreeRTOS/tasks.c **** 				}
4714:System/FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 106


4715:System/FreeRTOS/tasks.c **** 			else
4716:System/FreeRTOS/tasks.c **** 			{
4717:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4718:System/FreeRTOS/tasks.c **** 			}
4719:System/FreeRTOS/tasks.c **** 
4720:System/FreeRTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4721:System/FreeRTOS/tasks.c **** 		}
4722:System/FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4723:System/FreeRTOS/tasks.c **** 
4724:System/FreeRTOS/tasks.c **** 		return ulReturn;
4725:System/FreeRTOS/tasks.c **** 	}
4726:System/FreeRTOS/tasks.c **** 
4727:System/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4728:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4729:System/FreeRTOS/tasks.c **** 
4730:System/FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4731:System/FreeRTOS/tasks.c **** 
4732:System/FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4733:System/FreeRTOS/tasks.c **** 	{
4734:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4735:System/FreeRTOS/tasks.c **** 
4736:System/FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4737:System/FreeRTOS/tasks.c **** 		{
4738:System/FreeRTOS/tasks.c **** 			/* Only block if a notification is not already pending. */
4739:System/FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4740:System/FreeRTOS/tasks.c **** 			{
4741:System/FreeRTOS/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4742:System/FreeRTOS/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4743:System/FreeRTOS/tasks.c **** 				clear the value to zero. */
4744:System/FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4745:System/FreeRTOS/tasks.c **** 
4746:System/FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4747:System/FreeRTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4748:System/FreeRTOS/tasks.c **** 
4749:System/FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4750:System/FreeRTOS/tasks.c **** 				{
4751:System/FreeRTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4752:System/FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4753:System/FreeRTOS/tasks.c **** 
4754:System/FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4755:System/FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4756:System/FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4757:System/FreeRTOS/tasks.c **** 					application code should ever do. */
4758:System/FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
4759:System/FreeRTOS/tasks.c **** 				}
4760:System/FreeRTOS/tasks.c **** 				else
4761:System/FreeRTOS/tasks.c **** 				{
4762:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4763:System/FreeRTOS/tasks.c **** 				}
4764:System/FreeRTOS/tasks.c **** 			}
4765:System/FreeRTOS/tasks.c **** 			else
4766:System/FreeRTOS/tasks.c **** 			{
4767:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4768:System/FreeRTOS/tasks.c **** 			}
4769:System/FreeRTOS/tasks.c **** 		}
4770:System/FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4771:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 107


4772:System/FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4773:System/FreeRTOS/tasks.c **** 		{
4774:System/FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4775:System/FreeRTOS/tasks.c **** 
4776:System/FreeRTOS/tasks.c **** 			if( pulNotificationValue != NULL )
4777:System/FreeRTOS/tasks.c **** 			{
4778:System/FreeRTOS/tasks.c **** 				/* Output the current notification value, which may or may not
4779:System/FreeRTOS/tasks.c **** 				have changed. */
4780:System/FreeRTOS/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4781:System/FreeRTOS/tasks.c **** 			}
4782:System/FreeRTOS/tasks.c **** 
4783:System/FreeRTOS/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4784:System/FreeRTOS/tasks.c **** 			blocked state (because a notification was already pending) or the
4785:System/FreeRTOS/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4786:System/FreeRTOS/tasks.c **** 			unblocked because of a timeout. */
4787:System/FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4788:System/FreeRTOS/tasks.c **** 			{
4789:System/FreeRTOS/tasks.c **** 				/* A notification was not received. */
4790:System/FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
4791:System/FreeRTOS/tasks.c **** 			}
4792:System/FreeRTOS/tasks.c **** 			else
4793:System/FreeRTOS/tasks.c **** 			{
4794:System/FreeRTOS/tasks.c **** 				/* A notification was already pending or a notification was
4795:System/FreeRTOS/tasks.c **** 				received while the task was waiting. */
4796:System/FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4797:System/FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
4798:System/FreeRTOS/tasks.c **** 			}
4799:System/FreeRTOS/tasks.c **** 
4800:System/FreeRTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4801:System/FreeRTOS/tasks.c **** 		}
4802:System/FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4803:System/FreeRTOS/tasks.c **** 
4804:System/FreeRTOS/tasks.c **** 		return xReturn;
4805:System/FreeRTOS/tasks.c **** 	}
4806:System/FreeRTOS/tasks.c **** 
4807:System/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4808:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4809:System/FreeRTOS/tasks.c **** 
4810:System/FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4811:System/FreeRTOS/tasks.c **** 
4812:System/FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4813:System/FreeRTOS/tasks.c **** 	{
4814:System/FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4815:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4816:System/FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4817:System/FreeRTOS/tasks.c **** 
4818:System/FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4819:System/FreeRTOS/tasks.c **** 		pxTCB = xTaskToNotify;
4820:System/FreeRTOS/tasks.c **** 
4821:System/FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4822:System/FreeRTOS/tasks.c **** 		{
4823:System/FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4824:System/FreeRTOS/tasks.c **** 			{
4825:System/FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4826:System/FreeRTOS/tasks.c **** 			}
4827:System/FreeRTOS/tasks.c **** 
4828:System/FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 108


4829:System/FreeRTOS/tasks.c **** 
4830:System/FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4831:System/FreeRTOS/tasks.c **** 
4832:System/FreeRTOS/tasks.c **** 			switch( eAction )
4833:System/FreeRTOS/tasks.c **** 			{
4834:System/FreeRTOS/tasks.c **** 				case eSetBits	:
4835:System/FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4836:System/FreeRTOS/tasks.c **** 					break;
4837:System/FreeRTOS/tasks.c **** 
4838:System/FreeRTOS/tasks.c **** 				case eIncrement	:
4839:System/FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4840:System/FreeRTOS/tasks.c **** 					break;
4841:System/FreeRTOS/tasks.c **** 
4842:System/FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4843:System/FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4844:System/FreeRTOS/tasks.c **** 					break;
4845:System/FreeRTOS/tasks.c **** 
4846:System/FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4847:System/FreeRTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4848:System/FreeRTOS/tasks.c **** 					{
4849:System/FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4850:System/FreeRTOS/tasks.c **** 					}
4851:System/FreeRTOS/tasks.c **** 					else
4852:System/FreeRTOS/tasks.c **** 					{
4853:System/FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4854:System/FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
4855:System/FreeRTOS/tasks.c **** 					}
4856:System/FreeRTOS/tasks.c **** 					break;
4857:System/FreeRTOS/tasks.c **** 
4858:System/FreeRTOS/tasks.c **** 				case eNoAction:
4859:System/FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4860:System/FreeRTOS/tasks.c **** 					updated. */
4861:System/FreeRTOS/tasks.c **** 					break;
4862:System/FreeRTOS/tasks.c **** 
4863:System/FreeRTOS/tasks.c **** 				default:
4864:System/FreeRTOS/tasks.c **** 					/* Should not get here if all enums are handled.
4865:System/FreeRTOS/tasks.c **** 					Artificially force an assert by testing a value the
4866:System/FreeRTOS/tasks.c **** 					compiler can't assume is const. */
4867:System/FreeRTOS/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4868:System/FreeRTOS/tasks.c **** 
4869:System/FreeRTOS/tasks.c **** 					break;
4870:System/FreeRTOS/tasks.c **** 			}
4871:System/FreeRTOS/tasks.c **** 
4872:System/FreeRTOS/tasks.c **** 			traceTASK_NOTIFY();
4873:System/FreeRTOS/tasks.c **** 
4874:System/FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4875:System/FreeRTOS/tasks.c **** 			notification then unblock it now. */
4876:System/FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4877:System/FreeRTOS/tasks.c **** 			{
4878:System/FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4879:System/FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4880:System/FreeRTOS/tasks.c **** 
4881:System/FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4882:System/FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4883:System/FreeRTOS/tasks.c **** 
4884:System/FreeRTOS/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4885:System/FreeRTOS/tasks.c **** 				{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 109


4886:System/FreeRTOS/tasks.c **** 					/* If a task is blocked waiting for a notification then
4887:System/FreeRTOS/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4888:System/FreeRTOS/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4889:System/FreeRTOS/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4890:System/FreeRTOS/tasks.c **** 					because it will automatically get reset to a new value when
4891:System/FreeRTOS/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4892:System/FreeRTOS/tasks.c **** 					tickless idling is used it might be more important to enter
4893:System/FreeRTOS/tasks.c **** 					sleep mode at the earliest possible time - so reset
4894:System/FreeRTOS/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4895:System/FreeRTOS/tasks.c **** 					earliest possible time. */
4896:System/FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
4897:System/FreeRTOS/tasks.c **** 				}
4898:System/FreeRTOS/tasks.c **** 				#endif
4899:System/FreeRTOS/tasks.c **** 
4900:System/FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4901:System/FreeRTOS/tasks.c **** 				{
4902:System/FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4903:System/FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4904:System/FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4905:System/FreeRTOS/tasks.c **** 				}
4906:System/FreeRTOS/tasks.c **** 				else
4907:System/FreeRTOS/tasks.c **** 				{
4908:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4909:System/FreeRTOS/tasks.c **** 				}
4910:System/FreeRTOS/tasks.c **** 			}
4911:System/FreeRTOS/tasks.c **** 			else
4912:System/FreeRTOS/tasks.c **** 			{
4913:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4914:System/FreeRTOS/tasks.c **** 			}
4915:System/FreeRTOS/tasks.c **** 		}
4916:System/FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4917:System/FreeRTOS/tasks.c **** 
4918:System/FreeRTOS/tasks.c **** 		return xReturn;
4919:System/FreeRTOS/tasks.c **** 	}
4920:System/FreeRTOS/tasks.c **** 
4921:System/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4922:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4923:System/FreeRTOS/tasks.c **** 
4924:System/FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4925:System/FreeRTOS/tasks.c **** 
4926:System/FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4927:System/FreeRTOS/tasks.c **** 	{
4928:System/FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4929:System/FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4930:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4931:System/FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4932:System/FreeRTOS/tasks.c **** 
4933:System/FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4934:System/FreeRTOS/tasks.c **** 
4935:System/FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4936:System/FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4937:System/FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4938:System/FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4939:System/FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4940:System/FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4941:System/FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4942:System/FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 110


4943:System/FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4944:System/FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4945:System/FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4946:System/FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4947:System/FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4948:System/FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4949:System/FreeRTOS/tasks.c **** 		provided on the following link:
4950:System/FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4951:System/FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4952:System/FreeRTOS/tasks.c **** 
4953:System/FreeRTOS/tasks.c **** 		pxTCB = xTaskToNotify;
4954:System/FreeRTOS/tasks.c **** 
4955:System/FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4956:System/FreeRTOS/tasks.c **** 		{
4957:System/FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4958:System/FreeRTOS/tasks.c **** 			{
4959:System/FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4960:System/FreeRTOS/tasks.c **** 			}
4961:System/FreeRTOS/tasks.c **** 
4962:System/FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4963:System/FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4964:System/FreeRTOS/tasks.c **** 
4965:System/FreeRTOS/tasks.c **** 			switch( eAction )
4966:System/FreeRTOS/tasks.c **** 			{
4967:System/FreeRTOS/tasks.c **** 				case eSetBits	:
4968:System/FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4969:System/FreeRTOS/tasks.c **** 					break;
4970:System/FreeRTOS/tasks.c **** 
4971:System/FreeRTOS/tasks.c **** 				case eIncrement	:
4972:System/FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4973:System/FreeRTOS/tasks.c **** 					break;
4974:System/FreeRTOS/tasks.c **** 
4975:System/FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4976:System/FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4977:System/FreeRTOS/tasks.c **** 					break;
4978:System/FreeRTOS/tasks.c **** 
4979:System/FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4980:System/FreeRTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4981:System/FreeRTOS/tasks.c **** 					{
4982:System/FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4983:System/FreeRTOS/tasks.c **** 					}
4984:System/FreeRTOS/tasks.c **** 					else
4985:System/FreeRTOS/tasks.c **** 					{
4986:System/FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4987:System/FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
4988:System/FreeRTOS/tasks.c **** 					}
4989:System/FreeRTOS/tasks.c **** 					break;
4990:System/FreeRTOS/tasks.c **** 
4991:System/FreeRTOS/tasks.c **** 				case eNoAction :
4992:System/FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4993:System/FreeRTOS/tasks.c **** 					updated. */
4994:System/FreeRTOS/tasks.c **** 					break;
4995:System/FreeRTOS/tasks.c **** 
4996:System/FreeRTOS/tasks.c **** 				default:
4997:System/FreeRTOS/tasks.c **** 					/* Should not get here if all enums are handled.
4998:System/FreeRTOS/tasks.c **** 					Artificially force an assert by testing a value the
4999:System/FreeRTOS/tasks.c **** 					compiler can't assume is const. */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 111


5000:System/FreeRTOS/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
5001:System/FreeRTOS/tasks.c **** 					break;
5002:System/FreeRTOS/tasks.c **** 			}
5003:System/FreeRTOS/tasks.c **** 
5004:System/FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
5005:System/FreeRTOS/tasks.c **** 
5006:System/FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5007:System/FreeRTOS/tasks.c **** 			notification then unblock it now. */
5008:System/FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5009:System/FreeRTOS/tasks.c **** 			{
5010:System/FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
5011:System/FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5012:System/FreeRTOS/tasks.c **** 
5013:System/FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5014:System/FreeRTOS/tasks.c **** 				{
5015:System/FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5016:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5017:System/FreeRTOS/tasks.c **** 				}
5018:System/FreeRTOS/tasks.c **** 				else
5019:System/FreeRTOS/tasks.c **** 				{
5020:System/FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5021:System/FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
5022:System/FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5023:System/FreeRTOS/tasks.c **** 				}
5024:System/FreeRTOS/tasks.c **** 
5025:System/FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5026:System/FreeRTOS/tasks.c **** 				{
5027:System/FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
5028:System/FreeRTOS/tasks.c **** 					executing task so a yield is required. */
5029:System/FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5030:System/FreeRTOS/tasks.c **** 					{
5031:System/FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5032:System/FreeRTOS/tasks.c **** 					}
5033:System/FreeRTOS/tasks.c **** 
5034:System/FreeRTOS/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5035:System/FreeRTOS/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5036:System/FreeRTOS/tasks.c **** 					safe FreeRTOS function. */
5037:System/FreeRTOS/tasks.c **** 					xYieldPending = pdTRUE;
5038:System/FreeRTOS/tasks.c **** 				}
5039:System/FreeRTOS/tasks.c **** 				else
5040:System/FreeRTOS/tasks.c **** 				{
5041:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5042:System/FreeRTOS/tasks.c **** 				}
5043:System/FreeRTOS/tasks.c **** 			}
5044:System/FreeRTOS/tasks.c **** 		}
5045:System/FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5046:System/FreeRTOS/tasks.c **** 
5047:System/FreeRTOS/tasks.c **** 		return xReturn;
5048:System/FreeRTOS/tasks.c **** 	}
5049:System/FreeRTOS/tasks.c **** 
5050:System/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5051:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5052:System/FreeRTOS/tasks.c **** 
5053:System/FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5054:System/FreeRTOS/tasks.c **** 
5055:System/FreeRTOS/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5056:System/FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 112


5057:System/FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
5058:System/FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
5059:System/FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5060:System/FreeRTOS/tasks.c **** 
5061:System/FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
5062:System/FreeRTOS/tasks.c **** 
5063:System/FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5064:System/FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5065:System/FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5066:System/FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5067:System/FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5068:System/FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
5069:System/FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5070:System/FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5071:System/FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
5072:System/FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5073:System/FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5074:System/FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5075:System/FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5076:System/FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5077:System/FreeRTOS/tasks.c **** 		provided on the following link:
5078:System/FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5079:System/FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5080:System/FreeRTOS/tasks.c **** 
5081:System/FreeRTOS/tasks.c **** 		pxTCB = xTaskToNotify;
5082:System/FreeRTOS/tasks.c **** 
5083:System/FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5084:System/FreeRTOS/tasks.c **** 		{
5085:System/FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
5086:System/FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
5087:System/FreeRTOS/tasks.c **** 
5088:System/FreeRTOS/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5089:System/FreeRTOS/tasks.c **** 			semaphore. */
5090:System/FreeRTOS/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
5091:System/FreeRTOS/tasks.c **** 
5092:System/FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5093:System/FreeRTOS/tasks.c **** 
5094:System/FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5095:System/FreeRTOS/tasks.c **** 			notification then unblock it now. */
5096:System/FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5097:System/FreeRTOS/tasks.c **** 			{
5098:System/FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
5099:System/FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5100:System/FreeRTOS/tasks.c **** 
5101:System/FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5102:System/FreeRTOS/tasks.c **** 				{
5103:System/FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5104:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5105:System/FreeRTOS/tasks.c **** 				}
5106:System/FreeRTOS/tasks.c **** 				else
5107:System/FreeRTOS/tasks.c **** 				{
5108:System/FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5109:System/FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
5110:System/FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5111:System/FreeRTOS/tasks.c **** 				}
5112:System/FreeRTOS/tasks.c **** 
5113:System/FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 113


5114:System/FreeRTOS/tasks.c **** 				{
5115:System/FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
5116:System/FreeRTOS/tasks.c **** 					executing task so a yield is required. */
5117:System/FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5118:System/FreeRTOS/tasks.c **** 					{
5119:System/FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5120:System/FreeRTOS/tasks.c **** 					}
5121:System/FreeRTOS/tasks.c **** 
5122:System/FreeRTOS/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5123:System/FreeRTOS/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5124:System/FreeRTOS/tasks.c **** 					safe FreeRTOS function. */
5125:System/FreeRTOS/tasks.c **** 					xYieldPending = pdTRUE;
5126:System/FreeRTOS/tasks.c **** 				}
5127:System/FreeRTOS/tasks.c **** 				else
5128:System/FreeRTOS/tasks.c **** 				{
5129:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5130:System/FreeRTOS/tasks.c **** 				}
5131:System/FreeRTOS/tasks.c **** 			}
5132:System/FreeRTOS/tasks.c **** 		}
5133:System/FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5134:System/FreeRTOS/tasks.c **** 	}
5135:System/FreeRTOS/tasks.c **** 
5136:System/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5137:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5138:System/FreeRTOS/tasks.c **** 
5139:System/FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5140:System/FreeRTOS/tasks.c **** 
5141:System/FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5142:System/FreeRTOS/tasks.c **** 	{
5143:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
5144:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn;
5145:System/FreeRTOS/tasks.c **** 
5146:System/FreeRTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5147:System/FreeRTOS/tasks.c **** 		its notification state cleared. */
5148:System/FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5149:System/FreeRTOS/tasks.c **** 
5150:System/FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
5151:System/FreeRTOS/tasks.c **** 		{
5152:System/FreeRTOS/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5153:System/FreeRTOS/tasks.c **** 			{
5154:System/FreeRTOS/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5155:System/FreeRTOS/tasks.c **** 				xReturn = pdPASS;
5156:System/FreeRTOS/tasks.c **** 			}
5157:System/FreeRTOS/tasks.c **** 			else
5158:System/FreeRTOS/tasks.c **** 			{
5159:System/FreeRTOS/tasks.c **** 				xReturn = pdFAIL;
5160:System/FreeRTOS/tasks.c **** 			}
5161:System/FreeRTOS/tasks.c **** 		}
5162:System/FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
5163:System/FreeRTOS/tasks.c **** 
5164:System/FreeRTOS/tasks.c **** 		return xReturn;
5165:System/FreeRTOS/tasks.c **** 	}
5166:System/FreeRTOS/tasks.c **** 
5167:System/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5168:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5169:System/FreeRTOS/tasks.c **** 
5170:System/FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 114


5171:System/FreeRTOS/tasks.c **** 
5172:System/FreeRTOS/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5173:System/FreeRTOS/tasks.c **** 	{
5174:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
5175:System/FreeRTOS/tasks.c **** 	uint32_t ulReturn;
5176:System/FreeRTOS/tasks.c **** 
5177:System/FreeRTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5178:System/FreeRTOS/tasks.c **** 		its notification state cleared. */
5179:System/FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5180:System/FreeRTOS/tasks.c **** 
5181:System/FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
5182:System/FreeRTOS/tasks.c **** 		{
5183:System/FreeRTOS/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5184:System/FreeRTOS/tasks.c **** 			then clear the bit mask. */
5185:System/FreeRTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
5186:System/FreeRTOS/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
5187:System/FreeRTOS/tasks.c **** 		}
5188:System/FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
5189:System/FreeRTOS/tasks.c **** 
5190:System/FreeRTOS/tasks.c **** 		return ulReturn;
5191:System/FreeRTOS/tasks.c **** 	}
5192:System/FreeRTOS/tasks.c **** 
5193:System/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5194:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5195:System/FreeRTOS/tasks.c **** 
5196:System/FreeRTOS/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5197:System/FreeRTOS/tasks.c **** 
5198:System/FreeRTOS/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5199:System/FreeRTOS/tasks.c **** 	{
5200:System/FreeRTOS/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5201:System/FreeRTOS/tasks.c **** 	}
5202:System/FreeRTOS/tasks.c **** 
5203:System/FreeRTOS/tasks.c **** #endif
5204:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5205:System/FreeRTOS/tasks.c **** 
5206:System/FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5207:System/FreeRTOS/tasks.c **** {
 887              		.loc 1 5207 1 view -0
 888              		.cfi_startproc
 889              		@ args = 0, pretend = 0, frame = 0
 890              		@ frame_needed = 0, uses_anonymous_args = 0
 891              		.loc 1 5207 1 is_stmt 0 view .LVU260
 892 0000 70B5     		push	{r4, r5, r6, lr}
 893              	.LCFI7:
 894              		.cfi_def_cfa_offset 16
 895              		.cfi_offset 4, -16
 896              		.cfi_offset 5, -12
 897              		.cfi_offset 6, -8
 898              		.cfi_offset 14, -4
 899 0002 0446     		mov	r4, r0
 900 0004 0D46     		mov	r5, r1
5208:System/FreeRTOS/tasks.c **** TickType_t xTimeToWake;
 901              		.loc 1 5208 1 is_stmt 1 view .LVU261
5209:System/FreeRTOS/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 902              		.loc 1 5209 1 view .LVU262
 903              		.loc 1 5209 18 is_stmt 0 view .LVU263
 904 0006 1D4B     		ldr	r3, .L78
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 115


 905 0008 1E68     		ldr	r6, [r3]
 906              	.LVL67:
5210:System/FreeRTOS/tasks.c **** 
5211:System/FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5212:System/FreeRTOS/tasks.c **** 	{
5213:System/FreeRTOS/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5214:System/FreeRTOS/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5215:System/FreeRTOS/tasks.c **** 		when the task leaves the Blocked state. */
5216:System/FreeRTOS/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5217:System/FreeRTOS/tasks.c **** 	}
5218:System/FreeRTOS/tasks.c **** 	#endif
5219:System/FreeRTOS/tasks.c **** 
5220:System/FreeRTOS/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5221:System/FreeRTOS/tasks.c **** 	as the same list item is used for both lists. */
5222:System/FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 907              		.loc 1 5222 2 is_stmt 1 view .LVU264
 908              		.loc 1 5222 35 is_stmt 0 view .LVU265
 909 000a 1D4B     		ldr	r3, .L78+4
 910 000c 1868     		ldr	r0, [r3]
 911              	.LVL68:
 912              		.loc 1 5222 6 view .LVU266
 913 000e 0430     		adds	r0, r0, #4
 914 0010 FFF7FEFF 		bl	uxListRemove
 915              	.LVL69:
 916              		.loc 1 5222 4 view .LVU267
 917 0014 50B9     		cbnz	r0, .L72
5223:System/FreeRTOS/tasks.c **** 	{
5224:System/FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5225:System/FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
5226:System/FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 918              		.loc 1 5226 3 is_stmt 1 view .LVU268
 919 0016 1A4B     		ldr	r3, .L78+4
 920 0018 1B68     		ldr	r3, [r3]
 921 001a DA6A     		ldr	r2, [r3, #44]
 922 001c 0123     		movs	r3, #1
 923 001e 03FA02F2 		lsl	r2, r3, r2
 924 0022 1849     		ldr	r1, .L78+8
 925 0024 0B68     		ldr	r3, [r1]
 926 0026 23EA0203 		bic	r3, r3, r2
 927 002a 0B60     		str	r3, [r1]
 928              	.L72:
5227:System/FreeRTOS/tasks.c **** 	}
5228:System/FreeRTOS/tasks.c **** 	else
5229:System/FreeRTOS/tasks.c **** 	{
5230:System/FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 929              		.loc 1 5230 27 view .LVU269
5231:System/FreeRTOS/tasks.c **** 	}
5232:System/FreeRTOS/tasks.c **** 
5233:System/FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5234:System/FreeRTOS/tasks.c **** 	{
5235:System/FreeRTOS/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 930              		.loc 1 5235 3 view .LVU270
 931              		.loc 1 5235 5 is_stmt 0 view .LVU271
 932 002c B4F1FF3F 		cmp	r4, #-1
 933 0030 0DD0     		beq	.L77
 934              	.L73:
5236:System/FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 116


5237:System/FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5238:System/FreeRTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5239:System/FreeRTOS/tasks.c **** 			indefinitely. */
5240:System/FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5241:System/FreeRTOS/tasks.c **** 		}
5242:System/FreeRTOS/tasks.c **** 		else
5243:System/FreeRTOS/tasks.c **** 		{
5244:System/FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5245:System/FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5246:System/FreeRTOS/tasks.c **** 			kernel will manage it correctly. */
5247:System/FreeRTOS/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 935              		.loc 1 5247 4 is_stmt 1 view .LVU272
 936              		.loc 1 5247 16 is_stmt 0 view .LVU273
 937 0032 3444     		add	r4, r4, r6
 938              	.LVL70:
5248:System/FreeRTOS/tasks.c **** 
5249:System/FreeRTOS/tasks.c **** 			/* The list item will be inserted in wake time order. */
5250:System/FreeRTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 939              		.loc 1 5250 4 is_stmt 1 view .LVU274
 940 0034 124B     		ldr	r3, .L78+4
 941 0036 1B68     		ldr	r3, [r3]
 942 0038 5C60     		str	r4, [r3, #4]
5251:System/FreeRTOS/tasks.c **** 
5252:System/FreeRTOS/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 943              		.loc 1 5252 4 view .LVU275
 944              		.loc 1 5252 6 is_stmt 0 view .LVU276
 945 003a A642     		cmp	r6, r4
 946 003c 10D9     		bls	.L75
5253:System/FreeRTOS/tasks.c **** 			{
5254:System/FreeRTOS/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5255:System/FreeRTOS/tasks.c **** 				list. */
5256:System/FreeRTOS/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 947              		.loc 1 5256 5 is_stmt 1 view .LVU277
 948 003e 124B     		ldr	r3, .L78+12
 949 0040 1868     		ldr	r0, [r3]
 950              		.loc 1 5256 60 is_stmt 0 view .LVU278
 951 0042 0F4B     		ldr	r3, .L78+4
 952 0044 1968     		ldr	r1, [r3]
 953              		.loc 1 5256 5 view .LVU279
 954 0046 0431     		adds	r1, r1, #4
 955 0048 FFF7FEFF 		bl	vListInsert
 956              	.LVL71:
 957              	.L71:
5257:System/FreeRTOS/tasks.c **** 			}
5258:System/FreeRTOS/tasks.c **** 			else
5259:System/FreeRTOS/tasks.c **** 			{
5260:System/FreeRTOS/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5261:System/FreeRTOS/tasks.c **** 				is used. */
5262:System/FreeRTOS/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:System/FreeRTOS/tasks.c **** 
5264:System/FreeRTOS/tasks.c **** 				/* If the task entering the blocked state was placed at the
5265:System/FreeRTOS/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5266:System/FreeRTOS/tasks.c **** 				needs to be updated too. */
5267:System/FreeRTOS/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5268:System/FreeRTOS/tasks.c **** 				{
5269:System/FreeRTOS/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5270:System/FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 117


5271:System/FreeRTOS/tasks.c **** 				else
5272:System/FreeRTOS/tasks.c **** 				{
5273:System/FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5274:System/FreeRTOS/tasks.c **** 				}
5275:System/FreeRTOS/tasks.c **** 			}
5276:System/FreeRTOS/tasks.c **** 		}
5277:System/FreeRTOS/tasks.c **** 	}
5278:System/FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5279:System/FreeRTOS/tasks.c **** 	{
5280:System/FreeRTOS/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5281:System/FreeRTOS/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5282:System/FreeRTOS/tasks.c **** 		will manage it correctly. */
5283:System/FreeRTOS/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5284:System/FreeRTOS/tasks.c **** 
5285:System/FreeRTOS/tasks.c **** 		/* The list item will be inserted in wake time order. */
5286:System/FreeRTOS/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5287:System/FreeRTOS/tasks.c **** 
5288:System/FreeRTOS/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5289:System/FreeRTOS/tasks.c **** 		{
5290:System/FreeRTOS/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5291:System/FreeRTOS/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5292:System/FreeRTOS/tasks.c **** 		}
5293:System/FreeRTOS/tasks.c **** 		else
5294:System/FreeRTOS/tasks.c **** 		{
5295:System/FreeRTOS/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5296:System/FreeRTOS/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5297:System/FreeRTOS/tasks.c **** 
5298:System/FreeRTOS/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5299:System/FreeRTOS/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5300:System/FreeRTOS/tasks.c **** 			too. */
5301:System/FreeRTOS/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5302:System/FreeRTOS/tasks.c **** 			{
5303:System/FreeRTOS/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5304:System/FreeRTOS/tasks.c **** 			}
5305:System/FreeRTOS/tasks.c **** 			else
5306:System/FreeRTOS/tasks.c **** 			{
5307:System/FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5308:System/FreeRTOS/tasks.c **** 			}
5309:System/FreeRTOS/tasks.c **** 		}
5310:System/FreeRTOS/tasks.c **** 
5311:System/FreeRTOS/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5312:System/FreeRTOS/tasks.c **** 		( void ) xCanBlockIndefinitely;
5313:System/FreeRTOS/tasks.c **** 	}
5314:System/FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5315:System/FreeRTOS/tasks.c **** }
 958              		.loc 1 5315 1 view .LVU280
 959 004c 70BD     		pop	{r4, r5, r6, pc}
 960              	.LVL72:
 961              	.L77:
5235:System/FreeRTOS/tasks.c **** 		{
 962              		.loc 1 5235 41 discriminator 1 view .LVU281
 963 004e 002D     		cmp	r5, #0
 964 0050 EFD0     		beq	.L73
5240:System/FreeRTOS/tasks.c **** 		}
 965              		.loc 1 5240 4 is_stmt 1 view .LVU282
5240:System/FreeRTOS/tasks.c **** 		}
 966              		.loc 1 5240 56 is_stmt 0 view .LVU283
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 118


 967 0052 0B4B     		ldr	r3, .L78+4
 968 0054 1968     		ldr	r1, [r3]
5240:System/FreeRTOS/tasks.c **** 		}
 969              		.loc 1 5240 4 view .LVU284
 970 0056 0431     		adds	r1, r1, #4
 971 0058 0C48     		ldr	r0, .L78+16
 972 005a FFF7FEFF 		bl	vListInsertEnd
 973              	.LVL73:
 974 005e F5E7     		b	.L71
 975              	.LVL74:
 976              	.L75:
5262:System/FreeRTOS/tasks.c **** 
 977              		.loc 1 5262 5 is_stmt 1 view .LVU285
 978 0060 0B4B     		ldr	r3, .L78+20
 979 0062 1868     		ldr	r0, [r3]
5262:System/FreeRTOS/tasks.c **** 
 980              		.loc 1 5262 52 is_stmt 0 view .LVU286
 981 0064 064B     		ldr	r3, .L78+4
 982 0066 1968     		ldr	r1, [r3]
5262:System/FreeRTOS/tasks.c **** 
 983              		.loc 1 5262 5 view .LVU287
 984 0068 0431     		adds	r1, r1, #4
 985 006a FFF7FEFF 		bl	vListInsert
 986              	.LVL75:
5267:System/FreeRTOS/tasks.c **** 				{
 987              		.loc 1 5267 5 is_stmt 1 view .LVU288
5267:System/FreeRTOS/tasks.c **** 				{
 988              		.loc 1 5267 21 is_stmt 0 view .LVU289
 989 006e 094B     		ldr	r3, .L78+24
 990 0070 1B68     		ldr	r3, [r3]
5267:System/FreeRTOS/tasks.c **** 				{
 991              		.loc 1 5267 7 view .LVU290
 992 0072 A342     		cmp	r3, r4
 993 0074 EAD9     		bls	.L71
5269:System/FreeRTOS/tasks.c **** 				}
 994              		.loc 1 5269 6 is_stmt 1 view .LVU291
5269:System/FreeRTOS/tasks.c **** 				}
 995              		.loc 1 5269 27 is_stmt 0 view .LVU292
 996 0076 074B     		ldr	r3, .L78+24
 997 0078 1C60     		str	r4, [r3]
5273:System/FreeRTOS/tasks.c **** 				}
 998              		.loc 1 5273 30 is_stmt 1 view .LVU293
 999              		.loc 1 5315 1 is_stmt 0 view .LVU294
 1000 007a E7E7     		b	.L71
 1001              	.L79:
 1002              		.align	2
 1003              	.L78:
 1004 007c 00000000 		.word	.LANCHOR15
 1005 0080 00000000 		.word	.LANCHOR10
 1006 0084 00000000 		.word	.LANCHOR13
 1007 0088 00000000 		.word	.LANCHOR8
 1008 008c 00000000 		.word	.LANCHOR0
 1009 0090 00000000 		.word	.LANCHOR2
 1010 0094 00000000 		.word	.LANCHOR3
 1011              		.cfi_endproc
 1012              	.LFE67:
 1014              		.section	.text.xTaskCreateStatic,"ax",%progbits
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 119


 1015              		.align	1
 1016              		.global	xTaskCreateStatic
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1021              	xTaskCreateStatic:
 1022              	.LVL76:
 1023              	.LFB5:
 594:System/FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 1024              		.loc 1 594 2 is_stmt 1 view -0
 1025              		.cfi_startproc
 1026              		@ args = 12, pretend = 0, frame = 8
 1027              		@ frame_needed = 0, uses_anonymous_args = 0
 594:System/FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 1028              		.loc 1 594 2 is_stmt 0 view .LVU296
 1029 0000 30B5     		push	{r4, r5, lr}
 1030              	.LCFI8:
 1031              		.cfi_def_cfa_offset 12
 1032              		.cfi_offset 4, -12
 1033              		.cfi_offset 5, -8
 1034              		.cfi_offset 14, -4
 1035 0002 87B0     		sub	sp, sp, #28
 1036              	.LCFI9:
 1037              		.cfi_def_cfa_offset 40
 1038 0004 0B9C     		ldr	r4, [sp, #44]
 595:System/FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
 1039              		.loc 1 595 2 is_stmt 1 view .LVU297
 596:System/FreeRTOS/tasks.c **** 
 1040              		.loc 1 596 2 view .LVU298
 598:System/FreeRTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1041              		.loc 1 598 3 view .LVU299
 1042 0006 7CB1     		cbz	r4, .L88
 598:System/FreeRTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1043              		.loc 1 598 41 discriminator 2 view .LVU300
 599:System/FreeRTOS/tasks.c **** 
 1044              		.loc 1 599 3 discriminator 2 view .LVU301
 1045 0008 0C9D     		ldr	r5, [sp, #48]
 1046 000a B5B1     		cbz	r5, .L89
 599:System/FreeRTOS/tasks.c **** 
 1047              		.loc 1 599 39 discriminator 2 view .LVU302
 1048              	.LBB129:
 606:System/FreeRTOS/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 1049              		.loc 1 606 4 discriminator 2 view .LVU303
 606:System/FreeRTOS/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 1050              		.loc 1 606 20 is_stmt 0 discriminator 2 view .LVU304
 1051 000c 6025     		movs	r5, #96
 1052 000e 0495     		str	r5, [sp, #16]
 607:System/FreeRTOS/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1053              		.loc 1 607 4 is_stmt 1 discriminator 2 view .LVU305
 1054 0010 049D     		ldr	r5, [sp, #16]
 1055 0012 602D     		cmp	r5, #96
 1056 0014 1AD0     		beq	.L85
 607:System/FreeRTOS/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1057              		.loc 1 607 4 view .LVU306
 1058              	.LBB130:
 1059              	.LBI130:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 120


 1060              		.loc 2 191 30 view .LVU307
 1061              	.LBB131:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1062              		.loc 2 193 1 view .LVU308
 1063              		.loc 2 195 2 view .LVU309
 1064              		.syntax unified
 1065              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1066 0016 4FF05003 			mov r3, #80												
 1067 001a 83F31188 		msr basepri, r3											
 1068 001e BFF36F8F 		isb														
 1069 0022 BFF34F8F 		dsb														
 1070              	
 1071              	@ 0 "" 2
 1072              	.LVL77:
 1073              		.thumb
 1074              		.syntax unified
 1075              	.L86:
 1076              		.loc 2 195 2 is_stmt 0 view .LVU310
 1077              	.LBE131:
 1078              	.LBE130:
 607:System/FreeRTOS/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1079              		.loc 1 607 4 is_stmt 1 discriminator 3 view .LVU311
 607:System/FreeRTOS/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1080              		.loc 1 607 4 discriminator 3 view .LVU312
 607:System/FreeRTOS/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1081              		.loc 1 607 4 discriminator 3 view .LVU313
 1082 0026 FEE7     		b	.L86
 1083              	.LVL78:
 1084              	.L88:
 607:System/FreeRTOS/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1085              		.loc 1 607 4 is_stmt 0 discriminator 3 view .LVU314
 1086              	.LBE129:
 598:System/FreeRTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1087              		.loc 1 598 3 is_stmt 1 view .LVU315
 1088              	.LBB132:
 1089              	.LBI132:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 1090              		.loc 2 191 30 view .LVU316
 1091              	.LBB133:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1092              		.loc 2 193 1 view .LVU317
 1093              		.loc 2 195 2 view .LVU318
 1094              		.syntax unified
 1095              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1096 0028 4FF05003 			mov r3, #80												
 1097 002c 83F31188 		msr basepri, r3											
 1098 0030 BFF36F8F 		isb														
 1099 0034 BFF34F8F 		dsb														
 1100              	
 1101              	@ 0 "" 2
 1102              	.LVL79:
 1103              		.thumb
 1104              		.syntax unified
 1105              	.L82:
 1106              		.loc 2 195 2 is_stmt 0 view .LVU319
 1107              	.LBE133:
 1108              	.LBE132:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 121


 598:System/FreeRTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1109              		.loc 1 598 3 is_stmt 1 discriminator 1 view .LVU320
 598:System/FreeRTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1110              		.loc 1 598 3 discriminator 1 view .LVU321
 598:System/FreeRTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 1111              		.loc 1 598 3 discriminator 1 view .LVU322
 1112 0038 FEE7     		b	.L82
 1113              	.LVL80:
 1114              	.L89:
 599:System/FreeRTOS/tasks.c **** 
 1115              		.loc 1 599 3 view .LVU323
 1116              	.LBB134:
 1117              	.LBI134:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 1118              		.loc 2 191 30 view .LVU324
 1119              	.LBB135:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1120              		.loc 2 193 1 view .LVU325
 1121              		.loc 2 195 2 view .LVU326
 1122              		.syntax unified
 1123              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1124 003a 4FF05003 			mov r3, #80												
 1125 003e 83F31188 		msr basepri, r3											
 1126 0042 BFF36F8F 		isb														
 1127 0046 BFF34F8F 		dsb														
 1128              	
 1129              	@ 0 "" 2
 1130              	.LVL81:
 1131              		.thumb
 1132              		.syntax unified
 1133              	.L84:
 1134              		.loc 2 195 2 is_stmt 0 view .LVU327
 1135              	.LBE135:
 1136              	.LBE134:
 599:System/FreeRTOS/tasks.c **** 
 1137              		.loc 1 599 3 is_stmt 1 discriminator 2 view .LVU328
 599:System/FreeRTOS/tasks.c **** 
 1138              		.loc 1 599 3 discriminator 2 view .LVU329
 599:System/FreeRTOS/tasks.c **** 
 1139              		.loc 1 599 3 discriminator 2 view .LVU330
 1140 004a FEE7     		b	.L84
 1141              	.LVL82:
 1142              	.L85:
 1143              	.LBB136:
 607:System/FreeRTOS/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1144              		.loc 1 607 44 discriminator 2 view .LVU331
 608:System/FreeRTOS/tasks.c **** 		}
 1145              		.loc 1 608 4 discriminator 2 view .LVU332
 1146 004c 049D     		ldr	r5, [sp, #16]
 1147              	.LBE136:
 613:System/FreeRTOS/tasks.c **** 		{
 1148              		.loc 1 613 3 discriminator 2 view .LVU333
 617:System/FreeRTOS/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 1149              		.loc 1 617 4 discriminator 2 view .LVU334
 1150              	.LVL83:
 618:System/FreeRTOS/tasks.c **** 
 1151              		.loc 1 618 4 discriminator 2 view .LVU335
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 122


 618:System/FreeRTOS/tasks.c **** 
 1152              		.loc 1 618 22 is_stmt 0 discriminator 2 view .LVU336
 1153 004e 0C9D     		ldr	r5, [sp, #48]
 1154 0050 2C63     		str	r4, [r5, #48]
 624:System/FreeRTOS/tasks.c **** 			}
 1155              		.loc 1 624 5 is_stmt 1 discriminator 2 view .LVU337
 624:System/FreeRTOS/tasks.c **** 			}
 1156              		.loc 1 624 37 is_stmt 0 discriminator 2 view .LVU338
 1157 0052 0224     		movs	r4, #2
 1158 0054 85F85D40 		strb	r4, [r5, #93]
 628:System/FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1159              		.loc 1 628 4 is_stmt 1 discriminator 2 view .LVU339
 1160 0058 0024     		movs	r4, #0
 1161 005a 0394     		str	r4, [sp, #12]
 1162 005c 0295     		str	r5, [sp, #8]
 1163 005e 05AC     		add	r4, sp, #20
 1164 0060 0194     		str	r4, [sp, #4]
 1165 0062 0A9C     		ldr	r4, [sp, #40]
 1166 0064 0094     		str	r4, [sp]
 1167 0066 FFF7FEFF 		bl	prvInitialiseNewTask
 1168              	.LVL84:
 629:System/FreeRTOS/tasks.c **** 		}
 1169              		.loc 1 629 4 discriminator 2 view .LVU340
 1170 006a 0C98     		ldr	r0, [sp, #48]
 1171 006c FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1172              	.LVL85:
 636:System/FreeRTOS/tasks.c **** 	}
 1173              		.loc 1 636 3 discriminator 2 view .LVU341
 637:System/FreeRTOS/tasks.c **** 
 1174              		.loc 1 637 2 is_stmt 0 discriminator 2 view .LVU342
 1175 0070 0598     		ldr	r0, [sp, #20]
 1176 0072 07B0     		add	sp, sp, #28
 1177              	.LCFI10:
 1178              		.cfi_def_cfa_offset 12
 1179              		@ sp needed
 1180 0074 30BD     		pop	{r4, r5, pc}
 637:System/FreeRTOS/tasks.c **** 
 1181              		.loc 1 637 2 discriminator 2 view .LVU343
 1182              		.cfi_endproc
 1183              	.LFE5:
 1185              		.section	.text.xTaskCreate,"ax",%progbits
 1186              		.align	1
 1187              		.global	xTaskCreate
 1188              		.syntax unified
 1189              		.thumb
 1190              		.thumb_func
 1192              	xTaskCreate:
 1193              	.LVL86:
 1194              	.LFB6:
 745:System/FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 1195              		.loc 1 745 2 is_stmt 1 view -0
 1196              		.cfi_startproc
 1197              		@ args = 8, pretend = 0, frame = 0
 1198              		@ frame_needed = 0, uses_anonymous_args = 0
 745:System/FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 1199              		.loc 1 745 2 is_stmt 0 view .LVU345
 1200 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 123


 1201              	.LCFI11:
 1202              		.cfi_def_cfa_offset 28
 1203              		.cfi_offset 4, -28
 1204              		.cfi_offset 5, -24
 1205              		.cfi_offset 6, -20
 1206              		.cfi_offset 7, -16
 1207              		.cfi_offset 8, -12
 1208              		.cfi_offset 9, -8
 1209              		.cfi_offset 14, -4
 1210 0004 85B0     		sub	sp, sp, #20
 1211              	.LCFI12:
 1212              		.cfi_def_cfa_offset 48
 1213 0006 0746     		mov	r7, r0
 1214 0008 8846     		mov	r8, r1
 1215 000a 1446     		mov	r4, r2
 1216 000c 1E46     		mov	r6, r3
 746:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 1217              		.loc 1 746 2 is_stmt 1 view .LVU346
 747:System/FreeRTOS/tasks.c **** 
 1218              		.loc 1 747 2 view .LVU347
 1219              	.LBB137:
 776:System/FreeRTOS/tasks.c **** 
 1220              		.loc 1 776 3 view .LVU348
 779:System/FreeRTOS/tasks.c **** 
 1221              		.loc 1 779 4 view .LVU349
 779:System/FreeRTOS/tasks.c **** 
 1222              		.loc 1 779 14 is_stmt 0 view .LVU350
 1223 000e 9000     		lsls	r0, r2, #2
 1224              	.LVL87:
 779:System/FreeRTOS/tasks.c **** 
 1225              		.loc 1 779 14 view .LVU351
 1226 0010 FFF7FEFF 		bl	pvPortMalloc
 1227              	.LVL88:
 781:System/FreeRTOS/tasks.c **** 			{
 1228              		.loc 1 781 4 is_stmt 1 view .LVU352
 781:System/FreeRTOS/tasks.c **** 			{
 1229              		.loc 1 781 6 is_stmt 0 view .LVU353
 1230 0014 00B3     		cbz	r0, .L94
 1231 0016 8146     		mov	r9, r0
 784:System/FreeRTOS/tasks.c **** 
 1232              		.loc 1 784 5 is_stmt 1 view .LVU354
 784:System/FreeRTOS/tasks.c **** 
 1233              		.loc 1 784 28 is_stmt 0 view .LVU355
 1234 0018 6020     		movs	r0, #96
 1235              	.LVL89:
 784:System/FreeRTOS/tasks.c **** 
 1236              		.loc 1 784 28 view .LVU356
 1237 001a FFF7FEFF 		bl	pvPortMalloc
 1238              	.LVL90:
 786:System/FreeRTOS/tasks.c **** 				{
 1239              		.loc 1 786 5 is_stmt 1 view .LVU357
 786:System/FreeRTOS/tasks.c **** 				{
 1240              		.loc 1 786 7 is_stmt 0 view .LVU358
 1241 001e 0546     		mov	r5, r0
 1242 0020 B0B1     		cbz	r0, .L92
 789:System/FreeRTOS/tasks.c **** 				}
 1243              		.loc 1 789 6 is_stmt 1 view .LVU359
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 124


 789:System/FreeRTOS/tasks.c **** 				}
 1244              		.loc 1 789 24 is_stmt 0 view .LVU360
 1245 0022 C0F83090 		str	r9, [r0, #48]
 1246              	.LVL91:
 1247              	.L93:
 789:System/FreeRTOS/tasks.c **** 				}
 1248              		.loc 1 789 24 view .LVU361
 1249              	.LBE137:
 805:System/FreeRTOS/tasks.c **** 		{
 1250              		.loc 1 805 3 is_stmt 1 view .LVU362
 805:System/FreeRTOS/tasks.c **** 		{
 1251              		.loc 1 805 5 is_stmt 0 view .LVU363
 1252 0026 E5B1     		cbz	r5, .L95
 811:System/FreeRTOS/tasks.c **** 			}
 1253              		.loc 1 811 5 is_stmt 1 view .LVU364
 811:System/FreeRTOS/tasks.c **** 			}
 1254              		.loc 1 811 37 is_stmt 0 view .LVU365
 1255 0028 0023     		movs	r3, #0
 1256 002a 85F85D30 		strb	r3, [r5, #93]
 815:System/FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1257              		.loc 1 815 4 is_stmt 1 view .LVU366
 1258 002e 0393     		str	r3, [sp, #12]
 1259 0030 0295     		str	r5, [sp, #8]
 1260 0032 0D9B     		ldr	r3, [sp, #52]
 1261 0034 0193     		str	r3, [sp, #4]
 1262 0036 0C9B     		ldr	r3, [sp, #48]
 1263 0038 0093     		str	r3, [sp]
 1264 003a 3346     		mov	r3, r6
 1265 003c 2246     		mov	r2, r4
 1266 003e 4146     		mov	r1, r8
 1267 0040 3846     		mov	r0, r7
 1268 0042 FFF7FEFF 		bl	prvInitialiseNewTask
 1269              	.LVL92:
 816:System/FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 1270              		.loc 1 816 4 view .LVU367
 1271 0046 2846     		mov	r0, r5
 1272 0048 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1273              	.LVL93:
 817:System/FreeRTOS/tasks.c **** 		}
 1274              		.loc 1 817 4 view .LVU368
 817:System/FreeRTOS/tasks.c **** 		}
 1275              		.loc 1 817 12 is_stmt 0 view .LVU369
 1276 004c 0120     		movs	r0, #1
 1277 004e 05E0     		b	.L90
 1278              	.LVL94:
 1279              	.L92:
 1280              	.LBB138:
 795:System/FreeRTOS/tasks.c **** 				}
 1281              		.loc 1 795 6 is_stmt 1 view .LVU370
 1282 0050 4846     		mov	r0, r9
 1283              	.LVL95:
 795:System/FreeRTOS/tasks.c **** 				}
 1284              		.loc 1 795 6 is_stmt 0 view .LVU371
 1285 0052 FFF7FEFF 		bl	vPortFree
 1286              	.LVL96:
 1287 0056 E6E7     		b	.L93
 1288              	.LVL97:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 125


 1289              	.L94:
 795:System/FreeRTOS/tasks.c **** 				}
 1290              		.loc 1 795 6 view .LVU372
 1291              	.LBE138:
 821:System/FreeRTOS/tasks.c **** 		}
 1292              		.loc 1 821 12 view .LVU373
 1293 0058 4FF0FF30 		mov	r0, #-1
 1294              	.LVL98:
 1295              	.L90:
 825:System/FreeRTOS/tasks.c **** 
 1296              		.loc 1 825 2 view .LVU374
 1297 005c 05B0     		add	sp, sp, #20
 1298              	.LCFI13:
 1299              		.cfi_remember_state
 1300              		.cfi_def_cfa_offset 28
 1301              		@ sp needed
 1302 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1303              	.LVL99:
 1304              	.L95:
 1305              	.LCFI14:
 1306              		.cfi_restore_state
 821:System/FreeRTOS/tasks.c **** 		}
 1307              		.loc 1 821 12 view .LVU375
 1308 0062 4FF0FF30 		mov	r0, #-1
 1309              	.LVL100:
 824:System/FreeRTOS/tasks.c **** 	}
 1310              		.loc 1 824 3 is_stmt 1 view .LVU376
 824:System/FreeRTOS/tasks.c **** 	}
 1311              		.loc 1 824 10 is_stmt 0 view .LVU377
 1312 0066 F9E7     		b	.L90
 1313              		.cfi_endproc
 1314              	.LFE6:
 1316              		.section	.text.vTaskDelete,"ax",%progbits
 1317              		.align	1
 1318              		.global	vTaskDelete
 1319              		.syntax unified
 1320              		.thumb
 1321              		.thumb_func
 1323              	vTaskDelete:
 1324              	.LVL101:
 1325              	.LFB9:
1170:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1326              		.loc 1 1170 2 is_stmt 1 view -0
 1327              		.cfi_startproc
 1328              		@ args = 0, pretend = 0, frame = 0
 1329              		@ frame_needed = 0, uses_anonymous_args = 0
1170:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1330              		.loc 1 1170 2 is_stmt 0 view .LVU379
 1331 0000 38B5     		push	{r3, r4, r5, lr}
 1332              	.LCFI15:
 1333              		.cfi_def_cfa_offset 16
 1334              		.cfi_offset 3, -16
 1335              		.cfi_offset 4, -12
 1336              		.cfi_offset 5, -8
 1337              		.cfi_offset 14, -4
 1338 0002 0446     		mov	r4, r0
1171:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 126


 1339              		.loc 1 1171 2 is_stmt 1 view .LVU380
1173:System/FreeRTOS/tasks.c **** 		{
 1340              		.loc 1 1173 3 view .LVU381
 1341 0004 FFF7FEFF 		bl	vPortEnterCritical
 1342              	.LVL102:
1177:System/FreeRTOS/tasks.c **** 
 1343              		.loc 1 1177 4 view .LVU382
1177:System/FreeRTOS/tasks.c **** 
 1344              		.loc 1 1177 12 is_stmt 0 view .LVU383
 1345 0008 002C     		cmp	r4, #0
 1346 000a 33D0     		beq	.L107
 1347              	.LVL103:
 1348              	.L98:
1180:System/FreeRTOS/tasks.c **** 			{
 1349              		.loc 1 1180 4 is_stmt 1 discriminator 4 view .LVU384
1180:System/FreeRTOS/tasks.c **** 			{
 1350              		.loc 1 1180 8 is_stmt 0 discriminator 4 view .LVU385
 1351 000c 251D     		adds	r5, r4, #4
 1352 000e 2846     		mov	r0, r5
 1353 0010 FFF7FEFF 		bl	uxListRemove
 1354              	.LVL104:
1180:System/FreeRTOS/tasks.c **** 			{
 1355              		.loc 1 1180 6 discriminator 4 view .LVU386
 1356 0014 68B9     		cbnz	r0, .L99
1182:System/FreeRTOS/tasks.c **** 			}
 1357              		.loc 1 1182 5 is_stmt 1 view .LVU387
 1358 0016 E26A     		ldr	r2, [r4, #44]
 1359 0018 02EB8203 		add	r3, r2, r2, lsl #2
 1360 001c 9B00     		lsls	r3, r3, #2
 1361 001e 2749     		ldr	r1, .L110
 1362 0020 CB58     		ldr	r3, [r1, r3]
 1363 0022 33B9     		cbnz	r3, .L99
1182:System/FreeRTOS/tasks.c **** 			}
 1364              		.loc 1 1182 5 discriminator 1 view .LVU388
 1365 0024 0123     		movs	r3, #1
 1366 0026 9340     		lsls	r3, r3, r2
 1367 0028 2549     		ldr	r1, .L110+4
 1368 002a 0A68     		ldr	r2, [r1]
 1369 002c 22EA0302 		bic	r2, r2, r3
 1370 0030 0A60     		str	r2, [r1]
 1371              	.L99:
1186:System/FreeRTOS/tasks.c **** 			}
 1372              		.loc 1 1186 29 view .LVU389
1190:System/FreeRTOS/tasks.c **** 			{
 1373              		.loc 1 1190 4 view .LVU390
1190:System/FreeRTOS/tasks.c **** 			{
 1374              		.loc 1 1190 8 is_stmt 0 view .LVU391
 1375 0032 A36A     		ldr	r3, [r4, #40]
1190:System/FreeRTOS/tasks.c **** 			{
 1376              		.loc 1 1190 6 view .LVU392
 1377 0034 1BB1     		cbz	r3, .L100
1192:System/FreeRTOS/tasks.c **** 			}
 1378              		.loc 1 1192 5 is_stmt 1 view .LVU393
1192:System/FreeRTOS/tasks.c **** 			}
 1379              		.loc 1 1192 14 is_stmt 0 view .LVU394
 1380 0036 04F11800 		add	r0, r4, #24
 1381 003a FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 127


 1382              	.LVL105:
 1383              	.L100:
1196:System/FreeRTOS/tasks.c **** 			}
 1384              		.loc 1 1196 29 is_stmt 1 view .LVU395
1203:System/FreeRTOS/tasks.c **** 
 1385              		.loc 1 1203 4 view .LVU396
1203:System/FreeRTOS/tasks.c **** 
 1386              		.loc 1 1203 16 is_stmt 0 view .LVU397
 1387 003e 214A     		ldr	r2, .L110+8
 1388 0040 1368     		ldr	r3, [r2]
 1389 0042 0133     		adds	r3, r3, #1
 1390 0044 1360     		str	r3, [r2]
1205:System/FreeRTOS/tasks.c **** 			{
 1391              		.loc 1 1205 4 is_stmt 1 view .LVU398
1205:System/FreeRTOS/tasks.c **** 			{
 1392              		.loc 1 1205 14 is_stmt 0 view .LVU399
 1393 0046 204B     		ldr	r3, .L110+12
 1394 0048 1B68     		ldr	r3, [r3]
1205:System/FreeRTOS/tasks.c **** 			{
 1395              		.loc 1 1205 6 view .LVU400
 1396 004a A342     		cmp	r3, r4
 1397 004c 15D0     		beq	.L108
1232:System/FreeRTOS/tasks.c **** 				traceTASK_DELETE( pxTCB );
 1398              		.loc 1 1232 5 is_stmt 1 view .LVU401
 1399 004e 1F4A     		ldr	r2, .L110+16
 1400 0050 1368     		ldr	r3, [r2]
 1401 0052 013B     		subs	r3, r3, #1
 1402 0054 1360     		str	r3, [r2]
1233:System/FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 1403              		.loc 1 1233 30 view .LVU402
1234:System/FreeRTOS/tasks.c **** 
 1404              		.loc 1 1234 5 view .LVU403
 1405 0056 2046     		mov	r0, r4
 1406 0058 FFF7FEFF 		bl	prvDeleteTCB
 1407              	.LVL106:
1238:System/FreeRTOS/tasks.c **** 			}
 1408              		.loc 1 1238 5 view .LVU404
 1409 005c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1410              	.LVL107:
 1411              	.L102:
1241:System/FreeRTOS/tasks.c **** 
 1412              		.loc 1 1241 3 view .LVU405
 1413 0060 FFF7FEFF 		bl	vPortExitCritical
 1414              	.LVL108:
1245:System/FreeRTOS/tasks.c **** 		{
 1415              		.loc 1 1245 3 view .LVU406
1245:System/FreeRTOS/tasks.c **** 		{
 1416              		.loc 1 1245 25 is_stmt 0 view .LVU407
 1417 0064 1A4B     		ldr	r3, .L110+20
 1418 0066 1B68     		ldr	r3, [r3]
1245:System/FreeRTOS/tasks.c **** 		{
 1419              		.loc 1 1245 5 view .LVU408
 1420 0068 1BB1     		cbz	r3, .L97
1247:System/FreeRTOS/tasks.c **** 			{
 1421              		.loc 1 1247 4 is_stmt 1 view .LVU409
1247:System/FreeRTOS/tasks.c **** 			{
 1422              		.loc 1 1247 14 is_stmt 0 view .LVU410
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 128


 1423 006a 174B     		ldr	r3, .L110+12
 1424 006c 1B68     		ldr	r3, [r3]
1247:System/FreeRTOS/tasks.c **** 			{
 1425              		.loc 1 1247 6 view .LVU411
 1426 006e A342     		cmp	r3, r4
 1427 0070 0CD0     		beq	.L109
 1428              	.L97:
1257:System/FreeRTOS/tasks.c **** 
 1429              		.loc 1 1257 2 view .LVU412
 1430 0072 38BD     		pop	{r3, r4, r5, pc}
 1431              	.LVL109:
 1432              	.L107:
1177:System/FreeRTOS/tasks.c **** 
 1433              		.loc 1 1177 12 discriminator 1 view .LVU413
 1434 0074 144B     		ldr	r3, .L110+12
 1435 0076 1C68     		ldr	r4, [r3]
 1436              	.LVL110:
1177:System/FreeRTOS/tasks.c **** 
 1437              		.loc 1 1177 12 discriminator 1 view .LVU414
 1438 0078 C8E7     		b	.L98
 1439              	.LVL111:
 1440              	.L108:
1212:System/FreeRTOS/tasks.c **** 
 1441              		.loc 1 1212 5 is_stmt 1 view .LVU415
 1442 007a 2946     		mov	r1, r5
 1443 007c 1548     		ldr	r0, .L110+24
 1444 007e FFF7FEFF 		bl	vListInsertEnd
 1445              	.LVL112:
1217:System/FreeRTOS/tasks.c **** 
 1446              		.loc 1 1217 5 view .LVU416
 1447 0082 154A     		ldr	r2, .L110+28
 1448 0084 1368     		ldr	r3, [r2]
 1449 0086 0133     		adds	r3, r3, #1
 1450 0088 1360     		str	r3, [r2]
1221:System/FreeRTOS/tasks.c **** 
 1451              		.loc 1 1221 30 view .LVU417
1228:System/FreeRTOS/tasks.c **** 			}
 1452              		.loc 1 1228 54 view .LVU418
 1453 008a E9E7     		b	.L102
 1454              	.L109:
1249:System/FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1455              		.loc 1 1249 5 view .LVU419
 1456 008c 134B     		ldr	r3, .L110+32
 1457 008e 1B68     		ldr	r3, [r3]
 1458 0090 43B1     		cbz	r3, .L104
1249:System/FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1459              		.loc 1 1249 5 view .LVU420
 1460              	.LBB139:
 1461              	.LBI139:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 1462              		.loc 2 191 30 view .LVU421
 1463              	.LBB140:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1464              		.loc 2 193 1 view .LVU422
 1465              		.loc 2 195 2 view .LVU423
 1466              		.syntax unified
 1467              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 129


 1468 0092 4FF05003 			mov r3, #80												
 1469 0096 83F31188 		msr basepri, r3											
 1470 009a BFF36F8F 		isb														
 1471 009e BFF34F8F 		dsb														
 1472              	
 1473              	@ 0 "" 2
 1474              	.LVL113:
 1475              		.thumb
 1476              		.syntax unified
 1477              	.L105:
 1478              		.loc 2 195 2 is_stmt 0 view .LVU424
 1479              	.LBE140:
 1480              	.LBE139:
1249:System/FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1481              		.loc 1 1249 5 is_stmt 1 discriminator 1 view .LVU425
1249:System/FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1482              		.loc 1 1249 5 discriminator 1 view .LVU426
1249:System/FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1483              		.loc 1 1249 5 discriminator 1 view .LVU427
 1484 00a2 FEE7     		b	.L105
 1485              	.L104:
1249:System/FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1486              		.loc 1 1249 46 discriminator 2 view .LVU428
1250:System/FreeRTOS/tasks.c **** 			}
 1487              		.loc 1 1250 5 discriminator 2 view .LVU429
 1488 00a4 4FF0E023 		mov	r3, #-536813568
 1489 00a8 4FF08052 		mov	r2, #268435456
 1490 00ac C3F8042D 		str	r2, [r3, #3332]
1250:System/FreeRTOS/tasks.c **** 			}
 1491              		.loc 1 1250 5 discriminator 2 view .LVU430
 1492              		.syntax unified
 1493              	@ 1250 "System/FreeRTOS/tasks.c" 1
 1494 00b0 BFF34F8F 		dsb
 1495              	@ 0 "" 2
1250:System/FreeRTOS/tasks.c **** 			}
 1496              		.loc 1 1250 5 discriminator 2 view .LVU431
 1497              	@ 1250 "System/FreeRTOS/tasks.c" 1
 1498 00b4 BFF36F8F 		isb
 1499              	@ 0 "" 2
1250:System/FreeRTOS/tasks.c **** 			}
 1500              		.loc 1 1250 27 discriminator 2 view .LVU432
1254:System/FreeRTOS/tasks.c **** 			}
 1501              		.loc 1 1254 29 discriminator 2 view .LVU433
1257:System/FreeRTOS/tasks.c **** 
 1502              		.loc 1 1257 2 is_stmt 0 discriminator 2 view .LVU434
 1503              		.thumb
 1504              		.syntax unified
 1505 00b8 DBE7     		b	.L97
 1506              	.L111:
 1507 00ba 00BF     		.align	2
 1508              	.L110:
 1509 00bc 00000000 		.word	.LANCHOR4
 1510 00c0 00000000 		.word	.LANCHOR13
 1511 00c4 00000000 		.word	.LANCHOR12
 1512 00c8 00000000 		.word	.LANCHOR10
 1513 00cc 00000000 		.word	.LANCHOR9
 1514 00d0 00000000 		.word	.LANCHOR11
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 130


 1515 00d4 00000000 		.word	.LANCHOR7
 1516 00d8 00000000 		.word	.LANCHOR14
 1517 00dc 00000000 		.word	.LANCHOR16
 1518              		.cfi_endproc
 1519              	.LFE9:
 1521              		.section	.text.eTaskGetState,"ax",%progbits
 1522              		.align	1
 1523              		.global	eTaskGetState
 1524              		.syntax unified
 1525              		.thumb
 1526              		.thumb_func
 1528              	eTaskGetState:
 1529              	.LVL114:
 1530              	.LFB12:
1394:System/FreeRTOS/tasks.c **** 	eTaskState eReturn;
 1531              		.loc 1 1394 2 is_stmt 1 view -0
 1532              		.cfi_startproc
 1533              		@ args = 0, pretend = 0, frame = 0
 1534              		@ frame_needed = 0, uses_anonymous_args = 0
1394:System/FreeRTOS/tasks.c **** 	eTaskState eReturn;
 1535              		.loc 1 1394 2 is_stmt 0 view .LVU436
 1536 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1537              	.LCFI16:
 1538              		.cfi_def_cfa_offset 24
 1539              		.cfi_offset 3, -24
 1540              		.cfi_offset 4, -20
 1541              		.cfi_offset 5, -16
 1542              		.cfi_offset 6, -12
 1543              		.cfi_offset 7, -8
 1544              		.cfi_offset 14, -4
1395:System/FreeRTOS/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
 1545              		.loc 1 1395 2 is_stmt 1 view .LVU437
1396:System/FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1546              		.loc 1 1396 2 view .LVU438
1397:System/FreeRTOS/tasks.c **** 
 1547              		.loc 1 1397 2 view .LVU439
 1548              	.LVL115:
1399:System/FreeRTOS/tasks.c **** 
 1549              		.loc 1 1399 3 view .LVU440
 1550 0002 D0B1     		cbz	r0, .L125
 1551 0004 0446     		mov	r4, r0
1399:System/FreeRTOS/tasks.c **** 
 1552              		.loc 1 1399 24 discriminator 2 view .LVU441
1401:System/FreeRTOS/tasks.c **** 		{
 1553              		.loc 1 1401 3 discriminator 2 view .LVU442
1401:System/FreeRTOS/tasks.c **** 		{
 1554              		.loc 1 1401 13 is_stmt 0 discriminator 2 view .LVU443
 1555 0006 1D4B     		ldr	r3, .L130
 1556 0008 1B68     		ldr	r3, [r3]
1401:System/FreeRTOS/tasks.c **** 		{
 1557              		.loc 1 1401 5 discriminator 2 view .LVU444
 1558 000a 8342     		cmp	r3, r0
 1559 000c 2DD0     		beq	.L117
1408:System/FreeRTOS/tasks.c **** 			{
 1560              		.loc 1 1408 4 is_stmt 1 view .LVU445
 1561 000e FFF7FEFF 		bl	vPortEnterCritical
 1562              	.LVL116:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 131


1410:System/FreeRTOS/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1563              		.loc 1 1410 5 view .LVU446
1410:System/FreeRTOS/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1564              		.loc 1 1410 17 is_stmt 0 view .LVU447
 1565 0012 6569     		ldr	r5, [r4, #20]
 1566              	.LVL117:
1411:System/FreeRTOS/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1567              		.loc 1 1411 5 is_stmt 1 view .LVU448
1411:System/FreeRTOS/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1568              		.loc 1 1411 19 is_stmt 0 view .LVU449
 1569 0014 1A4B     		ldr	r3, .L130+4
 1570 0016 1E68     		ldr	r6, [r3]
 1571              	.LVL118:
1412:System/FreeRTOS/tasks.c **** 			}
 1572              		.loc 1 1412 5 is_stmt 1 view .LVU450
1412:System/FreeRTOS/tasks.c **** 			}
 1573              		.loc 1 1412 29 is_stmt 0 view .LVU451
 1574 0018 1A4B     		ldr	r3, .L130+8
 1575 001a 1F68     		ldr	r7, [r3]
 1576              	.LVL119:
1414:System/FreeRTOS/tasks.c **** 
 1577              		.loc 1 1414 4 is_stmt 1 view .LVU452
 1578 001c FFF7FEFF 		bl	vPortExitCritical
 1579              	.LVL120:
1416:System/FreeRTOS/tasks.c **** 			{
 1580              		.loc 1 1416 4 view .LVU453
1416:System/FreeRTOS/tasks.c **** 			{
 1581              		.loc 1 1416 6 is_stmt 0 view .LVU454
 1582 0020 B542     		cmp	r5, r6
 1583 0022 24D0     		beq	.L118
1416:System/FreeRTOS/tasks.c **** 			{
 1584              		.loc 1 1416 41 discriminator 1 view .LVU455
 1585 0024 BD42     		cmp	r5, r7
 1586 0026 24D0     		beq	.L119
1424:System/FreeRTOS/tasks.c **** 				{
 1587              		.loc 1 1424 10 is_stmt 1 view .LVU456
1424:System/FreeRTOS/tasks.c **** 				{
 1588              		.loc 1 1424 12 is_stmt 0 view .LVU457
 1589 0028 174B     		ldr	r3, .L130+12
 1590 002a 9D42     		cmp	r5, r3
 1591 002c 0ED0     		beq	.L126
1460:System/FreeRTOS/tasks.c **** 				{
 1592              		.loc 1 1460 10 is_stmt 1 view .LVU458
1460:System/FreeRTOS/tasks.c **** 				{
 1593              		.loc 1 1460 12 is_stmt 0 view .LVU459
 1594 002e 174B     		ldr	r3, .L130+16
 1595 0030 9D42     		cmp	r5, r3
 1596 0032 20D0     		beq	.L122
1460:System/FreeRTOS/tasks.c **** 				{
 1597              		.loc 1 1460 59 discriminator 1 view .LVU460
 1598 0034 BDB1     		cbz	r5, .L127
1473:System/FreeRTOS/tasks.c **** 			}
 1599              		.loc 1 1473 13 view .LVU461
 1600 0036 0120     		movs	r0, #1
 1601 0038 18E0     		b	.L115
 1602              	.LVL121:
 1603              	.L125:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 132


1399:System/FreeRTOS/tasks.c **** 
 1604              		.loc 1 1399 3 is_stmt 1 view .LVU462
 1605              	.LBB141:
 1606              	.LBI141:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 1607              		.loc 2 191 30 view .LVU463
 1608              	.LBB142:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1609              		.loc 2 193 1 view .LVU464
 1610              		.loc 2 195 2 view .LVU465
 1611              		.syntax unified
 1612              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1613 003a 4FF05003 			mov r3, #80												
 1614 003e 83F31188 		msr basepri, r3											
 1615 0042 BFF36F8F 		isb														
 1616 0046 BFF34F8F 		dsb														
 1617              	
 1618              	@ 0 "" 2
 1619              	.LVL122:
 1620              		.thumb
 1621              		.syntax unified
 1622              	.L114:
 1623              		.loc 2 195 2 is_stmt 0 view .LVU466
 1624              	.LBE142:
 1625              	.LBE141:
1399:System/FreeRTOS/tasks.c **** 
 1626              		.loc 1 1399 3 is_stmt 1 discriminator 1 view .LVU467
1399:System/FreeRTOS/tasks.c **** 
 1627              		.loc 1 1399 3 discriminator 1 view .LVU468
1399:System/FreeRTOS/tasks.c **** 
 1628              		.loc 1 1399 3 discriminator 1 view .LVU469
 1629 004a FEE7     		b	.L114
 1630              	.LVL123:
 1631              	.L126:
1429:System/FreeRTOS/tasks.c **** 					{
 1632              		.loc 1 1429 6 view .LVU470
1429:System/FreeRTOS/tasks.c **** 					{
 1633              		.loc 1 1429 10 is_stmt 0 view .LVU471
 1634 004c A36A     		ldr	r3, [r4, #40]
1429:System/FreeRTOS/tasks.c **** 					{
 1635              		.loc 1 1429 8 view .LVU472
 1636 004e 0BB1     		cbz	r3, .L128
1454:System/FreeRTOS/tasks.c **** 					}
 1637              		.loc 1 1454 15 view .LVU473
 1638 0050 0220     		movs	r0, #2
 1639 0052 0BE0     		b	.L115
 1640              	.L128:
1437:System/FreeRTOS/tasks.c **** 							{
 1641              		.loc 1 1437 8 is_stmt 1 view .LVU474
1437:System/FreeRTOS/tasks.c **** 							{
 1642              		.loc 1 1437 17 is_stmt 0 view .LVU475
 1643 0054 94F85C30 		ldrb	r3, [r4, #92]	@ zero_extendqisi2
 1644 0058 DBB2     		uxtb	r3, r3
1437:System/FreeRTOS/tasks.c **** 							{
 1645              		.loc 1 1437 10 view .LVU476
 1646 005a 012B     		cmp	r3, #1
 1647 005c 01D0     		beq	.L129
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 133


1443:System/FreeRTOS/tasks.c **** 							}
 1648              		.loc 1 1443 17 view .LVU477
 1649 005e 0320     		movs	r0, #3
 1650 0060 04E0     		b	.L115
 1651              	.L129:
1439:System/FreeRTOS/tasks.c **** 							}
 1652              		.loc 1 1439 17 view .LVU478
 1653 0062 0220     		movs	r0, #2
 1654 0064 02E0     		b	.L115
 1655              	.L127:
1465:System/FreeRTOS/tasks.c **** 				}
 1656              		.loc 1 1465 14 view .LVU479
 1657 0066 0420     		movs	r0, #4
 1658 0068 00E0     		b	.L115
 1659              	.LVL124:
 1660              	.L117:
1404:System/FreeRTOS/tasks.c **** 		}
 1661              		.loc 1 1404 12 view .LVU480
 1662 006a 0020     		movs	r0, #0
 1663              	.LVL125:
 1664              	.L115:
1477:System/FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1665              		.loc 1 1477 3 is_stmt 1 view .LVU481
1478:System/FreeRTOS/tasks.c **** 
 1666              		.loc 1 1478 2 is_stmt 0 view .LVU482
 1667 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1668              	.LVL126:
 1669              	.L118:
1420:System/FreeRTOS/tasks.c **** 			}
 1670              		.loc 1 1420 13 view .LVU483
 1671 006e 0220     		movs	r0, #2
 1672 0070 FCE7     		b	.L115
 1673              	.L119:
 1674 0072 0220     		movs	r0, #2
 1675 0074 FAE7     		b	.L115
 1676              	.L122:
1465:System/FreeRTOS/tasks.c **** 				}
 1677              		.loc 1 1465 14 view .LVU484
 1678 0076 0420     		movs	r0, #4
 1679 0078 F8E7     		b	.L115
 1680              	.L131:
 1681 007a 00BF     		.align	2
 1682              	.L130:
 1683 007c 00000000 		.word	.LANCHOR10
 1684 0080 00000000 		.word	.LANCHOR2
 1685 0084 00000000 		.word	.LANCHOR8
 1686 0088 00000000 		.word	.LANCHOR0
 1687 008c 00000000 		.word	.LANCHOR7
 1688              		.cfi_endproc
 1689              	.LFE12:
 1691              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1692              		.align	1
 1693              		.global	uxTaskPriorityGet
 1694              		.syntax unified
 1695              		.thumb
 1696              		.thumb_func
 1698              	uxTaskPriorityGet:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 134


 1699              	.LVL127:
 1700              	.LFB13:
1486:System/FreeRTOS/tasks.c **** 	TCB_t const *pxTCB;
 1701              		.loc 1 1486 2 is_stmt 1 view -0
 1702              		.cfi_startproc
 1703              		@ args = 0, pretend = 0, frame = 0
 1704              		@ frame_needed = 0, uses_anonymous_args = 0
1486:System/FreeRTOS/tasks.c **** 	TCB_t const *pxTCB;
 1705              		.loc 1 1486 2 is_stmt 0 view .LVU486
 1706 0000 10B5     		push	{r4, lr}
 1707              	.LCFI17:
 1708              		.cfi_def_cfa_offset 8
 1709              		.cfi_offset 4, -8
 1710              		.cfi_offset 14, -4
 1711 0002 0446     		mov	r4, r0
1487:System/FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
 1712              		.loc 1 1487 2 is_stmt 1 view .LVU487
1488:System/FreeRTOS/tasks.c **** 
 1713              		.loc 1 1488 2 view .LVU488
1490:System/FreeRTOS/tasks.c **** 		{
 1714              		.loc 1 1490 3 view .LVU489
 1715 0004 FFF7FEFF 		bl	vPortEnterCritical
 1716              	.LVL128:
1494:System/FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1717              		.loc 1 1494 4 view .LVU490
1494:System/FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1718              		.loc 1 1494 12 is_stmt 0 view .LVU491
 1719 0008 24B1     		cbz	r4, .L135
 1720              	.LVL129:
 1721              	.L133:
1495:System/FreeRTOS/tasks.c **** 		}
 1722              		.loc 1 1495 4 is_stmt 1 discriminator 4 view .LVU492
1495:System/FreeRTOS/tasks.c **** 		}
 1723              		.loc 1 1495 13 is_stmt 0 discriminator 4 view .LVU493
 1724 000a E46A     		ldr	r4, [r4, #44]
 1725              	.LVL130:
1497:System/FreeRTOS/tasks.c **** 
 1726              		.loc 1 1497 3 is_stmt 1 discriminator 4 view .LVU494
 1727 000c FFF7FEFF 		bl	vPortExitCritical
 1728              	.LVL131:
1499:System/FreeRTOS/tasks.c **** 	}
 1729              		.loc 1 1499 3 discriminator 4 view .LVU495
1500:System/FreeRTOS/tasks.c **** 
 1730              		.loc 1 1500 2 is_stmt 0 discriminator 4 view .LVU496
 1731 0010 2046     		mov	r0, r4
 1732 0012 10BD     		pop	{r4, pc}
 1733              	.LVL132:
 1734              	.L135:
1494:System/FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1735              		.loc 1 1494 12 discriminator 1 view .LVU497
 1736 0014 014B     		ldr	r3, .L136
 1737 0016 1C68     		ldr	r4, [r3]
 1738              	.LVL133:
1494:System/FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1739              		.loc 1 1494 12 discriminator 1 view .LVU498
 1740 0018 F7E7     		b	.L133
 1741              	.L137:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 135


 1742 001a 00BF     		.align	2
 1743              	.L136:
 1744 001c 00000000 		.word	.LANCHOR10
 1745              		.cfi_endproc
 1746              	.LFE13:
 1748              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1749              		.align	1
 1750              		.global	uxTaskPriorityGetFromISR
 1751              		.syntax unified
 1752              		.thumb
 1753              		.thumb_func
 1755              	uxTaskPriorityGetFromISR:
 1756              	.LVL134:
 1757              	.LFB14:
1508:System/FreeRTOS/tasks.c **** 	TCB_t const *pxTCB;
 1758              		.loc 1 1508 2 is_stmt 1 view -0
 1759              		.cfi_startproc
 1760              		@ args = 0, pretend = 0, frame = 0
 1761              		@ frame_needed = 0, uses_anonymous_args = 0
1508:System/FreeRTOS/tasks.c **** 	TCB_t const *pxTCB;
 1762              		.loc 1 1508 2 is_stmt 0 view .LVU500
 1763 0000 10B5     		push	{r4, lr}
 1764              	.LCFI18:
 1765              		.cfi_def_cfa_offset 8
 1766              		.cfi_offset 4, -8
 1767              		.cfi_offset 14, -4
 1768 0002 0446     		mov	r4, r0
1509:System/FreeRTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
 1769              		.loc 1 1509 2 is_stmt 1 view .LVU501
1510:System/FreeRTOS/tasks.c **** 
 1770              		.loc 1 1510 2 view .LVU502
1528:System/FreeRTOS/tasks.c **** 
 1771              		.loc 1 1528 3 view .LVU503
 1772 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1773              	.LVL135:
1530:System/FreeRTOS/tasks.c **** 		{
 1774              		.loc 1 1530 3 view .LVU504
 1775              	.LBB143:
 1776              	.LBI143:
 196:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1777              		.loc 2 207 34 view .LVU505
 1778              	.LBB144:
 208:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1779              		.loc 2 209 1 view .LVU506
 210:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 136


 211:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1780              		.loc 2 211 2 view .LVU507
 1781              		.syntax unified
 1782              	@ 211 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1783 0008 EFF31183 			mrs r3, basepri											
 1784 000c 4FF05002 		mov r2, #80												
 1785 0010 82F31188 		msr basepri, r2											
 1786 0014 BFF36F8F 		isb														
 1787 0018 BFF34F8F 		dsb														
 1788              	
 1789              	@ 0 "" 2
 1790              	.LVL136:
 212:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1791              		.loc 2 223 2 view .LVU508
 1792              		.loc 2 223 2 is_stmt 0 view .LVU509
 1793              		.thumb
 1794              		.syntax unified
 1795              	.LBE144:
 1796              	.LBE143:
1534:System/FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1797              		.loc 1 1534 4 is_stmt 1 view .LVU510
1534:System/FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1798              		.loc 1 1534 12 is_stmt 0 view .LVU511
 1799 001c 1CB1     		cbz	r4, .L141
 1800              	.LVL137:
 1801              	.L139:
1535:System/FreeRTOS/tasks.c **** 		}
 1802              		.loc 1 1535 4 is_stmt 1 discriminator 4 view .LVU512
1535:System/FreeRTOS/tasks.c **** 		}
 1803              		.loc 1 1535 13 is_stmt 0 discriminator 4 view .LVU513
 1804 001e E06A     		ldr	r0, [r4, #44]
 1805              	.LVL138:
1537:System/FreeRTOS/tasks.c **** 
 1806              		.loc 1 1537 3 is_stmt 1 discriminator 4 view .LVU514
 1807              	.LBB145:
 1808              	.LBI145:
 224:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1809              		.loc 2 227 30 discriminator 4 view .LVU515
 1810              	.LBB146:
 228:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1811              		.loc 2 229 2 discriminator 4 view .LVU516
 1812              		.syntax unified
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 137


 1813              	@ 229 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1814 0020 83F31188 			msr basepri, r3	
 1815              	@ 0 "" 2
 1816              	.LVL139:
 1817              		.loc 2 229 2 is_stmt 0 discriminator 4 view .LVU517
 1818              		.thumb
 1819              		.syntax unified
 1820              	.LBE146:
 1821              	.LBE145:
1539:System/FreeRTOS/tasks.c **** 	}
 1822              		.loc 1 1539 3 is_stmt 1 discriminator 4 view .LVU518
1540:System/FreeRTOS/tasks.c **** 
 1823              		.loc 1 1540 2 is_stmt 0 discriminator 4 view .LVU519
 1824 0024 10BD     		pop	{r4, pc}
 1825              	.LVL140:
 1826              	.L141:
1534:System/FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1827              		.loc 1 1534 12 discriminator 1 view .LVU520
 1828 0026 014A     		ldr	r2, .L142
 1829 0028 1468     		ldr	r4, [r2]
 1830              	.LVL141:
1534:System/FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1831              		.loc 1 1534 12 discriminator 1 view .LVU521
 1832 002a F8E7     		b	.L139
 1833              	.L143:
 1834              		.align	2
 1835              	.L142:
 1836 002c 00000000 		.word	.LANCHOR10
 1837              		.cfi_endproc
 1838              	.LFE14:
 1840              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1841              		.align	1
 1842              		.global	vTaskPrioritySet
 1843              		.syntax unified
 1844              		.thumb
 1845              		.thumb_func
 1847              	vTaskPrioritySet:
 1848              	.LVL142:
 1849              	.LFB15:
1548:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1850              		.loc 1 1548 2 is_stmt 1 view -0
 1851              		.cfi_startproc
 1852              		@ args = 0, pretend = 0, frame = 0
 1853              		@ frame_needed = 0, uses_anonymous_args = 0
1548:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1854              		.loc 1 1548 2 is_stmt 0 view .LVU523
 1855 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1856              	.LCFI19:
 1857              		.cfi_def_cfa_offset 24
 1858              		.cfi_offset 3, -24
 1859              		.cfi_offset 4, -20
 1860              		.cfi_offset 5, -16
 1861              		.cfi_offset 6, -12
 1862              		.cfi_offset 7, -8
 1863              		.cfi_offset 14, -4
1549:System/FreeRTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1864              		.loc 1 1549 2 is_stmt 1 view .LVU524
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 138


1550:System/FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1865              		.loc 1 1550 2 view .LVU525
1551:System/FreeRTOS/tasks.c **** 
 1866              		.loc 1 1551 2 view .LVU526
 1867              	.LVL143:
1553:System/FreeRTOS/tasks.c **** 
 1868              		.loc 1 1553 3 view .LVU527
 1869 0002 0429     		cmp	r1, #4
 1870 0004 08D9     		bls	.L145
1553:System/FreeRTOS/tasks.c **** 
 1871              		.loc 1 1553 3 view .LVU528
 1872              	.LBB147:
 1873              	.LBI147:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 1874              		.loc 2 191 30 view .LVU529
 1875              	.LBB148:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1876              		.loc 2 193 1 view .LVU530
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1877              		.loc 2 195 2 view .LVU531
 1878              		.syntax unified
 1879              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1880 0006 4FF05003 			mov r3, #80												
 1881 000a 83F31188 		msr basepri, r3											
 1882 000e BFF36F8F 		isb														
 1883 0012 BFF34F8F 		dsb														
 1884              	
 1885              	@ 0 "" 2
 1886              	.LVL144:
 1887              		.thumb
 1888              		.syntax unified
 1889              	.L146:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1890              		.loc 2 195 2 is_stmt 0 view .LVU532
 1891              	.LBE148:
 1892              	.LBE147:
1553:System/FreeRTOS/tasks.c **** 
 1893              		.loc 1 1553 3 is_stmt 1 discriminator 1 view .LVU533
1553:System/FreeRTOS/tasks.c **** 
 1894              		.loc 1 1553 3 discriminator 1 view .LVU534
1553:System/FreeRTOS/tasks.c **** 
 1895              		.loc 1 1553 3 discriminator 1 view .LVU535
 1896 0016 FEE7     		b	.L146
 1897              	.L145:
 1898 0018 0546     		mov	r5, r0
 1899 001a 0C46     		mov	r4, r1
1553:System/FreeRTOS/tasks.c **** 
 1900              		.loc 1 1553 59 view .LVU536
1556:System/FreeRTOS/tasks.c **** 		{
 1901              		.loc 1 1556 3 view .LVU537
 1902              	.LVL145:
1562:System/FreeRTOS/tasks.c **** 		}
 1903              		.loc 1 1562 28 view .LVU538
1565:System/FreeRTOS/tasks.c **** 		{
 1904              		.loc 1 1565 3 view .LVU539
 1905 001c FFF7FEFF 		bl	vPortEnterCritical
 1906              	.LVL146:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 139


1569:System/FreeRTOS/tasks.c **** 
 1907              		.loc 1 1569 4 view .LVU540
1569:System/FreeRTOS/tasks.c **** 
 1908              		.loc 1 1569 12 is_stmt 0 view .LVU541
 1909 0020 75B1     		cbz	r5, .L159
 1910              	.LVL147:
 1911              	.L147:
1571:System/FreeRTOS/tasks.c **** 
 1912              		.loc 1 1571 50 is_stmt 1 discriminator 4 view .LVU542
1575:System/FreeRTOS/tasks.c **** 			}
 1913              		.loc 1 1575 5 discriminator 4 view .LVU543
1575:System/FreeRTOS/tasks.c **** 			}
 1914              		.loc 1 1575 27 is_stmt 0 discriminator 4 view .LVU544
 1915 0022 2B6D     		ldr	r3, [r5, #80]
 1916              	.LVL148:
1583:System/FreeRTOS/tasks.c **** 			{
 1917              		.loc 1 1583 4 is_stmt 1 discriminator 4 view .LVU545
1583:System/FreeRTOS/tasks.c **** 			{
 1918              		.loc 1 1583 6 is_stmt 0 discriminator 4 view .LVU546
 1919 0024 9C42     		cmp	r4, r3
 1920 0026 30D0     		beq	.L148
1587:System/FreeRTOS/tasks.c **** 				{
 1921              		.loc 1 1587 5 is_stmt 1 view .LVU547
1587:System/FreeRTOS/tasks.c **** 				{
 1922              		.loc 1 1587 7 is_stmt 0 view .LVU548
 1923 0028 0DD9     		bls	.L149
1589:System/FreeRTOS/tasks.c **** 					{
 1924              		.loc 1 1589 6 is_stmt 1 view .LVU549
1589:System/FreeRTOS/tasks.c **** 					{
 1925              		.loc 1 1589 16 is_stmt 0 view .LVU550
 1926 002a 2C4A     		ldr	r2, .L162
 1927 002c 1268     		ldr	r2, [r2]
1589:System/FreeRTOS/tasks.c **** 					{
 1928              		.loc 1 1589 8 view .LVU551
 1929 002e AA42     		cmp	r2, r5
 1930 0030 2ED0     		beq	.L155
1594:System/FreeRTOS/tasks.c **** 						{
 1931              		.loc 1 1594 7 is_stmt 1 view .LVU552
1594:System/FreeRTOS/tasks.c **** 						{
 1932              		.loc 1 1594 40 is_stmt 0 view .LVU553
 1933 0032 2A4A     		ldr	r2, .L162
 1934 0034 1268     		ldr	r2, [r2]
 1935 0036 D26A     		ldr	r2, [r2, #44]
1594:System/FreeRTOS/tasks.c **** 						{
 1936              		.loc 1 1594 9 view .LVU554
 1937 0038 A242     		cmp	r2, r4
 1938 003a 2BD9     		bls	.L156
1551:System/FreeRTOS/tasks.c **** 
 1939              		.loc 1 1551 13 view .LVU555
 1940 003c 0027     		movs	r7, #0
 1941 003e 07E0     		b	.L150
 1942              	.LVL149:
 1943              	.L159:
1569:System/FreeRTOS/tasks.c **** 
 1944              		.loc 1 1569 12 discriminator 1 view .LVU556
 1945 0040 264B     		ldr	r3, .L162
 1946 0042 1D68     		ldr	r5, [r3]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 140


 1947              	.LVL150:
1569:System/FreeRTOS/tasks.c **** 
 1948              		.loc 1 1569 12 discriminator 1 view .LVU557
 1949 0044 EDE7     		b	.L147
 1950              	.LVL151:
 1951              	.L149:
1610:System/FreeRTOS/tasks.c **** 				{
 1952              		.loc 1 1610 10 is_stmt 1 view .LVU558
1610:System/FreeRTOS/tasks.c **** 				{
 1953              		.loc 1 1610 20 is_stmt 0 view .LVU559
 1954 0046 254A     		ldr	r2, .L162
 1955 0048 1268     		ldr	r2, [r2]
1610:System/FreeRTOS/tasks.c **** 				{
 1956              		.loc 1 1610 12 view .LVU560
 1957 004a AA42     		cmp	r2, r5
 1958 004c 24D0     		beq	.L157
1551:System/FreeRTOS/tasks.c **** 
 1959              		.loc 1 1551 13 view .LVU561
 1960 004e 0027     		movs	r7, #0
 1961              	.L150:
 1962              	.LVL152:
1622:System/FreeRTOS/tasks.c **** 
 1963              		.loc 1 1622 5 is_stmt 1 view .LVU562
1627:System/FreeRTOS/tasks.c **** 
 1964              		.loc 1 1627 5 view .LVU563
1627:System/FreeRTOS/tasks.c **** 
 1965              		.loc 1 1627 27 is_stmt 0 view .LVU564
 1966 0050 EE6A     		ldr	r6, [r5, #44]
 1967              	.LVL153:
1633:System/FreeRTOS/tasks.c **** 					{
 1968              		.loc 1 1633 6 is_stmt 1 view .LVU565
1633:System/FreeRTOS/tasks.c **** 					{
 1969              		.loc 1 1633 8 is_stmt 0 view .LVU566
 1970 0052 B342     		cmp	r3, r6
 1971 0054 22D0     		beq	.L160
 1972              	.L151:
1639:System/FreeRTOS/tasks.c **** 					}
 1973              		.loc 1 1639 31 is_stmt 1 view .LVU567
1643:System/FreeRTOS/tasks.c **** 				}
 1974              		.loc 1 1643 6 view .LVU568
1643:System/FreeRTOS/tasks.c **** 				}
 1975              		.loc 1 1643 28 is_stmt 0 view .LVU569
 1976 0056 2C65     		str	r4, [r5, #80]
1653:System/FreeRTOS/tasks.c **** 				{
 1977              		.loc 1 1653 5 is_stmt 1 view .LVU570
1653:System/FreeRTOS/tasks.c **** 				{
 1978              		.loc 1 1653 11 is_stmt 0 view .LVU571
 1979 0058 AB69     		ldr	r3, [r5, #24]
 1980              	.LVL154:
1653:System/FreeRTOS/tasks.c **** 				{
 1981              		.loc 1 1653 7 view .LVU572
 1982 005a 002B     		cmp	r3, #0
 1983 005c 02DB     		blt	.L152
1655:System/FreeRTOS/tasks.c **** 				}
 1984              		.loc 1 1655 6 is_stmt 1 view .LVU573
 1985 005e C4F10504 		rsb	r4, r4, #5
 1986              	.LVL155:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 141


1655:System/FreeRTOS/tasks.c **** 				}
 1987              		.loc 1 1655 6 is_stmt 0 view .LVU574
 1988 0062 AC61     		str	r4, [r5, #24]
 1989              	.L152:
1659:System/FreeRTOS/tasks.c **** 				}
 1990              		.loc 1 1659 30 is_stmt 1 view .LVU575
1666:System/FreeRTOS/tasks.c **** 				{
 1991              		.loc 1 1666 5 view .LVU576
1666:System/FreeRTOS/tasks.c **** 				{
 1992              		.loc 1 1666 9 is_stmt 0 view .LVU577
 1993 0064 6969     		ldr	r1, [r5, #20]
 1994 0066 06EB8602 		add	r2, r6, r6, lsl #2
 1995 006a 1D4B     		ldr	r3, .L162+4
 1996 006c 03EB8203 		add	r3, r3, r2, lsl #2
1666:System/FreeRTOS/tasks.c **** 				{
 1997              		.loc 1 1666 7 view .LVU578
 1998 0070 9942     		cmp	r1, r3
 1999 0072 15D0     		beq	.L161
 2000              	.LVL156:
 2001              	.L153:
1686:System/FreeRTOS/tasks.c **** 				}
 2002              		.loc 1 1686 30 is_stmt 1 view .LVU579
1689:System/FreeRTOS/tasks.c **** 				{
 2003              		.loc 1 1689 5 view .LVU580
1689:System/FreeRTOS/tasks.c **** 				{
 2004              		.loc 1 1689 7 is_stmt 0 view .LVU581
 2005 0074 4FB1     		cbz	r7, .L148
1691:System/FreeRTOS/tasks.c **** 				}
 2006              		.loc 1 1691 6 is_stmt 1 view .LVU582
 2007 0076 4FF0E023 		mov	r3, #-536813568
 2008 007a 4FF08052 		mov	r2, #268435456
 2009 007e C3F8042D 		str	r2, [r3, #3332]
1691:System/FreeRTOS/tasks.c **** 				}
 2010              		.loc 1 1691 6 view .LVU583
 2011              		.syntax unified
 2012              	@ 1691 "System/FreeRTOS/tasks.c" 1
 2013 0082 BFF34F8F 		dsb
 2014              	@ 0 "" 2
1691:System/FreeRTOS/tasks.c **** 				}
 2015              		.loc 1 1691 6 view .LVU584
 2016              	@ 1691 "System/FreeRTOS/tasks.c" 1
 2017 0086 BFF36F8F 		isb
 2018              	@ 0 "" 2
1691:System/FreeRTOS/tasks.c **** 				}
 2019              		.loc 1 1691 37 view .LVU585
 2020              	.LVL157:
 2021              		.thumb
 2022              		.syntax unified
 2023              	.L148:
1695:System/FreeRTOS/tasks.c **** 				}
 2024              		.loc 1 1695 30 view .LVU586
1700:System/FreeRTOS/tasks.c **** 			}
 2025              		.loc 1 1700 5 view .LVU587
1703:System/FreeRTOS/tasks.c **** 	}
 2026              		.loc 1 1703 3 view .LVU588
 2027 008a FFF7FEFF 		bl	vPortExitCritical
 2028              	.LVL158:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 142


1704:System/FreeRTOS/tasks.c **** 
 2029              		.loc 1 1704 2 is_stmt 0 view .LVU589
 2030 008e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2031              	.LVL159:
 2032              	.L155:
1551:System/FreeRTOS/tasks.c **** 
 2033              		.loc 1 1551 13 view .LVU590
 2034 0090 0027     		movs	r7, #0
 2035 0092 DDE7     		b	.L150
 2036              	.L156:
1596:System/FreeRTOS/tasks.c **** 						}
 2037              		.loc 1 1596 23 view .LVU591
 2038 0094 0127     		movs	r7, #1
 2039 0096 DBE7     		b	.L150
 2040              	.L157:
1615:System/FreeRTOS/tasks.c **** 				}
 2041              		.loc 1 1615 21 view .LVU592
 2042 0098 0127     		movs	r7, #1
 2043 009a D9E7     		b	.L150
 2044              	.LVL160:
 2045              	.L160:
1635:System/FreeRTOS/tasks.c **** 					}
 2046              		.loc 1 1635 7 is_stmt 1 view .LVU593
1635:System/FreeRTOS/tasks.c **** 					}
 2047              		.loc 1 1635 25 is_stmt 0 view .LVU594
 2048 009c EC62     		str	r4, [r5, #44]
 2049 009e DAE7     		b	.L151
 2050              	.LVL161:
 2051              	.L161:
1671:System/FreeRTOS/tasks.c **** 					{
 2052              		.loc 1 1671 6 is_stmt 1 view .LVU595
1671:System/FreeRTOS/tasks.c **** 					{
 2053              		.loc 1 1671 10 is_stmt 0 view .LVU596
 2054 00a0 2C1D     		adds	r4, r5, #4
 2055 00a2 2046     		mov	r0, r4
 2056 00a4 FFF7FEFF 		bl	uxListRemove
 2057              	.LVL162:
1671:System/FreeRTOS/tasks.c **** 					{
 2058              		.loc 1 1671 8 view .LVU597
 2059 00a8 38B9     		cbnz	r0, .L154
1676:System/FreeRTOS/tasks.c **** 					}
 2060              		.loc 1 1676 7 is_stmt 1 view .LVU598
 2061 00aa 0123     		movs	r3, #1
 2062 00ac 03FA06F6 		lsl	r6, r3, r6
 2063              	.LVL163:
1676:System/FreeRTOS/tasks.c **** 					}
 2064              		.loc 1 1676 7 is_stmt 0 view .LVU599
 2065 00b0 0C4A     		ldr	r2, .L162+8
 2066 00b2 1368     		ldr	r3, [r2]
 2067 00b4 23EA0603 		bic	r3, r3, r6
 2068 00b8 1360     		str	r3, [r2]
 2069              	.L154:
1680:System/FreeRTOS/tasks.c **** 					}
 2070              		.loc 1 1680 31 is_stmt 1 view .LVU600
1682:System/FreeRTOS/tasks.c **** 				}
 2071              		.loc 1 1682 6 view .LVU601
1682:System/FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 143


 2072              		.loc 1 1682 6 view .LVU602
 2073 00ba E86A     		ldr	r0, [r5, #44]
 2074 00bc 0123     		movs	r3, #1
 2075 00be 8340     		lsls	r3, r3, r0
 2076 00c0 084A     		ldr	r2, .L162+8
 2077 00c2 1168     		ldr	r1, [r2]
 2078 00c4 0B43     		orrs	r3, r3, r1
 2079 00c6 1360     		str	r3, [r2]
1682:System/FreeRTOS/tasks.c **** 				}
 2080              		.loc 1 1682 6 view .LVU603
 2081 00c8 00EB8000 		add	r0, r0, r0, lsl #2
 2082 00cc 2146     		mov	r1, r4
 2083 00ce 044B     		ldr	r3, .L162+4
 2084 00d0 03EB8000 		add	r0, r3, r0, lsl #2
 2085 00d4 FFF7FEFF 		bl	vListInsertEnd
 2086              	.LVL164:
1682:System/FreeRTOS/tasks.c **** 				}
 2087              		.loc 1 1682 36 view .LVU604
 2088 00d8 CCE7     		b	.L153
 2089              	.L163:
 2090 00da 00BF     		.align	2
 2091              	.L162:
 2092 00dc 00000000 		.word	.LANCHOR10
 2093 00e0 00000000 		.word	.LANCHOR4
 2094 00e4 00000000 		.word	.LANCHOR13
 2095              		.cfi_endproc
 2096              	.LFE15:
 2098              		.section	.text.vTaskResume,"ax",%progbits
 2099              		.align	1
 2100              		.global	vTaskResume
 2101              		.syntax unified
 2102              		.thumb
 2103              		.thumb_func
 2105              	vTaskResume:
 2106              	.LVL165:
 2107              	.LFB18:
1859:System/FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2108              		.loc 1 1859 2 view -0
 2109              		.cfi_startproc
 2110              		@ args = 0, pretend = 0, frame = 0
 2111              		@ frame_needed = 0, uses_anonymous_args = 0
1859:System/FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2112              		.loc 1 1859 2 is_stmt 0 view .LVU606
 2113 0000 38B5     		push	{r3, r4, r5, lr}
 2114              	.LCFI20:
 2115              		.cfi_def_cfa_offset 16
 2116              		.cfi_offset 3, -16
 2117              		.cfi_offset 4, -12
 2118              		.cfi_offset 5, -8
 2119              		.cfi_offset 14, -4
1860:System/FreeRTOS/tasks.c **** 
 2120              		.loc 1 1860 2 is_stmt 1 view .LVU607
 2121              	.LVL166:
1863:System/FreeRTOS/tasks.c **** 
 2122              		.loc 1 1863 3 view .LVU608
 2123 0002 68B1     		cbz	r0, .L170
 2124 0004 0446     		mov	r4, r0
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 144


1863:System/FreeRTOS/tasks.c **** 
 2125              		.loc 1 1863 32 discriminator 2 view .LVU609
1867:System/FreeRTOS/tasks.c **** 		{
 2126              		.loc 1 1867 3 discriminator 2 view .LVU610
1867:System/FreeRTOS/tasks.c **** 		{
 2127              		.loc 1 1867 15 is_stmt 0 discriminator 2 view .LVU611
 2128 0006 1D4B     		ldr	r3, .L172
 2129 0008 1B68     		ldr	r3, [r3]
1867:System/FreeRTOS/tasks.c **** 		{
 2130              		.loc 1 1867 5 discriminator 2 view .LVU612
 2131 000a 8342     		cmp	r3, r0
 2132 000c 07D0     		beq	.L164
1869:System/FreeRTOS/tasks.c **** 			{
 2133              		.loc 1 1869 4 is_stmt 1 view .LVU613
 2134 000e FFF7FEFF 		bl	vPortEnterCritical
 2135              	.LVL167:
1871:System/FreeRTOS/tasks.c **** 				{
 2136              		.loc 1 1871 5 view .LVU614
1871:System/FreeRTOS/tasks.c **** 				{
 2137              		.loc 1 1871 9 is_stmt 0 view .LVU615
 2138 0012 2046     		mov	r0, r4
 2139 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2140              	.LVL168:
1871:System/FreeRTOS/tasks.c **** 				{
 2141              		.loc 1 1871 7 view .LVU616
 2142 0018 58B9     		cbnz	r0, .L171
 2143              	.L168:
1895:System/FreeRTOS/tasks.c **** 				}
 2144              		.loc 1 1895 30 is_stmt 1 view .LVU617
1898:System/FreeRTOS/tasks.c **** 		}
 2145              		.loc 1 1898 4 view .LVU618
 2146 001a FFF7FEFF 		bl	vPortExitCritical
 2147              	.LVL169:
1902:System/FreeRTOS/tasks.c **** 		}
 2148              		.loc 1 1902 28 view .LVU619
 2149              	.L164:
1904:System/FreeRTOS/tasks.c **** 
 2150              		.loc 1 1904 2 is_stmt 0 view .LVU620
 2151 001e 38BD     		pop	{r3, r4, r5, pc}
 2152              	.LVL170:
 2153              	.L170:
1863:System/FreeRTOS/tasks.c **** 
 2154              		.loc 1 1863 3 is_stmt 1 view .LVU621
 2155              	.LBB149:
 2156              	.LBI149:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2157              		.loc 2 191 30 view .LVU622
 2158              	.LBB150:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2159              		.loc 2 193 1 view .LVU623
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2160              		.loc 2 195 2 view .LVU624
 2161              		.syntax unified
 2162              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2163 0020 4FF05003 			mov r3, #80												
 2164 0024 83F31188 		msr basepri, r3											
 2165 0028 BFF36F8F 		isb														
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 145


 2166 002c BFF34F8F 		dsb														
 2167              	
 2168              	@ 0 "" 2
 2169              	.LVL171:
 2170              		.thumb
 2171              		.syntax unified
 2172              	.L166:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2173              		.loc 2 195 2 is_stmt 0 view .LVU625
 2174              	.LBE150:
 2175              	.LBE149:
1863:System/FreeRTOS/tasks.c **** 
 2176              		.loc 1 1863 3 is_stmt 1 discriminator 1 view .LVU626
1863:System/FreeRTOS/tasks.c **** 
 2177              		.loc 1 1863 3 discriminator 1 view .LVU627
1863:System/FreeRTOS/tasks.c **** 
 2178              		.loc 1 1863 3 discriminator 1 view .LVU628
 2179 0030 FEE7     		b	.L166
 2180              	.LVL172:
 2181              	.L171:
1873:System/FreeRTOS/tasks.c **** 
 2182              		.loc 1 1873 31 view .LVU629
1877:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2183              		.loc 1 1877 6 view .LVU630
1877:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2184              		.loc 1 1877 15 is_stmt 0 view .LVU631
 2185 0032 251D     		adds	r5, r4, #4
 2186 0034 2846     		mov	r0, r5
 2187 0036 FFF7FEFF 		bl	uxListRemove
 2188              	.LVL173:
1878:System/FreeRTOS/tasks.c **** 
 2189              		.loc 1 1878 6 is_stmt 1 view .LVU632
1878:System/FreeRTOS/tasks.c **** 
 2190              		.loc 1 1878 6 view .LVU633
 2191 003a E06A     		ldr	r0, [r4, #44]
 2192 003c 0123     		movs	r3, #1
 2193 003e 8340     		lsls	r3, r3, r0
 2194 0040 0F4A     		ldr	r2, .L172+4
 2195 0042 1168     		ldr	r1, [r2]
 2196 0044 0B43     		orrs	r3, r3, r1
 2197 0046 1360     		str	r3, [r2]
1878:System/FreeRTOS/tasks.c **** 
 2198              		.loc 1 1878 6 view .LVU634
 2199 0048 00EB8000 		add	r0, r0, r0, lsl #2
 2200 004c 2946     		mov	r1, r5
 2201 004e 0D4B     		ldr	r3, .L172+8
 2202 0050 03EB8000 		add	r0, r3, r0, lsl #2
 2203 0054 FFF7FEFF 		bl	vListInsertEnd
 2204              	.LVL174:
1878:System/FreeRTOS/tasks.c **** 
 2205              		.loc 1 1878 36 view .LVU635
1881:System/FreeRTOS/tasks.c **** 					{
 2206              		.loc 1 1881 6 view .LVU636
1881:System/FreeRTOS/tasks.c **** 					{
 2207              		.loc 1 1881 15 is_stmt 0 view .LVU637
 2208 0058 E26A     		ldr	r2, [r4, #44]
1881:System/FreeRTOS/tasks.c **** 					{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 146


 2209              		.loc 1 1881 43 view .LVU638
 2210 005a 084B     		ldr	r3, .L172
 2211 005c 1B68     		ldr	r3, [r3]
 2212 005e DB6A     		ldr	r3, [r3, #44]
1881:System/FreeRTOS/tasks.c **** 					{
 2213              		.loc 1 1881 8 view .LVU639
 2214 0060 9A42     		cmp	r2, r3
 2215 0062 DAD3     		bcc	.L168
1886:System/FreeRTOS/tasks.c **** 					}
 2216              		.loc 1 1886 7 is_stmt 1 view .LVU640
 2217 0064 4FF0E023 		mov	r3, #-536813568
 2218 0068 4FF08052 		mov	r2, #268435456
 2219 006c C3F8042D 		str	r2, [r3, #3332]
1886:System/FreeRTOS/tasks.c **** 					}
 2220              		.loc 1 1886 7 view .LVU641
 2221              		.syntax unified
 2222              	@ 1886 "System/FreeRTOS/tasks.c" 1
 2223 0070 BFF34F8F 		dsb
 2224              	@ 0 "" 2
1886:System/FreeRTOS/tasks.c **** 					}
 2225              		.loc 1 1886 7 view .LVU642
 2226              	@ 1886 "System/FreeRTOS/tasks.c" 1
 2227 0074 BFF36F8F 		isb
 2228              	@ 0 "" 2
1886:System/FreeRTOS/tasks.c **** 					}
 2229              		.loc 1 1886 38 view .LVU643
 2230              		.thumb
 2231              		.syntax unified
 2232 0078 CFE7     		b	.L168
 2233              	.L173:
 2234 007a 00BF     		.align	2
 2235              	.L172:
 2236 007c 00000000 		.word	.LANCHOR10
 2237 0080 00000000 		.word	.LANCHOR13
 2238 0084 00000000 		.word	.LANCHOR4
 2239              		.cfi_endproc
 2240              	.LFE18:
 2242              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2243              		.align	1
 2244              		.global	xTaskResumeFromISR
 2245              		.syntax unified
 2246              		.thumb
 2247              		.thumb_func
 2249              	xTaskResumeFromISR:
 2250              	.LVL175:
 2251              	.LFB19:
1913:System/FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2252              		.loc 1 1913 2 view -0
 2253              		.cfi_startproc
 2254              		@ args = 0, pretend = 0, frame = 0
 2255              		@ frame_needed = 0, uses_anonymous_args = 0
1913:System/FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2256              		.loc 1 1913 2 is_stmt 0 view .LVU645
 2257 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2258              	.LCFI21:
 2259              		.cfi_def_cfa_offset 24
 2260              		.cfi_offset 3, -24
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 147


 2261              		.cfi_offset 4, -20
 2262              		.cfi_offset 5, -16
 2263              		.cfi_offset 6, -12
 2264              		.cfi_offset 7, -8
 2265              		.cfi_offset 14, -4
1914:System/FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2266              		.loc 1 1914 2 is_stmt 1 view .LVU646
 2267              	.LVL176:
1915:System/FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 2268              		.loc 1 1915 2 view .LVU647
1916:System/FreeRTOS/tasks.c **** 
 2269              		.loc 1 1916 2 view .LVU648
1918:System/FreeRTOS/tasks.c **** 
 2270              		.loc 1 1918 3 view .LVU649
 2271 0002 90B3     		cbz	r0, .L182
 2272 0004 0446     		mov	r4, r0
1918:System/FreeRTOS/tasks.c **** 
 2273              		.loc 1 1918 32 discriminator 2 view .LVU650
1936:System/FreeRTOS/tasks.c **** 
 2274              		.loc 1 1936 3 discriminator 2 view .LVU651
 2275 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2276              	.LVL177:
1938:System/FreeRTOS/tasks.c **** 		{
 2277              		.loc 1 1938 3 discriminator 2 view .LVU652
 2278              	.LBB151:
 2279              	.LBI151:
 207:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2280              		.loc 2 207 34 discriminator 2 view .LVU653
 2281              	.LBB152:
 209:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2282              		.loc 2 209 1 discriminator 2 view .LVU654
 211:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2283              		.loc 2 211 2 discriminator 2 view .LVU655
 2284              		.syntax unified
 2285              	@ 211 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2286 000a EFF31186 			mrs r6, basepri											
 2287 000e 4FF05003 		mov r3, #80												
 2288 0012 83F31188 		msr basepri, r3											
 2289 0016 BFF36F8F 		isb														
 2290 001a BFF34F8F 		dsb														
 2291              	
 2292              	@ 0 "" 2
 2293              	.LVL178:
 223:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 2294              		.loc 2 223 2 discriminator 2 view .LVU656
 223:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 2295              		.loc 2 223 2 is_stmt 0 discriminator 2 view .LVU657
 2296              		.thumb
 2297              		.syntax unified
 2298              	.LBE152:
 2299              	.LBE151:
1940:System/FreeRTOS/tasks.c **** 			{
 2300              		.loc 1 1940 4 is_stmt 1 discriminator 2 view .LVU658
1940:System/FreeRTOS/tasks.c **** 			{
 2301              		.loc 1 1940 8 is_stmt 0 discriminator 2 view .LVU659
 2302 001e 2046     		mov	r0, r4
 2303 0020 FFF7FEFF 		bl	prvTaskIsTaskSuspended
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 148


 2304              	.LVL179:
1940:System/FreeRTOS/tasks.c **** 			{
 2305              		.loc 1 1940 6 discriminator 2 view .LVU660
 2306 0024 0546     		mov	r5, r0
 2307 0026 E0B1     		cbz	r0, .L177
1942:System/FreeRTOS/tasks.c **** 
 2308              		.loc 1 1942 39 is_stmt 1 view .LVU661
1945:System/FreeRTOS/tasks.c **** 				{
 2309              		.loc 1 1945 5 view .LVU662
1945:System/FreeRTOS/tasks.c **** 				{
 2310              		.loc 1 1945 30 is_stmt 0 view .LVU663
 2311 0028 194B     		ldr	r3, .L183
 2312 002a 1B68     		ldr	r3, [r3]
1945:System/FreeRTOS/tasks.c **** 				{
 2313              		.loc 1 1945 7 view .LVU664
 2314 002c 43BB     		cbnz	r3, .L178
1949:System/FreeRTOS/tasks.c **** 					{
 2315              		.loc 1 1949 6 is_stmt 1 view .LVU665
1949:System/FreeRTOS/tasks.c **** 					{
 2316              		.loc 1 1949 15 is_stmt 0 view .LVU666
 2317 002e E26A     		ldr	r2, [r4, #44]
1949:System/FreeRTOS/tasks.c **** 					{
 2318              		.loc 1 1949 43 view .LVU667
 2319 0030 184B     		ldr	r3, .L183+4
 2320 0032 1B68     		ldr	r3, [r3]
 2321 0034 DB6A     		ldr	r3, [r3, #44]
1949:System/FreeRTOS/tasks.c **** 					{
 2322              		.loc 1 1949 8 view .LVU668
 2323 0036 9A42     		cmp	r2, r3
 2324 0038 20D2     		bcs	.L180
1914:System/FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2325              		.loc 1 1914 13 view .LVU669
 2326 003a 0025     		movs	r5, #0
 2327              	.L179:
 2328              	.LVL180:
1955:System/FreeRTOS/tasks.c **** 					}
 2329              		.loc 1 1955 31 is_stmt 1 view .LVU670
1958:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2330              		.loc 1 1958 6 view .LVU671
1958:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2331              		.loc 1 1958 15 is_stmt 0 view .LVU672
 2332 003c 271D     		adds	r7, r4, #4
 2333 003e 3846     		mov	r0, r7
 2334 0040 FFF7FEFF 		bl	uxListRemove
 2335              	.LVL181:
1959:System/FreeRTOS/tasks.c **** 				}
 2336              		.loc 1 1959 6 is_stmt 1 view .LVU673
1959:System/FreeRTOS/tasks.c **** 				}
 2337              		.loc 1 1959 6 view .LVU674
 2338 0044 E06A     		ldr	r0, [r4, #44]
 2339 0046 0123     		movs	r3, #1
 2340 0048 8340     		lsls	r3, r3, r0
 2341 004a 134A     		ldr	r2, .L183+8
 2342 004c 1168     		ldr	r1, [r2]
 2343 004e 0B43     		orrs	r3, r3, r1
 2344 0050 1360     		str	r3, [r2]
1959:System/FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 149


 2345              		.loc 1 1959 6 view .LVU675
 2346 0052 00EB8000 		add	r0, r0, r0, lsl #2
 2347 0056 3946     		mov	r1, r7
 2348 0058 104B     		ldr	r3, .L183+12
 2349 005a 03EB8000 		add	r0, r3, r0, lsl #2
 2350 005e FFF7FEFF 		bl	vListInsertEnd
 2351              	.LVL182:
1959:System/FreeRTOS/tasks.c **** 				}
 2352              		.loc 1 1959 36 view .LVU676
 2353              	.L177:
1971:System/FreeRTOS/tasks.c **** 			}
 2354              		.loc 1 1971 29 view .LVU677
1974:System/FreeRTOS/tasks.c **** 
 2355              		.loc 1 1974 3 view .LVU678
 2356              	.LBB153:
 2357              	.LBI153:
 227:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2358              		.loc 2 227 30 view .LVU679
 2359              	.LBB154:
 2360              		.loc 2 229 2 view .LVU680
 2361              		.syntax unified
 2362              	@ 229 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2363 0062 86F31188 			msr basepri, r6	
 2364              	@ 0 "" 2
 2365              	.LVL183:
 2366              		.loc 2 229 2 is_stmt 0 view .LVU681
 2367              		.thumb
 2368              		.syntax unified
 2369              	.LBE154:
 2370              	.LBE153:
1976:System/FreeRTOS/tasks.c **** 	}
 2371              		.loc 1 1976 3 is_stmt 1 view .LVU682
1977:System/FreeRTOS/tasks.c **** 
 2372              		.loc 1 1977 2 is_stmt 0 view .LVU683
 2373 0066 2846     		mov	r0, r5
 2374 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2375              	.LVL184:
 2376              	.L182:
1918:System/FreeRTOS/tasks.c **** 
 2377              		.loc 1 1918 3 is_stmt 1 view .LVU684
 2378              	.LBB155:
 2379              	.LBI155:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2380              		.loc 2 191 30 view .LVU685
 2381              	.LBB156:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2382              		.loc 2 193 1 view .LVU686
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2383              		.loc 2 195 2 view .LVU687
 2384              		.syntax unified
 2385              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2386 006a 4FF05003 			mov r3, #80												
 2387 006e 83F31188 		msr basepri, r3											
 2388 0072 BFF36F8F 		isb														
 2389 0076 BFF34F8F 		dsb														
 2390              	
 2391              	@ 0 "" 2
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 150


 2392              	.LVL185:
 2393              		.thumb
 2394              		.syntax unified
 2395              	.L176:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2396              		.loc 2 195 2 is_stmt 0 view .LVU688
 2397              	.LBE156:
 2398              	.LBE155:
1918:System/FreeRTOS/tasks.c **** 
 2399              		.loc 1 1918 3 is_stmt 1 discriminator 1 view .LVU689
1918:System/FreeRTOS/tasks.c **** 
 2400              		.loc 1 1918 3 discriminator 1 view .LVU690
1918:System/FreeRTOS/tasks.c **** 
 2401              		.loc 1 1918 3 discriminator 1 view .LVU691
 2402 007a FEE7     		b	.L176
 2403              	.LVL186:
 2404              	.L180:
1951:System/FreeRTOS/tasks.c **** 					}
 2405              		.loc 1 1951 22 is_stmt 0 view .LVU692
 2406 007c 0125     		movs	r5, #1
 2407 007e DDE7     		b	.L179
 2408              	.L178:
1966:System/FreeRTOS/tasks.c **** 				}
 2409              		.loc 1 1966 6 is_stmt 1 view .LVU693
 2410 0080 04F11801 		add	r1, r4, #24
 2411 0084 0648     		ldr	r0, .L183+16
 2412 0086 FFF7FEFF 		bl	vListInsertEnd
 2413              	.LVL187:
1914:System/FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2414              		.loc 1 1914 13 is_stmt 0 view .LVU694
 2415 008a 0025     		movs	r5, #0
 2416 008c E9E7     		b	.L177
 2417              	.L184:
 2418 008e 00BF     		.align	2
 2419              	.L183:
 2420 0090 00000000 		.word	.LANCHOR16
 2421 0094 00000000 		.word	.LANCHOR10
 2422 0098 00000000 		.word	.LANCHOR13
 2423 009c 00000000 		.word	.LANCHOR4
 2424 00a0 00000000 		.word	.LANCHOR1
 2425              		.cfi_endproc
 2426              	.LFE19:
 2428              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 2429              		.align	2
 2430              	.LC0:
 2431 0000 49444C45 		.ascii	"IDLE\000"
 2431      00
 2432              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2433              		.align	1
 2434              		.global	vTaskStartScheduler
 2435              		.syntax unified
 2436              		.thumb
 2437              		.thumb_func
 2439              	vTaskStartScheduler:
 2440              	.LFB20:
1983:System/FreeRTOS/tasks.c **** BaseType_t xReturn;
 2441              		.loc 1 1983 1 is_stmt 1 view -0
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 151


 2442              		.cfi_startproc
 2443              		@ args = 0, pretend = 0, frame = 16
 2444              		@ frame_needed = 0, uses_anonymous_args = 0
 2445 0000 10B5     		push	{r4, lr}
 2446              	.LCFI22:
 2447              		.cfi_def_cfa_offset 8
 2448              		.cfi_offset 4, -8
 2449              		.cfi_offset 14, -4
 2450 0002 88B0     		sub	sp, sp, #32
 2451              	.LCFI23:
 2452              		.cfi_def_cfa_offset 40
1984:System/FreeRTOS/tasks.c **** 
 2453              		.loc 1 1984 1 view .LVU696
 2454              	.LBB157:
1989:System/FreeRTOS/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2455              		.loc 1 1989 3 view .LVU697
1989:System/FreeRTOS/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2456              		.loc 1 1989 17 is_stmt 0 view .LVU698
 2457 0004 0024     		movs	r4, #0
 2458 0006 0594     		str	r4, [sp, #20]
1990:System/FreeRTOS/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 2459              		.loc 1 1990 3 is_stmt 1 view .LVU699
1990:System/FreeRTOS/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 2460              		.loc 1 1990 16 is_stmt 0 view .LVU700
 2461 0008 0694     		str	r4, [sp, #24]
1991:System/FreeRTOS/tasks.c **** 
 2462              		.loc 1 1991 3 is_stmt 1 view .LVU701
1995:System/FreeRTOS/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2463              		.loc 1 1995 3 view .LVU702
 2464 000a 07AA     		add	r2, sp, #28
 2465 000c 06A9     		add	r1, sp, #24
 2466 000e 05A8     		add	r0, sp, #20
 2467 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 2468              	.LVL188:
1996:System/FreeRTOS/tasks.c **** 												configIDLE_TASK_NAME,
 2469              		.loc 1 1996 3 view .LVU703
1996:System/FreeRTOS/tasks.c **** 												configIDLE_TASK_NAME,
 2470              		.loc 1 1996 21 is_stmt 0 view .LVU704
 2471 0014 059B     		ldr	r3, [sp, #20]
 2472 0016 0293     		str	r3, [sp, #8]
 2473 0018 069B     		ldr	r3, [sp, #24]
 2474 001a 0193     		str	r3, [sp, #4]
 2475 001c 0094     		str	r4, [sp]
 2476 001e 2346     		mov	r3, r4
 2477 0020 079A     		ldr	r2, [sp, #28]
 2478 0022 0E49     		ldr	r1, .L189
 2479 0024 0E48     		ldr	r0, .L189+4
 2480 0026 FFF7FEFF 		bl	xTaskCreateStatic
 2481              	.LVL189:
1996:System/FreeRTOS/tasks.c **** 												configIDLE_TASK_NAME,
 2482              		.loc 1 1996 19 view .LVU705
 2483 002a 0E4B     		ldr	r3, .L189+8
 2484 002c 1860     		str	r0, [r3]
2004:System/FreeRTOS/tasks.c **** 		{
 2485              		.loc 1 2004 3 is_stmt 1 view .LVU706
2004:System/FreeRTOS/tasks.c **** 		{
 2486              		.loc 1 2004 5 is_stmt 0 view .LVU707
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 152


 2487 002e 90B1     		cbz	r0, .L185
 2488              	.LVL190:
2004:System/FreeRTOS/tasks.c **** 		{
 2489              		.loc 1 2004 5 view .LVU708
 2490              	.LBE157:
2038:System/FreeRTOS/tasks.c **** 	{
 2491              		.loc 1 2038 2 is_stmt 1 view .LVU709
2054:System/FreeRTOS/tasks.c **** 
 2492              		.loc 1 2054 3 view .LVU710
 2493              	.LBB158:
 2494              	.LBI158:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2495              		.loc 2 191 30 view .LVU711
 2496              	.LBB159:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2497              		.loc 2 193 1 view .LVU712
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2498              		.loc 2 195 2 view .LVU713
 2499              		.syntax unified
 2500              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2501 0030 4FF05003 			mov r3, #80												
 2502 0034 83F31188 		msr basepri, r3											
 2503 0038 BFF36F8F 		isb														
 2504 003c BFF34F8F 		dsb														
 2505              	
 2506              	@ 0 "" 2
 2507              		.thumb
 2508              		.syntax unified
 2509              	.LBE159:
 2510              	.LBE158:
2066:System/FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2511              		.loc 1 2066 3 view .LVU714
2066:System/FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2512              		.loc 1 2066 24 is_stmt 0 view .LVU715
 2513 0040 094B     		ldr	r3, .L189+12
 2514 0042 4FF0FF32 		mov	r2, #-1
 2515 0046 1A60     		str	r2, [r3]
2067:System/FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2516              		.loc 1 2067 3 is_stmt 1 view .LVU716
2067:System/FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2517              		.loc 1 2067 21 is_stmt 0 view .LVU717
 2518 0048 084B     		ldr	r3, .L189+16
 2519 004a 0122     		movs	r2, #1
 2520 004c 1A60     		str	r2, [r3]
2068:System/FreeRTOS/tasks.c **** 
 2521              		.loc 1 2068 3 is_stmt 1 view .LVU718
2068:System/FreeRTOS/tasks.c **** 
 2522              		.loc 1 2068 14 is_stmt 0 view .LVU719
 2523 004e 084B     		ldr	r3, .L189+20
 2524 0050 1C60     		str	r4, [r3]
2076:System/FreeRTOS/tasks.c **** 
 2525              		.loc 1 2076 43 is_stmt 1 view .LVU720
2078:System/FreeRTOS/tasks.c **** 
 2526              		.loc 1 2078 26 view .LVU721
2082:System/FreeRTOS/tasks.c **** 		{
 2527              		.loc 1 2082 3 view .LVU722
2082:System/FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 153


 2528              		.loc 1 2082 7 is_stmt 0 view .LVU723
 2529 0052 FFF7FEFF 		bl	xPortStartScheduler
 2530              	.LVL191:
 2531              	.L185:
2103:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2532              		.loc 1 2103 1 view .LVU724
 2533 0056 08B0     		add	sp, sp, #32
 2534              	.LCFI24:
 2535              		.cfi_def_cfa_offset 8
 2536              		@ sp needed
 2537 0058 10BD     		pop	{r4, pc}
 2538              	.L190:
 2539 005a 00BF     		.align	2
 2540              	.L189:
 2541 005c 00000000 		.word	.LC0
 2542 0060 00000000 		.word	prvIdleTask
 2543 0064 00000000 		.word	.LANCHOR17
 2544 0068 00000000 		.word	.LANCHOR3
 2545 006c 00000000 		.word	.LANCHOR11
 2546 0070 00000000 		.word	.LANCHOR15
 2547              		.cfi_endproc
 2548              	.LFE20:
 2550              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2551              		.align	1
 2552              		.global	vTaskEndScheduler
 2553              		.syntax unified
 2554              		.thumb
 2555              		.thumb_func
 2557              	vTaskEndScheduler:
 2558              	.LFB21:
2107:System/FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2559              		.loc 1 2107 1 is_stmt 1 view -0
 2560              		.cfi_startproc
 2561              		@ args = 0, pretend = 0, frame = 0
 2562              		@ frame_needed = 0, uses_anonymous_args = 0
 2563 0000 08B5     		push	{r3, lr}
 2564              	.LCFI25:
 2565              		.cfi_def_cfa_offset 8
 2566              		.cfi_offset 3, -8
 2567              		.cfi_offset 14, -4
2111:System/FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2568              		.loc 1 2111 2 view .LVU726
 2569              	.LBB160:
 2570              	.LBI160:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2571              		.loc 2 191 30 view .LVU727
 2572              	.LBB161:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2573              		.loc 2 193 1 view .LVU728
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2574              		.loc 2 195 2 view .LVU729
 2575              		.syntax unified
 2576              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2577 0002 4FF05003 			mov r3, #80												
 2578 0006 83F31188 		msr basepri, r3											
 2579 000a BFF36F8F 		isb														
 2580 000e BFF34F8F 		dsb														
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 154


 2581              	
 2582              	@ 0 "" 2
 2583              		.thumb
 2584              		.syntax unified
 2585              	.LBE161:
 2586              	.LBE160:
2112:System/FreeRTOS/tasks.c **** 	vPortEndScheduler();
 2587              		.loc 1 2112 2 view .LVU730
2112:System/FreeRTOS/tasks.c **** 	vPortEndScheduler();
 2588              		.loc 1 2112 20 is_stmt 0 view .LVU731
 2589 0012 034B     		ldr	r3, .L193
 2590 0014 0022     		movs	r2, #0
 2591 0016 1A60     		str	r2, [r3]
2113:System/FreeRTOS/tasks.c **** }
 2592              		.loc 1 2113 2 is_stmt 1 view .LVU732
 2593 0018 FFF7FEFF 		bl	vPortEndScheduler
 2594              	.LVL192:
2114:System/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 2595              		.loc 1 2114 1 is_stmt 0 view .LVU733
 2596 001c 08BD     		pop	{r3, pc}
 2597              	.L194:
 2598 001e 00BF     		.align	2
 2599              	.L193:
 2600 0020 00000000 		.word	.LANCHOR11
 2601              		.cfi_endproc
 2602              	.LFE21:
 2604              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2605              		.align	1
 2606              		.global	vTaskSuspendAll
 2607              		.syntax unified
 2608              		.thumb
 2609              		.thumb_func
 2611              	vTaskSuspendAll:
 2612              	.LFB22:
2118:System/FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
 2613              		.loc 1 2118 1 is_stmt 1 view -0
 2614              		.cfi_startproc
 2615              		@ args = 0, pretend = 0, frame = 0
 2616              		@ frame_needed = 0, uses_anonymous_args = 0
 2617              		@ link register save eliminated.
2126:System/FreeRTOS/tasks.c **** 
 2618              		.loc 1 2126 24 view .LVU735
2130:System/FreeRTOS/tasks.c **** 
 2619              		.loc 1 2130 2 view .LVU736
 2620 0000 024A     		ldr	r2, .L196
 2621 0002 1368     		ldr	r3, [r2]
 2622 0004 0133     		adds	r3, r3, #1
 2623 0006 1360     		str	r3, [r2]
2134:System/FreeRTOS/tasks.c **** }
 2624              		.loc 1 2134 2 view .LVU737
2135:System/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 2625              		.loc 1 2135 1 is_stmt 0 view .LVU738
 2626 0008 7047     		bx	lr
 2627              	.L197:
 2628 000a 00BF     		.align	2
 2629              	.L196:
 2630 000c 00000000 		.word	.LANCHOR16
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 155


 2631              		.cfi_endproc
 2632              	.LFE22:
 2634              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2635              		.align	1
 2636              		.global	xTaskGetTickCount
 2637              		.syntax unified
 2638              		.thumb
 2639              		.thumb_func
 2641              	xTaskGetTickCount:
 2642              	.LFB24:
2312:System/FreeRTOS/tasks.c **** TickType_t xTicks;
 2643              		.loc 1 2312 1 is_stmt 1 view -0
 2644              		.cfi_startproc
 2645              		@ args = 0, pretend = 0, frame = 0
 2646              		@ frame_needed = 0, uses_anonymous_args = 0
 2647              		@ link register save eliminated.
2313:System/FreeRTOS/tasks.c **** 
 2648              		.loc 1 2313 1 view .LVU740
2316:System/FreeRTOS/tasks.c **** 	{
 2649              		.loc 1 2316 32 view .LVU741
2318:System/FreeRTOS/tasks.c **** 	}
 2650              		.loc 1 2318 3 view .LVU742
2318:System/FreeRTOS/tasks.c **** 	}
 2651              		.loc 1 2318 10 is_stmt 0 view .LVU743
 2652 0000 014B     		ldr	r3, .L199
 2653 0002 1868     		ldr	r0, [r3]
 2654              	.LVL193:
2320:System/FreeRTOS/tasks.c **** 
 2655              		.loc 1 2320 31 is_stmt 1 view .LVU744
2322:System/FreeRTOS/tasks.c **** }
 2656              		.loc 1 2322 2 view .LVU745
2323:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2657              		.loc 1 2323 1 is_stmt 0 view .LVU746
 2658 0004 7047     		bx	lr
 2659              	.L200:
 2660 0006 00BF     		.align	2
 2661              	.L199:
 2662 0008 00000000 		.word	.LANCHOR15
 2663              		.cfi_endproc
 2664              	.LFE24:
 2666              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2667              		.align	1
 2668              		.global	xTaskGetTickCountFromISR
 2669              		.syntax unified
 2670              		.thumb
 2671              		.thumb_func
 2673              	xTaskGetTickCountFromISR:
 2674              	.LFB25:
2327:System/FreeRTOS/tasks.c **** TickType_t xReturn;
 2675              		.loc 1 2327 1 is_stmt 1 view -0
 2676              		.cfi_startproc
 2677              		@ args = 0, pretend = 0, frame = 0
 2678              		@ frame_needed = 0, uses_anonymous_args = 0
 2679 0000 08B5     		push	{r3, lr}
 2680              	.LCFI26:
 2681              		.cfi_def_cfa_offset 8
 2682              		.cfi_offset 3, -8
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 156


 2683              		.cfi_offset 14, -4
2328:System/FreeRTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
 2684              		.loc 1 2328 1 view .LVU748
2329:System/FreeRTOS/tasks.c **** 
 2685              		.loc 1 2329 1 view .LVU749
2345:System/FreeRTOS/tasks.c **** 
 2686              		.loc 1 2345 2 view .LVU750
 2687 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2688              	.LVL194:
2347:System/FreeRTOS/tasks.c **** 	{
 2689              		.loc 1 2347 2 view .LVU751
2349:System/FreeRTOS/tasks.c **** 	}
 2690              		.loc 1 2349 3 view .LVU752
2349:System/FreeRTOS/tasks.c **** 	}
 2691              		.loc 1 2349 11 is_stmt 0 view .LVU753
 2692 0006 014B     		ldr	r3, .L203
 2693 0008 1868     		ldr	r0, [r3]
 2694              	.LVL195:
2351:System/FreeRTOS/tasks.c **** 
 2695              		.loc 1 2351 2 is_stmt 1 view .LVU754
2353:System/FreeRTOS/tasks.c **** }
 2696              		.loc 1 2353 2 view .LVU755
2354:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2697              		.loc 1 2354 1 is_stmt 0 view .LVU756
 2698 000a 08BD     		pop	{r3, pc}
 2699              	.L204:
 2700              		.align	2
 2701              	.L203:
 2702 000c 00000000 		.word	.LANCHOR15
 2703              		.cfi_endproc
 2704              	.LFE25:
 2706              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2707              		.align	1
 2708              		.global	uxTaskGetNumberOfTasks
 2709              		.syntax unified
 2710              		.thumb
 2711              		.thumb_func
 2713              	uxTaskGetNumberOfTasks:
 2714              	.LFB26:
2358:System/FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
 2715              		.loc 1 2358 1 is_stmt 1 view -0
 2716              		.cfi_startproc
 2717              		@ args = 0, pretend = 0, frame = 0
 2718              		@ frame_needed = 0, uses_anonymous_args = 0
 2719              		@ link register save eliminated.
2361:System/FreeRTOS/tasks.c **** }
 2720              		.loc 1 2361 2 view .LVU758
2361:System/FreeRTOS/tasks.c **** }
 2721              		.loc 1 2361 9 is_stmt 0 view .LVU759
 2722 0000 014B     		ldr	r3, .L206
 2723 0002 1868     		ldr	r0, [r3]
2362:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2724              		.loc 1 2362 1 view .LVU760
 2725 0004 7047     		bx	lr
 2726              	.L207:
 2727 0006 00BF     		.align	2
 2728              	.L206:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 157


 2729 0008 00000000 		.word	.LANCHOR9
 2730              		.cfi_endproc
 2731              	.LFE26:
 2733              		.section	.text.pcTaskGetName,"ax",%progbits
 2734              		.align	1
 2735              		.global	pcTaskGetName
 2736              		.syntax unified
 2737              		.thumb
 2738              		.thumb_func
 2740              	pcTaskGetName:
 2741              	.LVL196:
 2742              	.LFB27:
2366:System/FreeRTOS/tasks.c **** TCB_t *pxTCB;
 2743              		.loc 1 2366 1 is_stmt 1 view -0
 2744              		.cfi_startproc
 2745              		@ args = 0, pretend = 0, frame = 0
 2746              		@ frame_needed = 0, uses_anonymous_args = 0
 2747              		@ link register save eliminated.
2367:System/FreeRTOS/tasks.c **** 
 2748              		.loc 1 2367 1 view .LVU762
2371:System/FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
 2749              		.loc 1 2371 2 view .LVU763
2371:System/FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
 2750              		.loc 1 2371 10 is_stmt 0 view .LVU764
 2751 0000 0346     		mov	r3, r0
 2752 0002 18B1     		cbz	r0, .L212
 2753              	.LVL197:
 2754              	.L209:
2372:System/FreeRTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2755              		.loc 1 2372 2 is_stmt 1 discriminator 4 view .LVU765
 2756 0004 2BB1     		cbz	r3, .L213
2372:System/FreeRTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2757              		.loc 1 2372 23 discriminator 2 view .LVU766
2373:System/FreeRTOS/tasks.c **** }
 2758              		.loc 1 2373 2 discriminator 2 view .LVU767
2374:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2759              		.loc 1 2374 1 is_stmt 0 discriminator 2 view .LVU768
 2760 0006 03F13400 		add	r0, r3, #52
 2761 000a 7047     		bx	lr
 2762              	.LVL198:
 2763              	.L212:
2371:System/FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
 2764              		.loc 1 2371 10 discriminator 1 view .LVU769
 2765 000c 054B     		ldr	r3, .L214
 2766 000e 1B68     		ldr	r3, [r3]
 2767              	.LVL199:
2371:System/FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
 2768              		.loc 1 2371 10 discriminator 1 view .LVU770
 2769 0010 F8E7     		b	.L209
 2770              	.LVL200:
 2771              	.L213:
2372:System/FreeRTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2772              		.loc 1 2372 2 is_stmt 1 view .LVU771
 2773              	.LBB162:
 2774              	.LBI162:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2775              		.loc 2 191 30 view .LVU772
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 158


 2776              	.LBB163:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2777              		.loc 2 193 1 view .LVU773
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2778              		.loc 2 195 2 view .LVU774
 2779              		.syntax unified
 2780              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2781 0012 4FF05003 			mov r3, #80												
 2782 0016 83F31188 		msr basepri, r3											
 2783 001a BFF36F8F 		isb														
 2784 001e BFF34F8F 		dsb														
 2785              	
 2786              	@ 0 "" 2
 2787              	.LVL201:
 2788              		.thumb
 2789              		.syntax unified
 2790              	.L211:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2791              		.loc 2 195 2 is_stmt 0 view .LVU775
 2792              	.LBE163:
 2793              	.LBE162:
2372:System/FreeRTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2794              		.loc 1 2372 2 is_stmt 1 discriminator 1 view .LVU776
2372:System/FreeRTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2795              		.loc 1 2372 2 discriminator 1 view .LVU777
2372:System/FreeRTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2796              		.loc 1 2372 2 discriminator 1 view .LVU778
 2797 0022 FEE7     		b	.L211
 2798              	.L215:
 2799              		.align	2
 2800              	.L214:
 2801 0024 00000000 		.word	.LANCHOR10
 2802              		.cfi_endproc
 2803              	.LFE27:
 2805              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2806              		.align	1
 2807              		.global	xTaskIncrementTick
 2808              		.syntax unified
 2809              		.thumb
 2810              		.thumb_func
 2812              	xTaskIncrementTick:
 2813              	.LFB30:
2715:System/FreeRTOS/tasks.c **** TCB_t * pxTCB;
 2814              		.loc 1 2715 1 view -0
 2815              		.cfi_startproc
 2816              		@ args = 0, pretend = 0, frame = 0
 2817              		@ frame_needed = 0, uses_anonymous_args = 0
 2818 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2819              	.LCFI27:
 2820              		.cfi_def_cfa_offset 24
 2821              		.cfi_offset 3, -24
 2822              		.cfi_offset 4, -20
 2823              		.cfi_offset 5, -16
 2824              		.cfi_offset 6, -12
 2825              		.cfi_offset 7, -8
 2826              		.cfi_offset 14, -4
2716:System/FreeRTOS/tasks.c **** TickType_t xItemValue;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 159


 2827              		.loc 1 2716 1 view .LVU780
2717:System/FreeRTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2828              		.loc 1 2717 1 view .LVU781
2718:System/FreeRTOS/tasks.c **** 
 2829              		.loc 1 2718 1 view .LVU782
 2830              	.LVL202:
2723:System/FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2831              		.loc 1 2723 40 view .LVU783
2724:System/FreeRTOS/tasks.c **** 	{
 2832              		.loc 1 2724 2 view .LVU784
2724:System/FreeRTOS/tasks.c **** 	{
 2833              		.loc 1 2724 27 is_stmt 0 view .LVU785
 2834 0002 3A4B     		ldr	r3, .L237
 2835 0004 1B68     		ldr	r3, [r3]
2724:System/FreeRTOS/tasks.c **** 	{
 2836              		.loc 1 2724 4 view .LVU786
 2837 0006 002B     		cmp	r3, #0
 2838 0008 69D1     		bne	.L217
 2839              	.LBB164:
2728:System/FreeRTOS/tasks.c **** 
 2840              		.loc 1 2728 3 is_stmt 1 view .LVU787
2728:System/FreeRTOS/tasks.c **** 
 2841              		.loc 1 2728 49 is_stmt 0 view .LVU788
 2842 000a 394B     		ldr	r3, .L237+4
 2843 000c 1D68     		ldr	r5, [r3]
2728:System/FreeRTOS/tasks.c **** 
 2844              		.loc 1 2728 20 view .LVU789
 2845 000e 0135     		adds	r5, r5, #1
 2846              	.LVL203:
2732:System/FreeRTOS/tasks.c **** 
 2847              		.loc 1 2732 3 is_stmt 1 view .LVU790
2732:System/FreeRTOS/tasks.c **** 
 2848              		.loc 1 2732 14 is_stmt 0 view .LVU791
 2849 0010 1D60     		str	r5, [r3]
2734:System/FreeRTOS/tasks.c **** 		{
 2850              		.loc 1 2734 3 is_stmt 1 view .LVU792
2734:System/FreeRTOS/tasks.c **** 		{
 2851              		.loc 1 2734 5 is_stmt 0 view .LVU793
 2852 0012 C5B9     		cbnz	r5, .L218
 2853              	.LBB165:
2736:System/FreeRTOS/tasks.c **** 		}
 2854              		.loc 1 2736 4 is_stmt 1 view .LVU794
2736:System/FreeRTOS/tasks.c **** 		}
 2855              		.loc 1 2736 4 view .LVU795
 2856 0014 374B     		ldr	r3, .L237+8
 2857 0016 1B68     		ldr	r3, [r3]
 2858 0018 1B68     		ldr	r3, [r3]
 2859 001a 43B1     		cbz	r3, .L219
2736:System/FreeRTOS/tasks.c **** 		}
 2860              		.loc 1 2736 4 view .LVU796
 2861              	.LBB166:
 2862              	.LBI166:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 2863              		.loc 2 191 30 view .LVU797
 2864              	.LBB167:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2865              		.loc 2 193 1 view .LVU798
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 160


 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2866              		.loc 2 195 2 view .LVU799
 2867              		.syntax unified
 2868              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2869 001c 4FF05003 			mov r3, #80												
 2870 0020 83F31188 		msr basepri, r3											
 2871 0024 BFF36F8F 		isb														
 2872 0028 BFF34F8F 		dsb														
 2873              	
 2874              	@ 0 "" 2
 2875              	.LVL204:
 2876              		.thumb
 2877              		.syntax unified
 2878              	.L220:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2879              		.loc 2 195 2 is_stmt 0 view .LVU800
 2880              	.LBE167:
 2881              	.LBE166:
2736:System/FreeRTOS/tasks.c **** 		}
 2882              		.loc 1 2736 4 is_stmt 1 discriminator 1 view .LVU801
2736:System/FreeRTOS/tasks.c **** 		}
 2883              		.loc 1 2736 4 discriminator 1 view .LVU802
2736:System/FreeRTOS/tasks.c **** 		}
 2884              		.loc 1 2736 4 discriminator 1 view .LVU803
 2885 002c FEE7     		b	.L220
 2886              	.L219:
2736:System/FreeRTOS/tasks.c **** 		}
 2887              		.loc 1 2736 4 discriminator 2 view .LVU804
2736:System/FreeRTOS/tasks.c **** 		}
 2888              		.loc 1 2736 4 discriminator 2 view .LVU805
 2889 002e 314A     		ldr	r2, .L237+8
 2890 0030 1168     		ldr	r1, [r2]
 2891              	.LVL205:
2736:System/FreeRTOS/tasks.c **** 		}
 2892              		.loc 1 2736 4 discriminator 2 view .LVU806
 2893 0032 314B     		ldr	r3, .L237+12
 2894 0034 1868     		ldr	r0, [r3]
 2895 0036 1060     		str	r0, [r2]
2736:System/FreeRTOS/tasks.c **** 		}
 2896              		.loc 1 2736 4 discriminator 2 view .LVU807
 2897 0038 1960     		str	r1, [r3]
2736:System/FreeRTOS/tasks.c **** 		}
 2898              		.loc 1 2736 4 discriminator 2 view .LVU808
 2899 003a 304A     		ldr	r2, .L237+16
 2900 003c 1368     		ldr	r3, [r2]
 2901 003e 0133     		adds	r3, r3, #1
 2902 0040 1360     		str	r3, [r2]
2736:System/FreeRTOS/tasks.c **** 		}
 2903              		.loc 1 2736 4 discriminator 2 view .LVU809
 2904 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2905              	.LVL206:
2736:System/FreeRTOS/tasks.c **** 		}
 2906              		.loc 1 2736 4 is_stmt 0 discriminator 2 view .LVU810
 2907              	.LBE165:
2736:System/FreeRTOS/tasks.c **** 		}
 2908              		.loc 1 2736 30 is_stmt 1 discriminator 2 view .LVU811
 2909              	.L218:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 161


2740:System/FreeRTOS/tasks.c **** 		}
 2910              		.loc 1 2740 28 view .LVU812
2747:System/FreeRTOS/tasks.c **** 		{
 2911              		.loc 1 2747 3 view .LVU813
2747:System/FreeRTOS/tasks.c **** 		{
 2912              		.loc 1 2747 23 is_stmt 0 view .LVU814
 2913 0046 2E4B     		ldr	r3, .L237+20
 2914 0048 1B68     		ldr	r3, [r3]
2747:System/FreeRTOS/tasks.c **** 		{
 2915              		.loc 1 2747 5 view .LVU815
 2916 004a AB42     		cmp	r3, r5
 2917 004c 3DD9     		bls	.L230
 2918              	.LBE164:
2718:System/FreeRTOS/tasks.c **** 
 2919              		.loc 1 2718 12 view .LVU816
 2920 004e 0027     		movs	r7, #0
 2921              	.LVL207:
 2922              	.L222:
 2923              	.LBB168:
2830:System/FreeRTOS/tasks.c **** 			{
 2924              		.loc 1 2830 4 is_stmt 1 view .LVU817
2830:System/FreeRTOS/tasks.c **** 			{
 2925              		.loc 1 2830 8 is_stmt 0 view .LVU818
 2926 0050 2C4B     		ldr	r3, .L237+24
 2927 0052 1B68     		ldr	r3, [r3]
 2928 0054 DB6A     		ldr	r3, [r3, #44]
 2929 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2930 005a 9A00     		lsls	r2, r3, #2
 2931 005c 2A4B     		ldr	r3, .L237+28
 2932 005e 9B58     		ldr	r3, [r3, r2]
2830:System/FreeRTOS/tasks.c **** 			{
 2933              		.loc 1 2830 6 view .LVU819
 2934 0060 012B     		cmp	r3, #1
 2935 0062 00D9     		bls	.L228
2832:System/FreeRTOS/tasks.c **** 			}
 2936              		.loc 1 2832 21 view .LVU820
 2937 0064 0127     		movs	r7, #1
 2938              	.LVL208:
 2939              	.L228:
2836:System/FreeRTOS/tasks.c **** 			}
 2940              		.loc 1 2836 29 is_stmt 1 view .LVU821
2858:System/FreeRTOS/tasks.c **** 			{
 2941              		.loc 1 2858 4 view .LVU822
2858:System/FreeRTOS/tasks.c **** 			{
 2942              		.loc 1 2858 22 is_stmt 0 view .LVU823
 2943 0066 294B     		ldr	r3, .L237+32
 2944 0068 1B68     		ldr	r3, [r3]
2858:System/FreeRTOS/tasks.c **** 			{
 2945              		.loc 1 2858 6 view .LVU824
 2946 006a 002B     		cmp	r3, #0
 2947 006c 3CD0     		beq	.L216
2860:System/FreeRTOS/tasks.c **** 			}
 2948              		.loc 1 2860 21 view .LVU825
 2949 006e 0127     		movs	r7, #1
 2950              	.LVL209:
2860:System/FreeRTOS/tasks.c **** 			}
 2951              		.loc 1 2860 21 view .LVU826
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 162


 2952              	.LBE168:
2882:System/FreeRTOS/tasks.c **** }
 2953              		.loc 1 2882 2 is_stmt 1 view .LVU827
2882:System/FreeRTOS/tasks.c **** }
 2954              		.loc 1 2882 9 is_stmt 0 view .LVU828
 2955 0070 3AE0     		b	.L216
 2956              	.LVL210:
 2957              	.L231:
 2958              	.LBB169:
2813:System/FreeRTOS/tasks.c **** 						}
 2959              		.loc 1 2813 24 view .LVU829
 2960 0072 0127     		movs	r7, #1
 2961              	.LVL211:
 2962              	.L221:
2749:System/FreeRTOS/tasks.c **** 			{
 2963              		.loc 1 2749 4 is_stmt 1 view .LVU830
2751:System/FreeRTOS/tasks.c **** 				{
 2964              		.loc 1 2751 5 view .LVU831
2751:System/FreeRTOS/tasks.c **** 				{
 2965              		.loc 1 2751 9 is_stmt 0 view .LVU832
 2966 0074 1F4B     		ldr	r3, .L237+8
 2967 0076 1B68     		ldr	r3, [r3]
 2968 0078 1B68     		ldr	r3, [r3]
2751:System/FreeRTOS/tasks.c **** 				{
 2969              		.loc 1 2751 7 view .LVU833
 2970 007a 43B3     		cbz	r3, .L235
2767:System/FreeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2971              		.loc 1 2767 6 is_stmt 1 view .LVU834
2767:System/FreeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2972              		.loc 1 2767 14 is_stmt 0 view .LVU835
 2973 007c 1D4B     		ldr	r3, .L237+8
 2974 007e 1B68     		ldr	r3, [r3]
 2975 0080 DB68     		ldr	r3, [r3, #12]
2767:System/FreeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2976              		.loc 1 2767 12 view .LVU836
 2977 0082 DC68     		ldr	r4, [r3, #12]
 2978              	.LVL212:
2768:System/FreeRTOS/tasks.c **** 
 2979              		.loc 1 2768 6 is_stmt 1 view .LVU837
2768:System/FreeRTOS/tasks.c **** 
 2980              		.loc 1 2768 17 is_stmt 0 view .LVU838
 2981 0084 6368     		ldr	r3, [r4, #4]
 2982              	.LVL213:
2770:System/FreeRTOS/tasks.c **** 					{
 2983              		.loc 1 2770 6 is_stmt 1 view .LVU839
2770:System/FreeRTOS/tasks.c **** 					{
 2984              		.loc 1 2770 8 is_stmt 0 view .LVU840
 2985 0086 9D42     		cmp	r5, r3
 2986 0088 26D3     		bcc	.L236
2782:System/FreeRTOS/tasks.c **** 					}
 2987              		.loc 1 2782 31 is_stmt 1 view .LVU841
2786:System/FreeRTOS/tasks.c **** 
 2988              		.loc 1 2786 6 view .LVU842
2786:System/FreeRTOS/tasks.c **** 
 2989              		.loc 1 2786 15 is_stmt 0 view .LVU843
 2990 008a 261D     		adds	r6, r4, #4
 2991 008c 3046     		mov	r0, r6
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 163


 2992 008e FFF7FEFF 		bl	uxListRemove
 2993              	.LVL214:
2790:System/FreeRTOS/tasks.c **** 					{
 2994              		.loc 1 2790 6 is_stmt 1 view .LVU844
2790:System/FreeRTOS/tasks.c **** 					{
 2995              		.loc 1 2790 10 is_stmt 0 view .LVU845
 2996 0092 A36A     		ldr	r3, [r4, #40]
2790:System/FreeRTOS/tasks.c **** 					{
 2997              		.loc 1 2790 8 view .LVU846
 2998 0094 1BB1     		cbz	r3, .L225
2792:System/FreeRTOS/tasks.c **** 					}
 2999              		.loc 1 2792 7 is_stmt 1 view .LVU847
2792:System/FreeRTOS/tasks.c **** 					}
 3000              		.loc 1 2792 16 is_stmt 0 view .LVU848
 3001 0096 04F11800 		add	r0, r4, #24
 3002 009a FFF7FEFF 		bl	uxListRemove
 3003              	.LVL215:
 3004              	.L225:
2796:System/FreeRTOS/tasks.c **** 					}
 3005              		.loc 1 2796 31 is_stmt 1 view .LVU849
2801:System/FreeRTOS/tasks.c **** 
 3006              		.loc 1 2801 6 view .LVU850
2801:System/FreeRTOS/tasks.c **** 
 3007              		.loc 1 2801 6 view .LVU851
 3008 009e E36A     		ldr	r3, [r4, #44]
 3009 00a0 0122     		movs	r2, #1
 3010 00a2 9A40     		lsls	r2, r2, r3
 3011 00a4 1A49     		ldr	r1, .L237+36
 3012 00a6 0868     		ldr	r0, [r1]
 3013 00a8 0243     		orrs	r2, r2, r0
 3014 00aa 0A60     		str	r2, [r1]
2801:System/FreeRTOS/tasks.c **** 
 3015              		.loc 1 2801 6 view .LVU852
 3016 00ac 03EB8303 		add	r3, r3, r3, lsl #2
 3017 00b0 9A00     		lsls	r2, r3, #2
 3018 00b2 3146     		mov	r1, r6
 3019 00b4 1448     		ldr	r0, .L237+28
 3020 00b6 1044     		add	r0, r0, r2
 3021 00b8 FFF7FEFF 		bl	vListInsertEnd
 3022              	.LVL216:
2801:System/FreeRTOS/tasks.c **** 
 3023              		.loc 1 2801 36 view .LVU853
2811:System/FreeRTOS/tasks.c **** 						{
 3024              		.loc 1 2811 7 view .LVU854
2811:System/FreeRTOS/tasks.c **** 						{
 3025              		.loc 1 2811 16 is_stmt 0 view .LVU855
 3026 00bc E26A     		ldr	r2, [r4, #44]
2811:System/FreeRTOS/tasks.c **** 						{
 3027              		.loc 1 2811 44 view .LVU856
 3028 00be 114B     		ldr	r3, .L237+24
 3029 00c0 1B68     		ldr	r3, [r3]
 3030 00c2 DB6A     		ldr	r3, [r3, #44]
2811:System/FreeRTOS/tasks.c **** 						{
 3031              		.loc 1 2811 9 view .LVU857
 3032 00c4 9A42     		cmp	r2, r3
 3033 00c6 D4D2     		bcs	.L231
 3034 00c8 D4E7     		b	.L221
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 164


 3035              	.LVL217:
 3036              	.L230:
2811:System/FreeRTOS/tasks.c **** 						{
 3037              		.loc 1 2811 9 view .LVU858
 3038              	.LBE169:
2718:System/FreeRTOS/tasks.c **** 
 3039              		.loc 1 2718 12 view .LVU859
 3040 00ca 0027     		movs	r7, #0
 3041 00cc D2E7     		b	.L221
 3042              	.LVL218:
 3043              	.L235:
 3044              	.LBB170:
2758:System/FreeRTOS/tasks.c **** 					break;
 3045              		.loc 1 2758 6 is_stmt 1 view .LVU860
2758:System/FreeRTOS/tasks.c **** 					break;
 3046              		.loc 1 2758 27 is_stmt 0 view .LVU861
 3047 00ce 0C4B     		ldr	r3, .L237+20
 3048 00d0 4FF0FF32 		mov	r2, #-1
 3049 00d4 1A60     		str	r2, [r3]
2759:System/FreeRTOS/tasks.c **** 				}
 3050              		.loc 1 2759 6 is_stmt 1 view .LVU862
 3051 00d6 BBE7     		b	.L222
 3052              	.LVL219:
 3053              	.L236:
2777:System/FreeRTOS/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3054              		.loc 1 2777 7 view .LVU863
2777:System/FreeRTOS/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3055              		.loc 1 2777 28 is_stmt 0 view .LVU864
 3056 00d8 094A     		ldr	r2, .L237+20
 3057 00da 1360     		str	r3, [r2]
2778:System/FreeRTOS/tasks.c **** 					}
 3058              		.loc 1 2778 7 is_stmt 1 view .LVU865
 3059 00dc B8E7     		b	.L222
 3060              	.LVL220:
 3061              	.L217:
2778:System/FreeRTOS/tasks.c **** 					}
 3062              		.loc 1 2778 7 is_stmt 0 view .LVU866
 3063              	.LBE170:
2871:System/FreeRTOS/tasks.c **** 
 3064              		.loc 1 2871 3 is_stmt 1 view .LVU867
 3065 00de 0D4A     		ldr	r2, .L237+40
 3066 00e0 1368     		ldr	r3, [r2]
 3067 00e2 0133     		adds	r3, r3, #1
 3068 00e4 1360     		str	r3, [r2]
2718:System/FreeRTOS/tasks.c **** 
 3069              		.loc 1 2718 12 is_stmt 0 view .LVU868
 3070 00e6 0027     		movs	r7, #0
 3071              	.LVL221:
 3072              	.L216:
2883:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3073              		.loc 1 2883 1 view .LVU869
 3074 00e8 3846     		mov	r0, r7
 3075 00ea F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3076              	.L238:
 3077              		.align	2
 3078              	.L237:
 3079 00ec 00000000 		.word	.LANCHOR16
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 165


 3080 00f0 00000000 		.word	.LANCHOR15
 3081 00f4 00000000 		.word	.LANCHOR2
 3082 00f8 00000000 		.word	.LANCHOR8
 3083 00fc 00000000 		.word	.LANCHOR18
 3084 0100 00000000 		.word	.LANCHOR3
 3085 0104 00000000 		.word	.LANCHOR10
 3086 0108 00000000 		.word	.LANCHOR4
 3087 010c 00000000 		.word	.LANCHOR19
 3088 0110 00000000 		.word	.LANCHOR13
 3089 0114 00000000 		.word	.LANCHOR20
 3090              		.cfi_endproc
 3091              	.LFE30:
 3093              		.section	.text.xTaskResumeAll,"ax",%progbits
 3094              		.align	1
 3095              		.global	xTaskResumeAll
 3096              		.syntax unified
 3097              		.thumb
 3098              		.thumb_func
 3100              	xTaskResumeAll:
 3101              	.LFB23:
2202:System/FreeRTOS/tasks.c **** TCB_t *pxTCB = NULL;
 3102              		.loc 1 2202 1 is_stmt 1 view -0
 3103              		.cfi_startproc
 3104              		@ args = 0, pretend = 0, frame = 0
 3105              		@ frame_needed = 0, uses_anonymous_args = 0
 3106 0000 38B5     		push	{r3, r4, r5, lr}
 3107              	.LCFI28:
 3108              		.cfi_def_cfa_offset 16
 3109              		.cfi_offset 3, -16
 3110              		.cfi_offset 4, -12
 3111              		.cfi_offset 5, -8
 3112              		.cfi_offset 14, -4
2203:System/FreeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 3113              		.loc 1 2203 1 view .LVU871
 3114              	.LVL222:
2204:System/FreeRTOS/tasks.c **** 
 3115              		.loc 1 2204 1 view .LVU872
2208:System/FreeRTOS/tasks.c **** 
 3116              		.loc 1 2208 2 view .LVU873
 3117 0002 354B     		ldr	r3, .L255
 3118 0004 1B68     		ldr	r3, [r3]
 3119 0006 43B9     		cbnz	r3, .L240
2208:System/FreeRTOS/tasks.c **** 
 3120              		.loc 1 2208 2 view .LVU874
 3121              	.LBB171:
 3122              	.LBI171:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 3123              		.loc 2 191 30 view .LVU875
 3124              	.LBB172:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3125              		.loc 2 193 1 view .LVU876
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3126              		.loc 2 195 2 view .LVU877
 3127              		.syntax unified
 3128              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3129 0008 4FF05003 			mov r3, #80												
 3130 000c 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 166


 3131 0010 BFF36F8F 		isb														
 3132 0014 BFF34F8F 		dsb														
 3133              	
 3134              	@ 0 "" 2
 3135              	.LVL223:
 3136              		.thumb
 3137              		.syntax unified
 3138              	.L241:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3139              		.loc 2 195 2 is_stmt 0 view .LVU878
 3140              	.LBE172:
 3141              	.LBE171:
2208:System/FreeRTOS/tasks.c **** 
 3142              		.loc 1 2208 2 is_stmt 1 discriminator 1 view .LVU879
2208:System/FreeRTOS/tasks.c **** 
 3143              		.loc 1 2208 2 discriminator 1 view .LVU880
2208:System/FreeRTOS/tasks.c **** 
 3144              		.loc 1 2208 2 discriminator 1 view .LVU881
 3145 0018 FEE7     		b	.L241
 3146              	.L240:
2208:System/FreeRTOS/tasks.c **** 
 3147              		.loc 1 2208 38 discriminator 2 view .LVU882
2215:System/FreeRTOS/tasks.c **** 	{
 3148              		.loc 1 2215 2 discriminator 2 view .LVU883
 3149 001a FFF7FEFF 		bl	vPortEnterCritical
 3150              	.LVL224:
2217:System/FreeRTOS/tasks.c **** 
 3151              		.loc 1 2217 3 discriminator 2 view .LVU884
 3152 001e 2E4B     		ldr	r3, .L255
 3153 0020 1A68     		ldr	r2, [r3]
 3154 0022 013A     		subs	r2, r2, #1
 3155 0024 1A60     		str	r2, [r3]
2219:System/FreeRTOS/tasks.c **** 		{
 3156              		.loc 1 2219 3 discriminator 2 view .LVU885
2219:System/FreeRTOS/tasks.c **** 		{
 3157              		.loc 1 2219 28 is_stmt 0 discriminator 2 view .LVU886
 3158 0026 1B68     		ldr	r3, [r3]
2219:System/FreeRTOS/tasks.c **** 		{
 3159              		.loc 1 2219 5 discriminator 2 view .LVU887
 3160 0028 002B     		cmp	r3, #0
 3161 002a 4FD1     		bne	.L250
2221:System/FreeRTOS/tasks.c **** 			{
 3162              		.loc 1 2221 4 is_stmt 1 view .LVU888
2221:System/FreeRTOS/tasks.c **** 			{
 3163              		.loc 1 2221 31 is_stmt 0 view .LVU889
 3164 002c 2B4B     		ldr	r3, .L255+4
 3165 002e 1B68     		ldr	r3, [r3]
2221:System/FreeRTOS/tasks.c **** 			{
 3166              		.loc 1 2221 6 view .LVU890
 3167 0030 0BB9     		cbnz	r3, .L251
2204:System/FreeRTOS/tasks.c **** 
 3168              		.loc 1 2204 12 view .LVU891
 3169 0032 0024     		movs	r4, #0
 3170 0034 4BE0     		b	.L242
 3171              	.L251:
2203:System/FreeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 3172              		.loc 1 2203 8 view .LVU892
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 167


 3173 0036 0024     		movs	r4, #0
 3174              	.LVL225:
 3175              	.L243:
2240:System/FreeRTOS/tasks.c **** 					}
 3176              		.loc 1 2240 31 is_stmt 1 view .LVU893
2225:System/FreeRTOS/tasks.c **** 				{
 3177              		.loc 1 2225 10 view .LVU894
2225:System/FreeRTOS/tasks.c **** 				{
 3178              		.loc 1 2225 12 is_stmt 0 view .LVU895
 3179 0038 294B     		ldr	r3, .L255+8
 3180 003a 1B68     		ldr	r3, [r3]
2225:System/FreeRTOS/tasks.c **** 				{
 3181              		.loc 1 2225 10 view .LVU896
 3182 003c 1BB3     		cbz	r3, .L253
2227:System/FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3183              		.loc 1 2227 6 is_stmt 1 view .LVU897
2227:System/FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3184              		.loc 1 2227 14 is_stmt 0 view .LVU898
 3185 003e 284B     		ldr	r3, .L255+8
 3186 0040 DB68     		ldr	r3, [r3, #12]
2227:System/FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3187              		.loc 1 2227 12 view .LVU899
 3188 0042 DC68     		ldr	r4, [r3, #12]
 3189              	.LVL226:
2228:System/FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3190              		.loc 1 2228 6 is_stmt 1 view .LVU900
2228:System/FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3191              		.loc 1 2228 15 is_stmt 0 view .LVU901
 3192 0044 04F11800 		add	r0, r4, #24
 3193 0048 FFF7FEFF 		bl	uxListRemove
 3194              	.LVL227:
2229:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3195              		.loc 1 2229 6 is_stmt 1 view .LVU902
2229:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3196              		.loc 1 2229 15 is_stmt 0 view .LVU903
 3197 004c 251D     		adds	r5, r4, #4
 3198 004e 2846     		mov	r0, r5
 3199 0050 FFF7FEFF 		bl	uxListRemove
 3200              	.LVL228:
2230:System/FreeRTOS/tasks.c **** 
 3201              		.loc 1 2230 6 is_stmt 1 view .LVU904
2230:System/FreeRTOS/tasks.c **** 
 3202              		.loc 1 2230 6 view .LVU905
 3203 0054 E06A     		ldr	r0, [r4, #44]
 3204 0056 0123     		movs	r3, #1
 3205 0058 8340     		lsls	r3, r3, r0
 3206 005a 224A     		ldr	r2, .L255+12
 3207 005c 1168     		ldr	r1, [r2]
 3208 005e 0B43     		orrs	r3, r3, r1
 3209 0060 1360     		str	r3, [r2]
2230:System/FreeRTOS/tasks.c **** 
 3210              		.loc 1 2230 6 view .LVU906
 3211 0062 00EB8000 		add	r0, r0, r0, lsl #2
 3212 0066 2946     		mov	r1, r5
 3213 0068 1F4B     		ldr	r3, .L255+16
 3214 006a 03EB8000 		add	r0, r3, r0, lsl #2
 3215 006e FFF7FEFF 		bl	vListInsertEnd
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 168


 3216              	.LVL229:
2230:System/FreeRTOS/tasks.c **** 
 3217              		.loc 1 2230 36 view .LVU907
2234:System/FreeRTOS/tasks.c **** 					{
 3218              		.loc 1 2234 6 view .LVU908
2234:System/FreeRTOS/tasks.c **** 					{
 3219              		.loc 1 2234 15 is_stmt 0 view .LVU909
 3220 0072 E26A     		ldr	r2, [r4, #44]
2234:System/FreeRTOS/tasks.c **** 					{
 3221              		.loc 1 2234 43 view .LVU910
 3222 0074 1D4B     		ldr	r3, .L255+20
 3223 0076 1B68     		ldr	r3, [r3]
 3224 0078 DB6A     		ldr	r3, [r3, #44]
2234:System/FreeRTOS/tasks.c **** 					{
 3225              		.loc 1 2234 8 view .LVU911
 3226 007a 9A42     		cmp	r2, r3
 3227 007c DCD3     		bcc	.L243
2236:System/FreeRTOS/tasks.c **** 					}
 3228              		.loc 1 2236 7 is_stmt 1 view .LVU912
2236:System/FreeRTOS/tasks.c **** 					}
 3229              		.loc 1 2236 21 is_stmt 0 view .LVU913
 3230 007e 1C4B     		ldr	r3, .L255+24
 3231 0080 0122     		movs	r2, #1
 3232 0082 1A60     		str	r2, [r3]
 3233 0084 D8E7     		b	.L243
 3234              	.L253:
2244:System/FreeRTOS/tasks.c **** 				{
 3235              		.loc 1 2244 5 is_stmt 1 view .LVU914
2244:System/FreeRTOS/tasks.c **** 				{
 3236              		.loc 1 2244 7 is_stmt 0 view .LVU915
 3237 0086 0CB1     		cbz	r4, .L246
2252:System/FreeRTOS/tasks.c **** 				}
 3238              		.loc 1 2252 6 is_stmt 1 view .LVU916
 3239 0088 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3240              	.LVL230:
 3241              	.L246:
 3242              	.LBB173:
2260:System/FreeRTOS/tasks.c **** 
 3243              		.loc 1 2260 6 view .LVU917
2260:System/FreeRTOS/tasks.c **** 
 3244              		.loc 1 2260 17 is_stmt 0 view .LVU918
 3245 008c 194B     		ldr	r3, .L255+28
 3246 008e 1C68     		ldr	r4, [r3]
 3247              	.LVL231:
2262:System/FreeRTOS/tasks.c **** 					{
 3248              		.loc 1 2262 6 is_stmt 1 view .LVU919
2262:System/FreeRTOS/tasks.c **** 					{
 3249              		.loc 1 2262 8 is_stmt 0 view .LVU920
 3250 0090 84B9     		cbnz	r4, .L249
 3251              	.L247:
2281:System/FreeRTOS/tasks.c **** 					}
 3252              		.loc 1 2281 31 is_stmt 1 view .LVU921
 3253              	.LBE173:
2285:System/FreeRTOS/tasks.c **** 				{
 3254              		.loc 1 2285 5 view .LVU922
2285:System/FreeRTOS/tasks.c **** 				{
 3255              		.loc 1 2285 23 is_stmt 0 view .LVU923
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 169


 3256 0092 174B     		ldr	r3, .L255+24
 3257 0094 1C68     		ldr	r4, [r3]
 3258              	.LVL232:
2285:System/FreeRTOS/tasks.c **** 				{
 3259              		.loc 1 2285 7 view .LVU924
 3260 0096 D4B1     		cbz	r4, .L242
2289:System/FreeRTOS/tasks.c **** 					}
 3261              		.loc 1 2289 7 is_stmt 1 view .LVU925
 3262              	.LVL233:
2292:System/FreeRTOS/tasks.c **** 				}
 3263              		.loc 1 2292 6 view .LVU926
 3264 0098 4FF0E023 		mov	r3, #-536813568
 3265 009c 4FF08052 		mov	r2, #268435456
 3266 00a0 C3F8042D 		str	r2, [r3, #3332]
2292:System/FreeRTOS/tasks.c **** 				}
 3267              		.loc 1 2292 6 view .LVU927
 3268              		.syntax unified
 3269              	@ 2292 "System/FreeRTOS/tasks.c" 1
 3270 00a4 BFF34F8F 		dsb
 3271              	@ 0 "" 2
2292:System/FreeRTOS/tasks.c **** 				}
 3272              		.loc 1 2292 6 view .LVU928
 3273              	@ 2292 "System/FreeRTOS/tasks.c" 1
 3274 00a8 BFF36F8F 		isb
 3275              	@ 0 "" 2
2292:System/FreeRTOS/tasks.c **** 				}
 3276              		.loc 1 2292 37 view .LVU929
2289:System/FreeRTOS/tasks.c **** 					}
 3277              		.loc 1 2289 23 is_stmt 0 view .LVU930
 3278              		.thumb
 3279              		.syntax unified
 3280 00ac 0124     		movs	r4, #1
 3281 00ae 0EE0     		b	.L242
 3282              	.LVL234:
 3283              	.L248:
 3284              	.LBB174:
2272:System/FreeRTOS/tasks.c **** 							}
 3285              		.loc 1 2272 33 is_stmt 1 view .LVU931
2274:System/FreeRTOS/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 3286              		.loc 1 2274 8 view .LVU932
2275:System/FreeRTOS/tasks.c **** 
 3287              		.loc 1 2275 14 view .LVU933
2275:System/FreeRTOS/tasks.c **** 
 3288              		.loc 1 2275 7 is_stmt 0 view .LVU934
 3289 00b0 013C     		subs	r4, r4, #1
 3290              	.LVL235:
2275:System/FreeRTOS/tasks.c **** 
 3291              		.loc 1 2275 7 view .LVU935
 3292 00b2 07D0     		beq	.L254
 3293              	.L249:
2264:System/FreeRTOS/tasks.c **** 						{
 3294              		.loc 1 2264 7 is_stmt 1 view .LVU936
2266:System/FreeRTOS/tasks.c **** 							{
 3295              		.loc 1 2266 8 view .LVU937
2266:System/FreeRTOS/tasks.c **** 							{
 3296              		.loc 1 2266 12 is_stmt 0 view .LVU938
 3297 00b4 FFF7FEFF 		bl	xTaskIncrementTick
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 170


 3298              	.LVL236:
2266:System/FreeRTOS/tasks.c **** 							{
 3299              		.loc 1 2266 10 view .LVU939
 3300 00b8 0028     		cmp	r0, #0
 3301 00ba F9D0     		beq	.L248
2268:System/FreeRTOS/tasks.c **** 							}
 3302              		.loc 1 2268 9 is_stmt 1 view .LVU940
2268:System/FreeRTOS/tasks.c **** 							}
 3303              		.loc 1 2268 23 is_stmt 0 view .LVU941
 3304 00bc 0C4B     		ldr	r3, .L255+24
 3305 00be 0122     		movs	r2, #1
 3306 00c0 1A60     		str	r2, [r3]
 3307 00c2 F5E7     		b	.L248
 3308              	.L254:
2277:System/FreeRTOS/tasks.c **** 					}
 3309              		.loc 1 2277 7 is_stmt 1 view .LVU942
2277:System/FreeRTOS/tasks.c **** 					}
 3310              		.loc 1 2277 20 is_stmt 0 view .LVU943
 3311 00c4 0B4B     		ldr	r3, .L255+28
 3312 00c6 0022     		movs	r2, #0
 3313 00c8 1A60     		str	r2, [r3]
 3314 00ca E2E7     		b	.L247
 3315              	.LVL237:
 3316              	.L250:
2277:System/FreeRTOS/tasks.c **** 					}
 3317              		.loc 1 2277 20 view .LVU944
 3318              	.LBE174:
2204:System/FreeRTOS/tasks.c **** 
 3319              		.loc 1 2204 12 view .LVU945
 3320 00cc 0024     		movs	r4, #0
 3321              	.LVL238:
 3322              	.L242:
2302:System/FreeRTOS/tasks.c **** 		}
 3323              		.loc 1 2302 28 is_stmt 1 view .LVU946
2305:System/FreeRTOS/tasks.c **** 
 3324              		.loc 1 2305 2 view .LVU947
 3325 00ce FFF7FEFF 		bl	vPortExitCritical
 3326              	.LVL239:
2307:System/FreeRTOS/tasks.c **** }
 3327              		.loc 1 2307 2 view .LVU948
2308:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3328              		.loc 1 2308 1 is_stmt 0 view .LVU949
 3329 00d2 2046     		mov	r0, r4
 3330 00d4 38BD     		pop	{r3, r4, r5, pc}
 3331              	.LVL240:
 3332              	.L256:
2308:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3333              		.loc 1 2308 1 view .LVU950
 3334 00d6 00BF     		.align	2
 3335              	.L255:
 3336 00d8 00000000 		.word	.LANCHOR16
 3337 00dc 00000000 		.word	.LANCHOR9
 3338 00e0 00000000 		.word	.LANCHOR1
 3339 00e4 00000000 		.word	.LANCHOR13
 3340 00e8 00000000 		.word	.LANCHOR4
 3341 00ec 00000000 		.word	.LANCHOR10
 3342 00f0 00000000 		.word	.LANCHOR19
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 171


 3343 00f4 00000000 		.word	.LANCHOR20
 3344              		.cfi_endproc
 3345              	.LFE23:
 3347              		.section	.text.vTaskDelayUntil,"ax",%progbits
 3348              		.align	1
 3349              		.global	vTaskDelayUntil
 3350              		.syntax unified
 3351              		.thumb
 3352              		.thumb_func
 3354              	vTaskDelayUntil:
 3355              	.LVL241:
 3356              	.LFB10:
1265:System/FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 3357              		.loc 1 1265 2 is_stmt 1 view -0
 3358              		.cfi_startproc
 3359              		@ args = 0, pretend = 0, frame = 0
 3360              		@ frame_needed = 0, uses_anonymous_args = 0
1265:System/FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 3361              		.loc 1 1265 2 is_stmt 0 view .LVU952
 3362 0000 38B5     		push	{r3, r4, r5, lr}
 3363              	.LCFI29:
 3364              		.cfi_def_cfa_offset 16
 3365              		.cfi_offset 3, -16
 3366              		.cfi_offset 4, -12
 3367              		.cfi_offset 5, -8
 3368              		.cfi_offset 14, -4
1266:System/FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 3369              		.loc 1 1266 2 is_stmt 1 view .LVU953
1267:System/FreeRTOS/tasks.c **** 
 3370              		.loc 1 1267 2 view .LVU954
 3371              	.LVL242:
1269:System/FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3372              		.loc 1 1269 3 view .LVU955
 3373 0002 58B1     		cbz	r0, .L273
 3374 0004 0C46     		mov	r4, r1
 3375 0006 0546     		mov	r5, r0
1269:System/FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3376              		.loc 1 1269 37 discriminator 2 view .LVU956
1270:System/FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3377              		.loc 1 1270 3 discriminator 2 view .LVU957
 3378 0008 89B9     		cbnz	r1, .L260
1270:System/FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3379              		.loc 1 1270 3 view .LVU958
 3380              	.LBB175:
 3381              	.LBI175:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 3382              		.loc 2 191 30 view .LVU959
 3383              	.LBB176:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3384              		.loc 2 193 1 view .LVU960
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3385              		.loc 2 195 2 view .LVU961
 3386              		.syntax unified
 3387              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3388 000a 4FF05003 			mov r3, #80												
 3389 000e 83F31188 		msr basepri, r3											
 3390 0012 BFF36F8F 		isb														
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 172


 3391 0016 BFF34F8F 		dsb														
 3392              	
 3393              	@ 0 "" 2
 3394              	.LVL243:
 3395              		.thumb
 3396              		.syntax unified
 3397              	.L261:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3398              		.loc 2 195 2 is_stmt 0 view .LVU962
 3399              	.LBE176:
 3400              	.LBE175:
1270:System/FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3401              		.loc 1 1270 3 is_stmt 1 discriminator 2 view .LVU963
1270:System/FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3402              		.loc 1 1270 3 discriminator 2 view .LVU964
1270:System/FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3403              		.loc 1 1270 3 discriminator 2 view .LVU965
 3404 001a FEE7     		b	.L261
 3405              	.L273:
1269:System/FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3406              		.loc 1 1269 3 view .LVU966
 3407              	.LBB177:
 3408              	.LBI177:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 3409              		.loc 2 191 30 view .LVU967
 3410              	.LBB178:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3411              		.loc 2 193 1 view .LVU968
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3412              		.loc 2 195 2 view .LVU969
 3413              		.syntax unified
 3414              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3415 001c 4FF05003 			mov r3, #80												
 3416 0020 83F31188 		msr basepri, r3											
 3417 0024 BFF36F8F 		isb														
 3418 0028 BFF34F8F 		dsb														
 3419              	
 3420              	@ 0 "" 2
 3421              	.LVL244:
 3422              		.thumb
 3423              		.syntax unified
 3424              	.L259:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3425              		.loc 2 195 2 is_stmt 0 view .LVU970
 3426              	.LBE178:
 3427              	.LBE177:
1269:System/FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3428              		.loc 1 1269 3 is_stmt 1 discriminator 1 view .LVU971
1269:System/FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3429              		.loc 1 1269 3 discriminator 1 view .LVU972
1269:System/FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3430              		.loc 1 1269 3 discriminator 1 view .LVU973
 3431 002c FEE7     		b	.L259
 3432              	.L260:
1270:System/FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3433              		.loc 1 1270 42 discriminator 2 view .LVU974
1271:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 173


 3434              		.loc 1 1271 3 discriminator 2 view .LVU975
 3435 002e 1B4B     		ldr	r3, .L274
 3436 0030 1B68     		ldr	r3, [r3]
 3437 0032 43B1     		cbz	r3, .L262
1271:System/FreeRTOS/tasks.c **** 
 3438              		.loc 1 1271 3 view .LVU976
 3439              	.LBB179:
 3440              	.LBI179:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 3441              		.loc 2 191 30 view .LVU977
 3442              	.LBB180:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3443              		.loc 2 193 1 view .LVU978
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3444              		.loc 2 195 2 view .LVU979
 3445              		.syntax unified
 3446              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3447 0034 4FF05003 			mov r3, #80												
 3448 0038 83F31188 		msr basepri, r3											
 3449 003c BFF36F8F 		isb														
 3450 0040 BFF34F8F 		dsb														
 3451              	
 3452              	@ 0 "" 2
 3453              	.LVL245:
 3454              		.thumb
 3455              		.syntax unified
 3456              	.L263:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3457              		.loc 2 195 2 is_stmt 0 view .LVU980
 3458              	.LBE180:
 3459              	.LBE179:
1271:System/FreeRTOS/tasks.c **** 
 3460              		.loc 1 1271 3 is_stmt 1 discriminator 3 view .LVU981
1271:System/FreeRTOS/tasks.c **** 
 3461              		.loc 1 1271 3 discriminator 3 view .LVU982
1271:System/FreeRTOS/tasks.c **** 
 3462              		.loc 1 1271 3 discriminator 3 view .LVU983
 3463 0044 FEE7     		b	.L263
 3464              	.L262:
1271:System/FreeRTOS/tasks.c **** 
 3465              		.loc 1 1271 44 discriminator 2 view .LVU984
1273:System/FreeRTOS/tasks.c **** 		{
 3466              		.loc 1 1273 3 discriminator 2 view .LVU985
 3467 0046 FFF7FEFF 		bl	vTaskSuspendAll
 3468              	.LVL246:
 3469              	.LBB181:
1277:System/FreeRTOS/tasks.c **** 
 3470              		.loc 1 1277 4 discriminator 2 view .LVU986
1277:System/FreeRTOS/tasks.c **** 
 3471              		.loc 1 1277 21 is_stmt 0 discriminator 2 view .LVU987
 3472 004a 154B     		ldr	r3, .L274+4
 3473 004c 1868     		ldr	r0, [r3]
 3474              	.LVL247:
1280:System/FreeRTOS/tasks.c **** 
 3475              		.loc 1 1280 4 is_stmt 1 discriminator 2 view .LVU988
1280:System/FreeRTOS/tasks.c **** 
 3476              		.loc 1 1280 18 is_stmt 0 discriminator 2 view .LVU989
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 174


 3477 004e 2B68     		ldr	r3, [r5]
1280:System/FreeRTOS/tasks.c **** 
 3478              		.loc 1 1280 16 discriminator 2 view .LVU990
 3479 0050 1C44     		add	r4, r4, r3
 3480              	.LVL248:
1282:System/FreeRTOS/tasks.c **** 			{
 3481              		.loc 1 1282 4 is_stmt 1 discriminator 2 view .LVU991
1282:System/FreeRTOS/tasks.c **** 			{
 3482              		.loc 1 1282 6 is_stmt 0 discriminator 2 view .LVU992
 3483 0052 8342     		cmp	r3, r0
 3484 0054 09D9     		bls	.L264
1289:System/FreeRTOS/tasks.c **** 				{
 3485              		.loc 1 1289 5 is_stmt 1 view .LVU993
1289:System/FreeRTOS/tasks.c **** 				{
 3486              		.loc 1 1289 7 is_stmt 0 view .LVU994
 3487 0056 A342     		cmp	r3, r4
 3488 0058 01D8     		bhi	.L265
1314:System/FreeRTOS/tasks.c **** 
 3489              		.loc 1 1314 4 is_stmt 1 view .LVU995
1314:System/FreeRTOS/tasks.c **** 
 3490              		.loc 1 1314 24 is_stmt 0 view .LVU996
 3491 005a 2C60     		str	r4, [r5]
1316:System/FreeRTOS/tasks.c **** 			{
 3492              		.loc 1 1316 4 is_stmt 1 view .LVU997
 3493 005c 0EE0     		b	.L266
 3494              	.L265:
1289:System/FreeRTOS/tasks.c **** 				{
 3495              		.loc 1 1289 47 is_stmt 0 discriminator 1 view .LVU998
 3496 005e A042     		cmp	r0, r4
 3497 0060 01D3     		bcc	.L267
1314:System/FreeRTOS/tasks.c **** 
 3498              		.loc 1 1314 4 is_stmt 1 view .LVU999
1314:System/FreeRTOS/tasks.c **** 
 3499              		.loc 1 1314 24 is_stmt 0 view .LVU1000
 3500 0062 2C60     		str	r4, [r5]
1316:System/FreeRTOS/tasks.c **** 			{
 3501              		.loc 1 1316 4 is_stmt 1 view .LVU1001
 3502 0064 0AE0     		b	.L266
 3503              	.L267:
1291:System/FreeRTOS/tasks.c **** 				}
 3504              		.loc 1 1291 6 view .LVU1002
 3505              	.LVL249:
1314:System/FreeRTOS/tasks.c **** 
 3506              		.loc 1 1314 4 view .LVU1003
1314:System/FreeRTOS/tasks.c **** 
 3507              		.loc 1 1314 24 is_stmt 0 view .LVU1004
 3508 0066 2C60     		str	r4, [r5]
1316:System/FreeRTOS/tasks.c **** 			{
 3509              		.loc 1 1316 4 is_stmt 1 view .LVU1005
 3510 0068 04E0     		b	.L268
 3511              	.LVL250:
 3512              	.L264:
1303:System/FreeRTOS/tasks.c **** 				{
 3513              		.loc 1 1303 5 view .LVU1006
1303:System/FreeRTOS/tasks.c **** 				{
 3514              		.loc 1 1303 7 is_stmt 0 view .LVU1007
 3515 006a A342     		cmp	r3, r4
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 175


 3516 006c 01D8     		bhi	.L269
1303:System/FreeRTOS/tasks.c **** 				{
 3517              		.loc 1 1303 47 discriminator 1 view .LVU1008
 3518 006e A042     		cmp	r0, r4
 3519 0070 12D2     		bcs	.L270
 3520              	.L269:
1305:System/FreeRTOS/tasks.c **** 				}
 3521              		.loc 1 1305 6 is_stmt 1 view .LVU1009
 3522              	.LVL251:
1314:System/FreeRTOS/tasks.c **** 
 3523              		.loc 1 1314 4 view .LVU1010
1314:System/FreeRTOS/tasks.c **** 
 3524              		.loc 1 1314 24 is_stmt 0 view .LVU1011
 3525 0072 2C60     		str	r4, [r5]
1316:System/FreeRTOS/tasks.c **** 			{
 3526              		.loc 1 1316 4 is_stmt 1 view .LVU1012
 3527              	.L268:
1318:System/FreeRTOS/tasks.c **** 
 3528              		.loc 1 1318 41 view .LVU1013
1322:System/FreeRTOS/tasks.c **** 			}
 3529              		.loc 1 1322 5 view .LVU1014
 3530 0074 0021     		movs	r1, #0
 3531 0076 201A     		subs	r0, r4, r0
 3532              	.LVL252:
1322:System/FreeRTOS/tasks.c **** 			}
 3533              		.loc 1 1322 5 is_stmt 0 view .LVU1015
 3534 0078 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3535              	.LVL253:
 3536              	.L266:
1326:System/FreeRTOS/tasks.c **** 			}
 3537              		.loc 1 1326 29 is_stmt 1 view .LVU1016
 3538              	.LBE181:
1329:System/FreeRTOS/tasks.c **** 
 3539              		.loc 1 1329 3 view .LVU1017
1329:System/FreeRTOS/tasks.c **** 
 3540              		.loc 1 1329 21 is_stmt 0 view .LVU1018
 3541 007c FFF7FEFF 		bl	xTaskResumeAll
 3542              	.LVL254:
1333:System/FreeRTOS/tasks.c **** 		{
 3543              		.loc 1 1333 3 is_stmt 1 view .LVU1019
1333:System/FreeRTOS/tasks.c **** 		{
 3544              		.loc 1 1333 5 is_stmt 0 view .LVU1020
 3545 0080 48B9     		cbnz	r0, .L257
1335:System/FreeRTOS/tasks.c **** 		}
 3546              		.loc 1 1335 4 is_stmt 1 view .LVU1021
 3547 0082 4FF0E023 		mov	r3, #-536813568
 3548 0086 4FF08052 		mov	r2, #268435456
 3549 008a C3F8042D 		str	r2, [r3, #3332]
1335:System/FreeRTOS/tasks.c **** 		}
 3550              		.loc 1 1335 4 view .LVU1022
 3551              		.syntax unified
 3552              	@ 1335 "System/FreeRTOS/tasks.c" 1
 3553 008e BFF34F8F 		dsb
 3554              	@ 0 "" 2
1335:System/FreeRTOS/tasks.c **** 		}
 3555              		.loc 1 1335 4 view .LVU1023
 3556              	@ 1335 "System/FreeRTOS/tasks.c" 1
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 176


 3557 0092 BFF36F8F 		isb
 3558              	@ 0 "" 2
1335:System/FreeRTOS/tasks.c **** 		}
 3559              		.loc 1 1335 26 view .LVU1024
1339:System/FreeRTOS/tasks.c **** 		}
 3560              		.loc 1 1339 28 view .LVU1025
 3561              		.thumb
 3562              		.syntax unified
 3563              	.L257:
1341:System/FreeRTOS/tasks.c **** 
 3564              		.loc 1 1341 2 is_stmt 0 view .LVU1026
 3565 0096 38BD     		pop	{r3, r4, r5, pc}
 3566              	.LVL255:
 3567              	.L270:
 3568              	.LBB182:
1314:System/FreeRTOS/tasks.c **** 
 3569              		.loc 1 1314 4 is_stmt 1 view .LVU1027
1314:System/FreeRTOS/tasks.c **** 
 3570              		.loc 1 1314 24 is_stmt 0 view .LVU1028
 3571 0098 2C60     		str	r4, [r5]
1316:System/FreeRTOS/tasks.c **** 			{
 3572              		.loc 1 1316 4 is_stmt 1 view .LVU1029
 3573 009a EFE7     		b	.L266
 3574              	.L275:
 3575              		.align	2
 3576              	.L274:
 3577 009c 00000000 		.word	.LANCHOR16
 3578 00a0 00000000 		.word	.LANCHOR15
 3579              	.LBE182:
 3580              		.cfi_endproc
 3581              	.LFE10:
 3583              		.section	.text.vTaskDelay,"ax",%progbits
 3584              		.align	1
 3585              		.global	vTaskDelay
 3586              		.syntax unified
 3587              		.thumb
 3588              		.thumb_func
 3590              	vTaskDelay:
 3591              	.LVL256:
 3592              	.LFB11:
1349:System/FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 3593              		.loc 1 1349 2 view -0
 3594              		.cfi_startproc
 3595              		@ args = 0, pretend = 0, frame = 0
 3596              		@ frame_needed = 0, uses_anonymous_args = 0
1349:System/FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 3597              		.loc 1 1349 2 is_stmt 0 view .LVU1031
 3598 0000 10B5     		push	{r4, lr}
 3599              	.LCFI30:
 3600              		.cfi_def_cfa_offset 8
 3601              		.cfi_offset 4, -8
 3602              		.cfi_offset 14, -4
1350:System/FreeRTOS/tasks.c **** 
 3603              		.loc 1 1350 2 is_stmt 1 view .LVU1032
 3604              	.LVL257:
1353:System/FreeRTOS/tasks.c **** 		{
 3605              		.loc 1 1353 3 view .LVU1033
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 177


1353:System/FreeRTOS/tasks.c **** 		{
 3606              		.loc 1 1353 5 is_stmt 0 view .LVU1034
 3607 0002 A8B1     		cbz	r0, .L277
 3608 0004 0446     		mov	r4, r0
1355:System/FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 3609              		.loc 1 1355 4 is_stmt 1 view .LVU1035
 3610 0006 104B     		ldr	r3, .L282
 3611 0008 1B68     		ldr	r3, [r3]
 3612 000a 43B1     		cbz	r3, .L278
1355:System/FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 3613              		.loc 1 1355 4 view .LVU1036
 3614              	.LBB183:
 3615              	.LBI183:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 3616              		.loc 2 191 30 view .LVU1037
 3617              	.LBB184:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3618              		.loc 2 193 1 view .LVU1038
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3619              		.loc 2 195 2 view .LVU1039
 3620              		.syntax unified
 3621              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3622 000c 4FF05003 			mov r3, #80												
 3623 0010 83F31188 		msr basepri, r3											
 3624 0014 BFF36F8F 		isb														
 3625 0018 BFF34F8F 		dsb														
 3626              	
 3627              	@ 0 "" 2
 3628              	.LVL258:
 3629              		.thumb
 3630              		.syntax unified
 3631              	.L279:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3632              		.loc 2 195 2 is_stmt 0 view .LVU1040
 3633              	.LBE184:
 3634              	.LBE183:
1355:System/FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 3635              		.loc 1 1355 4 is_stmt 1 discriminator 1 view .LVU1041
1355:System/FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 3636              		.loc 1 1355 4 discriminator 1 view .LVU1042
1355:System/FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 3637              		.loc 1 1355 4 discriminator 1 view .LVU1043
 3638 001c FEE7     		b	.L279
 3639              	.L278:
1355:System/FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 3640              		.loc 1 1355 45 discriminator 2 view .LVU1044
1356:System/FreeRTOS/tasks.c **** 			{
 3641              		.loc 1 1356 4 discriminator 2 view .LVU1045
 3642 001e FFF7FEFF 		bl	vTaskSuspendAll
 3643              	.LVL259:
1358:System/FreeRTOS/tasks.c **** 
 3644              		.loc 1 1358 22 discriminator 2 view .LVU1046
1367:System/FreeRTOS/tasks.c **** 			}
 3645              		.loc 1 1367 5 discriminator 2 view .LVU1047
 3646 0022 0021     		movs	r1, #0
 3647 0024 2046     		mov	r0, r4
 3648 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 178


 3649              	.LVL260:
1369:System/FreeRTOS/tasks.c **** 		}
 3650              		.loc 1 1369 4 discriminator 2 view .LVU1048
1369:System/FreeRTOS/tasks.c **** 		}
 3651              		.loc 1 1369 22 is_stmt 0 discriminator 2 view .LVU1049
 3652 002a FFF7FEFF 		bl	xTaskResumeAll
 3653              	.LVL261:
1373:System/FreeRTOS/tasks.c **** 		}
 3654              		.loc 1 1373 28 is_stmt 1 discriminator 2 view .LVU1050
1378:System/FreeRTOS/tasks.c **** 		{
 3655              		.loc 1 1378 3 discriminator 2 view .LVU1051
1378:System/FreeRTOS/tasks.c **** 		{
 3656              		.loc 1 1378 5 is_stmt 0 discriminator 2 view .LVU1052
 3657 002e 48B9     		cbnz	r0, .L276
 3658              	.LVL262:
 3659              	.L277:
1380:System/FreeRTOS/tasks.c **** 		}
 3660              		.loc 1 1380 4 is_stmt 1 view .LVU1053
 3661 0030 4FF0E023 		mov	r3, #-536813568
 3662 0034 4FF08052 		mov	r2, #268435456
 3663 0038 C3F8042D 		str	r2, [r3, #3332]
1380:System/FreeRTOS/tasks.c **** 		}
 3664              		.loc 1 1380 4 view .LVU1054
 3665              		.syntax unified
 3666              	@ 1380 "System/FreeRTOS/tasks.c" 1
 3667 003c BFF34F8F 		dsb
 3668              	@ 0 "" 2
1380:System/FreeRTOS/tasks.c **** 		}
 3669              		.loc 1 1380 4 view .LVU1055
 3670              	@ 1380 "System/FreeRTOS/tasks.c" 1
 3671 0040 BFF36F8F 		isb
 3672              	@ 0 "" 2
1380:System/FreeRTOS/tasks.c **** 		}
 3673              		.loc 1 1380 26 view .LVU1056
1384:System/FreeRTOS/tasks.c **** 		}
 3674              		.loc 1 1384 28 view .LVU1057
 3675              		.thumb
 3676              		.syntax unified
 3677              	.L276:
1386:System/FreeRTOS/tasks.c **** 
 3678              		.loc 1 1386 2 is_stmt 0 view .LVU1058
 3679 0044 10BD     		pop	{r4, pc}
 3680              	.L283:
 3681 0046 00BF     		.align	2
 3682              	.L282:
 3683 0048 00000000 		.word	.LANCHOR16
 3684              		.cfi_endproc
 3685              	.LFE11:
 3687              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3688              		.align	1
 3689              		.global	xTaskCatchUpTicks
 3690              		.syntax unified
 3691              		.thumb
 3692              		.thumb_func
 3694              	xTaskCatchUpTicks:
 3695              	.LVL263:
 3696              	.LFB29:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 179


2617:System/FreeRTOS/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 3697              		.loc 1 2617 1 is_stmt 1 view -0
 3698              		.cfi_startproc
 3699              		@ args = 0, pretend = 0, frame = 0
 3700              		@ frame_needed = 0, uses_anonymous_args = 0
2618:System/FreeRTOS/tasks.c **** 
 3701              		.loc 1 2618 1 view .LVU1060
2622:System/FreeRTOS/tasks.c **** 
 3702              		.loc 1 2622 2 view .LVU1061
 3703 0000 0B4B     		ldr	r3, .L289
 3704 0002 1B68     		ldr	r3, [r3]
 3705 0004 43B1     		cbz	r3, .L285
2622:System/FreeRTOS/tasks.c **** 
 3706              		.loc 1 2622 2 view .LVU1062
 3707              	.LBB185:
 3708              	.LBI185:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 3709              		.loc 2 191 30 view .LVU1063
 3710              	.LBB186:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3711              		.loc 2 193 1 view .LVU1064
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3712              		.loc 2 195 2 view .LVU1065
 3713              		.syntax unified
 3714              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3715 0006 4FF05003 			mov r3, #80												
 3716 000a 83F31188 		msr basepri, r3											
 3717 000e BFF36F8F 		isb														
 3718 0012 BFF34F8F 		dsb														
 3719              	
 3720              	@ 0 "" 2
 3721              	.LVL264:
 3722              		.thumb
 3723              		.syntax unified
 3724              	.L286:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3725              		.loc 2 195 2 is_stmt 0 view .LVU1066
 3726              	.LBE186:
 3727              	.LBE185:
2622:System/FreeRTOS/tasks.c **** 
 3728              		.loc 1 2622 2 is_stmt 1 discriminator 1 view .LVU1067
2622:System/FreeRTOS/tasks.c **** 
 3729              		.loc 1 2622 2 discriminator 1 view .LVU1068
2622:System/FreeRTOS/tasks.c **** 
 3730              		.loc 1 2622 2 discriminator 1 view .LVU1069
 3731 0016 FEE7     		b	.L286
 3732              	.L285:
2617:System/FreeRTOS/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 3733              		.loc 1 2617 1 is_stmt 0 discriminator 2 view .LVU1070
 3734 0018 10B5     		push	{r4, lr}
 3735              	.LCFI31:
 3736              		.cfi_def_cfa_offset 8
 3737              		.cfi_offset 4, -8
 3738              		.cfi_offset 14, -4
 3739 001a 0446     		mov	r4, r0
2622:System/FreeRTOS/tasks.c **** 
 3740              		.loc 1 2622 43 is_stmt 1 discriminator 2 view .LVU1071
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 180


2626:System/FreeRTOS/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 3741              		.loc 1 2626 2 discriminator 2 view .LVU1072
 3742 001c FFF7FEFF 		bl	vTaskSuspendAll
 3743              	.LVL265:
2627:System/FreeRTOS/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 3744              		.loc 1 2627 2 discriminator 2 view .LVU1073
2627:System/FreeRTOS/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 3745              		.loc 1 2627 15 is_stmt 0 discriminator 2 view .LVU1074
 3746 0020 044B     		ldr	r3, .L289+4
 3747 0022 1868     		ldr	r0, [r3]
 3748 0024 2044     		add	r0, r0, r4
 3749 0026 1860     		str	r0, [r3]
2628:System/FreeRTOS/tasks.c **** 
 3750              		.loc 1 2628 2 is_stmt 1 discriminator 2 view .LVU1075
2628:System/FreeRTOS/tasks.c **** 
 3751              		.loc 1 2628 19 is_stmt 0 discriminator 2 view .LVU1076
 3752 0028 FFF7FEFF 		bl	xTaskResumeAll
 3753              	.LVL266:
2630:System/FreeRTOS/tasks.c **** }
 3754              		.loc 1 2630 2 is_stmt 1 discriminator 2 view .LVU1077
2631:System/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 3755              		.loc 1 2631 1 is_stmt 0 discriminator 2 view .LVU1078
 3756 002c 10BD     		pop	{r4, pc}
 3757              	.LVL267:
 3758              	.L290:
2631:System/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 3759              		.loc 1 2631 1 discriminator 2 view .LVU1079
 3760 002e 00BF     		.align	2
 3761              	.L289:
 3762 0030 00000000 		.word	.LANCHOR16
 3763 0034 00000000 		.word	.LANCHOR20
 3764              		.cfi_endproc
 3765              	.LFE29:
 3767              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3768              		.align	1
 3769              		.global	vTaskSwitchContext
 3770              		.syntax unified
 3771              		.thumb
 3772              		.thumb_func
 3774              	vTaskSwitchContext:
 3775              	.LFB31:
2997:System/FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3776              		.loc 1 2997 1 is_stmt 1 view -0
 3777              		.cfi_startproc
 3778              		@ args = 0, pretend = 0, frame = 0
 3779              		@ frame_needed = 0, uses_anonymous_args = 0
 3780              		@ link register save eliminated.
2998:System/FreeRTOS/tasks.c **** 	{
 3781              		.loc 1 2998 2 view .LVU1081
2998:System/FreeRTOS/tasks.c **** 	{
 3782              		.loc 1 2998 27 is_stmt 0 view .LVU1082
 3783 0000 204B     		ldr	r3, .L298
 3784 0002 1B68     		ldr	r3, [r3]
2998:System/FreeRTOS/tasks.c **** 	{
 3785              		.loc 1 2998 4 view .LVU1083
 3786 0004 1BB1     		cbz	r3, .L292
3002:System/FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 181


 3787              		.loc 1 3002 3 is_stmt 1 view .LVU1084
3002:System/FreeRTOS/tasks.c **** 	}
 3788              		.loc 1 3002 17 is_stmt 0 view .LVU1085
 3789 0006 204B     		ldr	r3, .L298+4
 3790 0008 0122     		movs	r2, #1
 3791 000a 1A60     		str	r2, [r3]
 3792 000c 7047     		bx	lr
 3793              	.L292:
3006:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3794              		.loc 1 3006 3 is_stmt 1 view .LVU1086
3006:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3795              		.loc 1 3006 17 is_stmt 0 view .LVU1087
 3796 000e 1E4B     		ldr	r3, .L298+4
 3797 0010 0022     		movs	r2, #0
 3798 0012 1A60     		str	r2, [r3]
3007:System/FreeRTOS/tasks.c **** 
 3799              		.loc 1 3007 27 is_stmt 1 view .LVU1088
3037:System/FreeRTOS/tasks.c **** 
 3800              		.loc 1 3037 33 view .LVU1089
 3801              	.LBB187:
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3802              		.loc 1 3048 3 view .LVU1090
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3803              		.loc 1 3048 3 view .LVU1091
 3804 0014 1D4B     		ldr	r3, .L298+8
 3805 0016 1B68     		ldr	r3, [r3]
 3806              	.LVL268:
 3807              	.LBB188:
 3808              	.LBI188:
 130:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 3809              		.loc 2 130 59 view .LVU1092
 3810              	.LBB189:
 132:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3811              		.loc 2 132 2 view .LVU1093
 134:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3812              		.loc 2 134 3 view .LVU1094
 3813              		.syntax unified
 3814              	@ 134 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3815 0018 B3FA83F3 		clz r3, r3
 3816              	@ 0 "" 2
 3817              	.LVL269:
 134:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3818              		.loc 2 134 3 is_stmt 0 view .LVU1095
 3819              		.thumb
 3820              		.syntax unified
 3821 001c DBB2     		uxtb	r3, r3
 3822              	.LVL270:
 135:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 3823              		.loc 2 135 3 is_stmt 1 view .LVU1096
 135:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 3824              		.loc 2 135 3 is_stmt 0 view .LVU1097
 3825              	.LBE189:
 3826              	.LBE188:
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3827              		.loc 1 3048 3 view .LVU1098
 3828 001e C3F11F03 		rsb	r3, r3, #31
 3829              	.LVL271:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 182


3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3830              		.loc 1 3048 3 is_stmt 1 view .LVU1099
 3831 0022 03EB8301 		add	r1, r3, r3, lsl #2
 3832 0026 8A00     		lsls	r2, r1, #2
 3833 0028 1949     		ldr	r1, .L298+12
 3834 002a 8A58     		ldr	r2, [r1, r2]
 3835 002c 42B9     		cbnz	r2, .L294
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3836              		.loc 1 3048 3 view .LVU1100
 3837              	.LBB190:
 3838              	.LBI190:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 3839              		.loc 2 191 30 view .LVU1101
 3840              	.LBB191:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3841              		.loc 2 193 1 view .LVU1102
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3842              		.loc 2 195 2 view .LVU1103
 3843              		.syntax unified
 3844              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3845 002e 4FF05003 			mov r3, #80												
 3846 0032 83F31188 		msr basepri, r3											
 3847 0036 BFF36F8F 		isb														
 3848 003a BFF34F8F 		dsb														
 3849              	
 3850              	@ 0 "" 2
 3851              	.LVL272:
 3852              		.thumb
 3853              		.syntax unified
 3854              	.L295:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3855              		.loc 2 195 2 is_stmt 0 view .LVU1104
 3856              	.LBE191:
 3857              	.LBE190:
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3858              		.loc 1 3048 3 is_stmt 1 discriminator 1 view .LVU1105
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3859              		.loc 1 3048 3 discriminator 1 view .LVU1106
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3860              		.loc 1 3048 3 discriminator 1 view .LVU1107
 3861 003e FEE7     		b	.L295
 3862              	.LVL273:
 3863              	.L294:
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3864              		.loc 1 3048 3 discriminator 2 view .LVU1108
 3865              	.LBB192:
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3866              		.loc 1 3048 3 discriminator 2 view .LVU1109
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3867              		.loc 1 3048 3 discriminator 2 view .LVU1110
 3868 0040 1349     		ldr	r1, .L298+12
 3869 0042 03EB8300 		add	r0, r3, r3, lsl #2
 3870 0046 8200     		lsls	r2, r0, #2
 3871 0048 0A44     		add	r2, r2, r1
 3872 004a 5068     		ldr	r0, [r2, #4]
 3873 004c 4068     		ldr	r0, [r0, #4]
 3874 004e 5060     		str	r0, [r2, #4]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 183


3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3875              		.loc 1 3048 3 discriminator 2 view .LVU1111
 3876 0050 03EB830C 		add	ip, r3, r3, lsl #2
 3877 0054 4FEA8C02 		lsl	r2, ip, #2
 3878 0058 0832     		adds	r2, r2, #8
 3879 005a 1144     		add	r1, r1, r2
 3880 005c 8842     		cmp	r0, r1
 3881 005e 09D0     		beq	.L297
 3882              	.L296:
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3883              		.loc 1 3048 3 discriminator 6 view .LVU1112
 3884 0060 03EB8303 		add	r3, r3, r3, lsl #2
 3885              	.LVL274:
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3886              		.loc 1 3048 3 is_stmt 0 discriminator 6 view .LVU1113
 3887 0064 9A00     		lsls	r2, r3, #2
 3888 0066 0A4B     		ldr	r3, .L298+12
 3889 0068 1344     		add	r3, r3, r2
 3890 006a 5B68     		ldr	r3, [r3, #4]
 3891 006c DA68     		ldr	r2, [r3, #12]
 3892 006e 094B     		ldr	r3, .L298+16
 3893 0070 1A60     		str	r2, [r3]
 3894              	.LBE192:
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3895              		.loc 1 3048 3 is_stmt 1 discriminator 6 view .LVU1114
 3896              	.LBE187:
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3897              		.loc 1 3048 37 discriminator 6 view .LVU1115
3049:System/FreeRTOS/tasks.c **** 
 3898              		.loc 1 3049 26 discriminator 6 view .LVU1116
3068:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3899              		.loc 1 3068 1 is_stmt 0 discriminator 6 view .LVU1117
 3900 0072 7047     		bx	lr
 3901              	.LVL275:
 3902              	.L297:
 3903              	.LBB194:
 3904              	.LBB193:
3048:System/FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3905              		.loc 1 3048 3 is_stmt 1 discriminator 4 view .LVU1118
 3906 0074 4068     		ldr	r0, [r0, #4]
 3907 0076 6246     		mov	r2, ip
 3908 0078 9100     		lsls	r1, r2, #2
 3909 007a 054A     		ldr	r2, .L298+12
 3910 007c 0A44     		add	r2, r2, r1
 3911 007e 5060     		str	r0, [r2, #4]
 3912 0080 EEE7     		b	.L296
 3913              	.L299:
 3914 0082 00BF     		.align	2
 3915              	.L298:
 3916 0084 00000000 		.word	.LANCHOR16
 3917 0088 00000000 		.word	.LANCHOR19
 3918 008c 00000000 		.word	.LANCHOR13
 3919 0090 00000000 		.word	.LANCHOR4
 3920 0094 00000000 		.word	.LANCHOR10
 3921              	.LBE193:
 3922              	.LBE194:
 3923              		.cfi_endproc
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 184


 3924              	.LFE31:
 3926              		.section	.text.vTaskSuspend,"ax",%progbits
 3927              		.align	1
 3928              		.global	vTaskSuspend
 3929              		.syntax unified
 3930              		.thumb
 3931              		.thumb_func
 3933              	vTaskSuspend:
 3934              	.LVL276:
 3935              	.LFB16:
1712:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 3936              		.loc 1 1712 2 view -0
 3937              		.cfi_startproc
 3938              		@ args = 0, pretend = 0, frame = 0
 3939              		@ frame_needed = 0, uses_anonymous_args = 0
1712:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 3940              		.loc 1 1712 2 is_stmt 0 view .LVU1120
 3941 0000 38B5     		push	{r3, r4, r5, lr}
 3942              	.LCFI32:
 3943              		.cfi_def_cfa_offset 16
 3944              		.cfi_offset 3, -16
 3945              		.cfi_offset 4, -12
 3946              		.cfi_offset 5, -8
 3947              		.cfi_offset 14, -4
 3948 0002 0446     		mov	r4, r0
1713:System/FreeRTOS/tasks.c **** 
 3949              		.loc 1 1713 2 is_stmt 1 view .LVU1121
1715:System/FreeRTOS/tasks.c **** 		{
 3950              		.loc 1 1715 3 view .LVU1122
 3951 0004 FFF7FEFF 		bl	vPortEnterCritical
 3952              	.LVL277:
1719:System/FreeRTOS/tasks.c **** 
 3953              		.loc 1 1719 4 view .LVU1123
1719:System/FreeRTOS/tasks.c **** 
 3954              		.loc 1 1719 12 is_stmt 0 view .LVU1124
 3955 0008 5CB3     		cbz	r4, .L312
 3956              	.LVL278:
 3957              	.L301:
1721:System/FreeRTOS/tasks.c **** 
 3958              		.loc 1 1721 30 is_stmt 1 discriminator 4 view .LVU1125
1725:System/FreeRTOS/tasks.c **** 			{
 3959              		.loc 1 1725 4 discriminator 4 view .LVU1126
1725:System/FreeRTOS/tasks.c **** 			{
 3960              		.loc 1 1725 8 is_stmt 0 discriminator 4 view .LVU1127
 3961 000a 251D     		adds	r5, r4, #4
 3962 000c 2846     		mov	r0, r5
 3963 000e FFF7FEFF 		bl	uxListRemove
 3964              	.LVL279:
1725:System/FreeRTOS/tasks.c **** 			{
 3965              		.loc 1 1725 6 discriminator 4 view .LVU1128
 3966 0012 68B9     		cbnz	r0, .L302
1727:System/FreeRTOS/tasks.c **** 			}
 3967              		.loc 1 1727 5 is_stmt 1 view .LVU1129
 3968 0014 E26A     		ldr	r2, [r4, #44]
 3969 0016 02EB8203 		add	r3, r2, r2, lsl #2
 3970 001a 9B00     		lsls	r3, r3, #2
 3971 001c 2B49     		ldr	r1, .L316
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 185


 3972 001e CB58     		ldr	r3, [r1, r3]
 3973 0020 33B9     		cbnz	r3, .L302
1727:System/FreeRTOS/tasks.c **** 			}
 3974              		.loc 1 1727 5 discriminator 1 view .LVU1130
 3975 0022 0123     		movs	r3, #1
 3976 0024 9340     		lsls	r3, r3, r2
 3977 0026 2A49     		ldr	r1, .L316+4
 3978 0028 0A68     		ldr	r2, [r1]
 3979 002a 22EA0302 		bic	r2, r2, r3
 3980 002e 0A60     		str	r2, [r1]
 3981              	.L302:
1731:System/FreeRTOS/tasks.c **** 			}
 3982              		.loc 1 1731 29 view .LVU1131
1735:System/FreeRTOS/tasks.c **** 			{
 3983              		.loc 1 1735 4 view .LVU1132
1735:System/FreeRTOS/tasks.c **** 			{
 3984              		.loc 1 1735 8 is_stmt 0 view .LVU1133
 3985 0030 A36A     		ldr	r3, [r4, #40]
1735:System/FreeRTOS/tasks.c **** 			{
 3986              		.loc 1 1735 6 view .LVU1134
 3987 0032 1BB1     		cbz	r3, .L303
1737:System/FreeRTOS/tasks.c **** 			}
 3988              		.loc 1 1737 5 is_stmt 1 view .LVU1135
1737:System/FreeRTOS/tasks.c **** 			}
 3989              		.loc 1 1737 14 is_stmt 0 view .LVU1136
 3990 0034 04F11800 		add	r0, r4, #24
 3991 0038 FFF7FEFF 		bl	uxListRemove
 3992              	.LVL280:
 3993              	.L303:
1741:System/FreeRTOS/tasks.c **** 			}
 3994              		.loc 1 1741 29 is_stmt 1 view .LVU1137
1744:System/FreeRTOS/tasks.c **** 
 3995              		.loc 1 1744 4 view .LVU1138
 3996 003c 2946     		mov	r1, r5
 3997 003e 2548     		ldr	r0, .L316+8
 3998 0040 FFF7FEFF 		bl	vListInsertEnd
 3999              	.LVL281:
1748:System/FreeRTOS/tasks.c **** 				{
 4000              		.loc 1 1748 5 view .LVU1139
1748:System/FreeRTOS/tasks.c **** 				{
 4001              		.loc 1 1748 14 is_stmt 0 view .LVU1140
 4002 0044 94F85C30 		ldrb	r3, [r4, #92]	@ zero_extendqisi2
 4003 0048 DBB2     		uxtb	r3, r3
1748:System/FreeRTOS/tasks.c **** 				{
 4004              		.loc 1 1748 7 view .LVU1141
 4005 004a 012B     		cmp	r3, #1
 4006 004c 0CD0     		beq	.L313
 4007              	.L304:
1757:System/FreeRTOS/tasks.c **** 
 4008              		.loc 1 1757 3 is_stmt 1 view .LVU1142
 4009 004e FFF7FEFF 		bl	vPortExitCritical
 4010              	.LVL282:
1759:System/FreeRTOS/tasks.c **** 		{
 4011              		.loc 1 1759 3 view .LVU1143
1759:System/FreeRTOS/tasks.c **** 		{
 4012              		.loc 1 1759 25 is_stmt 0 view .LVU1144
 4013 0052 214B     		ldr	r3, .L316+12
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 186


 4014 0054 1B68     		ldr	r3, [r3]
1759:System/FreeRTOS/tasks.c **** 		{
 4015              		.loc 1 1759 5 view .LVU1145
 4016 0056 5BB9     		cbnz	r3, .L314
 4017              	.L305:
1771:System/FreeRTOS/tasks.c **** 		}
 4018              		.loc 1 1771 28 is_stmt 1 view .LVU1146
1774:System/FreeRTOS/tasks.c **** 		{
 4019              		.loc 1 1774 3 view .LVU1147
1774:System/FreeRTOS/tasks.c **** 		{
 4020              		.loc 1 1774 13 is_stmt 0 view .LVU1148
 4021 0058 204B     		ldr	r3, .L316+16
 4022 005a 1B68     		ldr	r3, [r3]
1774:System/FreeRTOS/tasks.c **** 		{
 4023              		.loc 1 1774 5 view .LVU1149
 4024 005c A342     		cmp	r3, r4
 4025 005e 0ED0     		beq	.L315
 4026              	.L300:
1805:System/FreeRTOS/tasks.c **** 
 4027              		.loc 1 1805 2 view .LVU1150
 4028 0060 38BD     		pop	{r3, r4, r5, pc}
 4029              	.LVL283:
 4030              	.L312:
1719:System/FreeRTOS/tasks.c **** 
 4031              		.loc 1 1719 12 discriminator 1 view .LVU1151
 4032 0062 1E4B     		ldr	r3, .L316+16
 4033 0064 1C68     		ldr	r4, [r3]
 4034              	.LVL284:
1719:System/FreeRTOS/tasks.c **** 
 4035              		.loc 1 1719 12 discriminator 1 view .LVU1152
 4036 0066 D0E7     		b	.L301
 4037              	.LVL285:
 4038              	.L313:
1752:System/FreeRTOS/tasks.c **** 				}
 4039              		.loc 1 1752 6 is_stmt 1 view .LVU1153
1752:System/FreeRTOS/tasks.c **** 				}
 4040              		.loc 1 1752 27 is_stmt 0 view .LVU1154
 4041 0068 0023     		movs	r3, #0
 4042 006a 84F85C30 		strb	r3, [r4, #92]
 4043 006e EEE7     		b	.L304
 4044              	.L314:
1763:System/FreeRTOS/tasks.c **** 			{
 4045              		.loc 1 1763 4 is_stmt 1 view .LVU1155
 4046 0070 FFF7FEFF 		bl	vPortEnterCritical
 4047              	.LVL286:
1765:System/FreeRTOS/tasks.c **** 			}
 4048              		.loc 1 1765 5 view .LVU1156
 4049 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 4050              	.LVL287:
1767:System/FreeRTOS/tasks.c **** 		}
 4051              		.loc 1 1767 4 view .LVU1157
 4052 0078 FFF7FEFF 		bl	vPortExitCritical
 4053              	.LVL288:
 4054 007c ECE7     		b	.L305
 4055              	.L315:
1776:System/FreeRTOS/tasks.c **** 			{
 4056              		.loc 1 1776 4 view .LVU1158
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 187


1776:System/FreeRTOS/tasks.c **** 			{
 4057              		.loc 1 1776 26 is_stmt 0 view .LVU1159
 4058 007e 164B     		ldr	r3, .L316+12
 4059 0080 1B68     		ldr	r3, [r3]
1776:System/FreeRTOS/tasks.c **** 			{
 4060              		.loc 1 1776 6 view .LVU1160
 4061 0082 B3B1     		cbz	r3, .L307
1779:System/FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 4062              		.loc 1 1779 5 is_stmt 1 view .LVU1161
 4063 0084 164B     		ldr	r3, .L316+20
 4064 0086 1B68     		ldr	r3, [r3]
 4065 0088 43B1     		cbz	r3, .L308
1779:System/FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 4066              		.loc 1 1779 5 view .LVU1162
 4067              	.LBB195:
 4068              	.LBI195:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 4069              		.loc 2 191 30 view .LVU1163
 4070              	.LBB196:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4071              		.loc 2 193 1 view .LVU1164
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4072              		.loc 2 195 2 view .LVU1165
 4073              		.syntax unified
 4074              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4075 008a 4FF05003 			mov r3, #80												
 4076 008e 83F31188 		msr basepri, r3											
 4077 0092 BFF36F8F 		isb														
 4078 0096 BFF34F8F 		dsb														
 4079              	
 4080              	@ 0 "" 2
 4081              	.LVL289:
 4082              		.thumb
 4083              		.syntax unified
 4084              	.L309:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4085              		.loc 2 195 2 is_stmt 0 view .LVU1166
 4086              	.LBE196:
 4087              	.LBE195:
1779:System/FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 4088              		.loc 1 1779 5 is_stmt 1 discriminator 1 view .LVU1167
1779:System/FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 4089              		.loc 1 1779 5 discriminator 1 view .LVU1168
1779:System/FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 4090              		.loc 1 1779 5 discriminator 1 view .LVU1169
 4091 009a FEE7     		b	.L309
 4092              	.L308:
1779:System/FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 4093              		.loc 1 1779 46 discriminator 2 view .LVU1170
1780:System/FreeRTOS/tasks.c **** 			}
 4094              		.loc 1 1780 5 discriminator 2 view .LVU1171
 4095 009c 4FF0E023 		mov	r3, #-536813568
 4096 00a0 4FF08052 		mov	r2, #268435456
 4097 00a4 C3F8042D 		str	r2, [r3, #3332]
1780:System/FreeRTOS/tasks.c **** 			}
 4098              		.loc 1 1780 5 discriminator 2 view .LVU1172
 4099              		.syntax unified
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 188


 4100              	@ 1780 "System/FreeRTOS/tasks.c" 1
 4101 00a8 BFF34F8F 		dsb
 4102              	@ 0 "" 2
1780:System/FreeRTOS/tasks.c **** 			}
 4103              		.loc 1 1780 5 discriminator 2 view .LVU1173
 4104              	@ 1780 "System/FreeRTOS/tasks.c" 1
 4105 00ac BFF36F8F 		isb
 4106              	@ 0 "" 2
1780:System/FreeRTOS/tasks.c **** 			}
 4107              		.loc 1 1780 27 discriminator 2 view .LVU1174
 4108              		.thumb
 4109              		.syntax unified
 4110 00b0 D6E7     		b	.L300
 4111              	.L307:
1787:System/FreeRTOS/tasks.c **** 				{
 4112              		.loc 1 1787 5 view .LVU1175
1787:System/FreeRTOS/tasks.c **** 				{
 4113              		.loc 1 1787 9 is_stmt 0 view .LVU1176
 4114 00b2 084B     		ldr	r3, .L316+8
 4115 00b4 1A68     		ldr	r2, [r3]
1787:System/FreeRTOS/tasks.c **** 				{
 4116              		.loc 1 1787 56 view .LVU1177
 4117 00b6 0B4B     		ldr	r3, .L316+24
 4118 00b8 1B68     		ldr	r3, [r3]
1787:System/FreeRTOS/tasks.c **** 				{
 4119              		.loc 1 1787 7 view .LVU1178
 4120 00ba 9A42     		cmp	r2, r3
 4121 00bc 03D1     		bne	.L310
1793:System/FreeRTOS/tasks.c **** 				}
 4122              		.loc 1 1793 6 is_stmt 1 view .LVU1179
1793:System/FreeRTOS/tasks.c **** 				}
 4123              		.loc 1 1793 19 is_stmt 0 view .LVU1180
 4124 00be 074B     		ldr	r3, .L316+16
 4125 00c0 0022     		movs	r2, #0
 4126 00c2 1A60     		str	r2, [r3]
 4127 00c4 CCE7     		b	.L300
 4128              	.L310:
1797:System/FreeRTOS/tasks.c **** 				}
 4129              		.loc 1 1797 6 is_stmt 1 view .LVU1181
 4130 00c6 FFF7FEFF 		bl	vTaskSwitchContext
 4131              	.LVL290:
1803:System/FreeRTOS/tasks.c **** 		}
 4132              		.loc 1 1803 28 view .LVU1182
1805:System/FreeRTOS/tasks.c **** 
 4133              		.loc 1 1805 2 is_stmt 0 view .LVU1183
 4134 00ca C9E7     		b	.L300
 4135              	.L317:
 4136              		.align	2
 4137              	.L316:
 4138 00cc 00000000 		.word	.LANCHOR4
 4139 00d0 00000000 		.word	.LANCHOR13
 4140 00d4 00000000 		.word	.LANCHOR0
 4141 00d8 00000000 		.word	.LANCHOR11
 4142 00dc 00000000 		.word	.LANCHOR10
 4143 00e0 00000000 		.word	.LANCHOR16
 4144 00e4 00000000 		.word	.LANCHOR9
 4145              		.cfi_endproc
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 189


 4146              	.LFE16:
 4148              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4149              		.align	1
 4150              		.global	vTaskPlaceOnEventList
 4151              		.syntax unified
 4152              		.thumb
 4153              		.thumb_func
 4155              	vTaskPlaceOnEventList:
 4156              	.LVL291:
 4157              	.LFB32:
3072:System/FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 4158              		.loc 1 3072 1 is_stmt 1 view -0
 4159              		.cfi_startproc
 4160              		@ args = 0, pretend = 0, frame = 0
 4161              		@ frame_needed = 0, uses_anonymous_args = 0
3073:System/FreeRTOS/tasks.c **** 
 4162              		.loc 1 3073 2 view .LVU1185
 4163 0000 58B1     		cbz	r0, .L323
3072:System/FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 4164              		.loc 1 3072 1 is_stmt 0 discriminator 2 view .LVU1186
 4165 0002 10B5     		push	{r4, lr}
 4166              	.LCFI33:
 4167              		.cfi_def_cfa_offset 8
 4168              		.cfi_offset 4, -8
 4169              		.cfi_offset 14, -4
 4170 0004 0C46     		mov	r4, r1
3073:System/FreeRTOS/tasks.c **** 
 4171              		.loc 1 3073 29 is_stmt 1 discriminator 2 view .LVU1187
3082:System/FreeRTOS/tasks.c **** 
 4172              		.loc 1 3082 2 discriminator 2 view .LVU1188
3082:System/FreeRTOS/tasks.c **** 
 4173              		.loc 1 3082 43 is_stmt 0 discriminator 2 view .LVU1189
 4174 0006 094A     		ldr	r2, .L324
 4175 0008 1168     		ldr	r1, [r2]
 4176              	.LVL292:
3082:System/FreeRTOS/tasks.c **** 
 4177              		.loc 1 3082 2 discriminator 2 view .LVU1190
 4178 000a 1831     		adds	r1, r1, #24
 4179 000c FFF7FEFF 		bl	vListInsert
 4180              	.LVL293:
3084:System/FreeRTOS/tasks.c **** }
 4181              		.loc 1 3084 2 is_stmt 1 discriminator 2 view .LVU1191
 4182 0010 0121     		movs	r1, #1
 4183 0012 2046     		mov	r0, r4
 4184 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4185              	.LVL294:
3085:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4186              		.loc 1 3085 1 is_stmt 0 discriminator 2 view .LVU1192
 4187 0018 10BD     		pop	{r4, pc}
 4188              	.LVL295:
 4189              	.L323:
 4190              	.LCFI34:
 4191              		.cfi_def_cfa_offset 0
 4192              		.cfi_restore 4
 4193              		.cfi_restore 14
3073:System/FreeRTOS/tasks.c **** 
 4194              		.loc 1 3073 2 is_stmt 1 view .LVU1193
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 190


 4195              	.LBB197:
 4196              	.LBI197:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 4197              		.loc 2 191 30 view .LVU1194
 4198              	.LBB198:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4199              		.loc 2 193 1 view .LVU1195
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4200              		.loc 2 195 2 view .LVU1196
 4201              		.syntax unified
 4202              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4203 001a 4FF05003 			mov r3, #80												
 4204 001e 83F31188 		msr basepri, r3											
 4205 0022 BFF36F8F 		isb														
 4206 0026 BFF34F8F 		dsb														
 4207              	
 4208              	@ 0 "" 2
 4209              	.LVL296:
 4210              		.thumb
 4211              		.syntax unified
 4212              	.L320:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4213              		.loc 2 195 2 is_stmt 0 view .LVU1197
 4214              	.LBE198:
 4215              	.LBE197:
3073:System/FreeRTOS/tasks.c **** 
 4216              		.loc 1 3073 2 is_stmt 1 discriminator 1 view .LVU1198
3073:System/FreeRTOS/tasks.c **** 
 4217              		.loc 1 3073 2 discriminator 1 view .LVU1199
3073:System/FreeRTOS/tasks.c **** 
 4218              		.loc 1 3073 2 discriminator 1 view .LVU1200
 4219 002a FEE7     		b	.L320
 4220              	.L325:
 4221              		.align	2
 4222              	.L324:
 4223 002c 00000000 		.word	.LANCHOR10
 4224              		.cfi_endproc
 4225              	.LFE32:
 4227              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4228              		.align	1
 4229              		.global	vTaskPlaceOnUnorderedEventList
 4230              		.syntax unified
 4231              		.thumb
 4232              		.thumb_func
 4234              	vTaskPlaceOnUnorderedEventList:
 4235              	.LVL297:
 4236              	.LFB33:
3089:System/FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 4237              		.loc 1 3089 1 view -0
 4238              		.cfi_startproc
 4239              		@ args = 0, pretend = 0, frame = 0
 4240              		@ frame_needed = 0, uses_anonymous_args = 0
3090:System/FreeRTOS/tasks.c **** 
 4241              		.loc 1 3090 2 view .LVU1202
 4242 0000 70B1     		cbz	r0, .L333
3089:System/FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 4243              		.loc 1 3089 1 is_stmt 0 discriminator 2 view .LVU1203
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 191


 4244 0002 10B5     		push	{r4, lr}
 4245              	.LCFI35:
 4246              		.cfi_def_cfa_offset 8
 4247              		.cfi_offset 4, -8
 4248              		.cfi_offset 14, -4
 4249 0004 1446     		mov	r4, r2
 4250 0006 0246     		mov	r2, r0
 4251              	.LVL298:
3090:System/FreeRTOS/tasks.c **** 
 4252              		.loc 1 3090 29 is_stmt 1 discriminator 2 view .LVU1204
3094:System/FreeRTOS/tasks.c **** 
 4253              		.loc 1 3094 2 discriminator 2 view .LVU1205
 4254 0008 114B     		ldr	r3, .L334
 4255 000a 1B68     		ldr	r3, [r3]
 4256 000c 8BB9     		cbnz	r3, .L329
3094:System/FreeRTOS/tasks.c **** 
 4257              		.loc 1 3094 2 view .LVU1206
 4258              	.LBB199:
 4259              	.LBI199:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 4260              		.loc 2 191 30 view .LVU1207
 4261              	.LBB200:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4262              		.loc 2 193 1 view .LVU1208
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4263              		.loc 2 195 2 view .LVU1209
 4264              		.syntax unified
 4265              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4266 000e 4FF05003 			mov r3, #80												
 4267 0012 83F31188 		msr basepri, r3											
 4268 0016 BFF36F8F 		isb														
 4269 001a BFF34F8F 		dsb														
 4270              	
 4271              	@ 0 "" 2
 4272              	.LVL299:
 4273              		.thumb
 4274              		.syntax unified
 4275              	.L330:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4276              		.loc 2 195 2 is_stmt 0 view .LVU1210
 4277              	.LBE200:
 4278              	.LBE199:
3094:System/FreeRTOS/tasks.c **** 
 4279              		.loc 1 3094 2 is_stmt 1 discriminator 2 view .LVU1211
3094:System/FreeRTOS/tasks.c **** 
 4280              		.loc 1 3094 2 discriminator 2 view .LVU1212
3094:System/FreeRTOS/tasks.c **** 
 4281              		.loc 1 3094 2 discriminator 2 view .LVU1213
 4282 001e FEE7     		b	.L330
 4283              	.LVL300:
 4284              	.L333:
 4285              	.LCFI36:
 4286              		.cfi_def_cfa_offset 0
 4287              		.cfi_restore 4
 4288              		.cfi_restore 14
3090:System/FreeRTOS/tasks.c **** 
 4289              		.loc 1 3090 2 view .LVU1214
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 192


 4290              	.LBB201:
 4291              	.LBI201:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 4292              		.loc 2 191 30 view .LVU1215
 4293              	.LBB202:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4294              		.loc 2 193 1 view .LVU1216
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4295              		.loc 2 195 2 view .LVU1217
 4296              		.syntax unified
 4297              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4298 0020 4FF05003 			mov r3, #80												
 4299 0024 83F31188 		msr basepri, r3											
 4300 0028 BFF36F8F 		isb														
 4301 002c BFF34F8F 		dsb														
 4302              	
 4303              	@ 0 "" 2
 4304              	.LVL301:
 4305              		.thumb
 4306              		.syntax unified
 4307              	.L328:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4308              		.loc 2 195 2 is_stmt 0 view .LVU1218
 4309              	.LBE202:
 4310              	.LBE201:
3090:System/FreeRTOS/tasks.c **** 
 4311              		.loc 1 3090 2 is_stmt 1 discriminator 1 view .LVU1219
3090:System/FreeRTOS/tasks.c **** 
 4312              		.loc 1 3090 2 discriminator 1 view .LVU1220
3090:System/FreeRTOS/tasks.c **** 
 4313              		.loc 1 3090 2 discriminator 1 view .LVU1221
 4314 0030 FEE7     		b	.L328
 4315              	.LVL302:
 4316              	.L329:
 4317              	.LCFI37:
 4318              		.cfi_def_cfa_offset 8
 4319              		.cfi_offset 4, -8
 4320              		.cfi_offset 14, -4
3094:System/FreeRTOS/tasks.c **** 
 4321              		.loc 1 3094 43 discriminator 2 view .LVU1222
3099:System/FreeRTOS/tasks.c **** 
 4322              		.loc 1 3099 2 discriminator 2 view .LVU1223
 4323 0032 084B     		ldr	r3, .L334+4
 4324 0034 1868     		ldr	r0, [r3]
 4325              	.LVL303:
3099:System/FreeRTOS/tasks.c **** 
 4326              		.loc 1 3099 2 is_stmt 0 discriminator 2 view .LVU1224
 4327 0036 41F00041 		orr	r1, r1, #-2147483648
 4328              	.LVL304:
3099:System/FreeRTOS/tasks.c **** 
 4329              		.loc 1 3099 2 discriminator 2 view .LVU1225
 4330 003a 8161     		str	r1, [r0, #24]
3106:System/FreeRTOS/tasks.c **** 
 4331              		.loc 1 3106 2 is_stmt 1 discriminator 2 view .LVU1226
3106:System/FreeRTOS/tasks.c **** 
 4332              		.loc 1 3106 46 is_stmt 0 discriminator 2 view .LVU1227
 4333 003c 1968     		ldr	r1, [r3]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 193


3106:System/FreeRTOS/tasks.c **** 
 4334              		.loc 1 3106 2 discriminator 2 view .LVU1228
 4335 003e 1831     		adds	r1, r1, #24
 4336 0040 1046     		mov	r0, r2
 4337 0042 FFF7FEFF 		bl	vListInsertEnd
 4338              	.LVL305:
3108:System/FreeRTOS/tasks.c **** }
 4339              		.loc 1 3108 2 is_stmt 1 discriminator 2 view .LVU1229
 4340 0046 0121     		movs	r1, #1
 4341 0048 2046     		mov	r0, r4
 4342 004a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4343              	.LVL306:
3109:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4344              		.loc 1 3109 1 is_stmt 0 discriminator 2 view .LVU1230
 4345 004e 10BD     		pop	{r4, pc}
 4346              	.LVL307:
 4347              	.L335:
3109:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4348              		.loc 1 3109 1 discriminator 2 view .LVU1231
 4349              		.align	2
 4350              	.L334:
 4351 0050 00000000 		.word	.LANCHOR16
 4352 0054 00000000 		.word	.LANCHOR10
 4353              		.cfi_endproc
 4354              	.LFE33:
 4356              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4357              		.align	1
 4358              		.global	xTaskRemoveFromEventList
 4359              		.syntax unified
 4360              		.thumb
 4361              		.thumb_func
 4363              	xTaskRemoveFromEventList:
 4364              	.LVL308:
 4365              	.LFB34:
3146:System/FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 4366              		.loc 1 3146 1 is_stmt 1 view -0
 4367              		.cfi_startproc
 4368              		@ args = 0, pretend = 0, frame = 0
 4369              		@ frame_needed = 0, uses_anonymous_args = 0
3146:System/FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 4370              		.loc 1 3146 1 is_stmt 0 view .LVU1233
 4371 0000 38B5     		push	{r3, r4, r5, lr}
 4372              	.LCFI38:
 4373              		.cfi_def_cfa_offset 16
 4374              		.cfi_offset 3, -16
 4375              		.cfi_offset 4, -12
 4376              		.cfi_offset 5, -8
 4377              		.cfi_offset 14, -4
3147:System/FreeRTOS/tasks.c **** BaseType_t xReturn;
 4378              		.loc 1 3147 1 is_stmt 1 view .LVU1234
3148:System/FreeRTOS/tasks.c **** 
 4379              		.loc 1 3148 1 view .LVU1235
3163:System/FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4380              		.loc 1 3163 2 view .LVU1236
3163:System/FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4381              		.loc 1 3163 19 is_stmt 0 view .LVU1237
 4382 0002 C368     		ldr	r3, [r0, #12]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 194


3163:System/FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4383              		.loc 1 3163 17 view .LVU1238
 4384 0004 DC68     		ldr	r4, [r3, #12]
 4385              	.LVL309:
3164:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4386              		.loc 1 3164 2 is_stmt 1 view .LVU1239
 4387 0006 24B3     		cbz	r4, .L344
3164:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4388              		.loc 1 3164 32 discriminator 2 view .LVU1240
3165:System/FreeRTOS/tasks.c **** 
 4389              		.loc 1 3165 2 discriminator 2 view .LVU1241
3165:System/FreeRTOS/tasks.c **** 
 4390              		.loc 1 3165 11 is_stmt 0 discriminator 2 view .LVU1242
 4391 0008 04F11805 		add	r5, r4, #24
 4392 000c 2846     		mov	r0, r5
 4393              	.LVL310:
3165:System/FreeRTOS/tasks.c **** 
 4394              		.loc 1 3165 11 discriminator 2 view .LVU1243
 4395 000e FFF7FEFF 		bl	uxListRemove
 4396              	.LVL311:
3167:System/FreeRTOS/tasks.c **** 	{
 4397              		.loc 1 3167 2 is_stmt 1 discriminator 2 view .LVU1244
3167:System/FreeRTOS/tasks.c **** 	{
 4398              		.loc 1 3167 27 is_stmt 0 discriminator 2 view .LVU1245
 4399 0012 184B     		ldr	r3, .L345
 4400 0014 1B68     		ldr	r3, [r3]
3167:System/FreeRTOS/tasks.c **** 	{
 4401              		.loc 1 3167 4 discriminator 2 view .LVU1246
 4402 0016 2BBB     		cbnz	r3, .L339
3169:System/FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4403              		.loc 1 3169 3 is_stmt 1 view .LVU1247
3169:System/FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4404              		.loc 1 3169 12 is_stmt 0 view .LVU1248
 4405 0018 251D     		adds	r5, r4, #4
 4406 001a 2846     		mov	r0, r5
 4407 001c FFF7FEFF 		bl	uxListRemove
 4408              	.LVL312:
3170:System/FreeRTOS/tasks.c **** 
 4409              		.loc 1 3170 3 is_stmt 1 view .LVU1249
3170:System/FreeRTOS/tasks.c **** 
 4410              		.loc 1 3170 3 view .LVU1250
 4411 0020 E06A     		ldr	r0, [r4, #44]
 4412 0022 0123     		movs	r3, #1
 4413 0024 8340     		lsls	r3, r3, r0
 4414 0026 144A     		ldr	r2, .L345+4
 4415 0028 1168     		ldr	r1, [r2]
 4416 002a 0B43     		orrs	r3, r3, r1
 4417 002c 1360     		str	r3, [r2]
3170:System/FreeRTOS/tasks.c **** 
 4418              		.loc 1 3170 3 view .LVU1251
 4419 002e 00EB8000 		add	r0, r0, r0, lsl #2
 4420 0032 2946     		mov	r1, r5
 4421 0034 114B     		ldr	r3, .L345+8
 4422 0036 03EB8000 		add	r0, r3, r0, lsl #2
 4423 003a FFF7FEFF 		bl	vListInsertEnd
 4424              	.LVL313:
3170:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 195


 4425              		.loc 1 3170 42 view .LVU1252
 4426              	.L340:
3193:System/FreeRTOS/tasks.c **** 	{
 4427              		.loc 1 3193 2 view .LVU1253
3193:System/FreeRTOS/tasks.c **** 	{
 4428              		.loc 1 3193 20 is_stmt 0 view .LVU1254
 4429 003e E26A     		ldr	r2, [r4, #44]
3193:System/FreeRTOS/tasks.c **** 	{
 4430              		.loc 1 3193 47 view .LVU1255
 4431 0040 0F4B     		ldr	r3, .L345+12
 4432 0042 1B68     		ldr	r3, [r3]
 4433 0044 DB6A     		ldr	r3, [r3, #44]
3193:System/FreeRTOS/tasks.c **** 	{
 4434              		.loc 1 3193 4 view .LVU1256
 4435 0046 9A42     		cmp	r2, r3
 4436 0048 11D9     		bls	.L342
3198:System/FreeRTOS/tasks.c **** 
 4437              		.loc 1 3198 3 is_stmt 1 view .LVU1257
 4438              	.LVL314:
3202:System/FreeRTOS/tasks.c **** 	}
 4439              		.loc 1 3202 3 view .LVU1258
3202:System/FreeRTOS/tasks.c **** 	}
 4440              		.loc 1 3202 17 is_stmt 0 view .LVU1259
 4441 004a 0120     		movs	r0, #1
 4442 004c 0D4B     		ldr	r3, .L345+16
 4443 004e 1860     		str	r0, [r3]
 4444              	.LVL315:
 4445              	.L336:
3210:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4446              		.loc 1 3210 1 view .LVU1260
 4447 0050 38BD     		pop	{r3, r4, r5, pc}
 4448              	.LVL316:
 4449              	.L344:
3164:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4450              		.loc 1 3164 2 is_stmt 1 view .LVU1261
 4451              	.LBB203:
 4452              	.LBI203:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 4453              		.loc 2 191 30 view .LVU1262
 4454              	.LBB204:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4455              		.loc 2 193 1 view .LVU1263
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4456              		.loc 2 195 2 view .LVU1264
 4457              		.syntax unified
 4458              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4459 0052 4FF05003 			mov r3, #80												
 4460 0056 83F31188 		msr basepri, r3											
 4461 005a BFF36F8F 		isb														
 4462 005e BFF34F8F 		dsb														
 4463              	
 4464              	@ 0 "" 2
 4465              	.LVL317:
 4466              		.thumb
 4467              		.syntax unified
 4468              	.L338:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 196


 4469              		.loc 2 195 2 is_stmt 0 view .LVU1265
 4470              	.LBE204:
 4471              	.LBE203:
3164:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4472              		.loc 1 3164 2 is_stmt 1 discriminator 1 view .LVU1266
3164:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4473              		.loc 1 3164 2 discriminator 1 view .LVU1267
3164:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4474              		.loc 1 3164 2 discriminator 1 view .LVU1268
 4475 0062 FEE7     		b	.L338
 4476              	.LVL318:
 4477              	.L339:
3190:System/FreeRTOS/tasks.c **** 	}
 4478              		.loc 1 3190 3 view .LVU1269
 4479 0064 2946     		mov	r1, r5
 4480 0066 0848     		ldr	r0, .L345+20
 4481 0068 FFF7FEFF 		bl	vListInsertEnd
 4482              	.LVL319:
 4483 006c E7E7     		b	.L340
 4484              	.L342:
3206:System/FreeRTOS/tasks.c **** 	}
 4485              		.loc 1 3206 11 is_stmt 0 view .LVU1270
 4486 006e 0020     		movs	r0, #0
 4487              	.LVL320:
3209:System/FreeRTOS/tasks.c **** }
 4488              		.loc 1 3209 2 is_stmt 1 view .LVU1271
3209:System/FreeRTOS/tasks.c **** }
 4489              		.loc 1 3209 9 is_stmt 0 view .LVU1272
 4490 0070 EEE7     		b	.L336
 4491              	.L346:
 4492 0072 00BF     		.align	2
 4493              	.L345:
 4494 0074 00000000 		.word	.LANCHOR16
 4495 0078 00000000 		.word	.LANCHOR13
 4496 007c 00000000 		.word	.LANCHOR4
 4497 0080 00000000 		.word	.LANCHOR10
 4498 0084 00000000 		.word	.LANCHOR19
 4499 0088 00000000 		.word	.LANCHOR1
 4500              		.cfi_endproc
 4501              	.LFE34:
 4503              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4504              		.align	1
 4505              		.global	vTaskRemoveFromUnorderedEventList
 4506              		.syntax unified
 4507              		.thumb
 4508              		.thumb_func
 4510              	vTaskRemoveFromUnorderedEventList:
 4511              	.LVL321:
 4512              	.LFB35:
3214:System/FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 4513              		.loc 1 3214 1 is_stmt 1 view -0
 4514              		.cfi_startproc
 4515              		@ args = 0, pretend = 0, frame = 0
 4516              		@ frame_needed = 0, uses_anonymous_args = 0
3214:System/FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 4517              		.loc 1 3214 1 is_stmt 0 view .LVU1274
 4518 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 197


 4519              	.LCFI39:
 4520              		.cfi_def_cfa_offset 16
 4521              		.cfi_offset 3, -16
 4522              		.cfi_offset 4, -12
 4523              		.cfi_offset 5, -8
 4524              		.cfi_offset 14, -4
3215:System/FreeRTOS/tasks.c **** 
 4525              		.loc 1 3215 1 is_stmt 1 view .LVU1275
3219:System/FreeRTOS/tasks.c **** 
 4526              		.loc 1 3219 2 view .LVU1276
 4527 0002 1C4B     		ldr	r3, .L355
 4528 0004 1B68     		ldr	r3, [r3]
 4529 0006 43B9     		cbnz	r3, .L348
3219:System/FreeRTOS/tasks.c **** 
 4530              		.loc 1 3219 2 view .LVU1277
 4531              	.LBB205:
 4532              	.LBI205:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 4533              		.loc 2 191 30 view .LVU1278
 4534              	.LBB206:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4535              		.loc 2 193 1 view .LVU1279
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4536              		.loc 2 195 2 view .LVU1280
 4537              		.syntax unified
 4538              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4539 0008 4FF05003 			mov r3, #80												
 4540 000c 83F31188 		msr basepri, r3											
 4541 0010 BFF36F8F 		isb														
 4542 0014 BFF34F8F 		dsb														
 4543              	
 4544              	@ 0 "" 2
 4545              	.LVL322:
 4546              		.thumb
 4547              		.syntax unified
 4548              	.L349:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4549              		.loc 2 195 2 is_stmt 0 view .LVU1281
 4550              	.LBE206:
 4551              	.LBE205:
3219:System/FreeRTOS/tasks.c **** 
 4552              		.loc 1 3219 2 is_stmt 1 discriminator 1 view .LVU1282
3219:System/FreeRTOS/tasks.c **** 
 4553              		.loc 1 3219 2 discriminator 1 view .LVU1283
3219:System/FreeRTOS/tasks.c **** 
 4554              		.loc 1 3219 2 discriminator 1 view .LVU1284
 4555 0018 FEE7     		b	.L349
 4556              	.L348:
3219:System/FreeRTOS/tasks.c **** 
 4557              		.loc 1 3219 49 discriminator 2 view .LVU1285
3222:System/FreeRTOS/tasks.c **** 
 4558              		.loc 1 3222 2 discriminator 2 view .LVU1286
 4559 001a 41F00041 		orr	r1, r1, #-2147483648
 4560              	.LVL323:
3222:System/FreeRTOS/tasks.c **** 
 4561              		.loc 1 3222 2 is_stmt 0 discriminator 2 view .LVU1287
 4562 001e 0160     		str	r1, [r0]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 198


3226:System/FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4563              		.loc 1 3226 2 is_stmt 1 discriminator 2 view .LVU1288
3226:System/FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4564              		.loc 1 3226 17 is_stmt 0 discriminator 2 view .LVU1289
 4565 0020 C468     		ldr	r4, [r0, #12]
 4566              	.LVL324:
3227:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4567              		.loc 1 3227 2 is_stmt 1 discriminator 2 view .LVU1290
 4568 0022 F4B1     		cbz	r4, .L354
3227:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4569              		.loc 1 3227 32 discriminator 2 view .LVU1291
3228:System/FreeRTOS/tasks.c **** 
 4570              		.loc 1 3228 2 discriminator 2 view .LVU1292
3228:System/FreeRTOS/tasks.c **** 
 4571              		.loc 1 3228 11 is_stmt 0 discriminator 2 view .LVU1293
 4572 0024 FFF7FEFF 		bl	uxListRemove
 4573              	.LVL325:
3247:System/FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4574              		.loc 1 3247 2 is_stmt 1 discriminator 2 view .LVU1294
3247:System/FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4575              		.loc 1 3247 11 is_stmt 0 discriminator 2 view .LVU1295
 4576 0028 251D     		adds	r5, r4, #4
 4577 002a 2846     		mov	r0, r5
 4578 002c FFF7FEFF 		bl	uxListRemove
 4579              	.LVL326:
3248:System/FreeRTOS/tasks.c **** 
 4580              		.loc 1 3248 2 is_stmt 1 discriminator 2 view .LVU1296
3248:System/FreeRTOS/tasks.c **** 
 4581              		.loc 1 3248 2 discriminator 2 view .LVU1297
 4582 0030 E06A     		ldr	r0, [r4, #44]
 4583 0032 0123     		movs	r3, #1
 4584 0034 8340     		lsls	r3, r3, r0
 4585 0036 104A     		ldr	r2, .L355+4
 4586 0038 1168     		ldr	r1, [r2]
 4587 003a 0B43     		orrs	r3, r3, r1
 4588 003c 1360     		str	r3, [r2]
3248:System/FreeRTOS/tasks.c **** 
 4589              		.loc 1 3248 2 discriminator 2 view .LVU1298
 4590 003e 00EB8000 		add	r0, r0, r0, lsl #2
 4591 0042 2946     		mov	r1, r5
 4592 0044 0D4B     		ldr	r3, .L355+8
 4593 0046 03EB8000 		add	r0, r3, r0, lsl #2
 4594 004a FFF7FEFF 		bl	vListInsertEnd
 4595              	.LVL327:
3248:System/FreeRTOS/tasks.c **** 
 4596              		.loc 1 3248 41 discriminator 2 view .LVU1299
3250:System/FreeRTOS/tasks.c **** 	{
 4597              		.loc 1 3250 2 discriminator 2 view .LVU1300
3250:System/FreeRTOS/tasks.c **** 	{
 4598              		.loc 1 3250 20 is_stmt 0 discriminator 2 view .LVU1301
 4599 004e E26A     		ldr	r2, [r4, #44]
3250:System/FreeRTOS/tasks.c **** 	{
 4600              		.loc 1 3250 47 discriminator 2 view .LVU1302
 4601 0050 0B4B     		ldr	r3, .L355+12
 4602 0052 1B68     		ldr	r3, [r3]
 4603 0054 DB6A     		ldr	r3, [r3, #44]
3250:System/FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 199


 4604              		.loc 1 3250 4 discriminator 2 view .LVU1303
 4605 0056 9A42     		cmp	r2, r3
 4606 0058 02D9     		bls	.L347
3256:System/FreeRTOS/tasks.c **** 	}
 4607              		.loc 1 3256 3 is_stmt 1 view .LVU1304
3256:System/FreeRTOS/tasks.c **** 	}
 4608              		.loc 1 3256 17 is_stmt 0 view .LVU1305
 4609 005a 0A4B     		ldr	r3, .L355+16
 4610 005c 0122     		movs	r2, #1
 4611 005e 1A60     		str	r2, [r3]
 4612              	.L347:
3258:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4613              		.loc 1 3258 1 view .LVU1306
 4614 0060 38BD     		pop	{r3, r4, r5, pc}
 4615              	.LVL328:
 4616              	.L354:
3227:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4617              		.loc 1 3227 2 is_stmt 1 view .LVU1307
 4618              	.LBB207:
 4619              	.LBI207:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 4620              		.loc 2 191 30 view .LVU1308
 4621              	.LBB208:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4622              		.loc 2 193 1 view .LVU1309
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4623              		.loc 2 195 2 view .LVU1310
 4624              		.syntax unified
 4625              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4626 0062 4FF05003 			mov r3, #80												
 4627 0066 83F31188 		msr basepri, r3											
 4628 006a BFF36F8F 		isb														
 4629 006e BFF34F8F 		dsb														
 4630              	
 4631              	@ 0 "" 2
 4632              	.LVL329:
 4633              		.thumb
 4634              		.syntax unified
 4635              	.L351:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4636              		.loc 2 195 2 is_stmt 0 view .LVU1311
 4637              	.LBE208:
 4638              	.LBE207:
3227:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4639              		.loc 1 3227 2 is_stmt 1 discriminator 2 view .LVU1312
3227:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4640              		.loc 1 3227 2 discriminator 2 view .LVU1313
3227:System/FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4641              		.loc 1 3227 2 discriminator 2 view .LVU1314
 4642 0072 FEE7     		b	.L351
 4643              	.L356:
 4644              		.align	2
 4645              	.L355:
 4646 0074 00000000 		.word	.LANCHOR16
 4647 0078 00000000 		.word	.LANCHOR13
 4648 007c 00000000 		.word	.LANCHOR4
 4649 0080 00000000 		.word	.LANCHOR10
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 200


 4650 0084 00000000 		.word	.LANCHOR19
 4651              		.cfi_endproc
 4652              	.LFE35:
 4654              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4655              		.align	1
 4656              		.global	vTaskSetTimeOutState
 4657              		.syntax unified
 4658              		.thumb
 4659              		.thumb_func
 4661              	vTaskSetTimeOutState:
 4662              	.LVL330:
 4663              	.LFB36:
3262:System/FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 4664              		.loc 1 3262 1 view -0
 4665              		.cfi_startproc
 4666              		@ args = 0, pretend = 0, frame = 0
 4667              		@ frame_needed = 0, uses_anonymous_args = 0
3263:System/FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 4668              		.loc 1 3263 2 view .LVU1316
 4669 0000 60B1     		cbz	r0, .L362
3262:System/FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 4670              		.loc 1 3262 1 is_stmt 0 discriminator 2 view .LVU1317
 4671 0002 10B5     		push	{r4, lr}
 4672              	.LCFI40:
 4673              		.cfi_def_cfa_offset 8
 4674              		.cfi_offset 4, -8
 4675              		.cfi_offset 14, -4
 4676 0004 0446     		mov	r4, r0
3263:System/FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 4677              		.loc 1 3263 27 is_stmt 1 discriminator 2 view .LVU1318
3264:System/FreeRTOS/tasks.c **** 	{
 4678              		.loc 1 3264 2 discriminator 2 view .LVU1319
 4679 0006 FFF7FEFF 		bl	vPortEnterCritical
 4680              	.LVL331:
3266:System/FreeRTOS/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4681              		.loc 1 3266 3 discriminator 2 view .LVU1320
3266:System/FreeRTOS/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4682              		.loc 1 3266 29 is_stmt 0 discriminator 2 view .LVU1321
 4683 000a 094B     		ldr	r3, .L363
 4684 000c 1B68     		ldr	r3, [r3]
 4685 000e 2360     		str	r3, [r4]
3267:System/FreeRTOS/tasks.c **** 	}
 4686              		.loc 1 3267 3 is_stmt 1 discriminator 2 view .LVU1322
3267:System/FreeRTOS/tasks.c **** 	}
 4687              		.loc 1 3267 30 is_stmt 0 discriminator 2 view .LVU1323
 4688 0010 084B     		ldr	r3, .L363+4
 4689 0012 1B68     		ldr	r3, [r3]
 4690 0014 6360     		str	r3, [r4, #4]
3269:System/FreeRTOS/tasks.c **** }
 4691              		.loc 1 3269 2 is_stmt 1 discriminator 2 view .LVU1324
 4692 0016 FFF7FEFF 		bl	vPortExitCritical
 4693              	.LVL332:
3270:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4694              		.loc 1 3270 1 is_stmt 0 discriminator 2 view .LVU1325
 4695 001a 10BD     		pop	{r4, pc}
 4696              	.LVL333:
 4697              	.L362:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 201


 4698              	.LCFI41:
 4699              		.cfi_def_cfa_offset 0
 4700              		.cfi_restore 4
 4701              		.cfi_restore 14
3263:System/FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 4702              		.loc 1 3263 2 is_stmt 1 view .LVU1326
 4703              	.LBB209:
 4704              	.LBI209:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 4705              		.loc 2 191 30 view .LVU1327
 4706              	.LBB210:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4707              		.loc 2 193 1 view .LVU1328
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4708              		.loc 2 195 2 view .LVU1329
 4709              		.syntax unified
 4710              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4711 001c 4FF05003 			mov r3, #80												
 4712 0020 83F31188 		msr basepri, r3											
 4713 0024 BFF36F8F 		isb														
 4714 0028 BFF34F8F 		dsb														
 4715              	
 4716              	@ 0 "" 2
 4717              	.LVL334:
 4718              		.thumb
 4719              		.syntax unified
 4720              	.L359:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4721              		.loc 2 195 2 is_stmt 0 view .LVU1330
 4722              	.LBE210:
 4723              	.LBE209:
3263:System/FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 4724              		.loc 1 3263 2 is_stmt 1 discriminator 1 view .LVU1331
3263:System/FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 4725              		.loc 1 3263 2 discriminator 1 view .LVU1332
3263:System/FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 4726              		.loc 1 3263 2 discriminator 1 view .LVU1333
 4727 002c FEE7     		b	.L359
 4728              	.L364:
 4729 002e 00BF     		.align	2
 4730              	.L363:
 4731 0030 00000000 		.word	.LANCHOR18
 4732 0034 00000000 		.word	.LANCHOR15
 4733              		.cfi_endproc
 4734              	.LFE36:
 4736              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4737              		.align	1
 4738              		.global	vTaskInternalSetTimeOutState
 4739              		.syntax unified
 4740              		.thumb
 4741              		.thumb_func
 4743              	vTaskInternalSetTimeOutState:
 4744              	.LVL335:
 4745              	.LFB37:
3274:System/FreeRTOS/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 4746              		.loc 1 3274 1 view -0
 4747              		.cfi_startproc
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 202


 4748              		@ args = 0, pretend = 0, frame = 0
 4749              		@ frame_needed = 0, uses_anonymous_args = 0
 4750              		@ link register save eliminated.
3276:System/FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4751              		.loc 1 3276 2 view .LVU1335
3276:System/FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4752              		.loc 1 3276 28 is_stmt 0 view .LVU1336
 4753 0000 034B     		ldr	r3, .L366
 4754 0002 1B68     		ldr	r3, [r3]
 4755 0004 0360     		str	r3, [r0]
3277:System/FreeRTOS/tasks.c **** }
 4756              		.loc 1 3277 2 is_stmt 1 view .LVU1337
3277:System/FreeRTOS/tasks.c **** }
 4757              		.loc 1 3277 29 is_stmt 0 view .LVU1338
 4758 0006 034B     		ldr	r3, .L366+4
 4759 0008 1B68     		ldr	r3, [r3]
 4760 000a 4360     		str	r3, [r0, #4]
3278:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4761              		.loc 1 3278 1 view .LVU1339
 4762 000c 7047     		bx	lr
 4763              	.L367:
 4764 000e 00BF     		.align	2
 4765              	.L366:
 4766 0010 00000000 		.word	.LANCHOR18
 4767 0014 00000000 		.word	.LANCHOR15
 4768              		.cfi_endproc
 4769              	.LFE37:
 4771              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4772              		.align	1
 4773              		.global	xTaskCheckForTimeOut
 4774              		.syntax unified
 4775              		.thumb
 4776              		.thumb_func
 4778              	xTaskCheckForTimeOut:
 4779              	.LVL336:
 4780              	.LFB38:
3282:System/FreeRTOS/tasks.c **** BaseType_t xReturn;
 4781              		.loc 1 3282 1 is_stmt 1 view -0
 4782              		.cfi_startproc
 4783              		@ args = 0, pretend = 0, frame = 0
 4784              		@ frame_needed = 0, uses_anonymous_args = 0
3282:System/FreeRTOS/tasks.c **** BaseType_t xReturn;
 4785              		.loc 1 3282 1 is_stmt 0 view .LVU1341
 4786 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4787              	.LCFI42:
 4788              		.cfi_def_cfa_offset 24
 4789              		.cfi_offset 3, -24
 4790              		.cfi_offset 4, -20
 4791              		.cfi_offset 5, -16
 4792              		.cfi_offset 6, -12
 4793              		.cfi_offset 7, -8
 4794              		.cfi_offset 14, -4
3283:System/FreeRTOS/tasks.c **** 
 4795              		.loc 1 3283 1 is_stmt 1 view .LVU1342
3285:System/FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 4796              		.loc 1 3285 2 view .LVU1343
 4797 0002 C8B1     		cbz	r0, .L379
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 203


 4798 0004 0C46     		mov	r4, r1
 4799 0006 0546     		mov	r5, r0
3285:System/FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 4800              		.loc 1 3285 27 discriminator 2 view .LVU1344
3286:System/FreeRTOS/tasks.c **** 
 4801              		.loc 1 3286 2 discriminator 2 view .LVU1345
 4802 0008 F9B1     		cbz	r1, .L380
3286:System/FreeRTOS/tasks.c **** 
 4803              		.loc 1 3286 31 discriminator 2 view .LVU1346
3288:System/FreeRTOS/tasks.c **** 	{
 4804              		.loc 1 3288 2 discriminator 2 view .LVU1347
 4805 000a FFF7FEFF 		bl	vPortEnterCritical
 4806              	.LVL337:
 4807              	.LBB211:
3291:System/FreeRTOS/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4808              		.loc 1 3291 3 discriminator 2 view .LVU1348
3291:System/FreeRTOS/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4809              		.loc 1 3291 20 is_stmt 0 discriminator 2 view .LVU1349
 4810 000e 1B4B     		ldr	r3, .L382
 4811 0010 1968     		ldr	r1, [r3]
 4812              	.LVL338:
3292:System/FreeRTOS/tasks.c **** 
 4813              		.loc 1 3292 3 is_stmt 1 discriminator 2 view .LVU1350
3292:System/FreeRTOS/tasks.c **** 
 4814              		.loc 1 3292 62 is_stmt 0 discriminator 2 view .LVU1351
 4815 0012 6B68     		ldr	r3, [r5, #4]
3292:System/FreeRTOS/tasks.c **** 
 4816              		.loc 1 3292 20 discriminator 2 view .LVU1352
 4817 0014 C81A     		subs	r0, r1, r3
 4818              	.LVL339:
3306:System/FreeRTOS/tasks.c **** 			{
 4819              		.loc 1 3306 4 is_stmt 1 discriminator 2 view .LVU1353
3306:System/FreeRTOS/tasks.c **** 			{
 4820              		.loc 1 3306 8 is_stmt 0 discriminator 2 view .LVU1354
 4821 0016 2268     		ldr	r2, [r4]
3306:System/FreeRTOS/tasks.c **** 			{
 4822              		.loc 1 3306 6 discriminator 2 view .LVU1355
 4823 0018 B2F1FF3F 		cmp	r2, #-1
 4824 001c 26D0     		beq	.L376
3316:System/FreeRTOS/tasks.c **** 		{
 4825              		.loc 1 3316 3 is_stmt 1 view .LVU1356
3316:System/FreeRTOS/tasks.c **** 		{
 4826              		.loc 1 3316 25 is_stmt 0 view .LVU1357
 4827 001e 184E     		ldr	r6, .L382+4
 4828 0020 3668     		ldr	r6, [r6]
3316:System/FreeRTOS/tasks.c **** 		{
 4829              		.loc 1 3316 5 view .LVU1358
 4830 0022 2F68     		ldr	r7, [r5]
 4831 0024 B742     		cmp	r7, r6
 4832 0026 01D0     		beq	.L374
3316:System/FreeRTOS/tasks.c **** 		{
 4833              		.loc 1 3316 56 discriminator 1 view .LVU1359
 4834 0028 8B42     		cmp	r3, r1
 4835 002a 24D9     		bls	.L377
 4836              	.L374:
3325:System/FreeRTOS/tasks.c **** 		{
 4837              		.loc 1 3325 8 is_stmt 1 view .LVU1360
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 204


3325:System/FreeRTOS/tasks.c **** 		{
 4838              		.loc 1 3325 10 is_stmt 0 view .LVU1361
 4839 002c 8242     		cmp	r2, r0
 4840 002e 15D8     		bhi	.L381
3334:System/FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 4841              		.loc 1 3334 4 is_stmt 1 view .LVU1362
3334:System/FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 4842              		.loc 1 3334 19 is_stmt 0 view .LVU1363
 4843 0030 0023     		movs	r3, #0
 4844 0032 2360     		str	r3, [r4]
3335:System/FreeRTOS/tasks.c **** 		}
 4845              		.loc 1 3335 4 is_stmt 1 view .LVU1364
 4846              	.LVL340:
3335:System/FreeRTOS/tasks.c **** 		}
 4847              		.loc 1 3335 12 is_stmt 0 view .LVU1365
 4848 0034 0124     		movs	r4, #1
 4849              	.LVL341:
3335:System/FreeRTOS/tasks.c **** 		}
 4850              		.loc 1 3335 12 view .LVU1366
 4851 0036 1AE0     		b	.L373
 4852              	.LVL342:
 4853              	.L379:
3335:System/FreeRTOS/tasks.c **** 		}
 4854              		.loc 1 3335 12 view .LVU1367
 4855              	.LBE211:
3285:System/FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 4856              		.loc 1 3285 2 is_stmt 1 view .LVU1368
 4857              	.LBB212:
 4858              	.LBI212:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 4859              		.loc 2 191 30 view .LVU1369
 4860              	.LBB213:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4861              		.loc 2 193 1 view .LVU1370
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4862              		.loc 2 195 2 view .LVU1371
 4863              		.syntax unified
 4864              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4865 0038 4FF05003 			mov r3, #80												
 4866 003c 83F31188 		msr basepri, r3											
 4867 0040 BFF36F8F 		isb														
 4868 0044 BFF34F8F 		dsb														
 4869              	
 4870              	@ 0 "" 2
 4871              	.LVL343:
 4872              		.thumb
 4873              		.syntax unified
 4874              	.L370:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4875              		.loc 2 195 2 is_stmt 0 view .LVU1372
 4876              	.LBE213:
 4877              	.LBE212:
3285:System/FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 4878              		.loc 1 3285 2 is_stmt 1 discriminator 1 view .LVU1373
3285:System/FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 4879              		.loc 1 3285 2 discriminator 1 view .LVU1374
3285:System/FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 205


 4880              		.loc 1 3285 2 discriminator 1 view .LVU1375
 4881 0048 FEE7     		b	.L370
 4882              	.L380:
3286:System/FreeRTOS/tasks.c **** 
 4883              		.loc 1 3286 2 view .LVU1376
 4884              	.LBB214:
 4885              	.LBI214:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 4886              		.loc 2 191 30 view .LVU1377
 4887              	.LBB215:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4888              		.loc 2 193 1 view .LVU1378
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4889              		.loc 2 195 2 view .LVU1379
 4890              		.syntax unified
 4891              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4892 004a 4FF05003 			mov r3, #80												
 4893 004e 83F31188 		msr basepri, r3											
 4894 0052 BFF36F8F 		isb														
 4895 0056 BFF34F8F 		dsb														
 4896              	
 4897              	@ 0 "" 2
 4898              	.LVL344:
 4899              		.thumb
 4900              		.syntax unified
 4901              	.L372:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4902              		.loc 2 195 2 is_stmt 0 view .LVU1380
 4903              	.LBE215:
 4904              	.LBE214:
3286:System/FreeRTOS/tasks.c **** 
 4905              		.loc 1 3286 2 is_stmt 1 discriminator 2 view .LVU1381
3286:System/FreeRTOS/tasks.c **** 
 4906              		.loc 1 3286 2 discriminator 2 view .LVU1382
3286:System/FreeRTOS/tasks.c **** 
 4907              		.loc 1 3286 2 discriminator 2 view .LVU1383
 4908 005a FEE7     		b	.L372
 4909              	.LVL345:
 4910              	.L381:
 4911              	.LBB216:
3328:System/FreeRTOS/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4912              		.loc 1 3328 4 view .LVU1384
3328:System/FreeRTOS/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4913              		.loc 1 3328 19 is_stmt 0 view .LVU1385
 4914 005c 5B1A     		subs	r3, r3, r1
 4915 005e 1344     		add	r3, r3, r2
 4916 0060 2360     		str	r3, [r4]
3329:System/FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 4917              		.loc 1 3329 4 is_stmt 1 view .LVU1386
 4918 0062 2846     		mov	r0, r5
 4919              	.LVL346:
3329:System/FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 4920              		.loc 1 3329 4 is_stmt 0 view .LVU1387
 4921 0064 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4922              	.LVL347:
3330:System/FreeRTOS/tasks.c **** 		}
 4923              		.loc 1 3330 4 is_stmt 1 view .LVU1388
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 206


3330:System/FreeRTOS/tasks.c **** 		}
 4924              		.loc 1 3330 12 is_stmt 0 view .LVU1389
 4925 0068 0024     		movs	r4, #0
 4926              	.LVL348:
3330:System/FreeRTOS/tasks.c **** 		}
 4927              		.loc 1 3330 12 view .LVU1390
 4928 006a 00E0     		b	.L373
 4929              	.LVL349:
 4930              	.L376:
3311:System/FreeRTOS/tasks.c **** 			}
 4931              		.loc 1 3311 13 view .LVU1391
 4932 006c 0024     		movs	r4, #0
 4933              	.LVL350:
 4934              	.L373:
3311:System/FreeRTOS/tasks.c **** 			}
 4935              		.loc 1 3311 13 view .LVU1392
 4936              	.LBE216:
3338:System/FreeRTOS/tasks.c **** 
 4937              		.loc 1 3338 2 is_stmt 1 view .LVU1393
 4938 006e FFF7FEFF 		bl	vPortExitCritical
 4939              	.LVL351:
3340:System/FreeRTOS/tasks.c **** }
 4940              		.loc 1 3340 2 view .LVU1394
3341:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4941              		.loc 1 3341 1 is_stmt 0 view .LVU1395
 4942 0072 2046     		mov	r0, r4
 4943 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4944              	.LVL352:
 4945              	.L377:
 4946              	.LBB217:
3323:System/FreeRTOS/tasks.c **** 		}
 4947              		.loc 1 3323 12 view .LVU1396
 4948 0076 0124     		movs	r4, #1
 4949              	.LVL353:
3323:System/FreeRTOS/tasks.c **** 		}
 4950              		.loc 1 3323 12 view .LVU1397
 4951 0078 F9E7     		b	.L373
 4952              	.L383:
 4953 007a 00BF     		.align	2
 4954              	.L382:
 4955 007c 00000000 		.word	.LANCHOR15
 4956 0080 00000000 		.word	.LANCHOR18
 4957              	.LBE217:
 4958              		.cfi_endproc
 4959              	.LFE38:
 4961              		.section	.text.vTaskMissedYield,"ax",%progbits
 4962              		.align	1
 4963              		.global	vTaskMissedYield
 4964              		.syntax unified
 4965              		.thumb
 4966              		.thumb_func
 4968              	vTaskMissedYield:
 4969              	.LFB39:
3345:System/FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
 4970              		.loc 1 3345 1 is_stmt 1 view -0
 4971              		.cfi_startproc
 4972              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 207


 4973              		@ frame_needed = 0, uses_anonymous_args = 0
 4974              		@ link register save eliminated.
3346:System/FreeRTOS/tasks.c **** }
 4975              		.loc 1 3346 2 view .LVU1399
3346:System/FreeRTOS/tasks.c **** }
 4976              		.loc 1 3346 16 is_stmt 0 view .LVU1400
 4977 0000 014B     		ldr	r3, .L385
 4978 0002 0122     		movs	r2, #1
 4979 0004 1A60     		str	r2, [r3]
3347:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4980              		.loc 1 3347 1 view .LVU1401
 4981 0006 7047     		bx	lr
 4982              	.L386:
 4983              		.align	2
 4984              	.L385:
 4985 0008 00000000 		.word	.LANCHOR19
 4986              		.cfi_endproc
 4987              	.LFE39:
 4989              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4990              		.align	1
 4991              		.global	uxTaskGetTaskNumber
 4992              		.syntax unified
 4993              		.thumb
 4994              		.thumb_func
 4996              	uxTaskGetTaskNumber:
 4997              	.LVL354:
 4998              	.LFB40:
3353:System/FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
 4999              		.loc 1 3353 2 is_stmt 1 view -0
 5000              		.cfi_startproc
 5001              		@ args = 0, pretend = 0, frame = 0
 5002              		@ frame_needed = 0, uses_anonymous_args = 0
 5003              		@ link register save eliminated.
3354:System/FreeRTOS/tasks.c **** 	TCB_t const *pxTCB;
 5004              		.loc 1 3354 2 view .LVU1403
3355:System/FreeRTOS/tasks.c **** 
 5005              		.loc 1 3355 2 view .LVU1404
3357:System/FreeRTOS/tasks.c **** 		{
 5006              		.loc 1 3357 3 view .LVU1405
3357:System/FreeRTOS/tasks.c **** 		{
 5007              		.loc 1 3357 5 is_stmt 0 view .LVU1406
 5008 0000 08B1     		cbz	r0, .L389
3359:System/FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 5009              		.loc 1 3359 4 is_stmt 1 view .LVU1407
 5010              	.LVL355:
3360:System/FreeRTOS/tasks.c **** 		}
 5011              		.loc 1 3360 4 view .LVU1408
3360:System/FreeRTOS/tasks.c **** 		}
 5012              		.loc 1 3360 13 is_stmt 0 view .LVU1409
 5013 0002 C06C     		ldr	r0, [r0, #76]
 5014              	.LVL356:
3360:System/FreeRTOS/tasks.c **** 		}
 5015              		.loc 1 3360 13 view .LVU1410
 5016 0004 7047     		bx	lr
 5017              	.LVL357:
 5018              	.L389:
3364:System/FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 208


 5019              		.loc 1 3364 13 view .LVU1411
 5020 0006 0020     		movs	r0, #0
 5021              	.LVL358:
3367:System/FreeRTOS/tasks.c **** 	}
 5022              		.loc 1 3367 3 is_stmt 1 view .LVU1412
3368:System/FreeRTOS/tasks.c **** 
 5023              		.loc 1 3368 2 is_stmt 0 view .LVU1413
 5024 0008 7047     		bx	lr
 5025              		.cfi_endproc
 5026              	.LFE40:
 5028              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5029              		.align	1
 5030              		.global	vTaskSetTaskNumber
 5031              		.syntax unified
 5032              		.thumb
 5033              		.thumb_func
 5035              	vTaskSetTaskNumber:
 5036              	.LVL359:
 5037              	.LFB41:
3376:System/FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 5038              		.loc 1 3376 2 is_stmt 1 view -0
 5039              		.cfi_startproc
 5040              		@ args = 0, pretend = 0, frame = 0
 5041              		@ frame_needed = 0, uses_anonymous_args = 0
 5042              		@ link register save eliminated.
3377:System/FreeRTOS/tasks.c **** 
 5043              		.loc 1 3377 2 view .LVU1415
3379:System/FreeRTOS/tasks.c **** 		{
 5044              		.loc 1 3379 3 view .LVU1416
3379:System/FreeRTOS/tasks.c **** 		{
 5045              		.loc 1 3379 5 is_stmt 0 view .LVU1417
 5046 0000 00B1     		cbz	r0, .L390
3381:System/FreeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5047              		.loc 1 3381 4 is_stmt 1 view .LVU1418
 5048              	.LVL360:
3382:System/FreeRTOS/tasks.c **** 		}
 5049              		.loc 1 3382 4 view .LVU1419
3382:System/FreeRTOS/tasks.c **** 		}
 5050              		.loc 1 3382 24 is_stmt 0 view .LVU1420
 5051 0002 C164     		str	r1, [r0, #76]
 5052              	.LVL361:
 5053              	.L390:
3384:System/FreeRTOS/tasks.c **** 
 5054              		.loc 1 3384 2 view .LVU1421
 5055 0004 7047     		bx	lr
 5056              		.cfi_endproc
 5057              	.LFE41:
 5059              		.section	.text.vTaskGetInfo,"ax",%progbits
 5060              		.align	1
 5061              		.global	vTaskGetInfo
 5062              		.syntax unified
 5063              		.thumb
 5064              		.thumb_func
 5066              	vTaskGetInfo:
 5067              	.LVL362:
 5068              	.LFB45:
3678:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 209


 5069              		.loc 1 3678 2 is_stmt 1 view -0
 5070              		.cfi_startproc
 5071              		@ args = 0, pretend = 0, frame = 0
 5072              		@ frame_needed = 0, uses_anonymous_args = 0
3678:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 5073              		.loc 1 3678 2 is_stmt 0 view .LVU1423
 5074 0000 70B5     		push	{r4, r5, r6, lr}
 5075              	.LCFI43:
 5076              		.cfi_def_cfa_offset 16
 5077              		.cfi_offset 4, -16
 5078              		.cfi_offset 5, -12
 5079              		.cfi_offset 6, -8
 5080              		.cfi_offset 14, -4
 5081 0002 0C46     		mov	r4, r1
 5082 0004 1646     		mov	r6, r2
3679:System/FreeRTOS/tasks.c **** 
 5083              		.loc 1 3679 2 is_stmt 1 view .LVU1424
3682:System/FreeRTOS/tasks.c **** 
 5084              		.loc 1 3682 3 view .LVU1425
3682:System/FreeRTOS/tasks.c **** 
 5085              		.loc 1 3682 11 is_stmt 0 view .LVU1426
 5086 0006 0546     		mov	r5, r0
 5087 0008 D0B1     		cbz	r0, .L401
 5088              	.LVL363:
 5089              	.L393:
3684:System/FreeRTOS/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5090              		.loc 1 3684 3 is_stmt 1 discriminator 4 view .LVU1427
3684:System/FreeRTOS/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5091              		.loc 1 3684 25 is_stmt 0 discriminator 4 view .LVU1428
 5092 000a 2560     		str	r5, [r4]
3685:System/FreeRTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5093              		.loc 1 3685 3 is_stmt 1 discriminator 4 view .LVU1429
3685:System/FreeRTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5094              		.loc 1 3685 47 is_stmt 0 discriminator 4 view .LVU1430
 5095 000c 05F13402 		add	r2, r5, #52
3685:System/FreeRTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5096              		.loc 1 3685 28 discriminator 4 view .LVU1431
 5097 0010 6260     		str	r2, [r4, #4]
3686:System/FreeRTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5098              		.loc 1 3686 3 is_stmt 1 discriminator 4 view .LVU1432
3686:System/FreeRTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5099              		.loc 1 3686 42 is_stmt 0 discriminator 4 view .LVU1433
 5100 0012 EA6A     		ldr	r2, [r5, #44]
3686:System/FreeRTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5101              		.loc 1 3686 35 discriminator 4 view .LVU1434
 5102 0014 2261     		str	r2, [r4, #16]
3687:System/FreeRTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5103              		.loc 1 3687 3 is_stmt 1 discriminator 4 view .LVU1435
3687:System/FreeRTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5104              		.loc 1 3687 36 is_stmt 0 discriminator 4 view .LVU1436
 5105 0016 2A6B     		ldr	r2, [r5, #48]
3687:System/FreeRTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5106              		.loc 1 3687 29 discriminator 4 view .LVU1437
 5107 0018 E261     		str	r2, [r4, #28]
3688:System/FreeRTOS/tasks.c **** 
 5108              		.loc 1 3688 3 is_stmt 1 discriminator 4 view .LVU1438
3688:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 210


 5109              		.loc 1 3688 36 is_stmt 0 discriminator 4 view .LVU1439
 5110 001a AA6C     		ldr	r2, [r5, #72]
3688:System/FreeRTOS/tasks.c **** 
 5111              		.loc 1 3688 29 discriminator 4 view .LVU1440
 5112 001c A260     		str	r2, [r4, #8]
3692:System/FreeRTOS/tasks.c **** 		}
 5113              		.loc 1 3692 4 is_stmt 1 discriminator 4 view .LVU1441
3692:System/FreeRTOS/tasks.c **** 		}
 5114              		.loc 1 3692 40 is_stmt 0 discriminator 4 view .LVU1442
 5115 001e 2A6D     		ldr	r2, [r5, #80]
3692:System/FreeRTOS/tasks.c **** 		}
 5116              		.loc 1 3692 33 discriminator 4 view .LVU1443
 5117 0020 6261     		str	r2, [r4, #20]
3706:System/FreeRTOS/tasks.c **** 		}
 5118              		.loc 1 3706 4 is_stmt 1 discriminator 4 view .LVU1444
3706:System/FreeRTOS/tasks.c **** 		}
 5119              		.loc 1 3706 35 is_stmt 0 discriminator 4 view .LVU1445
 5120 0022 0022     		movs	r2, #0
 5121 0024 A261     		str	r2, [r4, #24]
3713:System/FreeRTOS/tasks.c **** 		{
 5122              		.loc 1 3713 3 is_stmt 1 discriminator 4 view .LVU1446
3713:System/FreeRTOS/tasks.c **** 		{
 5123              		.loc 1 3713 5 is_stmt 0 discriminator 4 view .LVU1447
 5124 0026 052B     		cmp	r3, #5
 5125 0028 19D0     		beq	.L394
3715:System/FreeRTOS/tasks.c **** 			{
 5126              		.loc 1 3715 4 is_stmt 1 view .LVU1448
3715:System/FreeRTOS/tasks.c **** 			{
 5127              		.loc 1 3715 14 is_stmt 0 view .LVU1449
 5128 002a 124A     		ldr	r2, .L405
 5129 002c 1268     		ldr	r2, [r2]
3715:System/FreeRTOS/tasks.c **** 			{
 5130              		.loc 1 3715 6 view .LVU1450
 5131 002e AA42     		cmp	r2, r5
 5132 0030 09D0     		beq	.L402
3721:System/FreeRTOS/tasks.c **** 
 5133              		.loc 1 3721 5 is_stmt 1 view .LVU1451
3721:System/FreeRTOS/tasks.c **** 
 5134              		.loc 1 3721 33 is_stmt 0 view .LVU1452
 5135 0032 2373     		strb	r3, [r4, #12]
3728:System/FreeRTOS/tasks.c **** 					{
 5136              		.loc 1 3728 6 is_stmt 1 view .LVU1453
3728:System/FreeRTOS/tasks.c **** 					{
 5137              		.loc 1 3728 8 is_stmt 0 view .LVU1454
 5138 0034 032B     		cmp	r3, #3
 5139 0036 09D0     		beq	.L403
 5140              	.LVL364:
 5141              	.L396:
3750:System/FreeRTOS/tasks.c **** 		{
 5142              		.loc 1 3750 3 is_stmt 1 view .LVU1455
3750:System/FreeRTOS/tasks.c **** 		{
 5143              		.loc 1 3750 5 is_stmt 0 view .LVU1456
 5144 0038 B6B9     		cbnz	r6, .L404
3764:System/FreeRTOS/tasks.c **** 		}
 5145              		.loc 1 3764 4 is_stmt 1 view .LVU1457
3764:System/FreeRTOS/tasks.c **** 		}
 5146              		.loc 1 3764 39 is_stmt 0 view .LVU1458
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 211


 5147 003a 0023     		movs	r3, #0
 5148 003c 2384     		strh	r3, [r4, #32]	@ movhi
 5149              	.L392:
3766:System/FreeRTOS/tasks.c **** 
 5150              		.loc 1 3766 2 view .LVU1459
 5151 003e 70BD     		pop	{r4, r5, r6, pc}
 5152              	.LVL365:
 5153              	.L401:
3682:System/FreeRTOS/tasks.c **** 
 5154              		.loc 1 3682 11 discriminator 1 view .LVU1460
 5155 0040 0C4A     		ldr	r2, .L405
 5156              	.LVL366:
3682:System/FreeRTOS/tasks.c **** 
 5157              		.loc 1 3682 11 discriminator 1 view .LVU1461
 5158 0042 1568     		ldr	r5, [r2]
 5159              	.LVL367:
3682:System/FreeRTOS/tasks.c **** 
 5160              		.loc 1 3682 11 discriminator 1 view .LVU1462
 5161 0044 E1E7     		b	.L393
 5162              	.LVL368:
 5163              	.L402:
3717:System/FreeRTOS/tasks.c **** 			}
 5164              		.loc 1 3717 5 is_stmt 1 view .LVU1463
3717:System/FreeRTOS/tasks.c **** 			}
 5165              		.loc 1 3717 33 is_stmt 0 view .LVU1464
 5166 0046 0023     		movs	r3, #0
 5167              	.LVL369:
3717:System/FreeRTOS/tasks.c **** 			}
 5168              		.loc 1 3717 33 view .LVU1465
 5169 0048 2373     		strb	r3, [r4, #12]
 5170 004a F5E7     		b	.L396
 5171              	.LVL370:
 5172              	.L403:
3730:System/FreeRTOS/tasks.c **** 						{
 5173              		.loc 1 3730 7 is_stmt 1 view .LVU1466
 5174 004c FFF7FEFF 		bl	vTaskSuspendAll
 5175              	.LVL371:
3732:System/FreeRTOS/tasks.c **** 							{
 5176              		.loc 1 3732 8 view .LVU1467
3732:System/FreeRTOS/tasks.c **** 							{
 5177              		.loc 1 3732 12 is_stmt 0 view .LVU1468
 5178 0050 AB6A     		ldr	r3, [r5, #40]
3732:System/FreeRTOS/tasks.c **** 							{
 5179              		.loc 1 3732 10 view .LVU1469
 5180 0052 0BB1     		cbz	r3, .L397
3734:System/FreeRTOS/tasks.c **** 							}
 5181              		.loc 1 3734 9 is_stmt 1 view .LVU1470
3734:System/FreeRTOS/tasks.c **** 							}
 5182              		.loc 1 3734 37 is_stmt 0 view .LVU1471
 5183 0054 0223     		movs	r3, #2
 5184 0056 2373     		strb	r3, [r4, #12]
 5185              	.L397:
3737:System/FreeRTOS/tasks.c **** 					}
 5186              		.loc 1 3737 7 is_stmt 1 view .LVU1472
3737:System/FreeRTOS/tasks.c **** 					}
 5187              		.loc 1 3737 16 is_stmt 0 view .LVU1473
 5188 0058 FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 212


 5189              	.LVL372:
 5190 005c ECE7     		b	.L396
 5191              	.LVL373:
 5192              	.L394:
3745:System/FreeRTOS/tasks.c **** 		}
 5193              		.loc 1 3745 4 is_stmt 1 view .LVU1474
3745:System/FreeRTOS/tasks.c **** 		}
 5194              		.loc 1 3745 34 is_stmt 0 view .LVU1475
 5195 005e 2846     		mov	r0, r5
 5196 0060 FFF7FEFF 		bl	eTaskGetState
 5197              	.LVL374:
3745:System/FreeRTOS/tasks.c **** 		}
 5198              		.loc 1 3745 32 view .LVU1476
 5199 0064 2073     		strb	r0, [r4, #12]
 5200 0066 E7E7     		b	.L396
 5201              	.L404:
3758:System/FreeRTOS/tasks.c **** 			}
 5202              		.loc 1 3758 5 is_stmt 1 view .LVU1477
3758:System/FreeRTOS/tasks.c **** 			}
 5203              		.loc 1 3758 42 is_stmt 0 view .LVU1478
 5204 0068 286B     		ldr	r0, [r5, #48]
 5205 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5206              	.LVL375:
3758:System/FreeRTOS/tasks.c **** 			}
 5207              		.loc 1 3758 40 view .LVU1479
 5208 006e 2084     		strh	r0, [r4, #32]	@ movhi
 5209 0070 E5E7     		b	.L392
 5210              	.L406:
 5211 0072 00BF     		.align	2
 5212              	.L405:
 5213 0074 00000000 		.word	.LANCHOR10
 5214              		.cfi_endproc
 5215              	.LFE45:
 5217              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5218              		.align	1
 5219              		.syntax unified
 5220              		.thumb
 5221              		.thumb_func
 5223              	prvListTasksWithinSingleList:
 5224              	.LVL376:
 5225              	.LFB46:
3774:System/FreeRTOS/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 5226              		.loc 1 3774 2 is_stmt 1 view -0
 5227              		.cfi_startproc
 5228              		@ args = 0, pretend = 0, frame = 0
 5229              		@ frame_needed = 0, uses_anonymous_args = 0
3774:System/FreeRTOS/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 5230              		.loc 1 3774 2 is_stmt 0 view .LVU1481
 5231 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5232              	.LCFI44:
 5233              		.cfi_def_cfa_offset 32
 5234              		.cfi_offset 4, -32
 5235              		.cfi_offset 5, -28
 5236              		.cfi_offset 6, -24
 5237              		.cfi_offset 7, -20
 5238              		.cfi_offset 8, -16
 5239              		.cfi_offset 9, -12
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 213


 5240              		.cfi_offset 10, -8
 5241              		.cfi_offset 14, -4
3775:System/FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0;
 5242              		.loc 1 3775 22 is_stmt 1 view .LVU1482
3776:System/FreeRTOS/tasks.c **** 
 5243              		.loc 1 3776 2 view .LVU1483
 5244              	.LVL377:
3778:System/FreeRTOS/tasks.c **** 		{
 5245              		.loc 1 3778 3 view .LVU1484
3778:System/FreeRTOS/tasks.c **** 		{
 5246              		.loc 1 3778 7 is_stmt 0 view .LVU1485
 5247 0004 0C68     		ldr	r4, [r1]
3778:System/FreeRTOS/tasks.c **** 		{
 5248              		.loc 1 3778 5 view .LVU1486
 5249 0006 3CB3     		cbz	r4, .L407
 5250 0008 0746     		mov	r7, r0
 5251 000a 0D46     		mov	r5, r1
 5252 000c 9046     		mov	r8, r2
 5253              	.LBB218:
3780:System/FreeRTOS/tasks.c **** 
 5254              		.loc 1 3780 4 is_stmt 1 view .LVU1487
 5255              	.LVL378:
3780:System/FreeRTOS/tasks.c **** 
 5256              		.loc 1 3780 4 view .LVU1488
 5257 000e 4B68     		ldr	r3, [r1, #4]
 5258 0010 5B68     		ldr	r3, [r3, #4]
 5259 0012 4B60     		str	r3, [r1, #4]
3780:System/FreeRTOS/tasks.c **** 
 5260              		.loc 1 3780 4 view .LVU1489
 5261 0014 01F10809 		add	r9, r1, #8
 5262 0018 4B45     		cmp	r3, r9
 5263 001a 04D0     		beq	.L413
 5264              	.L409:
3780:System/FreeRTOS/tasks.c **** 
 5265              		.loc 1 3780 4 discriminator 3 view .LVU1490
 5266 001c 6B68     		ldr	r3, [r5, #4]
 5267 001e D3F80CA0 		ldr	r10, [r3, #12]
 5268              	.LVL379:
3780:System/FreeRTOS/tasks.c **** 
 5269              		.loc 1 3780 4 is_stmt 0 discriminator 3 view .LVU1491
 5270              	.LBE218:
3776:System/FreeRTOS/tasks.c **** 
 5271              		.loc 1 3776 14 discriminator 3 view .LVU1492
 5272 0022 0024     		movs	r4, #0
 5273 0024 10E0     		b	.L411
 5274              	.LVL380:
 5275              	.L413:
 5276              	.LBB219:
3780:System/FreeRTOS/tasks.c **** 
 5277              		.loc 1 3780 4 is_stmt 1 discriminator 1 view .LVU1493
 5278 0026 5B68     		ldr	r3, [r3, #4]
 5279 0028 4B60     		str	r3, [r1, #4]
 5280 002a F7E7     		b	.L409
 5281              	.LVL381:
 5282              	.L410:
3780:System/FreeRTOS/tasks.c **** 
 5283              		.loc 1 3780 4 is_stmt 0 discriminator 1 view .LVU1494
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 214


 5284              	.LBE219:
 5285              	.LBB220:
3788:System/FreeRTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5286              		.loc 1 3788 5 is_stmt 1 discriminator 3 view .LVU1495
 5287 002c 6B68     		ldr	r3, [r5, #4]
 5288 002e DE68     		ldr	r6, [r3, #12]
 5289              	.LVL382:
3788:System/FreeRTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5290              		.loc 1 3788 5 is_stmt 0 discriminator 3 view .LVU1496
 5291              	.LBE220:
3788:System/FreeRTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5292              		.loc 1 3788 53 is_stmt 1 discriminator 3 view .LVU1497
3789:System/FreeRTOS/tasks.c **** 				uxTask++;
 5293              		.loc 1 3789 5 discriminator 3 view .LVU1498
3789:System/FreeRTOS/tasks.c **** 				uxTask++;
 5294              		.loc 1 3789 67 is_stmt 0 discriminator 3 view .LVU1499
 5295 0030 04EBC401 		add	r1, r4, r4, lsl #3
3789:System/FreeRTOS/tasks.c **** 				uxTask++;
 5296              		.loc 1 3789 5 discriminator 3 view .LVU1500
 5297 0034 4346     		mov	r3, r8
 5298 0036 0122     		movs	r2, #1
 5299 0038 07EB8101 		add	r1, r7, r1, lsl #2
 5300 003c 3046     		mov	r0, r6
 5301 003e FFF7FEFF 		bl	vTaskGetInfo
 5302              	.LVL383:
3790:System/FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5303              		.loc 1 3790 5 is_stmt 1 discriminator 3 view .LVU1501
3790:System/FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5304              		.loc 1 3790 11 is_stmt 0 discriminator 3 view .LVU1502
 5305 0042 0134     		adds	r4, r4, #1
 5306              	.LVL384:
3791:System/FreeRTOS/tasks.c **** 		}
 5307              		.loc 1 3791 11 is_stmt 1 discriminator 3 view .LVU1503
3791:System/FreeRTOS/tasks.c **** 		}
 5308              		.loc 1 3791 4 is_stmt 0 discriminator 3 view .LVU1504
 5309 0044 B245     		cmp	r10, r6
 5310 0046 07D0     		beq	.L407
 5311              	.LVL385:
 5312              	.L411:
3780:System/FreeRTOS/tasks.c **** 
 5313              		.loc 1 3780 53 is_stmt 1 discriminator 4 view .LVU1505
3786:System/FreeRTOS/tasks.c **** 			{
 5314              		.loc 1 3786 4 discriminator 4 view .LVU1506
 5315              	.LBB221:
3788:System/FreeRTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5316              		.loc 1 3788 5 discriminator 4 view .LVU1507
3788:System/FreeRTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5317              		.loc 1 3788 5 discriminator 4 view .LVU1508
 5318 0048 6B68     		ldr	r3, [r5, #4]
 5319 004a 5968     		ldr	r1, [r3, #4]
 5320 004c 6960     		str	r1, [r5, #4]
3788:System/FreeRTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5321              		.loc 1 3788 5 discriminator 4 view .LVU1509
 5322 004e 8945     		cmp	r9, r1
 5323 0050 ECD1     		bne	.L410
3788:System/FreeRTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5324              		.loc 1 3788 5 discriminator 1 view .LVU1510
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 215


 5325 0052 4B68     		ldr	r3, [r1, #4]
 5326 0054 6B60     		str	r3, [r5, #4]
 5327 0056 E9E7     		b	.L410
 5328              	.LVL386:
 5329              	.L407:
3788:System/FreeRTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5330              		.loc 1 3788 5 is_stmt 0 discriminator 1 view .LVU1511
 5331              	.LBE221:
3799:System/FreeRTOS/tasks.c **** 
 5332              		.loc 1 3799 2 view .LVU1512
 5333 0058 2046     		mov	r0, r4
 5334 005a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5335              		.cfi_endproc
 5336              	.LFE46:
 5338              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 5339              		.align	1
 5340              		.global	uxTaskGetSystemState
 5341              		.syntax unified
 5342              		.thumb
 5343              		.thumb_func
 5345              	uxTaskGetSystemState:
 5346              	.LVL387:
 5347              	.LFB28:
2513:System/FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 5348              		.loc 1 2513 2 is_stmt 1 view -0
 5349              		.cfi_startproc
 5350              		@ args = 0, pretend = 0, frame = 0
 5351              		@ frame_needed = 0, uses_anonymous_args = 0
2513:System/FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 5352              		.loc 1 2513 2 is_stmt 0 view .LVU1514
 5353 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5354              	.LCFI45:
 5355              		.cfi_def_cfa_offset 24
 5356              		.cfi_offset 3, -24
 5357              		.cfi_offset 4, -20
 5358              		.cfi_offset 5, -16
 5359              		.cfi_offset 6, -12
 5360              		.cfi_offset 7, -8
 5361              		.cfi_offset 14, -4
 5362 0002 0646     		mov	r6, r0
 5363 0004 0C46     		mov	r4, r1
 5364 0006 1746     		mov	r7, r2
2514:System/FreeRTOS/tasks.c **** 
 5365              		.loc 1 2514 2 is_stmt 1 view .LVU1515
 5366              	.LVL388:
2516:System/FreeRTOS/tasks.c **** 		{
 5367              		.loc 1 2516 3 view .LVU1516
 5368 0008 FFF7FEFF 		bl	vTaskSuspendAll
 5369              	.LVL389:
2519:System/FreeRTOS/tasks.c **** 			{
 5370              		.loc 1 2519 4 view .LVU1517
2519:System/FreeRTOS/tasks.c **** 			{
 5371              		.loc 1 2519 20 is_stmt 0 view .LVU1518
 5372 000c 224B     		ldr	r3, .L419
 5373 000e 1B68     		ldr	r3, [r3]
2519:System/FreeRTOS/tasks.c **** 			{
 5374              		.loc 1 2519 6 view .LVU1519
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 216


 5375 0010 A342     		cmp	r3, r4
 5376 0012 3BD8     		bhi	.L417
2514:System/FreeRTOS/tasks.c **** 
 5377              		.loc 1 2514 26 view .LVU1520
 5378 0014 0525     		movs	r5, #5
2514:System/FreeRTOS/tasks.c **** 
 5379              		.loc 1 2514 14 view .LVU1521
 5380 0016 0024     		movs	r4, #0
 5381              	.LVL390:
 5382              	.L416:
2523:System/FreeRTOS/tasks.c **** 				{
 5383              		.loc 1 2523 5 is_stmt 1 discriminator 1 view .LVU1522
2525:System/FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 5384              		.loc 1 2525 6 discriminator 1 view .LVU1523
2525:System/FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 5385              		.loc 1 2525 13 is_stmt 0 discriminator 1 view .LVU1524
 5386 0018 013D     		subs	r5, r5, #1
 5387              	.LVL391:
2526:System/FreeRTOS/tasks.c **** 
 5388              		.loc 1 2526 6 is_stmt 1 discriminator 1 view .LVU1525
2526:System/FreeRTOS/tasks.c **** 
 5389              		.loc 1 2526 66 is_stmt 0 discriminator 1 view .LVU1526
 5390 001a 04EBC400 		add	r0, r4, r4, lsl #3
2526:System/FreeRTOS/tasks.c **** 
 5391              		.loc 1 2526 16 discriminator 1 view .LVU1527
 5392 001e 05EB8501 		add	r1, r5, r5, lsl #2
 5393 0022 0122     		movs	r2, #1
 5394 0024 1D4B     		ldr	r3, .L419+4
 5395 0026 03EB8101 		add	r1, r3, r1, lsl #2
 5396 002a 06EB8000 		add	r0, r6, r0, lsl #2
 5397 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 5398              	.LVL392:
2526:System/FreeRTOS/tasks.c **** 
 5399              		.loc 1 2526 13 discriminator 1 view .LVU1528
 5400 0032 0444     		add	r4, r4, r0
 5401              	.LVL393:
2528:System/FreeRTOS/tasks.c **** 
 5402              		.loc 1 2528 12 is_stmt 1 discriminator 1 view .LVU1529
2528:System/FreeRTOS/tasks.c **** 
 5403              		.loc 1 2528 5 is_stmt 0 discriminator 1 view .LVU1530
 5404 0034 002D     		cmp	r5, #0
 5405 0036 EFD1     		bne	.L416
2532:System/FreeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 5406              		.loc 1 2532 5 is_stmt 1 view .LVU1531
2532:System/FreeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 5407              		.loc 1 2532 65 is_stmt 0 view .LVU1532
 5408 0038 04EBC400 		add	r0, r4, r4, lsl #3
2532:System/FreeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 5409              		.loc 1 2532 15 view .LVU1533
 5410 003c 184B     		ldr	r3, .L419+8
 5411 003e 1968     		ldr	r1, [r3]
 5412 0040 0222     		movs	r2, #2
 5413 0042 06EB8000 		add	r0, r6, r0, lsl #2
 5414 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 5415              	.LVL394:
2532:System/FreeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 5416              		.loc 1 2532 12 view .LVU1534
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 217


 5417 004a 0444     		add	r4, r4, r0
 5418              	.LVL395:
2533:System/FreeRTOS/tasks.c **** 
 5419              		.loc 1 2533 5 is_stmt 1 view .LVU1535
2533:System/FreeRTOS/tasks.c **** 
 5420              		.loc 1 2533 65 is_stmt 0 view .LVU1536
 5421 004c 04EBC400 		add	r0, r4, r4, lsl #3
2533:System/FreeRTOS/tasks.c **** 
 5422              		.loc 1 2533 15 view .LVU1537
 5423 0050 144B     		ldr	r3, .L419+12
 5424 0052 1968     		ldr	r1, [r3]
 5425 0054 0222     		movs	r2, #2
 5426 0056 06EB8000 		add	r0, r6, r0, lsl #2
 5427 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 5428              	.LVL396:
2533:System/FreeRTOS/tasks.c **** 
 5429              		.loc 1 2533 12 view .LVU1538
 5430 005e 0444     		add	r4, r4, r0
 5431              	.LVL397:
2539:System/FreeRTOS/tasks.c **** 				}
 5432              		.loc 1 2539 6 is_stmt 1 view .LVU1539
2539:System/FreeRTOS/tasks.c **** 				}
 5433              		.loc 1 2539 66 is_stmt 0 view .LVU1540
 5434 0060 04EBC400 		add	r0, r4, r4, lsl #3
2539:System/FreeRTOS/tasks.c **** 				}
 5435              		.loc 1 2539 16 view .LVU1541
 5436 0064 0422     		movs	r2, #4
 5437 0066 1049     		ldr	r1, .L419+16
 5438 0068 06EB8000 		add	r0, r6, r0, lsl #2
 5439 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 5440              	.LVL398:
2539:System/FreeRTOS/tasks.c **** 				}
 5441              		.loc 1 2539 13 view .LVU1542
 5442 0070 0444     		add	r4, r4, r0
 5443              	.LVL399:
2547:System/FreeRTOS/tasks.c **** 				}
 5444              		.loc 1 2547 6 is_stmt 1 view .LVU1543
2547:System/FreeRTOS/tasks.c **** 				}
 5445              		.loc 1 2547 66 is_stmt 0 view .LVU1544
 5446 0072 04EBC400 		add	r0, r4, r4, lsl #3
2547:System/FreeRTOS/tasks.c **** 				}
 5447              		.loc 1 2547 16 view .LVU1545
 5448 0076 0322     		movs	r2, #3
 5449 0078 0C49     		ldr	r1, .L419+20
 5450 007a 06EB8000 		add	r0, r6, r0, lsl #2
 5451 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 5452              	.LVL400:
2547:System/FreeRTOS/tasks.c **** 				}
 5453              		.loc 1 2547 13 view .LVU1546
 5454 0082 0444     		add	r4, r4, r0
 5455              	.LVL401:
2564:System/FreeRTOS/tasks.c **** 					{
 5456              		.loc 1 2564 6 is_stmt 1 view .LVU1547
2564:System/FreeRTOS/tasks.c **** 					{
 5457              		.loc 1 2564 8 is_stmt 0 view .LVU1548
 5458 0084 1FB1     		cbz	r7, .L415
2566:System/FreeRTOS/tasks.c **** 					}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 218


 5459              		.loc 1 2566 7 is_stmt 1 view .LVU1549
2566:System/FreeRTOS/tasks.c **** 					}
 5460              		.loc 1 2566 24 is_stmt 0 view .LVU1550
 5461 0086 0023     		movs	r3, #0
 5462 0088 3B60     		str	r3, [r7]
 5463 008a 00E0     		b	.L415
 5464              	.LVL402:
 5465              	.L417:
2514:System/FreeRTOS/tasks.c **** 
 5466              		.loc 1 2514 14 view .LVU1551
 5467 008c 0024     		movs	r4, #0
 5468              	.LVL403:
 5469              	.L415:
2573:System/FreeRTOS/tasks.c **** 			}
 5470              		.loc 1 2573 29 is_stmt 1 view .LVU1552
2576:System/FreeRTOS/tasks.c **** 
 5471              		.loc 1 2576 3 view .LVU1553
2576:System/FreeRTOS/tasks.c **** 
 5472              		.loc 1 2576 12 is_stmt 0 view .LVU1554
 5473 008e FFF7FEFF 		bl	xTaskResumeAll
 5474              	.LVL404:
2578:System/FreeRTOS/tasks.c **** 	}
 5475              		.loc 1 2578 3 is_stmt 1 view .LVU1555
2579:System/FreeRTOS/tasks.c **** 
 5476              		.loc 1 2579 2 is_stmt 0 view .LVU1556
 5477 0092 2046     		mov	r0, r4
 5478 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5479              	.LVL405:
 5480              	.L420:
2579:System/FreeRTOS/tasks.c **** 
 5481              		.loc 1 2579 2 view .LVU1557
 5482 0096 00BF     		.align	2
 5483              	.L419:
 5484 0098 00000000 		.word	.LANCHOR9
 5485 009c 00000000 		.word	.LANCHOR4
 5486 00a0 00000000 		.word	.LANCHOR2
 5487 00a4 00000000 		.word	.LANCHOR8
 5488 00a8 00000000 		.word	.LANCHOR7
 5489 00ac 00000000 		.word	.LANCHOR0
 5490              		.cfi_endproc
 5491              	.LFE28:
 5493              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5494              		.align	1
 5495              		.global	uxTaskGetStackHighWaterMark
 5496              		.syntax unified
 5497              		.thumb
 5498              		.thumb_func
 5500              	uxTaskGetStackHighWaterMark:
 5501              	.LVL406:
 5502              	.LFB48:
3867:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 5503              		.loc 1 3867 2 is_stmt 1 view -0
 5504              		.cfi_startproc
 5505              		@ args = 0, pretend = 0, frame = 0
 5506              		@ frame_needed = 0, uses_anonymous_args = 0
3867:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 5507              		.loc 1 3867 2 is_stmt 0 view .LVU1559
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 219


 5508 0000 08B5     		push	{r3, lr}
 5509              	.LCFI46:
 5510              		.cfi_def_cfa_offset 8
 5511              		.cfi_offset 3, -8
 5512              		.cfi_offset 14, -4
3868:System/FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
 5513              		.loc 1 3868 2 is_stmt 1 view .LVU1560
3869:System/FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
 5514              		.loc 1 3869 2 view .LVU1561
3870:System/FreeRTOS/tasks.c **** 
 5515              		.loc 1 3870 2 view .LVU1562
3872:System/FreeRTOS/tasks.c **** 
 5516              		.loc 1 3872 3 view .LVU1563
3872:System/FreeRTOS/tasks.c **** 
 5517              		.loc 1 3872 11 is_stmt 0 view .LVU1564
 5518 0002 0346     		mov	r3, r0
 5519 0004 18B1     		cbz	r0, .L424
 5520              	.LVL407:
 5521              	.L422:
3876:System/FreeRTOS/tasks.c **** 		}
 5522              		.loc 1 3876 4 is_stmt 1 discriminator 4 view .LVU1565
3884:System/FreeRTOS/tasks.c **** 
 5523              		.loc 1 3884 3 discriminator 4 view .LVU1566
3884:System/FreeRTOS/tasks.c **** 
 5524              		.loc 1 3884 30 is_stmt 0 discriminator 4 view .LVU1567
 5525 0006 186B     		ldr	r0, [r3, #48]
 5526 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5527              	.LVL408:
3886:System/FreeRTOS/tasks.c **** 	}
 5528              		.loc 1 3886 3 is_stmt 1 discriminator 4 view .LVU1568
3887:System/FreeRTOS/tasks.c **** 
 5529              		.loc 1 3887 2 is_stmt 0 discriminator 4 view .LVU1569
 5530 000c 08BD     		pop	{r3, pc}
 5531              	.LVL409:
 5532              	.L424:
3872:System/FreeRTOS/tasks.c **** 
 5533              		.loc 1 3872 11 discriminator 1 view .LVU1570
 5534 000e 014B     		ldr	r3, .L425
 5535 0010 1B68     		ldr	r3, [r3]
 5536              	.LVL410:
3872:System/FreeRTOS/tasks.c **** 
 5537              		.loc 1 3872 11 discriminator 1 view .LVU1571
 5538 0012 F8E7     		b	.L422
 5539              	.L426:
 5540              		.align	2
 5541              	.L425:
 5542 0014 00000000 		.word	.LANCHOR10
 5543              		.cfi_endproc
 5544              	.LFE48:
 5546              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5547              		.align	1
 5548              		.global	xTaskGetCurrentTaskHandle
 5549              		.syntax unified
 5550              		.thumb
 5551              		.thumb_func
 5553              	xTaskGetCurrentTaskHandle:
 5554              	.LFB51:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 220


3977:System/FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
 5555              		.loc 1 3977 2 is_stmt 1 view -0
 5556              		.cfi_startproc
 5557              		@ args = 0, pretend = 0, frame = 0
 5558              		@ frame_needed = 0, uses_anonymous_args = 0
 5559              		@ link register save eliminated.
3978:System/FreeRTOS/tasks.c **** 
 5560              		.loc 1 3978 2 view .LVU1573
3983:System/FreeRTOS/tasks.c **** 
 5561              		.loc 1 3983 3 view .LVU1574
3983:System/FreeRTOS/tasks.c **** 
 5562              		.loc 1 3983 11 is_stmt 0 view .LVU1575
 5563 0000 014B     		ldr	r3, .L428
 5564 0002 1868     		ldr	r0, [r3]
 5565              	.LVL411:
3985:System/FreeRTOS/tasks.c **** 	}
 5566              		.loc 1 3985 3 is_stmt 1 view .LVU1576
3986:System/FreeRTOS/tasks.c **** 
 5567              		.loc 1 3986 2 is_stmt 0 view .LVU1577
 5568 0004 7047     		bx	lr
 5569              	.L429:
 5570 0006 00BF     		.align	2
 5571              	.L428:
 5572 0008 00000000 		.word	.LANCHOR10
 5573              		.cfi_endproc
 5574              	.LFE51:
 5576              		.section	.text.xTaskGetCurrentTaskStack,"ax",%progbits
 5577              		.align	1
 5578              		.global	xTaskGetCurrentTaskStack
 5579              		.syntax unified
 5580              		.thumb
 5581              		.thumb_func
 5583              	xTaskGetCurrentTaskStack:
 5584              	.LVL412:
 5585              	.LFB52:
3989:System/FreeRTOS/tasks.c **** 		volatile TCB_t *pxTCB;
 5586              		.loc 1 3989 2 is_stmt 1 view -0
 5587              		.cfi_startproc
 5588              		@ args = 0, pretend = 0, frame = 0
 5589              		@ frame_needed = 0, uses_anonymous_args = 0
 5590              		@ link register save eliminated.
3990:System/FreeRTOS/tasks.c **** 
 5591              		.loc 1 3990 3 view .LVU1579
3994:System/FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 5592              		.loc 1 3994 3 view .LVU1580
3994:System/FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 5593              		.loc 1 3994 11 is_stmt 0 view .LVU1581
 5594 0000 0346     		mov	r3, r0
 5595 0002 10B1     		cbz	r0, .L434
 5596              	.LVL413:
 5597              	.L431:
3995:System/FreeRTOS/tasks.c **** 		return ( pxTCB->pxStack );
 5598              		.loc 1 3995 3 is_stmt 1 discriminator 4 view .LVU1582
 5599 0004 23B1     		cbz	r3, .L435
3995:System/FreeRTOS/tasks.c **** 		return ( pxTCB->pxStack );
 5600              		.loc 1 3995 24 discriminator 2 view .LVU1583
3996:System/FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 221


 5601              		.loc 1 3996 3 discriminator 2 view .LVU1584
3996:System/FreeRTOS/tasks.c **** 	}
 5602              		.loc 1 3996 17 is_stmt 0 discriminator 2 view .LVU1585
 5603 0006 186B     		ldr	r0, [r3, #48]
3997:System/FreeRTOS/tasks.c **** 
 5604              		.loc 1 3997 2 discriminator 2 view .LVU1586
 5605 0008 7047     		bx	lr
 5606              	.LVL414:
 5607              	.L434:
3994:System/FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 5608              		.loc 1 3994 11 discriminator 1 view .LVU1587
 5609 000a 064B     		ldr	r3, .L436
 5610 000c 1B68     		ldr	r3, [r3]
 5611              	.LVL415:
3994:System/FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 5612              		.loc 1 3994 11 discriminator 1 view .LVU1588
 5613 000e F9E7     		b	.L431
 5614              	.LVL416:
 5615              	.L435:
3995:System/FreeRTOS/tasks.c **** 		return ( pxTCB->pxStack );
 5616              		.loc 1 3995 3 is_stmt 1 view .LVU1589
 5617              	.LBB222:
 5618              	.LBI222:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 5619              		.loc 2 191 30 view .LVU1590
 5620              	.LBB223:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5621              		.loc 2 193 1 view .LVU1591
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5622              		.loc 2 195 2 view .LVU1592
 5623              		.syntax unified
 5624              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5625 0010 4FF05003 			mov r3, #80												
 5626 0014 83F31188 		msr basepri, r3											
 5627 0018 BFF36F8F 		isb														
 5628 001c BFF34F8F 		dsb														
 5629              	
 5630              	@ 0 "" 2
 5631              	.LVL417:
 5632              		.thumb
 5633              		.syntax unified
 5634              	.L433:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5635              		.loc 2 195 2 is_stmt 0 view .LVU1593
 5636              	.LBE223:
 5637              	.LBE222:
3995:System/FreeRTOS/tasks.c **** 		return ( pxTCB->pxStack );
 5638              		.loc 1 3995 3 is_stmt 1 discriminator 1 view .LVU1594
3995:System/FreeRTOS/tasks.c **** 		return ( pxTCB->pxStack );
 5639              		.loc 1 3995 3 discriminator 1 view .LVU1595
3995:System/FreeRTOS/tasks.c **** 		return ( pxTCB->pxStack );
 5640              		.loc 1 3995 3 discriminator 1 view .LVU1596
 5641 0020 FEE7     		b	.L433
 5642              	.L437:
 5643 0022 00BF     		.align	2
 5644              	.L436:
 5645 0024 00000000 		.word	.LANCHOR10
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 222


 5646              		.cfi_endproc
 5647              	.LFE52:
 5649              		.section	.text.xTaskGetCurrentTaskStackDeph,"ax",%progbits
 5650              		.align	1
 5651              		.global	xTaskGetCurrentTaskStackDeph
 5652              		.syntax unified
 5653              		.thumb
 5654              		.thumb_func
 5656              	xTaskGetCurrentTaskStackDeph:
 5657              	.LVL418:
 5658              	.LFB53:
4000:System/FreeRTOS/tasks.c **** 		volatile TCB_t *pxTCB;
 5659              		.loc 1 4000 2 view -0
 5660              		.cfi_startproc
 5661              		@ args = 0, pretend = 0, frame = 0
 5662              		@ frame_needed = 0, uses_anonymous_args = 0
 5663              		@ link register save eliminated.
4001:System/FreeRTOS/tasks.c **** 
 5664              		.loc 1 4001 3 view .LVU1598
4005:System/FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 5665              		.loc 1 4005 3 view .LVU1599
4005:System/FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 5666              		.loc 1 4005 11 is_stmt 0 view .LVU1600
 5667 0000 0346     		mov	r3, r0
 5668 0002 10B1     		cbz	r0, .L442
 5669              	.LVL419:
 5670              	.L439:
4006:System/FreeRTOS/tasks.c **** 		return ( pxTCB->uxSizeOfStack);
 5671              		.loc 1 4006 3 is_stmt 1 discriminator 4 view .LVU1601
 5672 0004 23B1     		cbz	r3, .L443
4006:System/FreeRTOS/tasks.c **** 		return ( pxTCB->uxSizeOfStack);
 5673              		.loc 1 4006 24 discriminator 2 view .LVU1602
4007:System/FreeRTOS/tasks.c **** 	}
 5674              		.loc 1 4007 3 discriminator 2 view .LVU1603
4007:System/FreeRTOS/tasks.c **** 	}
 5675              		.loc 1 4007 17 is_stmt 0 discriminator 2 view .LVU1604
 5676 0006 586C     		ldr	r0, [r3, #68]
4008:System/FreeRTOS/tasks.c **** 
 5677              		.loc 1 4008 2 discriminator 2 view .LVU1605
 5678 0008 7047     		bx	lr
 5679              	.LVL420:
 5680              	.L442:
4005:System/FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 5681              		.loc 1 4005 11 discriminator 1 view .LVU1606
 5682 000a 064B     		ldr	r3, .L444
 5683 000c 1B68     		ldr	r3, [r3]
 5684              	.LVL421:
4005:System/FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 5685              		.loc 1 4005 11 discriminator 1 view .LVU1607
 5686 000e F9E7     		b	.L439
 5687              	.LVL422:
 5688              	.L443:
4006:System/FreeRTOS/tasks.c **** 		return ( pxTCB->uxSizeOfStack);
 5689              		.loc 1 4006 3 is_stmt 1 view .LVU1608
 5690              	.LBB224:
 5691              	.LBI224:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 223


 5692              		.loc 2 191 30 view .LVU1609
 5693              	.LBB225:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5694              		.loc 2 193 1 view .LVU1610
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5695              		.loc 2 195 2 view .LVU1611
 5696              		.syntax unified
 5697              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5698 0010 4FF05003 			mov r3, #80												
 5699 0014 83F31188 		msr basepri, r3											
 5700 0018 BFF36F8F 		isb														
 5701 001c BFF34F8F 		dsb														
 5702              	
 5703              	@ 0 "" 2
 5704              	.LVL423:
 5705              		.thumb
 5706              		.syntax unified
 5707              	.L441:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5708              		.loc 2 195 2 is_stmt 0 view .LVU1612
 5709              	.LBE225:
 5710              	.LBE224:
4006:System/FreeRTOS/tasks.c **** 		return ( pxTCB->uxSizeOfStack);
 5711              		.loc 1 4006 3 is_stmt 1 discriminator 1 view .LVU1613
4006:System/FreeRTOS/tasks.c **** 		return ( pxTCB->uxSizeOfStack);
 5712              		.loc 1 4006 3 discriminator 1 view .LVU1614
4006:System/FreeRTOS/tasks.c **** 		return ( pxTCB->uxSizeOfStack);
 5713              		.loc 1 4006 3 discriminator 1 view .LVU1615
 5714 0020 FEE7     		b	.L441
 5715              	.L445:
 5716 0022 00BF     		.align	2
 5717              	.L444:
 5718 0024 00000000 		.word	.LANCHOR10
 5719              		.cfi_endproc
 5720              	.LFE53:
 5722              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5723              		.align	1
 5724              		.global	xTaskGetSchedulerState
 5725              		.syntax unified
 5726              		.thumb
 5727              		.thumb_func
 5729              	xTaskGetSchedulerState:
 5730              	.LFB54:
4016:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 5731              		.loc 1 4016 2 view -0
 5732              		.cfi_startproc
 5733              		@ args = 0, pretend = 0, frame = 0
 5734              		@ frame_needed = 0, uses_anonymous_args = 0
 5735              		@ link register save eliminated.
4017:System/FreeRTOS/tasks.c **** 
 5736              		.loc 1 4017 2 view .LVU1617
4019:System/FreeRTOS/tasks.c **** 		{
 5737              		.loc 1 4019 3 view .LVU1618
4019:System/FreeRTOS/tasks.c **** 		{
 5738              		.loc 1 4019 25 is_stmt 0 view .LVU1619
 5739 0000 054B     		ldr	r3, .L451
 5740 0002 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 224


4019:System/FreeRTOS/tasks.c **** 		{
 5741              		.loc 1 4019 5 view .LVU1620
 5742 0004 33B1     		cbz	r3, .L448
4025:System/FreeRTOS/tasks.c **** 			{
 5743              		.loc 1 4025 4 is_stmt 1 view .LVU1621
4025:System/FreeRTOS/tasks.c **** 			{
 5744              		.loc 1 4025 29 is_stmt 0 view .LVU1622
 5745 0006 054B     		ldr	r3, .L451+4
 5746 0008 1B68     		ldr	r3, [r3]
4025:System/FreeRTOS/tasks.c **** 			{
 5747              		.loc 1 4025 6 view .LVU1623
 5748 000a 0BB1     		cbz	r3, .L450
4031:System/FreeRTOS/tasks.c **** 			}
 5749              		.loc 1 4031 13 view .LVU1624
 5750 000c 0020     		movs	r0, #0
 5751              	.LVL424:
4035:System/FreeRTOS/tasks.c **** 	}
 5752              		.loc 1 4035 3 is_stmt 1 view .LVU1625
4036:System/FreeRTOS/tasks.c **** 
 5753              		.loc 1 4036 2 is_stmt 0 view .LVU1626
 5754 000e 7047     		bx	lr
 5755              	.LVL425:
 5756              	.L450:
4027:System/FreeRTOS/tasks.c **** 			}
 5757              		.loc 1 4027 13 view .LVU1627
 5758 0010 0220     		movs	r0, #2
 5759 0012 7047     		bx	lr
 5760              	.L448:
4021:System/FreeRTOS/tasks.c **** 		}
 5761              		.loc 1 4021 12 view .LVU1628
 5762 0014 0120     		movs	r0, #1
 5763 0016 7047     		bx	lr
 5764              	.L452:
 5765              		.align	2
 5766              	.L451:
 5767 0018 00000000 		.word	.LANCHOR11
 5768 001c 00000000 		.word	.LANCHOR16
 5769              		.cfi_endproc
 5770              	.LFE54:
 5772              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 5773              		.align	1
 5774              		.global	xTaskPriorityInherit
 5775              		.syntax unified
 5776              		.thumb
 5777              		.thumb_func
 5779              	xTaskPriorityInherit:
 5780              	.LVL426:
 5781              	.LFB55:
4044:System/FreeRTOS/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 5782              		.loc 1 4044 2 is_stmt 1 view -0
 5783              		.cfi_startproc
 5784              		@ args = 0, pretend = 0, frame = 0
 5785              		@ frame_needed = 0, uses_anonymous_args = 0
4045:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5786              		.loc 1 4045 2 view .LVU1630
4046:System/FreeRTOS/tasks.c **** 
 5787              		.loc 1 4046 2 view .LVU1631
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 225


4051:System/FreeRTOS/tasks.c **** 		{
 5788              		.loc 1 4051 3 view .LVU1632
4051:System/FreeRTOS/tasks.c **** 		{
 5789              		.loc 1 4051 5 is_stmt 0 view .LVU1633
 5790 0000 0028     		cmp	r0, #0
 5791 0002 49D0     		beq	.L459
4044:System/FreeRTOS/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 5792              		.loc 1 4044 2 view .LVU1634
 5793 0004 38B5     		push	{r3, r4, r5, lr}
 5794              	.LCFI47:
 5795              		.cfi_def_cfa_offset 16
 5796              		.cfi_offset 3, -16
 5797              		.cfi_offset 4, -12
 5798              		.cfi_offset 5, -8
 5799              		.cfi_offset 14, -4
 5800 0006 0446     		mov	r4, r0
4056:System/FreeRTOS/tasks.c **** 			{
 5801              		.loc 1 4056 4 is_stmt 1 view .LVU1635
4056:System/FreeRTOS/tasks.c **** 			{
 5802              		.loc 1 4056 24 is_stmt 0 view .LVU1636
 5803 0008 C36A     		ldr	r3, [r0, #44]
4056:System/FreeRTOS/tasks.c **** 			{
 5804              		.loc 1 4056 51 view .LVU1637
 5805 000a 254A     		ldr	r2, .L466
 5806 000c 1268     		ldr	r2, [r2]
 5807 000e D26A     		ldr	r2, [r2, #44]
4056:System/FreeRTOS/tasks.c **** 			{
 5808              		.loc 1 4056 6 view .LVU1638
 5809 0010 9342     		cmp	r3, r2
 5810 0012 39D2     		bcs	.L455
4061:System/FreeRTOS/tasks.c **** 				{
 5811              		.loc 1 4061 5 is_stmt 1 view .LVU1639
4061:System/FreeRTOS/tasks.c **** 				{
 5812              		.loc 1 4061 11 is_stmt 0 view .LVU1640
 5813 0014 8269     		ldr	r2, [r0, #24]
4061:System/FreeRTOS/tasks.c **** 				{
 5814              		.loc 1 4061 7 view .LVU1641
 5815 0016 002A     		cmp	r2, #0
 5816 0018 05DB     		blt	.L456
4063:System/FreeRTOS/tasks.c **** 				}
 5817              		.loc 1 4063 6 is_stmt 1 view .LVU1642
 5818 001a 214A     		ldr	r2, .L466
 5819 001c 1268     		ldr	r2, [r2]
 5820 001e D26A     		ldr	r2, [r2, #44]
 5821 0020 C2F10502 		rsb	r2, r2, #5
 5822 0024 8261     		str	r2, [r0, #24]
 5823              	.L456:
4067:System/FreeRTOS/tasks.c **** 				}
 5824              		.loc 1 4067 30 view .LVU1643
4072:System/FreeRTOS/tasks.c **** 				{
 5825              		.loc 1 4072 5 view .LVU1644
4072:System/FreeRTOS/tasks.c **** 				{
 5826              		.loc 1 4072 9 is_stmt 0 view .LVU1645
 5827 0026 6169     		ldr	r1, [r4, #20]
 5828 0028 03EB8303 		add	r3, r3, r3, lsl #2
 5829 002c 1D4A     		ldr	r2, .L466+4
 5830 002e 02EB8303 		add	r3, r2, r3, lsl #2
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 226


4072:System/FreeRTOS/tasks.c **** 				{
 5831              		.loc 1 4072 7 view .LVU1646
 5832 0032 9942     		cmp	r1, r3
 5833 0034 05D0     		beq	.L465
4093:System/FreeRTOS/tasks.c **** 				}
 5834              		.loc 1 4093 6 is_stmt 1 view .LVU1647
4093:System/FreeRTOS/tasks.c **** 				}
 5835              		.loc 1 4093 49 is_stmt 0 view .LVU1648
 5836 0036 1A4B     		ldr	r3, .L466
 5837 0038 1B68     		ldr	r3, [r3]
 5838 003a DB6A     		ldr	r3, [r3, #44]
4093:System/FreeRTOS/tasks.c **** 				}
 5839              		.loc 1 4093 35 view .LVU1649
 5840 003c E362     		str	r3, [r4, #44]
4099:System/FreeRTOS/tasks.c **** 			}
 5841              		.loc 1 4099 13 view .LVU1650
 5842 003e 0120     		movs	r0, #1
 5843              	.LVL427:
 5844              	.L453:
4126:System/FreeRTOS/tasks.c **** 
 5845              		.loc 1 4126 2 view .LVU1651
 5846 0040 38BD     		pop	{r3, r4, r5, pc}
 5847              	.LVL428:
 5848              	.L465:
4074:System/FreeRTOS/tasks.c **** 					{
 5849              		.loc 1 4074 6 is_stmt 1 view .LVU1652
4074:System/FreeRTOS/tasks.c **** 					{
 5850              		.loc 1 4074 10 is_stmt 0 view .LVU1653
 5851 0042 251D     		adds	r5, r4, #4
 5852 0044 2846     		mov	r0, r5
 5853              	.LVL429:
4074:System/FreeRTOS/tasks.c **** 					{
 5854              		.loc 1 4074 10 view .LVU1654
 5855 0046 FFF7FEFF 		bl	uxListRemove
 5856              	.LVL430:
4074:System/FreeRTOS/tasks.c **** 					{
 5857              		.loc 1 4074 8 view .LVU1655
 5858 004a 40B9     		cbnz	r0, .L458
4079:System/FreeRTOS/tasks.c **** 					}
 5859              		.loc 1 4079 7 is_stmt 1 view .LVU1656
 5860 004c E26A     		ldr	r2, [r4, #44]
 5861 004e 0123     		movs	r3, #1
 5862 0050 03FA02F2 		lsl	r2, r3, r2
 5863 0054 1449     		ldr	r1, .L466+8
 5864 0056 0B68     		ldr	r3, [r1]
 5865 0058 23EA0203 		bic	r3, r3, r2
 5866 005c 0B60     		str	r3, [r1]
 5867              	.L458:
4083:System/FreeRTOS/tasks.c **** 					}
 5868              		.loc 1 4083 31 view .LVU1657
4087:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 5869              		.loc 1 4087 6 view .LVU1658
4087:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 5870              		.loc 1 4087 49 is_stmt 0 view .LVU1659
 5871 005e 104B     		ldr	r3, .L466
 5872 0060 1B68     		ldr	r3, [r3]
 5873 0062 D86A     		ldr	r0, [r3, #44]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 227


4087:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 5874              		.loc 1 4087 35 view .LVU1660
 5875 0064 E062     		str	r0, [r4, #44]
4088:System/FreeRTOS/tasks.c **** 				}
 5876              		.loc 1 4088 6 is_stmt 1 view .LVU1661
4088:System/FreeRTOS/tasks.c **** 				}
 5877              		.loc 1 4088 6 view .LVU1662
 5878 0066 0124     		movs	r4, #1
 5879              	.LVL431:
4088:System/FreeRTOS/tasks.c **** 				}
 5880              		.loc 1 4088 6 is_stmt 0 view .LVU1663
 5881 0068 04FA00F3 		lsl	r3, r4, r0
 5882 006c 0E4A     		ldr	r2, .L466+8
 5883 006e 1168     		ldr	r1, [r2]
 5884 0070 0B43     		orrs	r3, r3, r1
 5885 0072 1360     		str	r3, [r2]
4088:System/FreeRTOS/tasks.c **** 				}
 5886              		.loc 1 4088 6 is_stmt 1 view .LVU1664
 5887 0074 00EB8000 		add	r0, r0, r0, lsl #2
 5888 0078 2946     		mov	r1, r5
 5889 007a 0A4B     		ldr	r3, .L466+4
 5890 007c 03EB8000 		add	r0, r3, r0, lsl #2
 5891 0080 FFF7FEFF 		bl	vListInsertEnd
 5892              	.LVL432:
4088:System/FreeRTOS/tasks.c **** 				}
 5893              		.loc 1 4088 47 view .LVU1665
4099:System/FreeRTOS/tasks.c **** 			}
 5894              		.loc 1 4099 13 is_stmt 0 view .LVU1666
 5895 0084 2046     		mov	r0, r4
 5896 0086 DBE7     		b	.L453
 5897              	.LVL433:
 5898              	.L455:
4103:System/FreeRTOS/tasks.c **** 				{
 5899              		.loc 1 4103 5 is_stmt 1 view .LVU1667
4103:System/FreeRTOS/tasks.c **** 				{
 5900              		.loc 1 4103 25 is_stmt 0 view .LVU1668
 5901 0088 026D     		ldr	r2, [r0, #80]
4103:System/FreeRTOS/tasks.c **** 				{
 5902              		.loc 1 4103 56 view .LVU1669
 5903 008a 054B     		ldr	r3, .L466
 5904 008c 1B68     		ldr	r3, [r3]
 5905 008e DB6A     		ldr	r3, [r3, #44]
4103:System/FreeRTOS/tasks.c **** 				{
 5906              		.loc 1 4103 7 view .LVU1670
 5907 0090 9A42     		cmp	r2, r3
 5908 0092 03D3     		bcc	.L460
4046:System/FreeRTOS/tasks.c **** 
 5909              		.loc 1 4046 13 view .LVU1671
 5910 0094 0020     		movs	r0, #0
 5911              	.LVL434:
4046:System/FreeRTOS/tasks.c **** 
 5912              		.loc 1 4046 13 view .LVU1672
 5913 0096 D3E7     		b	.L453
 5914              	.LVL435:
 5915              	.L459:
 5916              	.LCFI48:
 5917              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 228


 5918              		.cfi_restore 3
 5919              		.cfi_restore 4
 5920              		.cfi_restore 5
 5921              		.cfi_restore 14
4046:System/FreeRTOS/tasks.c **** 
 5922              		.loc 1 4046 13 view .LVU1673
 5923 0098 0020     		movs	r0, #0
 5924              	.LVL436:
4126:System/FreeRTOS/tasks.c **** 
 5925              		.loc 1 4126 2 view .LVU1674
 5926 009a 7047     		bx	lr
 5927              	.LVL437:
 5928              	.L460:
 5929              	.LCFI49:
 5930              		.cfi_def_cfa_offset 16
 5931              		.cfi_offset 3, -16
 5932              		.cfi_offset 4, -12
 5933              		.cfi_offset 5, -8
 5934              		.cfi_offset 14, -4
4112:System/FreeRTOS/tasks.c **** 				}
 5935              		.loc 1 4112 14 view .LVU1675
 5936 009c 0120     		movs	r0, #1
 5937              	.LVL438:
4122:System/FreeRTOS/tasks.c **** 		}
 5938              		.loc 1 4122 28 is_stmt 1 view .LVU1676
4125:System/FreeRTOS/tasks.c **** 	}
 5939              		.loc 1 4125 3 view .LVU1677
4125:System/FreeRTOS/tasks.c **** 	}
 5940              		.loc 1 4125 10 is_stmt 0 view .LVU1678
 5941 009e CFE7     		b	.L453
 5942              	.L467:
 5943              		.align	2
 5944              	.L466:
 5945 00a0 00000000 		.word	.LANCHOR10
 5946 00a4 00000000 		.word	.LANCHOR4
 5947 00a8 00000000 		.word	.LANCHOR13
 5948              		.cfi_endproc
 5949              	.LFE55:
 5951              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5952              		.align	1
 5953              		.global	xTaskPriorityDisinherit
 5954              		.syntax unified
 5955              		.thumb
 5956              		.thumb_func
 5958              	xTaskPriorityDisinherit:
 5959              	.LVL439:
 5960              	.LFB56:
4134:System/FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5961              		.loc 1 4134 2 is_stmt 1 view -0
 5962              		.cfi_startproc
 5963              		@ args = 0, pretend = 0, frame = 0
 5964              		@ frame_needed = 0, uses_anonymous_args = 0
4135:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5965              		.loc 1 4135 2 view .LVU1680
4136:System/FreeRTOS/tasks.c **** 
 5966              		.loc 1 4136 2 view .LVU1681
4138:System/FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 229


 5967              		.loc 1 4138 3 view .LVU1682
4138:System/FreeRTOS/tasks.c **** 		{
 5968              		.loc 1 4138 5 is_stmt 0 view .LVU1683
 5969 0000 0028     		cmp	r0, #0
 5970 0002 4CD0     		beq	.L475
4134:System/FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5971              		.loc 1 4134 2 view .LVU1684
 5972 0004 38B5     		push	{r3, r4, r5, lr}
 5973              	.LCFI50:
 5974              		.cfi_def_cfa_offset 16
 5975              		.cfi_offset 3, -16
 5976              		.cfi_offset 4, -12
 5977              		.cfi_offset 5, -8
 5978              		.cfi_offset 14, -4
 5979 0006 0446     		mov	r4, r0
4144:System/FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5980              		.loc 1 4144 4 is_stmt 1 view .LVU1685
 5981 0008 274B     		ldr	r3, .L483
 5982 000a 1B68     		ldr	r3, [r3]
 5983 000c 8342     		cmp	r3, r0
 5984 000e 08D0     		beq	.L470
4144:System/FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5985              		.loc 1 4144 4 view .LVU1686
 5986              	.LBB226:
 5987              	.LBI226:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 5988              		.loc 2 191 30 view .LVU1687
 5989              	.LBB227:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5990              		.loc 2 193 1 view .LVU1688
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5991              		.loc 2 195 2 view .LVU1689
 5992              		.syntax unified
 5993              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5994 0010 4FF05003 			mov r3, #80												
 5995 0014 83F31188 		msr basepri, r3											
 5996 0018 BFF36F8F 		isb														
 5997 001c BFF34F8F 		dsb														
 5998              	
 5999              	@ 0 "" 2
 6000              	.LVL440:
 6001              		.thumb
 6002              		.syntax unified
 6003              	.L471:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6004              		.loc 2 195 2 is_stmt 0 view .LVU1690
 6005              	.LBE227:
 6006              	.LBE226:
4144:System/FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6007              		.loc 1 4144 4 is_stmt 1 discriminator 1 view .LVU1691
4144:System/FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6008              		.loc 1 4144 4 discriminator 1 view .LVU1692
4144:System/FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6009              		.loc 1 4144 4 discriminator 1 view .LVU1693
 6010 0020 FEE7     		b	.L471
 6011              	.L470:
4144:System/FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 230


 6012              		.loc 1 4144 41 discriminator 2 view .LVU1694
4145:System/FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6013              		.loc 1 4145 4 discriminator 2 view .LVU1695
 6014 0022 436D     		ldr	r3, [r0, #84]
 6015 0024 43B9     		cbnz	r3, .L472
4145:System/FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6016              		.loc 1 4145 4 view .LVU1696
 6017              	.LBB228:
 6018              	.LBI228:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 6019              		.loc 2 191 30 view .LVU1697
 6020              	.LBB229:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6021              		.loc 2 193 1 view .LVU1698
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6022              		.loc 2 195 2 view .LVU1699
 6023              		.syntax unified
 6024              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6025 0026 4FF05003 			mov r3, #80												
 6026 002a 83F31188 		msr basepri, r3											
 6027 002e BFF36F8F 		isb														
 6028 0032 BFF34F8F 		dsb														
 6029              	
 6030              	@ 0 "" 2
 6031              	.LVL441:
 6032              		.thumb
 6033              		.syntax unified
 6034              	.L473:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6035              		.loc 2 195 2 is_stmt 0 view .LVU1700
 6036              	.LBE229:
 6037              	.LBE228:
4145:System/FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6038              		.loc 1 4145 4 is_stmt 1 discriminator 2 view .LVU1701
4145:System/FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6039              		.loc 1 4145 4 discriminator 2 view .LVU1702
4145:System/FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6040              		.loc 1 4145 4 discriminator 2 view .LVU1703
 6041 0036 FEE7     		b	.L473
 6042              	.L472:
4145:System/FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6043              		.loc 1 4145 40 discriminator 2 view .LVU1704
4146:System/FreeRTOS/tasks.c **** 
 6044              		.loc 1 4146 4 discriminator 2 view .LVU1705
4146:System/FreeRTOS/tasks.c **** 
 6045              		.loc 1 4146 28 is_stmt 0 discriminator 2 view .LVU1706
 6046 0038 013B     		subs	r3, r3, #1
 6047 003a 4365     		str	r3, [r0, #84]
4150:System/FreeRTOS/tasks.c **** 			{
 6048              		.loc 1 4150 4 is_stmt 1 discriminator 2 view .LVU1707
4150:System/FreeRTOS/tasks.c **** 			{
 6049              		.loc 1 4150 13 is_stmt 0 discriminator 2 view .LVU1708
 6050 003c C16A     		ldr	r1, [r0, #44]
4150:System/FreeRTOS/tasks.c **** 			{
 6051              		.loc 1 4150 34 discriminator 2 view .LVU1709
 6052 003e 026D     		ldr	r2, [r0, #80]
4150:System/FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 231


 6053              		.loc 1 4150 6 discriminator 2 view .LVU1710
 6054 0040 9142     		cmp	r1, r2
 6055 0042 2ED0     		beq	.L476
4153:System/FreeRTOS/tasks.c **** 				{
 6056              		.loc 1 4153 5 is_stmt 1 view .LVU1711
4153:System/FreeRTOS/tasks.c **** 				{
 6057              		.loc 1 4153 7 is_stmt 0 view .LVU1712
 6058 0044 0BB1     		cbz	r3, .L482
4136:System/FreeRTOS/tasks.c **** 
 6059              		.loc 1 4136 13 view .LVU1713
 6060 0046 0020     		movs	r0, #0
 6061              	.LVL442:
4202:System/FreeRTOS/tasks.c **** 		}
 6062              		.loc 1 4202 28 is_stmt 1 view .LVU1714
4205:System/FreeRTOS/tasks.c **** 	}
 6063              		.loc 1 4205 3 view .LVU1715
 6064              	.L468:
4206:System/FreeRTOS/tasks.c **** 
 6065              		.loc 1 4206 2 is_stmt 0 view .LVU1716
 6066 0048 38BD     		pop	{r3, r4, r5, pc}
 6067              	.LVL443:
 6068              	.L482:
4160:System/FreeRTOS/tasks.c **** 					{
 6069              		.loc 1 4160 6 is_stmt 1 view .LVU1717
4160:System/FreeRTOS/tasks.c **** 					{
 6070              		.loc 1 4160 10 is_stmt 0 view .LVU1718
 6071 004a 051D     		adds	r5, r0, #4
 6072 004c 2846     		mov	r0, r5
 6073              	.LVL444:
4160:System/FreeRTOS/tasks.c **** 					{
 6074              		.loc 1 4160 10 view .LVU1719
 6075 004e FFF7FEFF 		bl	uxListRemove
 6076              	.LVL445:
4160:System/FreeRTOS/tasks.c **** 					{
 6077              		.loc 1 4160 8 view .LVU1720
 6078 0052 70B9     		cbnz	r0, .L474
4162:System/FreeRTOS/tasks.c **** 					}
 6079              		.loc 1 4162 7 is_stmt 1 view .LVU1721
 6080 0054 E26A     		ldr	r2, [r4, #44]
 6081 0056 02EB8203 		add	r3, r2, r2, lsl #2
 6082 005a 9B00     		lsls	r3, r3, #2
 6083 005c 1349     		ldr	r1, .L483+4
 6084 005e CB58     		ldr	r3, [r1, r3]
 6085 0060 3BB9     		cbnz	r3, .L474
4162:System/FreeRTOS/tasks.c **** 					}
 6086              		.loc 1 4162 7 discriminator 1 view .LVU1722
 6087 0062 0123     		movs	r3, #1
 6088 0064 03FA02F2 		lsl	r2, r3, r2
 6089 0068 1149     		ldr	r1, .L483+8
 6090 006a 0B68     		ldr	r3, [r1]
 6091 006c 23EA0203 		bic	r3, r3, r2
 6092 0070 0B60     		str	r3, [r1]
 6093              	.L474:
4166:System/FreeRTOS/tasks.c **** 					}
 6094              		.loc 1 4166 31 view .LVU1723
4171:System/FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6095              		.loc 1 4171 67 view .LVU1724
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 232


4172:System/FreeRTOS/tasks.c **** 
 6096              		.loc 1 4172 6 view .LVU1725
4172:System/FreeRTOS/tasks.c **** 
 6097              		.loc 1 4172 31 is_stmt 0 view .LVU1726
 6098 0072 206D     		ldr	r0, [r4, #80]
4172:System/FreeRTOS/tasks.c **** 
 6099              		.loc 1 4172 24 view .LVU1727
 6100 0074 E062     		str	r0, [r4, #44]
4177:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6101              		.loc 1 4177 6 is_stmt 1 view .LVU1728
 6102 0076 C0F10503 		rsb	r3, r0, #5
 6103 007a A361     		str	r3, [r4, #24]
4178:System/FreeRTOS/tasks.c **** 
 6104              		.loc 1 4178 6 view .LVU1729
4178:System/FreeRTOS/tasks.c **** 
 6105              		.loc 1 4178 6 view .LVU1730
 6106 007c 0124     		movs	r4, #1
 6107              	.LVL446:
4178:System/FreeRTOS/tasks.c **** 
 6108              		.loc 1 4178 6 is_stmt 0 view .LVU1731
 6109 007e 04FA00F3 		lsl	r3, r4, r0
 6110 0082 0B4A     		ldr	r2, .L483+8
 6111 0084 1168     		ldr	r1, [r2]
 6112 0086 0B43     		orrs	r3, r3, r1
 6113 0088 1360     		str	r3, [r2]
4178:System/FreeRTOS/tasks.c **** 
 6114              		.loc 1 4178 6 is_stmt 1 view .LVU1732
 6115 008a 00EB8000 		add	r0, r0, r0, lsl #2
 6116 008e 2946     		mov	r1, r5
 6117 0090 064B     		ldr	r3, .L483+4
 6118 0092 03EB8000 		add	r0, r3, r0, lsl #2
 6119 0096 FFF7FEFF 		bl	vListInsertEnd
 6120              	.LVL447:
4178:System/FreeRTOS/tasks.c **** 
 6121              		.loc 1 4178 36 view .LVU1733
4188:System/FreeRTOS/tasks.c **** 				}
 6122              		.loc 1 4188 6 view .LVU1734
4188:System/FreeRTOS/tasks.c **** 				}
 6123              		.loc 1 4188 14 is_stmt 0 view .LVU1735
 6124 009a 2046     		mov	r0, r4
 6125 009c D4E7     		b	.L468
 6126              	.LVL448:
 6127              	.L475:
 6128              	.LCFI51:
 6129              		.cfi_def_cfa_offset 0
 6130              		.cfi_restore 3
 6131              		.cfi_restore 4
 6132              		.cfi_restore 5
 6133              		.cfi_restore 14
4136:System/FreeRTOS/tasks.c **** 
 6134              		.loc 1 4136 13 view .LVU1736
 6135 009e 0020     		movs	r0, #0
 6136              	.LVL449:
4206:System/FreeRTOS/tasks.c **** 
 6137              		.loc 1 4206 2 view .LVU1737
 6138 00a0 7047     		bx	lr
 6139              	.LVL450:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 233


 6140              	.L476:
 6141              	.LCFI52:
 6142              		.cfi_def_cfa_offset 16
 6143              		.cfi_offset 3, -16
 6144              		.cfi_offset 4, -12
 6145              		.cfi_offset 5, -8
 6146              		.cfi_offset 14, -4
4136:System/FreeRTOS/tasks.c **** 
 6147              		.loc 1 4136 13 view .LVU1738
 6148 00a2 0020     		movs	r0, #0
 6149              	.LVL451:
4136:System/FreeRTOS/tasks.c **** 
 6150              		.loc 1 4136 13 view .LVU1739
 6151 00a4 D0E7     		b	.L468
 6152              	.L484:
 6153 00a6 00BF     		.align	2
 6154              	.L483:
 6155 00a8 00000000 		.word	.LANCHOR10
 6156 00ac 00000000 		.word	.LANCHOR4
 6157 00b0 00000000 		.word	.LANCHOR13
 6158              		.cfi_endproc
 6159              	.LFE56:
 6161              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6162              		.align	1
 6163              		.global	vTaskPriorityDisinheritAfterTimeout
 6164              		.syntax unified
 6165              		.thumb
 6166              		.thumb_func
 6168              	vTaskPriorityDisinheritAfterTimeout:
 6169              	.LVL452:
 6170              	.LFB57:
4214:System/FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6171              		.loc 1 4214 2 is_stmt 1 view -0
 6172              		.cfi_startproc
 6173              		@ args = 0, pretend = 0, frame = 0
 6174              		@ frame_needed = 0, uses_anonymous_args = 0
4215:System/FreeRTOS/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 6175              		.loc 1 4215 2 view .LVU1741
4216:System/FreeRTOS/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6176              		.loc 1 4216 2 view .LVU1742
4217:System/FreeRTOS/tasks.c **** 
 6177              		.loc 1 4217 2 view .LVU1743
4219:System/FreeRTOS/tasks.c **** 		{
 6178              		.loc 1 4219 3 view .LVU1744
4219:System/FreeRTOS/tasks.c **** 		{
 6179              		.loc 1 4219 5 is_stmt 0 view .LVU1745
 6180 0000 0028     		cmp	r0, #0
 6181 0002 50D0     		beq	.L495
4214:System/FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6182              		.loc 1 4214 2 view .LVU1746
 6183 0004 38B5     		push	{r3, r4, r5, lr}
 6184              	.LCFI53:
 6185              		.cfi_def_cfa_offset 16
 6186              		.cfi_offset 3, -16
 6187              		.cfi_offset 4, -12
 6188              		.cfi_offset 5, -8
 6189              		.cfi_offset 14, -4
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 234


 6190 0006 0446     		mov	r4, r0
4223:System/FreeRTOS/tasks.c **** 
 6191              		.loc 1 4223 4 is_stmt 1 view .LVU1747
 6192 0008 436D     		ldr	r3, [r0, #84]
 6193 000a 43B9     		cbnz	r3, .L487
4223:System/FreeRTOS/tasks.c **** 
 6194              		.loc 1 4223 4 view .LVU1748
 6195              	.LBB230:
 6196              	.LBI230:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 6197              		.loc 2 191 30 view .LVU1749
 6198              	.LBB231:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6199              		.loc 2 193 1 view .LVU1750
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6200              		.loc 2 195 2 view .LVU1751
 6201              		.syntax unified
 6202              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6203 000c 4FF05003 			mov r3, #80												
 6204 0010 83F31188 		msr basepri, r3											
 6205 0014 BFF36F8F 		isb														
 6206 0018 BFF34F8F 		dsb														
 6207              	
 6208              	@ 0 "" 2
 6209              	.LVL453:
 6210              		.thumb
 6211              		.syntax unified
 6212              	.L488:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6213              		.loc 2 195 2 is_stmt 0 view .LVU1752
 6214              	.LBE231:
 6215              	.LBE230:
4223:System/FreeRTOS/tasks.c **** 
 6216              		.loc 1 4223 4 is_stmt 1 discriminator 1 view .LVU1753
4223:System/FreeRTOS/tasks.c **** 
 6217              		.loc 1 4223 4 discriminator 1 view .LVU1754
4223:System/FreeRTOS/tasks.c **** 
 6218              		.loc 1 4223 4 discriminator 1 view .LVU1755
 6219 001c FEE7     		b	.L488
 6220              	.L487:
4223:System/FreeRTOS/tasks.c **** 
 6221              		.loc 1 4223 40 discriminator 2 view .LVU1756
4229:System/FreeRTOS/tasks.c **** 			{
 6222              		.loc 1 4229 4 discriminator 2 view .LVU1757
4229:System/FreeRTOS/tasks.c **** 			{
 6223              		.loc 1 4229 13 is_stmt 0 discriminator 2 view .LVU1758
 6224 001e 026D     		ldr	r2, [r0, #80]
4229:System/FreeRTOS/tasks.c **** 			{
 6225              		.loc 1 4229 6 discriminator 2 view .LVU1759
 6226 0020 8A42     		cmp	r2, r1
 6227 0022 00D2     		bcs	.L489
4231:System/FreeRTOS/tasks.c **** 			}
 6228              		.loc 1 4231 21 view .LVU1760
 6229 0024 0A46     		mov	r2, r1
 6230              	.L489:
 6231              	.LVL454:
4239:System/FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 235


 6232              		.loc 1 4239 4 is_stmt 1 view .LVU1761
4239:System/FreeRTOS/tasks.c **** 			{
 6233              		.loc 1 4239 13 is_stmt 0 view .LVU1762
 6234 0026 E16A     		ldr	r1, [r4, #44]
 6235              	.LVL455:
4239:System/FreeRTOS/tasks.c **** 			{
 6236              		.loc 1 4239 6 view .LVU1763
 6237 0028 9142     		cmp	r1, r2
 6238 002a 01D0     		beq	.L485
4245:System/FreeRTOS/tasks.c **** 				{
 6239              		.loc 1 4245 5 is_stmt 1 view .LVU1764
4245:System/FreeRTOS/tasks.c **** 				{
 6240              		.loc 1 4245 7 is_stmt 0 view .LVU1765
 6241 002c 012B     		cmp	r3, #1
 6242 002e 00D0     		beq	.L498
 6243              	.LVL456:
 6244              	.L485:
4311:System/FreeRTOS/tasks.c **** 
 6245              		.loc 1 4311 2 view .LVU1766
 6246 0030 38BD     		pop	{r3, r4, r5, pc}
 6247              	.LVL457:
 6248              	.L498:
4250:System/FreeRTOS/tasks.c **** 
 6249              		.loc 1 4250 6 is_stmt 1 view .LVU1767
 6250 0032 1D4B     		ldr	r3, .L500
 6251 0034 1B68     		ldr	r3, [r3]
 6252 0036 A342     		cmp	r3, r4
 6253 0038 2CD0     		beq	.L499
4250:System/FreeRTOS/tasks.c **** 
 6254              		.loc 1 4250 43 discriminator 2 view .LVU1768
4255:System/FreeRTOS/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6255              		.loc 1 4255 67 discriminator 2 view .LVU1769
4256:System/FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6256              		.loc 1 4256 6 discriminator 2 view .LVU1770
 6257              	.LVL458:
4257:System/FreeRTOS/tasks.c **** 
 6258              		.loc 1 4257 6 discriminator 2 view .LVU1771
4257:System/FreeRTOS/tasks.c **** 
 6259              		.loc 1 4257 24 is_stmt 0 discriminator 2 view .LVU1772
 6260 003a E262     		str	r2, [r4, #44]
4261:System/FreeRTOS/tasks.c **** 					{
 6261              		.loc 1 4261 6 is_stmt 1 discriminator 2 view .LVU1773
4261:System/FreeRTOS/tasks.c **** 					{
 6262              		.loc 1 4261 12 is_stmt 0 discriminator 2 view .LVU1774
 6263 003c A369     		ldr	r3, [r4, #24]
4261:System/FreeRTOS/tasks.c **** 					{
 6264              		.loc 1 4261 8 discriminator 2 view .LVU1775
 6265 003e 002B     		cmp	r3, #0
 6266 0040 02DB     		blt	.L492
4263:System/FreeRTOS/tasks.c **** 					}
 6267              		.loc 1 4263 7 is_stmt 1 view .LVU1776
 6268 0042 C2F10502 		rsb	r2, r2, #5
 6269              	.LVL459:
4263:System/FreeRTOS/tasks.c **** 					}
 6270              		.loc 1 4263 7 is_stmt 0 view .LVU1777
 6271 0046 A261     		str	r2, [r4, #24]
 6272              	.L492:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 236


4267:System/FreeRTOS/tasks.c **** 					}
 6273              		.loc 1 4267 31 is_stmt 1 view .LVU1778
4276:System/FreeRTOS/tasks.c **** 					{
 6274              		.loc 1 4276 6 view .LVU1779
4276:System/FreeRTOS/tasks.c **** 					{
 6275              		.loc 1 4276 10 is_stmt 0 view .LVU1780
 6276 0048 6269     		ldr	r2, [r4, #20]
 6277 004a 01EB8101 		add	r1, r1, r1, lsl #2
 6278              	.LVL460:
4276:System/FreeRTOS/tasks.c **** 					{
 6279              		.loc 1 4276 10 view .LVU1781
 6280 004e 174B     		ldr	r3, .L500+4
 6281 0050 03EB8101 		add	r1, r3, r1, lsl #2
4276:System/FreeRTOS/tasks.c **** 					{
 6282              		.loc 1 4276 8 view .LVU1782
 6283 0054 8A42     		cmp	r2, r1
 6284 0056 EBD1     		bne	.L485
4278:System/FreeRTOS/tasks.c **** 						{
 6285              		.loc 1 4278 7 is_stmt 1 view .LVU1783
4278:System/FreeRTOS/tasks.c **** 						{
 6286              		.loc 1 4278 11 is_stmt 0 view .LVU1784
 6287 0058 251D     		adds	r5, r4, #4
 6288 005a 2846     		mov	r0, r5
 6289              	.LVL461:
4278:System/FreeRTOS/tasks.c **** 						{
 6290              		.loc 1 4278 11 view .LVU1785
 6291 005c FFF7FEFF 		bl	uxListRemove
 6292              	.LVL462:
4278:System/FreeRTOS/tasks.c **** 						{
 6293              		.loc 1 4278 9 view .LVU1786
 6294 0060 40B9     		cbnz	r0, .L493
4283:System/FreeRTOS/tasks.c **** 						}
 6295              		.loc 1 4283 8 is_stmt 1 view .LVU1787
 6296 0062 E26A     		ldr	r2, [r4, #44]
 6297 0064 0123     		movs	r3, #1
 6298 0066 03FA02F2 		lsl	r2, r3, r2
 6299 006a 1149     		ldr	r1, .L500+8
 6300 006c 0B68     		ldr	r3, [r1]
 6301 006e 23EA0203 		bic	r3, r3, r2
 6302 0072 0B60     		str	r3, [r1]
 6303              	.L493:
4287:System/FreeRTOS/tasks.c **** 						}
 6304              		.loc 1 4287 32 view .LVU1788
4290:System/FreeRTOS/tasks.c **** 					}
 6305              		.loc 1 4290 7 view .LVU1789
4290:System/FreeRTOS/tasks.c **** 					}
 6306              		.loc 1 4290 7 view .LVU1790
 6307 0074 E06A     		ldr	r0, [r4, #44]
 6308 0076 0123     		movs	r3, #1
 6309 0078 8340     		lsls	r3, r3, r0
 6310 007a 0D4A     		ldr	r2, .L500+8
 6311 007c 1168     		ldr	r1, [r2]
 6312 007e 0B43     		orrs	r3, r3, r1
 6313 0080 1360     		str	r3, [r2]
4290:System/FreeRTOS/tasks.c **** 					}
 6314              		.loc 1 4290 7 view .LVU1791
 6315 0082 00EB8000 		add	r0, r0, r0, lsl #2
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 237


 6316 0086 2946     		mov	r1, r5
 6317 0088 084B     		ldr	r3, .L500+4
 6318 008a 03EB8000 		add	r0, r3, r0, lsl #2
 6319 008e FFF7FEFF 		bl	vListInsertEnd
 6320              	.LVL463:
4290:System/FreeRTOS/tasks.c **** 					}
 6321              		.loc 1 4290 37 view .LVU1792
4309:System/FreeRTOS/tasks.c **** 		}
 6322              		.loc 1 4309 28 view .LVU1793
4311:System/FreeRTOS/tasks.c **** 
 6323              		.loc 1 4311 2 is_stmt 0 view .LVU1794
 6324 0092 CDE7     		b	.L485
 6325              	.LVL464:
 6326              	.L499:
4250:System/FreeRTOS/tasks.c **** 
 6327              		.loc 1 4250 6 is_stmt 1 view .LVU1795
 6328              	.LBB232:
 6329              	.LBI232:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 6330              		.loc 2 191 30 view .LVU1796
 6331              	.LBB233:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6332              		.loc 2 193 1 view .LVU1797
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6333              		.loc 2 195 2 view .LVU1798
 6334              		.syntax unified
 6335              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6336 0094 4FF05003 			mov r3, #80												
 6337 0098 83F31188 		msr basepri, r3											
 6338 009c BFF36F8F 		isb														
 6339 00a0 BFF34F8F 		dsb														
 6340              	
 6341              	@ 0 "" 2
 6342              	.LVL465:
 6343              		.thumb
 6344              		.syntax unified
 6345              	.L491:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6346              		.loc 2 195 2 is_stmt 0 view .LVU1799
 6347              	.LBE233:
 6348              	.LBE232:
4250:System/FreeRTOS/tasks.c **** 
 6349              		.loc 1 4250 6 is_stmt 1 discriminator 2 view .LVU1800
4250:System/FreeRTOS/tasks.c **** 
 6350              		.loc 1 4250 6 discriminator 2 view .LVU1801
4250:System/FreeRTOS/tasks.c **** 
 6351              		.loc 1 4250 6 discriminator 2 view .LVU1802
 6352 00a4 FEE7     		b	.L491
 6353              	.LVL466:
 6354              	.L495:
 6355              	.LCFI54:
 6356              		.cfi_def_cfa_offset 0
 6357              		.cfi_restore 3
 6358              		.cfi_restore 4
 6359              		.cfi_restore 5
 6360              		.cfi_restore 14
4250:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 238


 6361              		.loc 1 4250 6 is_stmt 0 discriminator 2 view .LVU1803
 6362 00a6 7047     		bx	lr
 6363              	.L501:
 6364              		.align	2
 6365              	.L500:
 6366 00a8 00000000 		.word	.LANCHOR10
 6367 00ac 00000000 		.word	.LANCHOR4
 6368 00b0 00000000 		.word	.LANCHOR13
 6369              		.cfi_endproc
 6370              	.LFE57:
 6372              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6373              		.align	1
 6374              		.global	uxTaskResetEventItemValue
 6375              		.syntax unified
 6376              		.thumb
 6377              		.thumb_func
 6379              	uxTaskResetEventItemValue:
 6380              	.LFB58:
4632:System/FreeRTOS/tasks.c **** TickType_t uxReturn;
 6381              		.loc 1 4632 1 is_stmt 1 view -0
 6382              		.cfi_startproc
 6383              		@ args = 0, pretend = 0, frame = 0
 6384              		@ frame_needed = 0, uses_anonymous_args = 0
 6385              		@ link register save eliminated.
4633:System/FreeRTOS/tasks.c **** 
 6386              		.loc 1 4633 1 view .LVU1805
4635:System/FreeRTOS/tasks.c **** 
 6387              		.loc 1 4635 2 view .LVU1806
4635:System/FreeRTOS/tasks.c **** 
 6388              		.loc 1 4635 13 is_stmt 0 view .LVU1807
 6389 0000 044A     		ldr	r2, .L503
 6390 0002 1368     		ldr	r3, [r2]
4635:System/FreeRTOS/tasks.c **** 
 6391              		.loc 1 4635 11 view .LVU1808
 6392 0004 9869     		ldr	r0, [r3, #24]
 6393              	.LVL467:
4639:System/FreeRTOS/tasks.c **** 
 6394              		.loc 1 4639 2 is_stmt 1 view .LVU1809
 6395 0006 1368     		ldr	r3, [r2]
 6396 0008 DB6A     		ldr	r3, [r3, #44]
 6397 000a 1268     		ldr	r2, [r2]
 6398 000c C3F10503 		rsb	r3, r3, #5
 6399 0010 9361     		str	r3, [r2, #24]
4641:System/FreeRTOS/tasks.c **** }
 6400              		.loc 1 4641 2 view .LVU1810
4642:System/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 6401              		.loc 1 4642 1 is_stmt 0 view .LVU1811
 6402 0012 7047     		bx	lr
 6403              	.L504:
 6404              		.align	2
 6405              	.L503:
 6406 0014 00000000 		.word	.LANCHOR10
 6407              		.cfi_endproc
 6408              	.LFE58:
 6410              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6411              		.align	1
 6412              		.global	pvTaskIncrementMutexHeldCount
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 239


 6413              		.syntax unified
 6414              		.thumb
 6415              		.thumb_func
 6417              	pvTaskIncrementMutexHeldCount:
 6418              	.LFB59:
4648:System/FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 6419              		.loc 1 4648 2 is_stmt 1 view -0
 6420              		.cfi_startproc
 6421              		@ args = 0, pretend = 0, frame = 0
 6422              		@ frame_needed = 0, uses_anonymous_args = 0
 6423              		@ link register save eliminated.
4651:System/FreeRTOS/tasks.c **** 		{
 6424              		.loc 1 4651 3 view .LVU1813
4651:System/FreeRTOS/tasks.c **** 		{
 6425              		.loc 1 4651 20 is_stmt 0 view .LVU1814
 6426 0000 054B     		ldr	r3, .L507
 6427 0002 1B68     		ldr	r3, [r3]
4651:System/FreeRTOS/tasks.c **** 		{
 6428              		.loc 1 4651 5 view .LVU1815
 6429 0004 23B1     		cbz	r3, .L506
4653:System/FreeRTOS/tasks.c **** 		}
 6430              		.loc 1 4653 4 is_stmt 1 view .LVU1816
4653:System/FreeRTOS/tasks.c **** 		}
 6431              		.loc 1 4653 18 is_stmt 0 view .LVU1817
 6432 0006 044B     		ldr	r3, .L507
 6433 0008 1A68     		ldr	r2, [r3]
 6434 000a 536D     		ldr	r3, [r2, #84]
4653:System/FreeRTOS/tasks.c **** 		}
 6435              		.loc 1 4653 35 view .LVU1818
 6436 000c 0133     		adds	r3, r3, #1
 6437 000e 5365     		str	r3, [r2, #84]
 6438              	.L506:
4656:System/FreeRTOS/tasks.c **** 	}
 6439              		.loc 1 4656 3 is_stmt 1 view .LVU1819
4656:System/FreeRTOS/tasks.c **** 	}
 6440              		.loc 1 4656 10 is_stmt 0 view .LVU1820
 6441 0010 014B     		ldr	r3, .L507
 6442 0012 1868     		ldr	r0, [r3]
4657:System/FreeRTOS/tasks.c **** 
 6443              		.loc 1 4657 2 view .LVU1821
 6444 0014 7047     		bx	lr
 6445              	.L508:
 6446 0016 00BF     		.align	2
 6447              	.L507:
 6448 0018 00000000 		.word	.LANCHOR10
 6449              		.cfi_endproc
 6450              	.LFE59:
 6452              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 6453              		.align	1
 6454              		.global	ulTaskNotifyTake
 6455              		.syntax unified
 6456              		.thumb
 6457              		.thumb_func
 6459              	ulTaskNotifyTake:
 6460              	.LVL468:
 6461              	.LFB60:
4665:System/FreeRTOS/tasks.c **** 	uint32_t ulReturn;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 240


 6462              		.loc 1 4665 2 is_stmt 1 view -0
 6463              		.cfi_startproc
 6464              		@ args = 0, pretend = 0, frame = 0
 6465              		@ frame_needed = 0, uses_anonymous_args = 0
4665:System/FreeRTOS/tasks.c **** 	uint32_t ulReturn;
 6466              		.loc 1 4665 2 is_stmt 0 view .LVU1823
 6467 0000 38B5     		push	{r3, r4, r5, lr}
 6468              	.LCFI55:
 6469              		.cfi_def_cfa_offset 16
 6470              		.cfi_offset 3, -16
 6471              		.cfi_offset 4, -12
 6472              		.cfi_offset 5, -8
 6473              		.cfi_offset 14, -4
 6474 0002 0546     		mov	r5, r0
 6475 0004 0C46     		mov	r4, r1
4666:System/FreeRTOS/tasks.c **** 
 6476              		.loc 1 4666 2 is_stmt 1 view .LVU1824
4668:System/FreeRTOS/tasks.c **** 		{
 6477              		.loc 1 4668 3 view .LVU1825
 6478 0006 FFF7FEFF 		bl	vPortEnterCritical
 6479              	.LVL469:
4671:System/FreeRTOS/tasks.c **** 			{
 6480              		.loc 1 4671 4 view .LVU1826
4671:System/FreeRTOS/tasks.c **** 			{
 6481              		.loc 1 4671 20 is_stmt 0 view .LVU1827
 6482 000a 1A4B     		ldr	r3, .L515
 6483 000c 1B68     		ldr	r3, [r3]
 6484 000e 9B6D     		ldr	r3, [r3, #88]
4671:System/FreeRTOS/tasks.c **** 			{
 6485              		.loc 1 4671 6 view .LVU1828
 6486 0010 2BB9     		cbnz	r3, .L510
4674:System/FreeRTOS/tasks.c **** 
 6487              		.loc 1 4674 5 is_stmt 1 view .LVU1829
4674:System/FreeRTOS/tasks.c **** 
 6488              		.loc 1 4674 17 is_stmt 0 view .LVU1830
 6489 0012 184B     		ldr	r3, .L515
 6490 0014 1B68     		ldr	r3, [r3]
4674:System/FreeRTOS/tasks.c **** 
 6491              		.loc 1 4674 33 view .LVU1831
 6492 0016 0122     		movs	r2, #1
 6493 0018 83F85C20 		strb	r2, [r3, #92]
4676:System/FreeRTOS/tasks.c **** 				{
 6494              		.loc 1 4676 5 is_stmt 1 view .LVU1832
4676:System/FreeRTOS/tasks.c **** 				{
 6495              		.loc 1 4676 7 is_stmt 0 view .LVU1833
 6496 001c ACB9     		cbnz	r4, .L514
 6497              	.L510:
4694:System/FreeRTOS/tasks.c **** 			}
 6498              		.loc 1 4694 29 is_stmt 1 view .LVU1834
4697:System/FreeRTOS/tasks.c **** 
 6499              		.loc 1 4697 3 view .LVU1835
 6500 001e FFF7FEFF 		bl	vPortExitCritical
 6501              	.LVL470:
4699:System/FreeRTOS/tasks.c **** 		{
 6502              		.loc 1 4699 3 view .LVU1836
 6503 0022 FFF7FEFF 		bl	vPortEnterCritical
 6504              	.LVL471:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 241


4701:System/FreeRTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6505              		.loc 1 4701 27 view .LVU1837
4702:System/FreeRTOS/tasks.c **** 
 6506              		.loc 1 4702 4 view .LVU1838
4702:System/FreeRTOS/tasks.c **** 
 6507              		.loc 1 4702 27 is_stmt 0 view .LVU1839
 6508 0026 134B     		ldr	r3, .L515
 6509 0028 1B68     		ldr	r3, [r3]
4702:System/FreeRTOS/tasks.c **** 
 6510              		.loc 1 4702 13 view .LVU1840
 6511 002a 9C6D     		ldr	r4, [r3, #88]
 6512              	.LVL472:
4704:System/FreeRTOS/tasks.c **** 			{
 6513              		.loc 1 4704 4 is_stmt 1 view .LVU1841
4704:System/FreeRTOS/tasks.c **** 			{
 6514              		.loc 1 4704 6 is_stmt 0 view .LVU1842
 6515 002c 24B1     		cbz	r4, .L511
4706:System/FreeRTOS/tasks.c **** 				{
 6516              		.loc 1 4706 5 is_stmt 1 view .LVU1843
4706:System/FreeRTOS/tasks.c **** 				{
 6517              		.loc 1 4706 7 is_stmt 0 view .LVU1844
 6518 002e DDB1     		cbz	r5, .L512
4708:System/FreeRTOS/tasks.c **** 				}
 6519              		.loc 1 4708 6 is_stmt 1 view .LVU1845
4708:System/FreeRTOS/tasks.c **** 				}
 6520              		.loc 1 4708 18 is_stmt 0 view .LVU1846
 6521 0030 104B     		ldr	r3, .L515
 6522 0032 1B68     		ldr	r3, [r3]
4708:System/FreeRTOS/tasks.c **** 				}
 6523              		.loc 1 4708 36 view .LVU1847
 6524 0034 0022     		movs	r2, #0
 6525 0036 9A65     		str	r2, [r3, #88]
 6526              	.L511:
4717:System/FreeRTOS/tasks.c **** 			}
 6527              		.loc 1 4717 29 is_stmt 1 view .LVU1848
4720:System/FreeRTOS/tasks.c **** 		}
 6528              		.loc 1 4720 4 view .LVU1849
4720:System/FreeRTOS/tasks.c **** 		}
 6529              		.loc 1 4720 16 is_stmt 0 view .LVU1850
 6530 0038 0E4B     		ldr	r3, .L515
 6531 003a 1B68     		ldr	r3, [r3]
4720:System/FreeRTOS/tasks.c **** 		}
 6532              		.loc 1 4720 32 view .LVU1851
 6533 003c 0022     		movs	r2, #0
 6534 003e 83F85C20 		strb	r2, [r3, #92]
4722:System/FreeRTOS/tasks.c **** 
 6535              		.loc 1 4722 3 is_stmt 1 view .LVU1852
 6536 0042 FFF7FEFF 		bl	vPortExitCritical
 6537              	.LVL473:
4724:System/FreeRTOS/tasks.c **** 	}
 6538              		.loc 1 4724 3 view .LVU1853
4725:System/FreeRTOS/tasks.c **** 
 6539              		.loc 1 4725 2 is_stmt 0 view .LVU1854
 6540 0046 2046     		mov	r0, r4
 6541 0048 38BD     		pop	{r3, r4, r5, pc}
 6542              	.LVL474:
 6543              	.L514:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 242


4678:System/FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 6544              		.loc 1 4678 6 is_stmt 1 view .LVU1855
 6545 004a 1146     		mov	r1, r2
 6546 004c 2046     		mov	r0, r4
 6547 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 6548              	.LVL475:
4679:System/FreeRTOS/tasks.c **** 
 6549              		.loc 1 4679 35 view .LVU1856
4685:System/FreeRTOS/tasks.c **** 				}
 6550              		.loc 1 4685 6 view .LVU1857
 6551 0052 4FF0E023 		mov	r3, #-536813568
 6552 0056 4FF08052 		mov	r2, #268435456
 6553 005a C3F8042D 		str	r2, [r3, #3332]
4685:System/FreeRTOS/tasks.c **** 				}
 6554              		.loc 1 4685 6 view .LVU1858
 6555              		.syntax unified
 6556              	@ 4685 "System/FreeRTOS/tasks.c" 1
 6557 005e BFF34F8F 		dsb
 6558              	@ 0 "" 2
4685:System/FreeRTOS/tasks.c **** 				}
 6559              		.loc 1 4685 6 view .LVU1859
 6560              	@ 4685 "System/FreeRTOS/tasks.c" 1
 6561 0062 BFF36F8F 		isb
 6562              	@ 0 "" 2
4685:System/FreeRTOS/tasks.c **** 				}
 6563              		.loc 1 4685 28 view .LVU1860
 6564              		.thumb
 6565              		.syntax unified
 6566 0066 DAE7     		b	.L510
 6567              	.LVL476:
 6568              	.L512:
4712:System/FreeRTOS/tasks.c **** 				}
 6569              		.loc 1 4712 6 view .LVU1861
4712:System/FreeRTOS/tasks.c **** 				}
 6570              		.loc 1 4712 18 is_stmt 0 view .LVU1862
 6571 0068 024B     		ldr	r3, .L515
 6572 006a 1B68     		ldr	r3, [r3]
4712:System/FreeRTOS/tasks.c **** 				}
 6573              		.loc 1 4712 47 view .LVU1863
 6574 006c 621E     		subs	r2, r4, #1
4712:System/FreeRTOS/tasks.c **** 				}
 6575              		.loc 1 4712 36 view .LVU1864
 6576 006e 9A65     		str	r2, [r3, #88]
 6577 0070 E2E7     		b	.L511
 6578              	.L516:
 6579 0072 00BF     		.align	2
 6580              	.L515:
 6581 0074 00000000 		.word	.LANCHOR10
 6582              		.cfi_endproc
 6583              	.LFE60:
 6585              		.section	.text.xTaskNotifyWait,"ax",%progbits
 6586              		.align	1
 6587              		.global	xTaskNotifyWait
 6588              		.syntax unified
 6589              		.thumb
 6590              		.thumb_func
 6592              	xTaskNotifyWait:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 243


 6593              	.LVL477:
 6594              	.LFB61:
4733:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 6595              		.loc 1 4733 2 is_stmt 1 view -0
 6596              		.cfi_startproc
 6597              		@ args = 0, pretend = 0, frame = 0
 6598              		@ frame_needed = 0, uses_anonymous_args = 0
4733:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 6599              		.loc 1 4733 2 is_stmt 0 view .LVU1866
 6600 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6601              	.LCFI56:
 6602              		.cfi_def_cfa_offset 24
 6603              		.cfi_offset 3, -24
 6604              		.cfi_offset 4, -20
 6605              		.cfi_offset 5, -16
 6606              		.cfi_offset 6, -12
 6607              		.cfi_offset 7, -8
 6608              		.cfi_offset 14, -4
 6609 0002 0646     		mov	r6, r0
 6610 0004 0F46     		mov	r7, r1
 6611 0006 1446     		mov	r4, r2
 6612 0008 1D46     		mov	r5, r3
4734:System/FreeRTOS/tasks.c **** 
 6613              		.loc 1 4734 2 is_stmt 1 view .LVU1867
4736:System/FreeRTOS/tasks.c **** 		{
 6614              		.loc 1 4736 3 view .LVU1868
 6615 000a FFF7FEFF 		bl	vPortEnterCritical
 6616              	.LVL478:
4739:System/FreeRTOS/tasks.c **** 			{
 6617              		.loc 1 4739 4 view .LVU1869
4739:System/FreeRTOS/tasks.c **** 			{
 6618              		.loc 1 4739 20 is_stmt 0 view .LVU1870
 6619 000e 214B     		ldr	r3, .L525
 6620 0010 1B68     		ldr	r3, [r3]
 6621 0012 93F85C20 		ldrb	r2, [r3, #92]	@ zero_extendqisi2
 6622 0016 D2B2     		uxtb	r2, r2
4739:System/FreeRTOS/tasks.c **** 			{
 6623              		.loc 1 4739 6 view .LVU1871
 6624 0018 022A     		cmp	r2, #2
 6625 001a 0AD0     		beq	.L518
4744:System/FreeRTOS/tasks.c **** 
 6626              		.loc 1 4744 5 is_stmt 1 view .LVU1872
4744:System/FreeRTOS/tasks.c **** 
 6627              		.loc 1 4744 35 is_stmt 0 view .LVU1873
 6628 001c 1D4B     		ldr	r3, .L525
 6629 001e 1A68     		ldr	r2, [r3]
 6630 0020 906D     		ldr	r0, [r2, #88]
 6631 0022 20EA0606 		bic	r6, r0, r6
 6632              	.LVL479:
4744:System/FreeRTOS/tasks.c **** 
 6633              		.loc 1 4744 35 view .LVU1874
 6634 0026 9665     		str	r6, [r2, #88]
4747:System/FreeRTOS/tasks.c **** 
 6635              		.loc 1 4747 5 is_stmt 1 view .LVU1875
4747:System/FreeRTOS/tasks.c **** 
 6636              		.loc 1 4747 17 is_stmt 0 view .LVU1876
 6637 0028 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 244


4747:System/FreeRTOS/tasks.c **** 
 6638              		.loc 1 4747 33 view .LVU1877
 6639 002a 0122     		movs	r2, #1
 6640 002c 83F85C20 		strb	r2, [r3, #92]
4749:System/FreeRTOS/tasks.c **** 				{
 6641              		.loc 1 4749 5 is_stmt 1 view .LVU1878
4749:System/FreeRTOS/tasks.c **** 				{
 6642              		.loc 1 4749 7 is_stmt 0 view .LVU1879
 6643 0030 CDB9     		cbnz	r5, .L523
 6644              	.L518:
4767:System/FreeRTOS/tasks.c **** 			}
 6645              		.loc 1 4767 29 is_stmt 1 view .LVU1880
4770:System/FreeRTOS/tasks.c **** 
 6646              		.loc 1 4770 3 view .LVU1881
 6647 0032 FFF7FEFF 		bl	vPortExitCritical
 6648              	.LVL480:
4772:System/FreeRTOS/tasks.c **** 		{
 6649              		.loc 1 4772 3 view .LVU1882
 6650 0036 FFF7FEFF 		bl	vPortEnterCritical
 6651              	.LVL481:
4774:System/FreeRTOS/tasks.c **** 
 6652              		.loc 1 4774 27 view .LVU1883
4776:System/FreeRTOS/tasks.c **** 			{
 6653              		.loc 1 4776 4 view .LVU1884
4776:System/FreeRTOS/tasks.c **** 			{
 6654              		.loc 1 4776 6 is_stmt 0 view .LVU1885
 6655 003a 1CB1     		cbz	r4, .L519
4780:System/FreeRTOS/tasks.c **** 			}
 6656              		.loc 1 4780 5 is_stmt 1 view .LVU1886
4780:System/FreeRTOS/tasks.c **** 			}
 6657              		.loc 1 4780 41 is_stmt 0 view .LVU1887
 6658 003c 154B     		ldr	r3, .L525
 6659 003e 1B68     		ldr	r3, [r3]
 6660 0040 9B6D     		ldr	r3, [r3, #88]
4780:System/FreeRTOS/tasks.c **** 			}
 6661              		.loc 1 4780 27 view .LVU1888
 6662 0042 2360     		str	r3, [r4]
 6663              	.L519:
4787:System/FreeRTOS/tasks.c **** 			{
 6664              		.loc 1 4787 4 is_stmt 1 view .LVU1889
4787:System/FreeRTOS/tasks.c **** 			{
 6665              		.loc 1 4787 20 is_stmt 0 view .LVU1890
 6666 0044 134B     		ldr	r3, .L525
 6667 0046 1B68     		ldr	r3, [r3]
 6668 0048 93F85C30 		ldrb	r3, [r3, #92]	@ zero_extendqisi2
 6669 004c DBB2     		uxtb	r3, r3
4787:System/FreeRTOS/tasks.c **** 			{
 6670              		.loc 1 4787 6 view .LVU1891
 6671 004e 022B     		cmp	r3, #2
 6672 0050 18D0     		beq	.L524
4790:System/FreeRTOS/tasks.c **** 			}
 6673              		.loc 1 4790 13 view .LVU1892
 6674 0052 0024     		movs	r4, #0
 6675              	.LVL482:
 6676              	.L520:
4800:System/FreeRTOS/tasks.c **** 		}
 6677              		.loc 1 4800 4 is_stmt 1 view .LVU1893
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 245


4800:System/FreeRTOS/tasks.c **** 		}
 6678              		.loc 1 4800 16 is_stmt 0 view .LVU1894
 6679 0054 0F4B     		ldr	r3, .L525
 6680 0056 1B68     		ldr	r3, [r3]
4800:System/FreeRTOS/tasks.c **** 		}
 6681              		.loc 1 4800 32 view .LVU1895
 6682 0058 0022     		movs	r2, #0
 6683 005a 83F85C20 		strb	r2, [r3, #92]
4802:System/FreeRTOS/tasks.c **** 
 6684              		.loc 1 4802 3 is_stmt 1 view .LVU1896
 6685 005e FFF7FEFF 		bl	vPortExitCritical
 6686              	.LVL483:
4804:System/FreeRTOS/tasks.c **** 	}
 6687              		.loc 1 4804 3 view .LVU1897
4805:System/FreeRTOS/tasks.c **** 
 6688              		.loc 1 4805 2 is_stmt 0 view .LVU1898
 6689 0062 2046     		mov	r0, r4
 6690 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6691              	.LVL484:
 6692              	.L523:
4751:System/FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 6693              		.loc 1 4751 6 is_stmt 1 view .LVU1899
 6694 0066 1146     		mov	r1, r2
 6695 0068 2846     		mov	r0, r5
 6696 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 6697              	.LVL485:
4752:System/FreeRTOS/tasks.c **** 
 6698              		.loc 1 4752 35 view .LVU1900
4758:System/FreeRTOS/tasks.c **** 				}
 6699              		.loc 1 4758 6 view .LVU1901
 6700 006e 4FF0E023 		mov	r3, #-536813568
 6701 0072 4FF08052 		mov	r2, #268435456
 6702 0076 C3F8042D 		str	r2, [r3, #3332]
4758:System/FreeRTOS/tasks.c **** 				}
 6703              		.loc 1 4758 6 view .LVU1902
 6704              		.syntax unified
 6705              	@ 4758 "System/FreeRTOS/tasks.c" 1
 6706 007a BFF34F8F 		dsb
 6707              	@ 0 "" 2
4758:System/FreeRTOS/tasks.c **** 				}
 6708              		.loc 1 4758 6 view .LVU1903
 6709              	@ 4758 "System/FreeRTOS/tasks.c" 1
 6710 007e BFF36F8F 		isb
 6711              	@ 0 "" 2
4758:System/FreeRTOS/tasks.c **** 				}
 6712              		.loc 1 4758 28 view .LVU1904
 6713              		.thumb
 6714              		.syntax unified
 6715 0082 D6E7     		b	.L518
 6716              	.L524:
4796:System/FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
 6717              		.loc 1 4796 5 view .LVU1905
4796:System/FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
 6718              		.loc 1 4796 35 is_stmt 0 view .LVU1906
 6719 0084 034B     		ldr	r3, .L525
 6720 0086 1B68     		ldr	r3, [r3]
 6721 0088 996D     		ldr	r1, [r3, #88]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 246


 6722 008a 21EA0707 		bic	r7, r1, r7
 6723              	.LVL486:
4796:System/FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
 6724              		.loc 1 4796 35 view .LVU1907
 6725 008e 9F65     		str	r7, [r3, #88]
4797:System/FreeRTOS/tasks.c **** 			}
 6726              		.loc 1 4797 5 is_stmt 1 view .LVU1908
 6727              	.LVL487:
4797:System/FreeRTOS/tasks.c **** 			}
 6728              		.loc 1 4797 13 is_stmt 0 view .LVU1909
 6729 0090 0124     		movs	r4, #1
 6730              	.LVL488:
4797:System/FreeRTOS/tasks.c **** 			}
 6731              		.loc 1 4797 13 view .LVU1910
 6732 0092 DFE7     		b	.L520
 6733              	.L526:
 6734              		.align	2
 6735              	.L525:
 6736 0094 00000000 		.word	.LANCHOR10
 6737              		.cfi_endproc
 6738              	.LFE61:
 6740              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6741              		.align	1
 6742              		.global	xTaskGenericNotify
 6743              		.syntax unified
 6744              		.thumb
 6745              		.thumb_func
 6747              	xTaskGenericNotify:
 6748              	.LVL489:
 6749              	.LFB62:
4813:System/FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 6750              		.loc 1 4813 2 is_stmt 1 view -0
 6751              		.cfi_startproc
 6752              		@ args = 0, pretend = 0, frame = 0
 6753              		@ frame_needed = 0, uses_anonymous_args = 0
4813:System/FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 6754              		.loc 1 4813 2 is_stmt 0 view .LVU1912
 6755 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6756              	.LCFI57:
 6757              		.cfi_def_cfa_offset 24
 6758              		.cfi_offset 3, -24
 6759              		.cfi_offset 4, -20
 6760              		.cfi_offset 5, -16
 6761              		.cfi_offset 6, -12
 6762              		.cfi_offset 7, -8
 6763              		.cfi_offset 14, -4
4814:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6764              		.loc 1 4814 2 is_stmt 1 view .LVU1913
4815:System/FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6765              		.loc 1 4815 2 view .LVU1914
 6766              	.LVL490:
4816:System/FreeRTOS/tasks.c **** 
 6767              		.loc 1 4816 2 view .LVU1915
4818:System/FreeRTOS/tasks.c **** 		pxTCB = xTaskToNotify;
 6768              		.loc 1 4818 3 view .LVU1916
 6769 0002 A8B1     		cbz	r0, .L546
 6770 0004 0F46     		mov	r7, r1
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 247


 6771 0006 1446     		mov	r4, r2
 6772 0008 1D46     		mov	r5, r3
 6773 000a 0646     		mov	r6, r0
4818:System/FreeRTOS/tasks.c **** 		pxTCB = xTaskToNotify;
 6774              		.loc 1 4818 32 discriminator 2 view .LVU1917
4819:System/FreeRTOS/tasks.c **** 
 6775              		.loc 1 4819 3 discriminator 2 view .LVU1918
 6776              	.LVL491:
4821:System/FreeRTOS/tasks.c **** 		{
 6777              		.loc 1 4821 3 discriminator 2 view .LVU1919
 6778 000c FFF7FEFF 		bl	vPortEnterCritical
 6779              	.LVL492:
4823:System/FreeRTOS/tasks.c **** 			{
 6780              		.loc 1 4823 4 discriminator 2 view .LVU1920
4823:System/FreeRTOS/tasks.c **** 			{
 6781              		.loc 1 4823 6 is_stmt 0 discriminator 2 view .LVU1921
 6782 0010 0DB1     		cbz	r5, .L530
4825:System/FreeRTOS/tasks.c **** 			}
 6783              		.loc 1 4825 5 is_stmt 1 view .LVU1922
4825:System/FreeRTOS/tasks.c **** 			}
 6784              		.loc 1 4825 42 is_stmt 0 view .LVU1923
 6785 0012 B36D     		ldr	r3, [r6, #88]
4825:System/FreeRTOS/tasks.c **** 			}
 6786              		.loc 1 4825 35 view .LVU1924
 6787 0014 2B60     		str	r3, [r5]
 6788              	.L530:
4828:System/FreeRTOS/tasks.c **** 
 6789              		.loc 1 4828 4 is_stmt 1 view .LVU1925
4828:System/FreeRTOS/tasks.c **** 
 6790              		.loc 1 4828 26 is_stmt 0 view .LVU1926
 6791 0016 96F85C30 		ldrb	r3, [r6, #92]	@ zero_extendqisi2
 6792 001a DBB2     		uxtb	r3, r3
 6793              	.LVL493:
4830:System/FreeRTOS/tasks.c **** 
 6794              		.loc 1 4830 4 is_stmt 1 view .LVU1927
4830:System/FreeRTOS/tasks.c **** 
 6795              		.loc 1 4830 25 is_stmt 0 view .LVU1928
 6796 001c 0222     		movs	r2, #2
 6797 001e 86F85C20 		strb	r2, [r6, #92]
4832:System/FreeRTOS/tasks.c **** 			{
 6798              		.loc 1 4832 4 is_stmt 1 view .LVU1929
 6799 0022 042C     		cmp	r4, #4
 6800 0024 1FD8     		bhi	.L531
 6801 0026 DFE804F0 		tbb	[pc, r4]
 6802              	.L533:
 6803 002a 2B       		.byte	(.L542-.L533)/2
 6804 002b 0C       		.byte	(.L536-.L533)/2
 6805 002c 11       		.byte	(.L535-.L533)/2
 6806 002d 16       		.byte	(.L534-.L533)/2
 6807 002e 19       		.byte	(.L532-.L533)/2
 6808              	.LVL494:
 6809 002f 00       		.p2align 1
 6810              	.L546:
4818:System/FreeRTOS/tasks.c **** 		pxTCB = xTaskToNotify;
 6811              		.loc 1 4818 3 view .LVU1930
 6812              	.LBB234:
 6813              	.LBI234:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 248


 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 6814              		.loc 2 191 30 view .LVU1931
 6815              	.LBB235:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6816              		.loc 2 193 1 view .LVU1932
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6817              		.loc 2 195 2 view .LVU1933
 6818              		.syntax unified
 6819              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6820 0030 4FF05003 			mov r3, #80												
 6821 0034 83F31188 		msr basepri, r3											
 6822 0038 BFF36F8F 		isb														
 6823 003c BFF34F8F 		dsb														
 6824              	
 6825              	@ 0 "" 2
 6826              	.LVL495:
 6827              		.thumb
 6828              		.syntax unified
 6829              	.L529:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6830              		.loc 2 195 2 is_stmt 0 view .LVU1934
 6831              	.LBE235:
 6832              	.LBE234:
4818:System/FreeRTOS/tasks.c **** 		pxTCB = xTaskToNotify;
 6833              		.loc 1 4818 3 is_stmt 1 discriminator 1 view .LVU1935
4818:System/FreeRTOS/tasks.c **** 		pxTCB = xTaskToNotify;
 6834              		.loc 1 4818 3 discriminator 1 view .LVU1936
4818:System/FreeRTOS/tasks.c **** 		pxTCB = xTaskToNotify;
 6835              		.loc 1 4818 3 discriminator 1 view .LVU1937
 6836 0040 FEE7     		b	.L529
 6837              	.LVL496:
 6838              	.L536:
4835:System/FreeRTOS/tasks.c **** 					break;
 6839              		.loc 1 4835 6 view .LVU1938
4835:System/FreeRTOS/tasks.c **** 					break;
 6840              		.loc 1 4835 29 is_stmt 0 view .LVU1939
 6841 0042 B26D     		ldr	r2, [r6, #88]
 6842 0044 1743     		orrs	r7, r7, r2
 6843              	.LVL497:
4835:System/FreeRTOS/tasks.c **** 					break;
 6844              		.loc 1 4835 29 view .LVU1940
 6845 0046 B765     		str	r7, [r6, #88]
4836:System/FreeRTOS/tasks.c **** 
 6846              		.loc 1 4836 6 is_stmt 1 view .LVU1941
4815:System/FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6847              		.loc 1 4815 13 is_stmt 0 view .LVU1942
 6848 0048 0124     		movs	r4, #1
4836:System/FreeRTOS/tasks.c **** 
 6849              		.loc 1 4836 6 view .LVU1943
 6850 004a 1AE0     		b	.L537
 6851              	.LVL498:
 6852              	.L535:
4839:System/FreeRTOS/tasks.c **** 					break;
 6853              		.loc 1 4839 6 is_stmt 1 view .LVU1944
4839:System/FreeRTOS/tasks.c **** 					break;
 6854              		.loc 1 4839 13 is_stmt 0 view .LVU1945
 6855 004c B26D     		ldr	r2, [r6, #88]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 249


4839:System/FreeRTOS/tasks.c **** 					break;
 6856              		.loc 1 4839 32 view .LVU1946
 6857 004e 0132     		adds	r2, r2, #1
 6858 0050 B265     		str	r2, [r6, #88]
4840:System/FreeRTOS/tasks.c **** 
 6859              		.loc 1 4840 6 is_stmt 1 view .LVU1947
4815:System/FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6860              		.loc 1 4815 13 is_stmt 0 view .LVU1948
 6861 0052 0124     		movs	r4, #1
4840:System/FreeRTOS/tasks.c **** 
 6862              		.loc 1 4840 6 view .LVU1949
 6863 0054 15E0     		b	.L537
 6864              	.L534:
4843:System/FreeRTOS/tasks.c **** 					break;
 6865              		.loc 1 4843 6 is_stmt 1 view .LVU1950
4843:System/FreeRTOS/tasks.c **** 					break;
 6866              		.loc 1 4843 29 is_stmt 0 view .LVU1951
 6867 0056 B765     		str	r7, [r6, #88]
4844:System/FreeRTOS/tasks.c **** 
 6868              		.loc 1 4844 6 is_stmt 1 view .LVU1952
4815:System/FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6869              		.loc 1 4815 13 is_stmt 0 view .LVU1953
 6870 0058 0124     		movs	r4, #1
4844:System/FreeRTOS/tasks.c **** 
 6871              		.loc 1 4844 6 view .LVU1954
 6872 005a 12E0     		b	.L537
 6873              	.L532:
4847:System/FreeRTOS/tasks.c **** 					{
 6874              		.loc 1 4847 6 is_stmt 1 view .LVU1955
4847:System/FreeRTOS/tasks.c **** 					{
 6875              		.loc 1 4847 8 is_stmt 0 view .LVU1956
 6876 005c 022B     		cmp	r3, #2
 6877 005e 16D0     		beq	.L543
4849:System/FreeRTOS/tasks.c **** 					}
 6878              		.loc 1 4849 7 is_stmt 1 view .LVU1957
4849:System/FreeRTOS/tasks.c **** 					}
 6879              		.loc 1 4849 30 is_stmt 0 view .LVU1958
 6880 0060 B765     		str	r7, [r6, #88]
4815:System/FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6881              		.loc 1 4815 13 view .LVU1959
 6882 0062 0124     		movs	r4, #1
 6883 0064 0DE0     		b	.L537
 6884              	.L531:
4867:System/FreeRTOS/tasks.c **** 
 6885              		.loc 1 4867 6 is_stmt 1 view .LVU1960
 6886 0066 B26D     		ldr	r2, [r6, #88]
 6887 0068 B2F1FF3F 		cmp	r2, #-1
 6888 006c 11D0     		beq	.L544
4867:System/FreeRTOS/tasks.c **** 
 6889              		.loc 1 4867 6 view .LVU1961
 6890              	.LBB236:
 6891              	.LBI236:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 6892              		.loc 2 191 30 view .LVU1962
 6893              	.LBB237:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6894              		.loc 2 193 1 view .LVU1963
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 250


 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6895              		.loc 2 195 2 view .LVU1964
 6896              		.syntax unified
 6897              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6898 006e 4FF05003 			mov r3, #80												
 6899 0072 83F31188 		msr basepri, r3											
 6900 0076 BFF36F8F 		isb														
 6901 007a BFF34F8F 		dsb														
 6902              	
 6903              	@ 0 "" 2
 6904              	.LVL499:
 6905              		.thumb
 6906              		.syntax unified
 6907              	.L538:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6908              		.loc 2 195 2 is_stmt 0 view .LVU1965
 6909              	.LBE237:
 6910              	.LBE236:
4867:System/FreeRTOS/tasks.c **** 
 6911              		.loc 1 4867 6 is_stmt 1 discriminator 2 view .LVU1966
4867:System/FreeRTOS/tasks.c **** 
 6912              		.loc 1 4867 6 discriminator 2 view .LVU1967
4867:System/FreeRTOS/tasks.c **** 
 6913              		.loc 1 4867 6 discriminator 2 view .LVU1968
 6914 007e FEE7     		b	.L538
 6915              	.LVL500:
 6916              	.L542:
4832:System/FreeRTOS/tasks.c **** 			{
 6917              		.loc 1 4832 4 is_stmt 0 view .LVU1969
 6918 0080 0124     		movs	r4, #1
 6919              	.LVL501:
 6920              	.L537:
4872:System/FreeRTOS/tasks.c **** 
 6921              		.loc 1 4872 22 is_stmt 1 view .LVU1970
4876:System/FreeRTOS/tasks.c **** 			{
 6922              		.loc 1 4876 4 view .LVU1971
4876:System/FreeRTOS/tasks.c **** 			{
 6923              		.loc 1 4876 6 is_stmt 0 view .LVU1972
 6924 0082 012B     		cmp	r3, #1
 6925 0084 07D0     		beq	.L547
 6926              	.LVL502:
 6927              	.L539:
4913:System/FreeRTOS/tasks.c **** 			}
 6928              		.loc 1 4913 29 is_stmt 1 view .LVU1973
4916:System/FreeRTOS/tasks.c **** 
 6929              		.loc 1 4916 3 view .LVU1974
 6930 0086 FFF7FEFF 		bl	vPortExitCritical
 6931              	.LVL503:
4918:System/FreeRTOS/tasks.c **** 	}
 6932              		.loc 1 4918 3 view .LVU1975
4919:System/FreeRTOS/tasks.c **** 
 6933              		.loc 1 4919 2 is_stmt 0 view .LVU1976
 6934 008a 2046     		mov	r0, r4
 6935 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6936              	.LVL504:
 6937              	.L543:
4854:System/FreeRTOS/tasks.c **** 					}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 251


 6938              		.loc 1 4854 15 view .LVU1977
 6939 008e 0024     		movs	r4, #0
 6940 0090 F7E7     		b	.L537
 6941              	.L544:
4815:System/FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6942              		.loc 1 4815 13 view .LVU1978
 6943 0092 0124     		movs	r4, #1
 6944 0094 F5E7     		b	.L537
 6945              	.LVL505:
 6946              	.L547:
4878:System/FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 6947              		.loc 1 4878 5 is_stmt 1 view .LVU1979
4878:System/FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 6948              		.loc 1 4878 14 is_stmt 0 view .LVU1980
 6949 0096 351D     		adds	r5, r6, #4
 6950              	.LVL506:
4878:System/FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 6951              		.loc 1 4878 14 view .LVU1981
 6952 0098 2846     		mov	r0, r5
 6953 009a FFF7FEFF 		bl	uxListRemove
 6954              	.LVL507:
4879:System/FreeRTOS/tasks.c **** 
 6955              		.loc 1 4879 5 is_stmt 1 view .LVU1982
4879:System/FreeRTOS/tasks.c **** 
 6956              		.loc 1 4879 5 view .LVU1983
 6957 009e F06A     		ldr	r0, [r6, #44]
 6958 00a0 0123     		movs	r3, #1
 6959 00a2 8340     		lsls	r3, r3, r0
 6960 00a4 134A     		ldr	r2, .L548
 6961 00a6 1168     		ldr	r1, [r2]
 6962 00a8 0B43     		orrs	r3, r3, r1
 6963 00aa 1360     		str	r3, [r2]
4879:System/FreeRTOS/tasks.c **** 
 6964              		.loc 1 4879 5 view .LVU1984
 6965 00ac 00EB8000 		add	r0, r0, r0, lsl #2
 6966 00b0 2946     		mov	r1, r5
 6967 00b2 114B     		ldr	r3, .L548+4
 6968 00b4 03EB8000 		add	r0, r3, r0, lsl #2
 6969 00b8 FFF7FEFF 		bl	vListInsertEnd
 6970              	.LVL508:
4879:System/FreeRTOS/tasks.c **** 
 6971              		.loc 1 4879 35 view .LVU1985
4882:System/FreeRTOS/tasks.c **** 
 6972              		.loc 1 4882 5 view .LVU1986
 6973 00bc B36A     		ldr	r3, [r6, #40]
 6974 00be 43B1     		cbz	r3, .L540
4882:System/FreeRTOS/tasks.c **** 
 6975              		.loc 1 4882 5 view .LVU1987
 6976              	.LBB238:
 6977              	.LBI238:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 6978              		.loc 2 191 30 view .LVU1988
 6979              	.LBB239:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6980              		.loc 2 193 1 view .LVU1989
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6981              		.loc 2 195 2 view .LVU1990
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 252


 6982              		.syntax unified
 6983              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6984 00c0 4FF05003 			mov r3, #80												
 6985 00c4 83F31188 		msr basepri, r3											
 6986 00c8 BFF36F8F 		isb														
 6987 00cc BFF34F8F 		dsb														
 6988              	
 6989              	@ 0 "" 2
 6990              	.LVL509:
 6991              		.thumb
 6992              		.syntax unified
 6993              	.L541:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6994              		.loc 2 195 2 is_stmt 0 view .LVU1991
 6995              	.LBE239:
 6996              	.LBE238:
4882:System/FreeRTOS/tasks.c **** 
 6997              		.loc 1 4882 5 is_stmt 1 discriminator 3 view .LVU1992
4882:System/FreeRTOS/tasks.c **** 
 6998              		.loc 1 4882 5 discriminator 3 view .LVU1993
4882:System/FreeRTOS/tasks.c **** 
 6999              		.loc 1 4882 5 discriminator 3 view .LVU1994
 7000 00d0 FEE7     		b	.L541
 7001              	.L540:
4882:System/FreeRTOS/tasks.c **** 
 7002              		.loc 1 4882 82 discriminator 2 view .LVU1995
4900:System/FreeRTOS/tasks.c **** 				{
 7003              		.loc 1 4900 5 discriminator 2 view .LVU1996
4900:System/FreeRTOS/tasks.c **** 				{
 7004              		.loc 1 4900 14 is_stmt 0 discriminator 2 view .LVU1997
 7005 00d2 F26A     		ldr	r2, [r6, #44]
4900:System/FreeRTOS/tasks.c **** 				{
 7006              		.loc 1 4900 41 discriminator 2 view .LVU1998
 7007 00d4 094B     		ldr	r3, .L548+8
 7008 00d6 1B68     		ldr	r3, [r3]
 7009 00d8 DB6A     		ldr	r3, [r3, #44]
4900:System/FreeRTOS/tasks.c **** 				{
 7010              		.loc 1 4900 7 discriminator 2 view .LVU1999
 7011 00da 9A42     		cmp	r2, r3
 7012 00dc D3D9     		bls	.L539
4904:System/FreeRTOS/tasks.c **** 				}
 7013              		.loc 1 4904 6 is_stmt 1 view .LVU2000
 7014 00de 4FF0E023 		mov	r3, #-536813568
 7015 00e2 4FF08052 		mov	r2, #268435456
 7016 00e6 C3F8042D 		str	r2, [r3, #3332]
4904:System/FreeRTOS/tasks.c **** 				}
 7017              		.loc 1 4904 6 view .LVU2001
 7018              		.syntax unified
 7019              	@ 4904 "System/FreeRTOS/tasks.c" 1
 7020 00ea BFF34F8F 		dsb
 7021              	@ 0 "" 2
4904:System/FreeRTOS/tasks.c **** 				}
 7022              		.loc 1 4904 6 view .LVU2002
 7023              	@ 4904 "System/FreeRTOS/tasks.c" 1
 7024 00ee BFF36F8F 		isb
 7025              	@ 0 "" 2
4904:System/FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 253


 7026              		.loc 1 4904 37 view .LVU2003
 7027              		.thumb
 7028              		.syntax unified
 7029 00f2 C8E7     		b	.L539
 7030              	.L549:
 7031              		.align	2
 7032              	.L548:
 7033 00f4 00000000 		.word	.LANCHOR13
 7034 00f8 00000000 		.word	.LANCHOR4
 7035 00fc 00000000 		.word	.LANCHOR10
 7036              		.cfi_endproc
 7037              	.LFE62:
 7039              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7040              		.align	1
 7041              		.global	xTaskGenericNotifyFromISR
 7042              		.syntax unified
 7043              		.thumb
 7044              		.thumb_func
 7046              	xTaskGenericNotifyFromISR:
 7047              	.LVL510:
 7048              	.LFB63:
4927:System/FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 7049              		.loc 1 4927 2 view -0
 7050              		.cfi_startproc
 7051              		@ args = 4, pretend = 0, frame = 0
 7052              		@ frame_needed = 0, uses_anonymous_args = 0
4928:System/FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 7053              		.loc 1 4928 2 view .LVU2005
4929:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7054              		.loc 1 4929 2 view .LVU2006
4930:System/FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 7055              		.loc 1 4930 2 view .LVU2007
4931:System/FreeRTOS/tasks.c **** 
 7056              		.loc 1 4931 2 view .LVU2008
4933:System/FreeRTOS/tasks.c **** 
 7057              		.loc 1 4933 3 view .LVU2009
 7058 0000 08B3     		cbz	r0, .L573
4927:System/FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 7059              		.loc 1 4927 2 is_stmt 0 discriminator 2 view .LVU2010
 7060 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7061              	.LCFI58:
 7062              		.cfi_def_cfa_offset 24
 7063              		.cfi_offset 4, -24
 7064              		.cfi_offset 5, -20
 7065              		.cfi_offset 6, -16
 7066              		.cfi_offset 7, -12
 7067              		.cfi_offset 8, -8
 7068              		.cfi_offset 14, -4
 7069 0006 0E46     		mov	r6, r1
 7070 0008 1446     		mov	r4, r2
 7071 000a 1D46     		mov	r5, r3
 7072 000c 0746     		mov	r7, r0
4933:System/FreeRTOS/tasks.c **** 
 7073              		.loc 1 4933 32 is_stmt 1 discriminator 2 view .LVU2011
4951:System/FreeRTOS/tasks.c **** 
 7074              		.loc 1 4951 3 discriminator 2 view .LVU2012
 7075 000e FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 254


 7076              	.LVL511:
4953:System/FreeRTOS/tasks.c **** 
 7077              		.loc 1 4953 3 discriminator 2 view .LVU2013
4955:System/FreeRTOS/tasks.c **** 		{
 7078              		.loc 1 4955 3 discriminator 2 view .LVU2014
 7079              	.LBB240:
 7080              	.LBI240:
 207:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 7081              		.loc 2 207 34 discriminator 2 view .LVU2015
 7082              	.LBB241:
 209:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7083              		.loc 2 209 1 discriminator 2 view .LVU2016
 211:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7084              		.loc 2 211 2 discriminator 2 view .LVU2017
 7085              		.syntax unified
 7086              	@ 211 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7087 0012 EFF31188 			mrs r8, basepri											
 7088 0016 4FF05003 		mov r3, #80												
 7089 001a 83F31188 		msr basepri, r3											
 7090 001e BFF36F8F 		isb														
 7091 0022 BFF34F8F 		dsb														
 7092              	
 7093              	@ 0 "" 2
 7094              	.LVL512:
 223:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 7095              		.loc 2 223 2 discriminator 2 view .LVU2018
 223:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 7096              		.loc 2 223 2 is_stmt 0 discriminator 2 view .LVU2019
 7097              		.thumb
 7098              		.syntax unified
 7099              	.LBE241:
 7100              	.LBE240:
4957:System/FreeRTOS/tasks.c **** 			{
 7101              		.loc 1 4957 4 is_stmt 1 discriminator 2 view .LVU2020
4957:System/FreeRTOS/tasks.c **** 			{
 7102              		.loc 1 4957 6 is_stmt 0 discriminator 2 view .LVU2021
 7103 0026 0DB1     		cbz	r5, .L553
4959:System/FreeRTOS/tasks.c **** 			}
 7104              		.loc 1 4959 5 is_stmt 1 view .LVU2022
4959:System/FreeRTOS/tasks.c **** 			}
 7105              		.loc 1 4959 42 is_stmt 0 view .LVU2023
 7106 0028 BB6D     		ldr	r3, [r7, #88]
4959:System/FreeRTOS/tasks.c **** 			}
 7107              		.loc 1 4959 35 view .LVU2024
 7108 002a 2B60     		str	r3, [r5]
 7109              	.L553:
4962:System/FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7110              		.loc 1 4962 4 is_stmt 1 view .LVU2025
4962:System/FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7111              		.loc 1 4962 26 is_stmt 0 view .LVU2026
 7112 002c 97F85C30 		ldrb	r3, [r7, #92]	@ zero_extendqisi2
 7113 0030 DBB2     		uxtb	r3, r3
 7114              	.LVL513:
4963:System/FreeRTOS/tasks.c **** 
 7115              		.loc 1 4963 4 is_stmt 1 view .LVU2027
4963:System/FreeRTOS/tasks.c **** 
 7116              		.loc 1 4963 25 is_stmt 0 view .LVU2028
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 255


 7117 0032 0222     		movs	r2, #2
 7118 0034 87F85C20 		strb	r2, [r7, #92]
4965:System/FreeRTOS/tasks.c **** 			{
 7119              		.loc 1 4965 4 is_stmt 1 view .LVU2029
 7120 0038 042C     		cmp	r4, #4
 7121 003a 1FD8     		bhi	.L554
 7122 003c DFE804F0 		tbb	[pc, r4]
 7123              	.L556:
 7124 0040 2B       		.byte	(.L568-.L556)/2
 7125 0041 0C       		.byte	(.L559-.L556)/2
 7126 0042 11       		.byte	(.L558-.L556)/2
 7127 0043 16       		.byte	(.L557-.L556)/2
 7128 0044 19       		.byte	(.L555-.L556)/2
 7129              	.LVL514:
 7130 0045 00       		.p2align 1
 7131              	.L573:
 7132              	.LCFI59:
 7133              		.cfi_def_cfa_offset 0
 7134              		.cfi_restore 4
 7135              		.cfi_restore 5
 7136              		.cfi_restore 6
 7137              		.cfi_restore 7
 7138              		.cfi_restore 8
 7139              		.cfi_restore 14
4933:System/FreeRTOS/tasks.c **** 
 7140              		.loc 1 4933 3 view .LVU2030
 7141              	.LBB242:
 7142              	.LBI242:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 7143              		.loc 2 191 30 view .LVU2031
 7144              	.LBB243:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7145              		.loc 2 193 1 view .LVU2032
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7146              		.loc 2 195 2 view .LVU2033
 7147              		.syntax unified
 7148              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7149 0046 4FF05003 			mov r3, #80												
 7150 004a 83F31188 		msr basepri, r3											
 7151 004e BFF36F8F 		isb														
 7152 0052 BFF34F8F 		dsb														
 7153              	
 7154              	@ 0 "" 2
 7155              	.LVL515:
 7156              		.thumb
 7157              		.syntax unified
 7158              	.L552:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7159              		.loc 2 195 2 is_stmt 0 view .LVU2034
 7160              	.LBE243:
 7161              	.LBE242:
4933:System/FreeRTOS/tasks.c **** 
 7162              		.loc 1 4933 3 is_stmt 1 discriminator 1 view .LVU2035
4933:System/FreeRTOS/tasks.c **** 
 7163              		.loc 1 4933 3 discriminator 1 view .LVU2036
4933:System/FreeRTOS/tasks.c **** 
 7164              		.loc 1 4933 3 discriminator 1 view .LVU2037
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 256


 7165 0056 FEE7     		b	.L552
 7166              	.LVL516:
 7167              	.L559:
 7168              	.LCFI60:
 7169              		.cfi_def_cfa_offset 24
 7170              		.cfi_offset 4, -24
 7171              		.cfi_offset 5, -20
 7172              		.cfi_offset 6, -16
 7173              		.cfi_offset 7, -12
 7174              		.cfi_offset 8, -8
 7175              		.cfi_offset 14, -4
4968:System/FreeRTOS/tasks.c **** 					break;
 7176              		.loc 1 4968 6 view .LVU2038
4968:System/FreeRTOS/tasks.c **** 					break;
 7177              		.loc 1 4968 29 is_stmt 0 view .LVU2039
 7178 0058 BA6D     		ldr	r2, [r7, #88]
 7179 005a 1643     		orrs	r6, r6, r2
 7180              	.LVL517:
4968:System/FreeRTOS/tasks.c **** 					break;
 7181              		.loc 1 4968 29 view .LVU2040
 7182 005c BE65     		str	r6, [r7, #88]
4969:System/FreeRTOS/tasks.c **** 
 7183              		.loc 1 4969 6 is_stmt 1 view .LVU2041
4930:System/FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 7184              		.loc 1 4930 13 is_stmt 0 view .LVU2042
 7185 005e 0124     		movs	r4, #1
4969:System/FreeRTOS/tasks.c **** 
 7186              		.loc 1 4969 6 view .LVU2043
 7187 0060 1AE0     		b	.L560
 7188              	.LVL518:
 7189              	.L558:
4972:System/FreeRTOS/tasks.c **** 					break;
 7190              		.loc 1 4972 6 is_stmt 1 view .LVU2044
4972:System/FreeRTOS/tasks.c **** 					break;
 7191              		.loc 1 4972 13 is_stmt 0 view .LVU2045
 7192 0062 BA6D     		ldr	r2, [r7, #88]
4972:System/FreeRTOS/tasks.c **** 					break;
 7193              		.loc 1 4972 32 view .LVU2046
 7194 0064 0132     		adds	r2, r2, #1
 7195 0066 BA65     		str	r2, [r7, #88]
4973:System/FreeRTOS/tasks.c **** 
 7196              		.loc 1 4973 6 is_stmt 1 view .LVU2047
4930:System/FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 7197              		.loc 1 4930 13 is_stmt 0 view .LVU2048
 7198 0068 0124     		movs	r4, #1
4973:System/FreeRTOS/tasks.c **** 
 7199              		.loc 1 4973 6 view .LVU2049
 7200 006a 15E0     		b	.L560
 7201              	.L557:
4976:System/FreeRTOS/tasks.c **** 					break;
 7202              		.loc 1 4976 6 is_stmt 1 view .LVU2050
4976:System/FreeRTOS/tasks.c **** 					break;
 7203              		.loc 1 4976 29 is_stmt 0 view .LVU2051
 7204 006c BE65     		str	r6, [r7, #88]
4977:System/FreeRTOS/tasks.c **** 
 7205              		.loc 1 4977 6 is_stmt 1 view .LVU2052
4930:System/FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 257


 7206              		.loc 1 4930 13 is_stmt 0 view .LVU2053
 7207 006e 0124     		movs	r4, #1
4977:System/FreeRTOS/tasks.c **** 
 7208              		.loc 1 4977 6 view .LVU2054
 7209 0070 12E0     		b	.L560
 7210              	.L555:
4980:System/FreeRTOS/tasks.c **** 					{
 7211              		.loc 1 4980 6 is_stmt 1 view .LVU2055
4980:System/FreeRTOS/tasks.c **** 					{
 7212              		.loc 1 4980 8 is_stmt 0 view .LVU2056
 7213 0072 022B     		cmp	r3, #2
 7214 0074 17D0     		beq	.L569
4982:System/FreeRTOS/tasks.c **** 					}
 7215              		.loc 1 4982 7 is_stmt 1 view .LVU2057
4982:System/FreeRTOS/tasks.c **** 					}
 7216              		.loc 1 4982 30 is_stmt 0 view .LVU2058
 7217 0076 BE65     		str	r6, [r7, #88]
4930:System/FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 7218              		.loc 1 4930 13 view .LVU2059
 7219 0078 0124     		movs	r4, #1
 7220 007a 0DE0     		b	.L560
 7221              	.L554:
5000:System/FreeRTOS/tasks.c **** 					break;
 7222              		.loc 1 5000 6 is_stmt 1 view .LVU2060
 7223 007c BA6D     		ldr	r2, [r7, #88]
 7224 007e B2F1FF3F 		cmp	r2, #-1
 7225 0082 12D0     		beq	.L570
5000:System/FreeRTOS/tasks.c **** 					break;
 7226              		.loc 1 5000 6 view .LVU2061
 7227              	.LBB244:
 7228              	.LBI244:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 7229              		.loc 2 191 30 view .LVU2062
 7230              	.LBB245:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7231              		.loc 2 193 1 view .LVU2063
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7232              		.loc 2 195 2 view .LVU2064
 7233              		.syntax unified
 7234              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7235 0084 4FF05003 			mov r3, #80												
 7236 0088 83F31188 		msr basepri, r3											
 7237 008c BFF36F8F 		isb														
 7238 0090 BFF34F8F 		dsb														
 7239              	
 7240              	@ 0 "" 2
 7241              	.LVL519:
 7242              		.thumb
 7243              		.syntax unified
 7244              	.L561:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7245              		.loc 2 195 2 is_stmt 0 view .LVU2065
 7246              	.LBE245:
 7247              	.LBE244:
5000:System/FreeRTOS/tasks.c **** 					break;
 7248              		.loc 1 5000 6 is_stmt 1 discriminator 2 view .LVU2066
5000:System/FreeRTOS/tasks.c **** 					break;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 258


 7249              		.loc 1 5000 6 discriminator 2 view .LVU2067
5000:System/FreeRTOS/tasks.c **** 					break;
 7250              		.loc 1 5000 6 discriminator 2 view .LVU2068
 7251 0094 FEE7     		b	.L561
 7252              	.LVL520:
 7253              	.L568:
4965:System/FreeRTOS/tasks.c **** 			{
 7254              		.loc 1 4965 4 is_stmt 0 view .LVU2069
 7255 0096 0124     		movs	r4, #1
 7256              	.LVL521:
 7257              	.L560:
5004:System/FreeRTOS/tasks.c **** 
 7258              		.loc 1 5004 31 is_stmt 1 view .LVU2070
5008:System/FreeRTOS/tasks.c **** 			{
 7259              		.loc 1 5008 4 view .LVU2071
5008:System/FreeRTOS/tasks.c **** 			{
 7260              		.loc 1 5008 6 is_stmt 0 view .LVU2072
 7261 0098 012B     		cmp	r3, #1
 7262 009a 08D0     		beq	.L574
 7263              	.LVL522:
 7264              	.L562:
5041:System/FreeRTOS/tasks.c **** 				}
 7265              		.loc 1 5041 30 is_stmt 1 view .LVU2073
5045:System/FreeRTOS/tasks.c **** 
 7266              		.loc 1 5045 3 view .LVU2074
 7267              	.LBB246:
 7268              	.LBI246:
 227:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 7269              		.loc 2 227 30 view .LVU2075
 7270              	.LBB247:
 7271              		.loc 2 229 2 view .LVU2076
 7272              		.syntax unified
 7273              	@ 229 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7274 009c 88F31188 			msr basepri, r8	
 7275              	@ 0 "" 2
 7276              	.LVL523:
 7277              		.loc 2 229 2 is_stmt 0 view .LVU2077
 7278              		.thumb
 7279              		.syntax unified
 7280              	.LBE247:
 7281              	.LBE246:
5047:System/FreeRTOS/tasks.c **** 	}
 7282              		.loc 1 5047 3 is_stmt 1 view .LVU2078
5048:System/FreeRTOS/tasks.c **** 
 7283              		.loc 1 5048 2 is_stmt 0 view .LVU2079
 7284 00a0 2046     		mov	r0, r4
 7285 00a2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7286              	.LVL524:
 7287              	.L569:
4987:System/FreeRTOS/tasks.c **** 					}
 7288              		.loc 1 4987 15 view .LVU2080
 7289 00a6 0024     		movs	r4, #0
 7290 00a8 F6E7     		b	.L560
 7291              	.L570:
4930:System/FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 7292              		.loc 1 4930 13 view .LVU2081
 7293 00aa 0124     		movs	r4, #1
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 259


 7294 00ac F4E7     		b	.L560
 7295              	.LVL525:
 7296              	.L574:
5011:System/FreeRTOS/tasks.c **** 
 7297              		.loc 1 5011 5 is_stmt 1 view .LVU2082
 7298 00ae BB6A     		ldr	r3, [r7, #40]
 7299              	.LVL526:
5011:System/FreeRTOS/tasks.c **** 
 7300              		.loc 1 5011 5 is_stmt 0 view .LVU2083
 7301 00b0 43B1     		cbz	r3, .L563
5011:System/FreeRTOS/tasks.c **** 
 7302              		.loc 1 5011 5 is_stmt 1 view .LVU2084
 7303              	.LBB248:
 7304              	.LBI248:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 7305              		.loc 2 191 30 view .LVU2085
 7306              	.LBB249:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7307              		.loc 2 193 1 view .LVU2086
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7308              		.loc 2 195 2 view .LVU2087
 7309              		.syntax unified
 7310              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7311 00b2 4FF05003 			mov r3, #80												
 7312 00b6 83F31188 		msr basepri, r3											
 7313 00ba BFF36F8F 		isb														
 7314 00be BFF34F8F 		dsb														
 7315              	
 7316              	@ 0 "" 2
 7317              	.LVL527:
 7318              		.thumb
 7319              		.syntax unified
 7320              	.L564:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7321              		.loc 2 195 2 is_stmt 0 view .LVU2088
 7322              	.LBE249:
 7323              	.LBE248:
5011:System/FreeRTOS/tasks.c **** 
 7324              		.loc 1 5011 5 is_stmt 1 discriminator 3 view .LVU2089
5011:System/FreeRTOS/tasks.c **** 
 7325              		.loc 1 5011 5 discriminator 3 view .LVU2090
5011:System/FreeRTOS/tasks.c **** 
 7326              		.loc 1 5011 5 discriminator 3 view .LVU2091
 7327 00c2 FEE7     		b	.L564
 7328              	.L563:
5011:System/FreeRTOS/tasks.c **** 
 7329              		.loc 1 5011 82 discriminator 2 view .LVU2092
5013:System/FreeRTOS/tasks.c **** 				{
 7330              		.loc 1 5013 5 discriminator 2 view .LVU2093
5013:System/FreeRTOS/tasks.c **** 				{
 7331              		.loc 1 5013 30 is_stmt 0 discriminator 2 view .LVU2094
 7332 00c4 154B     		ldr	r3, .L575
 7333 00c6 1B68     		ldr	r3, [r3]
5013:System/FreeRTOS/tasks.c **** 				{
 7334              		.loc 1 5013 7 discriminator 2 view .LVU2095
 7335 00c8 0BBB     		cbnz	r3, .L565
5015:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 260


 7336              		.loc 1 5015 6 is_stmt 1 view .LVU2096
5015:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7337              		.loc 1 5015 15 is_stmt 0 view .LVU2097
 7338 00ca 3D1D     		adds	r5, r7, #4
 7339              	.LVL528:
5015:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7340              		.loc 1 5015 15 view .LVU2098
 7341 00cc 2846     		mov	r0, r5
 7342 00ce FFF7FEFF 		bl	uxListRemove
 7343              	.LVL529:
5016:System/FreeRTOS/tasks.c **** 				}
 7344              		.loc 1 5016 6 is_stmt 1 view .LVU2099
5016:System/FreeRTOS/tasks.c **** 				}
 7345              		.loc 1 5016 6 view .LVU2100
 7346 00d2 F86A     		ldr	r0, [r7, #44]
 7347 00d4 0123     		movs	r3, #1
 7348 00d6 8340     		lsls	r3, r3, r0
 7349 00d8 114A     		ldr	r2, .L575+4
 7350 00da 1168     		ldr	r1, [r2]
 7351 00dc 0B43     		orrs	r3, r3, r1
 7352 00de 1360     		str	r3, [r2]
5016:System/FreeRTOS/tasks.c **** 				}
 7353              		.loc 1 5016 6 view .LVU2101
 7354 00e0 00EB8000 		add	r0, r0, r0, lsl #2
 7355 00e4 2946     		mov	r1, r5
 7356 00e6 0F4B     		ldr	r3, .L575+8
 7357 00e8 03EB8000 		add	r0, r3, r0, lsl #2
 7358 00ec FFF7FEFF 		bl	vListInsertEnd
 7359              	.LVL530:
5016:System/FreeRTOS/tasks.c **** 				}
 7360              		.loc 1 5016 36 view .LVU2102
 7361              	.L566:
5025:System/FreeRTOS/tasks.c **** 				{
 7362              		.loc 1 5025 5 view .LVU2103
5025:System/FreeRTOS/tasks.c **** 				{
 7363              		.loc 1 5025 14 is_stmt 0 view .LVU2104
 7364 00f0 FA6A     		ldr	r2, [r7, #44]
5025:System/FreeRTOS/tasks.c **** 				{
 7365              		.loc 1 5025 41 view .LVU2105
 7366 00f2 0D4B     		ldr	r3, .L575+12
 7367 00f4 1B68     		ldr	r3, [r3]
 7368 00f6 DB6A     		ldr	r3, [r3, #44]
5025:System/FreeRTOS/tasks.c **** 				{
 7369              		.loc 1 5025 7 view .LVU2106
 7370 00f8 9A42     		cmp	r2, r3
 7371 00fa CFD9     		bls	.L562
5029:System/FreeRTOS/tasks.c **** 					{
 7372              		.loc 1 5029 6 is_stmt 1 view .LVU2107
5029:System/FreeRTOS/tasks.c **** 					{
 7373              		.loc 1 5029 8 is_stmt 0 view .LVU2108
 7374 00fc 069B     		ldr	r3, [sp, #24]
 7375 00fe 13B1     		cbz	r3, .L567
5031:System/FreeRTOS/tasks.c **** 					}
 7376              		.loc 1 5031 7 is_stmt 1 view .LVU2109
5031:System/FreeRTOS/tasks.c **** 					}
 7377              		.loc 1 5031 34 is_stmt 0 view .LVU2110
 7378 0100 0123     		movs	r3, #1
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 261


 7379 0102 069A     		ldr	r2, [sp, #24]
 7380 0104 1360     		str	r3, [r2]
 7381              	.L567:
5037:System/FreeRTOS/tasks.c **** 				}
 7382              		.loc 1 5037 6 is_stmt 1 view .LVU2111
5037:System/FreeRTOS/tasks.c **** 				}
 7383              		.loc 1 5037 20 is_stmt 0 view .LVU2112
 7384 0106 094B     		ldr	r3, .L575+16
 7385 0108 0122     		movs	r2, #1
 7386 010a 1A60     		str	r2, [r3]
 7387 010c C6E7     		b	.L562
 7388              	.LVL531:
 7389              	.L565:
5022:System/FreeRTOS/tasks.c **** 				}
 7390              		.loc 1 5022 6 is_stmt 1 view .LVU2113
 7391 010e 07F11801 		add	r1, r7, #24
 7392 0112 0748     		ldr	r0, .L575+20
 7393 0114 FFF7FEFF 		bl	vListInsertEnd
 7394              	.LVL532:
 7395 0118 EAE7     		b	.L566
 7396              	.L576:
 7397 011a 00BF     		.align	2
 7398              	.L575:
 7399 011c 00000000 		.word	.LANCHOR16
 7400 0120 00000000 		.word	.LANCHOR13
 7401 0124 00000000 		.word	.LANCHOR4
 7402 0128 00000000 		.word	.LANCHOR10
 7403 012c 00000000 		.word	.LANCHOR19
 7404 0130 00000000 		.word	.LANCHOR1
 7405              		.cfi_endproc
 7406              	.LFE63:
 7408              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 7409              		.align	1
 7410              		.global	vTaskNotifyGiveFromISR
 7411              		.syntax unified
 7412              		.thumb
 7413              		.thumb_func
 7415              	vTaskNotifyGiveFromISR:
 7416              	.LVL533:
 7417              	.LFB64:
5056:System/FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 7418              		.loc 1 5056 2 view -0
 7419              		.cfi_startproc
 7420              		@ args = 0, pretend = 0, frame = 0
 7421              		@ frame_needed = 0, uses_anonymous_args = 0
5056:System/FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 7422              		.loc 1 5056 2 is_stmt 0 view .LVU2115
 7423 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 7424              	.LCFI61:
 7425              		.cfi_def_cfa_offset 24
 7426              		.cfi_offset 3, -24
 7427              		.cfi_offset 4, -20
 7428              		.cfi_offset 5, -16
 7429              		.cfi_offset 6, -12
 7430              		.cfi_offset 7, -8
 7431              		.cfi_offset 14, -4
5057:System/FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 262


 7432              		.loc 1 5057 2 is_stmt 1 view .LVU2116
5058:System/FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 7433              		.loc 1 5058 2 view .LVU2117
5059:System/FreeRTOS/tasks.c **** 
 7434              		.loc 1 5059 2 view .LVU2118
5061:System/FreeRTOS/tasks.c **** 
 7435              		.loc 1 5061 3 view .LVU2119
 7436 0002 D8B1     		cbz	r0, .L587
 7437 0004 0D46     		mov	r5, r1
 7438 0006 0446     		mov	r4, r0
5061:System/FreeRTOS/tasks.c **** 
 7439              		.loc 1 5061 32 discriminator 2 view .LVU2120
5079:System/FreeRTOS/tasks.c **** 
 7440              		.loc 1 5079 3 discriminator 2 view .LVU2121
 7441 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 7442              	.LVL534:
5081:System/FreeRTOS/tasks.c **** 
 7443              		.loc 1 5081 3 discriminator 2 view .LVU2122
5083:System/FreeRTOS/tasks.c **** 		{
 7444              		.loc 1 5083 3 discriminator 2 view .LVU2123
 7445              	.LBB250:
 7446              	.LBI250:
 207:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 7447              		.loc 2 207 34 discriminator 2 view .LVU2124
 7448              	.LBB251:
 209:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7449              		.loc 2 209 1 discriminator 2 view .LVU2125
 211:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7450              		.loc 2 211 2 discriminator 2 view .LVU2126
 7451              		.syntax unified
 7452              	@ 211 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7453 000c EFF31186 			mrs r6, basepri											
 7454 0010 4FF05003 		mov r3, #80												
 7455 0014 83F31188 		msr basepri, r3											
 7456 0018 BFF36F8F 		isb														
 7457 001c BFF34F8F 		dsb														
 7458              	
 7459              	@ 0 "" 2
 7460              	.LVL535:
 223:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 7461              		.loc 2 223 2 discriminator 2 view .LVU2127
 223:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 7462              		.loc 2 223 2 is_stmt 0 discriminator 2 view .LVU2128
 7463              		.thumb
 7464              		.syntax unified
 7465              	.LBE251:
 7466              	.LBE250:
5085:System/FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7467              		.loc 1 5085 4 is_stmt 1 discriminator 2 view .LVU2129
5085:System/FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7468              		.loc 1 5085 26 is_stmt 0 discriminator 2 view .LVU2130
 7469 0020 94F85C30 		ldrb	r3, [r4, #92]	@ zero_extendqisi2
 7470 0024 DBB2     		uxtb	r3, r3
 7471              	.LVL536:
5086:System/FreeRTOS/tasks.c **** 
 7472              		.loc 1 5086 4 is_stmt 1 discriminator 2 view .LVU2131
5086:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 263


 7473              		.loc 1 5086 25 is_stmt 0 discriminator 2 view .LVU2132
 7474 0026 0222     		movs	r2, #2
 7475 0028 84F85C20 		strb	r2, [r4, #92]
5090:System/FreeRTOS/tasks.c **** 
 7476              		.loc 1 5090 4 is_stmt 1 discriminator 2 view .LVU2133
5090:System/FreeRTOS/tasks.c **** 
 7477              		.loc 1 5090 11 is_stmt 0 discriminator 2 view .LVU2134
 7478 002c A26D     		ldr	r2, [r4, #88]
5090:System/FreeRTOS/tasks.c **** 
 7479              		.loc 1 5090 30 discriminator 2 view .LVU2135
 7480 002e 0132     		adds	r2, r2, #1
 7481 0030 A265     		str	r2, [r4, #88]
5092:System/FreeRTOS/tasks.c **** 
 7482              		.loc 1 5092 36 is_stmt 1 discriminator 2 view .LVU2136
5096:System/FreeRTOS/tasks.c **** 			{
 7483              		.loc 1 5096 4 discriminator 2 view .LVU2137
5096:System/FreeRTOS/tasks.c **** 			{
 7484              		.loc 1 5096 6 is_stmt 0 discriminator 2 view .LVU2138
 7485 0032 012B     		cmp	r3, #1
 7486 0034 0BD0     		beq	.L588
 7487              	.LVL537:
 7488              	.L580:
5129:System/FreeRTOS/tasks.c **** 				}
 7489              		.loc 1 5129 30 is_stmt 1 view .LVU2139
5133:System/FreeRTOS/tasks.c **** 	}
 7490              		.loc 1 5133 3 view .LVU2140
 7491              	.LBB252:
 7492              	.LBI252:
 227:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 7493              		.loc 2 227 30 view .LVU2141
 7494              	.LBB253:
 7495              		.loc 2 229 2 view .LVU2142
 7496              		.syntax unified
 7497              	@ 229 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7498 0036 86F31188 			msr basepri, r6	
 7499              	@ 0 "" 2
 7500              	.LVL538:
 7501              		.loc 2 229 2 is_stmt 0 view .LVU2143
 7502              		.thumb
 7503              		.syntax unified
 7504              	.LBE253:
 7505              	.LBE252:
5134:System/FreeRTOS/tasks.c **** 
 7506              		.loc 1 5134 2 view .LVU2144
 7507 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 7508              	.LVL539:
 7509              	.L587:
5061:System/FreeRTOS/tasks.c **** 
 7510              		.loc 1 5061 3 is_stmt 1 view .LVU2145
 7511              	.LBB254:
 7512              	.LBI254:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 7513              		.loc 2 191 30 view .LVU2146
 7514              	.LBB255:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7515              		.loc 2 193 1 view .LVU2147
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 264


 7516              		.loc 2 195 2 view .LVU2148
 7517              		.syntax unified
 7518              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7519 003c 4FF05003 			mov r3, #80												
 7520 0040 83F31188 		msr basepri, r3											
 7521 0044 BFF36F8F 		isb														
 7522 0048 BFF34F8F 		dsb														
 7523              	
 7524              	@ 0 "" 2
 7525              	.LVL540:
 7526              		.thumb
 7527              		.syntax unified
 7528              	.L579:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7529              		.loc 2 195 2 is_stmt 0 view .LVU2149
 7530              	.LBE255:
 7531              	.LBE254:
5061:System/FreeRTOS/tasks.c **** 
 7532              		.loc 1 5061 3 is_stmt 1 discriminator 1 view .LVU2150
5061:System/FreeRTOS/tasks.c **** 
 7533              		.loc 1 5061 3 discriminator 1 view .LVU2151
5061:System/FreeRTOS/tasks.c **** 
 7534              		.loc 1 5061 3 discriminator 1 view .LVU2152
 7535 004c FEE7     		b	.L579
 7536              	.LVL541:
 7537              	.L588:
5099:System/FreeRTOS/tasks.c **** 
 7538              		.loc 1 5099 5 view .LVU2153
 7539 004e A36A     		ldr	r3, [r4, #40]
 7540              	.LVL542:
5099:System/FreeRTOS/tasks.c **** 
 7541              		.loc 1 5099 5 is_stmt 0 view .LVU2154
 7542 0050 43B1     		cbz	r3, .L581
5099:System/FreeRTOS/tasks.c **** 
 7543              		.loc 1 5099 5 is_stmt 1 view .LVU2155
 7544              	.LBB256:
 7545              	.LBI256:
 191:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 7546              		.loc 2 191 30 view .LVU2156
 7547              	.LBB257:
 193:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7548              		.loc 2 193 1 view .LVU2157
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7549              		.loc 2 195 2 view .LVU2158
 7550              		.syntax unified
 7551              	@ 195 "System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7552 0052 4FF05003 			mov r3, #80												
 7553 0056 83F31188 		msr basepri, r3											
 7554 005a BFF36F8F 		isb														
 7555 005e BFF34F8F 		dsb														
 7556              	
 7557              	@ 0 "" 2
 7558              	.LVL543:
 7559              		.thumb
 7560              		.syntax unified
 7561              	.L582:
 195:System/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 265


 7562              		.loc 2 195 2 is_stmt 0 view .LVU2159
 7563              	.LBE257:
 7564              	.LBE256:
5099:System/FreeRTOS/tasks.c **** 
 7565              		.loc 1 5099 5 is_stmt 1 discriminator 2 view .LVU2160
5099:System/FreeRTOS/tasks.c **** 
 7566              		.loc 1 5099 5 discriminator 2 view .LVU2161
5099:System/FreeRTOS/tasks.c **** 
 7567              		.loc 1 5099 5 discriminator 2 view .LVU2162
 7568 0062 FEE7     		b	.L582
 7569              	.L581:
5099:System/FreeRTOS/tasks.c **** 
 7570              		.loc 1 5099 82 discriminator 2 view .LVU2163
5101:System/FreeRTOS/tasks.c **** 				{
 7571              		.loc 1 5101 5 discriminator 2 view .LVU2164
5101:System/FreeRTOS/tasks.c **** 				{
 7572              		.loc 1 5101 30 is_stmt 0 discriminator 2 view .LVU2165
 7573 0064 144B     		ldr	r3, .L589
 7574 0066 1B68     		ldr	r3, [r3]
5101:System/FreeRTOS/tasks.c **** 				{
 7575              		.loc 1 5101 7 discriminator 2 view .LVU2166
 7576 0068 FBB9     		cbnz	r3, .L583
5103:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7577              		.loc 1 5103 6 is_stmt 1 view .LVU2167
5103:System/FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7578              		.loc 1 5103 15 is_stmt 0 view .LVU2168
 7579 006a 271D     		adds	r7, r4, #4
 7580 006c 3846     		mov	r0, r7
 7581 006e FFF7FEFF 		bl	uxListRemove
 7582              	.LVL544:
5104:System/FreeRTOS/tasks.c **** 				}
 7583              		.loc 1 5104 6 is_stmt 1 view .LVU2169
5104:System/FreeRTOS/tasks.c **** 				}
 7584              		.loc 1 5104 6 view .LVU2170
 7585 0072 E06A     		ldr	r0, [r4, #44]
 7586 0074 0123     		movs	r3, #1
 7587 0076 8340     		lsls	r3, r3, r0
 7588 0078 104A     		ldr	r2, .L589+4
 7589 007a 1168     		ldr	r1, [r2]
 7590 007c 0B43     		orrs	r3, r3, r1
 7591 007e 1360     		str	r3, [r2]
5104:System/FreeRTOS/tasks.c **** 				}
 7592              		.loc 1 5104 6 view .LVU2171
 7593 0080 00EB8000 		add	r0, r0, r0, lsl #2
 7594 0084 3946     		mov	r1, r7
 7595 0086 0E4B     		ldr	r3, .L589+8
 7596 0088 03EB8000 		add	r0, r3, r0, lsl #2
 7597 008c FFF7FEFF 		bl	vListInsertEnd
 7598              	.LVL545:
5104:System/FreeRTOS/tasks.c **** 				}
 7599              		.loc 1 5104 36 view .LVU2172
 7600              	.L584:
5113:System/FreeRTOS/tasks.c **** 				{
 7601              		.loc 1 5113 5 view .LVU2173
5113:System/FreeRTOS/tasks.c **** 				{
 7602              		.loc 1 5113 14 is_stmt 0 view .LVU2174
 7603 0090 E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 266


5113:System/FreeRTOS/tasks.c **** 				{
 7604              		.loc 1 5113 41 view .LVU2175
 7605 0092 0C4B     		ldr	r3, .L589+12
 7606 0094 1B68     		ldr	r3, [r3]
 7607 0096 DB6A     		ldr	r3, [r3, #44]
5113:System/FreeRTOS/tasks.c **** 				{
 7608              		.loc 1 5113 7 view .LVU2176
 7609 0098 9A42     		cmp	r2, r3
 7610 009a CCD9     		bls	.L580
5117:System/FreeRTOS/tasks.c **** 					{
 7611              		.loc 1 5117 6 is_stmt 1 view .LVU2177
5117:System/FreeRTOS/tasks.c **** 					{
 7612              		.loc 1 5117 8 is_stmt 0 view .LVU2178
 7613 009c 0DB1     		cbz	r5, .L585
5119:System/FreeRTOS/tasks.c **** 					}
 7614              		.loc 1 5119 7 is_stmt 1 view .LVU2179
5119:System/FreeRTOS/tasks.c **** 					}
 7615              		.loc 1 5119 34 is_stmt 0 view .LVU2180
 7616 009e 0123     		movs	r3, #1
 7617 00a0 2B60     		str	r3, [r5]
 7618              	.L585:
5125:System/FreeRTOS/tasks.c **** 				}
 7619              		.loc 1 5125 6 is_stmt 1 view .LVU2181
5125:System/FreeRTOS/tasks.c **** 				}
 7620              		.loc 1 5125 20 is_stmt 0 view .LVU2182
 7621 00a2 094B     		ldr	r3, .L589+16
 7622 00a4 0122     		movs	r2, #1
 7623 00a6 1A60     		str	r2, [r3]
 7624 00a8 C5E7     		b	.L580
 7625              	.L583:
5110:System/FreeRTOS/tasks.c **** 				}
 7626              		.loc 1 5110 6 is_stmt 1 view .LVU2183
 7627 00aa 04F11801 		add	r1, r4, #24
 7628 00ae 0748     		ldr	r0, .L589+20
 7629 00b0 FFF7FEFF 		bl	vListInsertEnd
 7630              	.LVL546:
 7631 00b4 ECE7     		b	.L584
 7632              	.L590:
 7633 00b6 00BF     		.align	2
 7634              	.L589:
 7635 00b8 00000000 		.word	.LANCHOR16
 7636 00bc 00000000 		.word	.LANCHOR13
 7637 00c0 00000000 		.word	.LANCHOR4
 7638 00c4 00000000 		.word	.LANCHOR10
 7639 00c8 00000000 		.word	.LANCHOR19
 7640 00cc 00000000 		.word	.LANCHOR1
 7641              		.cfi_endproc
 7642              	.LFE64:
 7644              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 7645              		.align	1
 7646              		.global	xTaskNotifyStateClear
 7647              		.syntax unified
 7648              		.thumb
 7649              		.thumb_func
 7651              	xTaskNotifyStateClear:
 7652              	.LVL547:
 7653              	.LFB65:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 267


5142:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 7654              		.loc 1 5142 2 view -0
 7655              		.cfi_startproc
 7656              		@ args = 0, pretend = 0, frame = 0
 7657              		@ frame_needed = 0, uses_anonymous_args = 0
5142:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 7658              		.loc 1 5142 2 is_stmt 0 view .LVU2185
 7659 0000 10B5     		push	{r4, lr}
 7660              	.LCFI62:
 7661              		.cfi_def_cfa_offset 8
 7662              		.cfi_offset 4, -8
 7663              		.cfi_offset 14, -4
5143:System/FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 7664              		.loc 1 5143 2 is_stmt 1 view .LVU2186
5144:System/FreeRTOS/tasks.c **** 
 7665              		.loc 1 5144 2 view .LVU2187
5148:System/FreeRTOS/tasks.c **** 
 7666              		.loc 1 5148 3 view .LVU2188
5148:System/FreeRTOS/tasks.c **** 
 7667              		.loc 1 5148 11 is_stmt 0 view .LVU2189
 7668 0002 0446     		mov	r4, r0
 7669 0004 58B1     		cbz	r0, .L596
 7670              	.LVL548:
 7671              	.L592:
5150:System/FreeRTOS/tasks.c **** 		{
 7672              		.loc 1 5150 3 is_stmt 1 discriminator 4 view .LVU2190
 7673 0006 FFF7FEFF 		bl	vPortEnterCritical
 7674              	.LVL549:
5152:System/FreeRTOS/tasks.c **** 			{
 7675              		.loc 1 5152 4 discriminator 4 view .LVU2191
5152:System/FreeRTOS/tasks.c **** 			{
 7676              		.loc 1 5152 13 is_stmt 0 discriminator 4 view .LVU2192
 7677 000a 94F85C30 		ldrb	r3, [r4, #92]	@ zero_extendqisi2
 7678 000e DBB2     		uxtb	r3, r3
5152:System/FreeRTOS/tasks.c **** 			{
 7679              		.loc 1 5152 6 discriminator 4 view .LVU2193
 7680 0010 022B     		cmp	r3, #2
 7681 0012 07D0     		beq	.L597
5159:System/FreeRTOS/tasks.c **** 			}
 7682              		.loc 1 5159 13 view .LVU2194
 7683 0014 0024     		movs	r4, #0
 7684              	.LVL550:
 7685              	.L593:
5162:System/FreeRTOS/tasks.c **** 
 7686              		.loc 1 5162 3 is_stmt 1 view .LVU2195
 7687 0016 FFF7FEFF 		bl	vPortExitCritical
 7688              	.LVL551:
5164:System/FreeRTOS/tasks.c **** 	}
 7689              		.loc 1 5164 3 view .LVU2196
5165:System/FreeRTOS/tasks.c **** 
 7690              		.loc 1 5165 2 is_stmt 0 view .LVU2197
 7691 001a 2046     		mov	r0, r4
 7692 001c 10BD     		pop	{r4, pc}
 7693              	.LVL552:
 7694              	.L596:
5148:System/FreeRTOS/tasks.c **** 
 7695              		.loc 1 5148 11 discriminator 1 view .LVU2198
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 268


 7696 001e 044B     		ldr	r3, .L598
 7697 0020 1C68     		ldr	r4, [r3]
 7698              	.LVL553:
5148:System/FreeRTOS/tasks.c **** 
 7699              		.loc 1 5148 11 discriminator 1 view .LVU2199
 7700 0022 F0E7     		b	.L592
 7701              	.LVL554:
 7702              	.L597:
5154:System/FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 7703              		.loc 1 5154 5 is_stmt 1 view .LVU2200
5154:System/FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 7704              		.loc 1 5154 26 is_stmt 0 view .LVU2201
 7705 0024 0023     		movs	r3, #0
 7706 0026 84F85C30 		strb	r3, [r4, #92]
5155:System/FreeRTOS/tasks.c **** 			}
 7707              		.loc 1 5155 5 is_stmt 1 view .LVU2202
 7708              	.LVL555:
5155:System/FreeRTOS/tasks.c **** 			}
 7709              		.loc 1 5155 13 is_stmt 0 view .LVU2203
 7710 002a 0124     		movs	r4, #1
 7711              	.LVL556:
5155:System/FreeRTOS/tasks.c **** 			}
 7712              		.loc 1 5155 13 view .LVU2204
 7713 002c F3E7     		b	.L593
 7714              	.L599:
 7715 002e 00BF     		.align	2
 7716              	.L598:
 7717 0030 00000000 		.word	.LANCHOR10
 7718              		.cfi_endproc
 7719              	.LFE65:
 7721              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 7722              		.align	1
 7723              		.global	ulTaskNotifyValueClear
 7724              		.syntax unified
 7725              		.thumb
 7726              		.thumb_func
 7728              	ulTaskNotifyValueClear:
 7729              	.LVL557:
 7730              	.LFB66:
5173:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 7731              		.loc 1 5173 2 is_stmt 1 view -0
 7732              		.cfi_startproc
 7733              		@ args = 0, pretend = 0, frame = 0
 7734              		@ frame_needed = 0, uses_anonymous_args = 0
5173:System/FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 7735              		.loc 1 5173 2 is_stmt 0 view .LVU2206
 7736 0000 70B5     		push	{r4, r5, r6, lr}
 7737              	.LCFI63:
 7738              		.cfi_def_cfa_offset 16
 7739              		.cfi_offset 4, -16
 7740              		.cfi_offset 5, -12
 7741              		.cfi_offset 6, -8
 7742              		.cfi_offset 14, -4
 7743 0002 0C46     		mov	r4, r1
5174:System/FreeRTOS/tasks.c **** 	uint32_t ulReturn;
 7744              		.loc 1 5174 2 is_stmt 1 view .LVU2207
5175:System/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 269


 7745              		.loc 1 5175 2 view .LVU2208
5179:System/FreeRTOS/tasks.c **** 
 7746              		.loc 1 5179 3 view .LVU2209
5179:System/FreeRTOS/tasks.c **** 
 7747              		.loc 1 5179 11 is_stmt 0 view .LVU2210
 7748 0004 0546     		mov	r5, r0
 7749 0006 60B1     		cbz	r0, .L603
 7750              	.LVL558:
 7751              	.L601:
5181:System/FreeRTOS/tasks.c **** 		{
 7752              		.loc 1 5181 3 is_stmt 1 discriminator 4 view .LVU2211
 7753 0008 FFF7FEFF 		bl	vPortEnterCritical
 7754              	.LVL559:
5185:System/FreeRTOS/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 7755              		.loc 1 5185 4 discriminator 4 view .LVU2212
5185:System/FreeRTOS/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 7756              		.loc 1 5185 27 is_stmt 0 discriminator 4 view .LVU2213
 7757 000c 064B     		ldr	r3, .L604
 7758 000e 1B68     		ldr	r3, [r3]
5185:System/FreeRTOS/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 7759              		.loc 1 5185 13 discriminator 4 view .LVU2214
 7760 0010 9E6D     		ldr	r6, [r3, #88]
 7761              	.LVL560:
5186:System/FreeRTOS/tasks.c **** 		}
 7762              		.loc 1 5186 4 is_stmt 1 discriminator 4 view .LVU2215
5186:System/FreeRTOS/tasks.c **** 		}
 7763              		.loc 1 5186 27 is_stmt 0 discriminator 4 view .LVU2216
 7764 0012 AB6D     		ldr	r3, [r5, #88]
 7765 0014 23EA0403 		bic	r3, r3, r4
 7766 0018 AB65     		str	r3, [r5, #88]
5188:System/FreeRTOS/tasks.c **** 
 7767              		.loc 1 5188 3 is_stmt 1 discriminator 4 view .LVU2217
 7768 001a FFF7FEFF 		bl	vPortExitCritical
 7769              	.LVL561:
5190:System/FreeRTOS/tasks.c **** 	}
 7770              		.loc 1 5190 3 discriminator 4 view .LVU2218
5191:System/FreeRTOS/tasks.c **** 
 7771              		.loc 1 5191 2 is_stmt 0 discriminator 4 view .LVU2219
 7772 001e 3046     		mov	r0, r6
 7773 0020 70BD     		pop	{r4, r5, r6, pc}
 7774              	.LVL562:
 7775              	.L603:
5179:System/FreeRTOS/tasks.c **** 
 7776              		.loc 1 5179 11 discriminator 1 view .LVU2220
 7777 0022 014B     		ldr	r3, .L604
 7778 0024 1D68     		ldr	r5, [r3]
 7779              	.LVL563:
5179:System/FreeRTOS/tasks.c **** 
 7780              		.loc 1 5179 11 discriminator 1 view .LVU2221
 7781 0026 EFE7     		b	.L601
 7782              	.L605:
 7783              		.align	2
 7784              	.L604:
 7785 0028 00000000 		.word	.LANCHOR10
 7786              		.cfi_endproc
 7787              	.LFE66:
 7789              		.global	pxCurrentTCB
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 270


 7790              		.section	.bss.pxCurrentTCB,"aw",%nobits
 7791              		.align	2
 7792              		.set	.LANCHOR10,. + 0
 7795              	pxCurrentTCB:
 7796 0000 00000000 		.space	4
 7797              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 7798              		.align	2
 7799              		.set	.LANCHOR2,. + 0
 7802              	pxDelayedTaskList:
 7803 0000 00000000 		.space	4
 7804              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 7805              		.align	2
 7806              		.set	.LANCHOR8,. + 0
 7809              	pxOverflowDelayedTaskList:
 7810 0000 00000000 		.space	4
 7811              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 7812              		.align	2
 7813              		.set	.LANCHOR4,. + 0
 7816              	pxReadyTasksLists:
 7817 0000 00000000 		.space	100
 7817      00000000 
 7817      00000000 
 7817      00000000 
 7817      00000000 
 7818              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 7819              		.align	2
 7820              		.set	.LANCHOR9,. + 0
 7823              	uxCurrentNumberOfTasks:
 7824 0000 00000000 		.space	4
 7825              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 7826              		.align	2
 7827              		.set	.LANCHOR14,. + 0
 7830              	uxDeletedTasksWaitingCleanUp:
 7831 0000 00000000 		.space	4
 7832              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 7833              		.align	2
 7834              		.set	.LANCHOR16,. + 0
 7837              	uxSchedulerSuspended:
 7838 0000 00000000 		.space	4
 7839              		.section	.bss.uxTaskNumber,"aw",%nobits
 7840              		.align	2
 7841              		.set	.LANCHOR12,. + 0
 7844              	uxTaskNumber:
 7845 0000 00000000 		.space	4
 7846              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 7847              		.align	2
 7848              		.set	.LANCHOR13,. + 0
 7851              	uxTopReadyPriority:
 7852 0000 00000000 		.space	4
 7853              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 7854              		.align	2
 7855              		.set	.LANCHOR5,. + 0
 7858              	xDelayedTaskList1:
 7859 0000 00000000 		.space	20
 7859      00000000 
 7859      00000000 
 7859      00000000 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 271


 7859      00000000 
 7860              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 7861              		.align	2
 7862              		.set	.LANCHOR6,. + 0
 7865              	xDelayedTaskList2:
 7866 0000 00000000 		.space	20
 7866      00000000 
 7866      00000000 
 7866      00000000 
 7866      00000000 
 7867              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 7868              		.align	2
 7869              		.set	.LANCHOR17,. + 0
 7872              	xIdleTaskHandle:
 7873 0000 00000000 		.space	4
 7874              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 7875              		.align	2
 7876              		.set	.LANCHOR3,. + 0
 7879              	xNextTaskUnblockTime:
 7880 0000 00000000 		.space	4
 7881              		.section	.bss.xNumOfOverflows,"aw",%nobits
 7882              		.align	2
 7883              		.set	.LANCHOR18,. + 0
 7886              	xNumOfOverflows:
 7887 0000 00000000 		.space	4
 7888              		.section	.bss.xPendedTicks,"aw",%nobits
 7889              		.align	2
 7890              		.set	.LANCHOR20,. + 0
 7893              	xPendedTicks:
 7894 0000 00000000 		.space	4
 7895              		.section	.bss.xPendingReadyList,"aw",%nobits
 7896              		.align	2
 7897              		.set	.LANCHOR1,. + 0
 7900              	xPendingReadyList:
 7901 0000 00000000 		.space	20
 7901      00000000 
 7901      00000000 
 7901      00000000 
 7901      00000000 
 7902              		.section	.bss.xSchedulerRunning,"aw",%nobits
 7903              		.align	2
 7904              		.set	.LANCHOR11,. + 0
 7907              	xSchedulerRunning:
 7908 0000 00000000 		.space	4
 7909              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 7910              		.align	2
 7911              		.set	.LANCHOR0,. + 0
 7914              	xSuspendedTaskList:
 7915 0000 00000000 		.space	20
 7915      00000000 
 7915      00000000 
 7915      00000000 
 7915      00000000 
 7916              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 7917              		.align	2
 7918              		.set	.LANCHOR7,. + 0
 7921              	xTasksWaitingTermination:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 272


 7922 0000 00000000 		.space	20
 7922      00000000 
 7922      00000000 
 7922      00000000 
 7922      00000000 
 7923              		.section	.bss.xTickCount,"aw",%nobits
 7924              		.align	2
 7925              		.set	.LANCHOR15,. + 0
 7928              	xTickCount:
 7929 0000 00000000 		.space	4
 7930              		.section	.bss.xYieldPending,"aw",%nobits
 7931              		.align	2
 7932              		.set	.LANCHOR19,. + 0
 7935              	xYieldPending:
 7936 0000 00000000 		.space	4
 7937              		.text
 7938              	.Letext0:
 7939              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\lib\\gcc\\arm-none-eabi\
 7940              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 7941              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 7942              		.file 6 "System/FreeRTOS/include/projdefs.h"
 7943              		.file 7 "System/FreeRTOS/include/FreeRTOS.h"
 7944              		.file 8 "System/FreeRTOS/include/list.h"
 7945              		.file 9 "System/FreeRTOS/include/task.h"
 7946              		.file 10 "System/FreeRTOS/FreeRTOSConfig.h"
 7947              		.file 11 "System/FreeRTOS/include/portable.h"
 7948              		.file 12 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 273


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:20     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:25     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:115    .text.prvTaskIsTaskSuspended:00000038 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:121    .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:126    .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:169    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:174    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:217    .text.prvResetNextTaskUnblockTime:00000024 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:223    .text.prvInitialiseNewTask:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:228    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:402    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:407    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:482    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:494    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:499    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:638    .text.prvAddNewTaskToReadyList:00000094 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:648    .text.prvDeleteTCB:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:653    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:731    .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:736    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:813    .text.prvCheckTasksWaitingTermination:00000040 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:820    .text.prvIdleTask:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:825    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:874    .text.prvIdleTask:00000024 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:879    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:884    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1004   .text.prvAddCurrentTaskToDelayedList:0000007c $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1015   .text.xTaskCreateStatic:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1021   .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1186   .text.xTaskCreate:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1192   .text.xTaskCreate:00000000 xTaskCreate
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1317   .text.vTaskDelete:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1323   .text.vTaskDelete:00000000 vTaskDelete
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1509   .text.vTaskDelete:000000bc $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1522   .text.eTaskGetState:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1528   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1683   .text.eTaskGetState:0000007c $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1692   .text.uxTaskPriorityGet:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1698   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1744   .text.uxTaskPriorityGet:0000001c $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1749   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1755   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1836   .text.uxTaskPriorityGetFromISR:0000002c $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1841   .text.vTaskPrioritySet:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:1847   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2092   .text.vTaskPrioritySet:000000dc $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2099   .text.vTaskResume:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2105   .text.vTaskResume:00000000 vTaskResume
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2236   .text.vTaskResume:0000007c $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2243   .text.xTaskResumeFromISR:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2249   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2420   .text.xTaskResumeFromISR:00000090 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2429   .rodata.vTaskStartScheduler.str1.4:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2433   .text.vTaskStartScheduler:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2439   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 274


C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2541   .text.vTaskStartScheduler:0000005c $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2551   .text.vTaskEndScheduler:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2557   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2600   .text.vTaskEndScheduler:00000020 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2605   .text.vTaskSuspendAll:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2611   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2630   .text.vTaskSuspendAll:0000000c $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2635   .text.xTaskGetTickCount:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2641   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2662   .text.xTaskGetTickCount:00000008 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2667   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2673   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2702   .text.xTaskGetTickCountFromISR:0000000c $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2707   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2713   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2729   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2734   .text.pcTaskGetName:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2740   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2801   .text.pcTaskGetName:00000024 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2806   .text.xTaskIncrementTick:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:2812   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3079   .text.xTaskIncrementTick:000000ec $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3094   .text.xTaskResumeAll:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3100   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3336   .text.xTaskResumeAll:000000d8 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3348   .text.vTaskDelayUntil:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3354   .text.vTaskDelayUntil:00000000 vTaskDelayUntil
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3577   .text.vTaskDelayUntil:0000009c $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3584   .text.vTaskDelay:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3590   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3683   .text.vTaskDelay:00000048 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3688   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3694   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3762   .text.xTaskCatchUpTicks:00000030 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3768   .text.vTaskSwitchContext:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3774   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3916   .text.vTaskSwitchContext:00000084 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3927   .text.vTaskSuspend:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:3933   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4138   .text.vTaskSuspend:000000cc $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4149   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4155   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4223   .text.vTaskPlaceOnEventList:0000002c $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4228   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4234   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4351   .text.vTaskPlaceOnUnorderedEventList:00000050 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4357   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4363   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4494   .text.xTaskRemoveFromEventList:00000074 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4504   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4510   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4646   .text.vTaskRemoveFromUnorderedEventList:00000074 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4655   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4661   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4731   .text.vTaskSetTimeOutState:00000030 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4737   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4743   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 275


C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4766   .text.vTaskInternalSetTimeOutState:00000010 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4772   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4778   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4955   .text.xTaskCheckForTimeOut:0000007c $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4962   .text.vTaskMissedYield:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4968   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4985   .text.vTaskMissedYield:00000008 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4990   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:4996   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5029   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5035   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5060   .text.vTaskGetInfo:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5066   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5213   .text.vTaskGetInfo:00000074 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5218   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5223   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5339   .text.uxTaskGetSystemState:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5345   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5484   .text.uxTaskGetSystemState:00000098 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5494   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5500   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5542   .text.uxTaskGetStackHighWaterMark:00000014 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5547   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5553   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5572   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5577   .text.xTaskGetCurrentTaskStack:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5583   .text.xTaskGetCurrentTaskStack:00000000 xTaskGetCurrentTaskStack
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5645   .text.xTaskGetCurrentTaskStack:00000024 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5650   .text.xTaskGetCurrentTaskStackDeph:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5656   .text.xTaskGetCurrentTaskStackDeph:00000000 xTaskGetCurrentTaskStackDeph
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5718   .text.xTaskGetCurrentTaskStackDeph:00000024 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5723   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5729   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5767   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5773   .text.xTaskPriorityInherit:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5779   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5945   .text.xTaskPriorityInherit:000000a0 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5952   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:5958   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6155   .text.xTaskPriorityDisinherit:000000a8 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6162   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6168   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6366   .text.vTaskPriorityDisinheritAfterTimeout:000000a8 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6373   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6379   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6406   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6411   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6417   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6448   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6453   .text.ulTaskNotifyTake:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6459   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6581   .text.ulTaskNotifyTake:00000074 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6586   .text.xTaskNotifyWait:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6592   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6736   .text.xTaskNotifyWait:00000094 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6741   .text.xTaskGenericNotify:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6747   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 276


C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6803   .text.xTaskGenericNotify:0000002a $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7033   .text.xTaskGenericNotify:000000f4 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7040   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7046   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7124   .text.xTaskGenericNotifyFromISR:00000040 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7399   .text.xTaskGenericNotifyFromISR:0000011c $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7409   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7415   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7635   .text.vTaskNotifyGiveFromISR:000000b8 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7645   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7651   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7717   .text.xTaskNotifyStateClear:00000030 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7722   .text.ulTaskNotifyValueClear:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7728   .text.ulTaskNotifyValueClear:00000000 ulTaskNotifyValueClear
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7785   .text.ulTaskNotifyValueClear:00000028 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7795   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7791   .bss.pxCurrentTCB:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7798   .bss.pxDelayedTaskList:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7802   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7805   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7809   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7812   .bss.pxReadyTasksLists:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7816   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7819   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7823   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7826   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7830   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7833   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7837   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7840   .bss.uxTaskNumber:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7844   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7847   .bss.uxTopReadyPriority:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7851   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7854   .bss.xDelayedTaskList1:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7858   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7861   .bss.xDelayedTaskList2:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7865   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7868   .bss.xIdleTaskHandle:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7872   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7875   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7879   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7882   .bss.xNumOfOverflows:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7886   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7889   .bss.xPendedTicks:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7893   .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7896   .bss.xPendingReadyList:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7900   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7903   .bss.xSchedulerRunning:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7907   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7910   .bss.xSuspendedTaskList:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7914   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7917   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7921   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7924   .bss.xTickCount:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7928   .bss.xTickCount:00000000 xTickCount
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7931   .bss.xYieldPending:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7935   .bss.xYieldPending:00000000 xYieldPending
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s 			page 277


C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6809   .text.xTaskGenericNotify:0000002f $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:6809   .text.xTaskGenericNotify:00000030 $t
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7130   .text.xTaskGenericNotifyFromISR:00000045 $d
C:\Users\8bit\AppData\Local\Temp\ccqAo65e.s:7130   .text.xTaskGenericNotifyFromISR:00000046 $t

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xPortStartScheduler
vPortEndScheduler
