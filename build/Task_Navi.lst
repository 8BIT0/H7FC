ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"Task_Navi.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZL24TaskNavi_FlipOver_Detectf,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	_ZL24TaskNavi_FlipOver_Detectf:
  26              		.fnstart
  27              	.LVL0:
  28              	.LFB8394:
  29              		.file 1 "Task/Task_Navi.cpp"
   1:Task/Task_Navi.cpp **** #include "Task_Navi.h"
   2:Task/Task_Navi.cpp **** #include "DataPipe.h"
   3:Task/Task_Navi.cpp **** #include "Srv_Baro.h"
   4:Task/Task_Navi.cpp **** #include "Srv_OsCommon.h"
   5:Task/Task_Navi.cpp **** #include "Srv_DataHub.h"
   6:Task/Task_Navi.cpp **** #include "DataPipe.h"
   7:Task/Task_Navi.cpp **** #include "MadgwickAHRS.h"
   8:Task/Task_Navi.cpp **** #include "math_util.h"
   9:Task/Task_Navi.cpp **** #include <Eigen>
  10:Task/Task_Navi.cpp **** #include <stdio.h>
  11:Task/Task_Navi.cpp **** #include <iostream>
  12:Task/Task_Navi.cpp **** 
  13:Task/Task_Navi.cpp **** #include "HW_Def.h"
  14:Task/Task_Navi.cpp **** #include "debug_util.h"
  15:Task/Task_Navi.cpp **** 
  16:Task/Task_Navi.cpp **** #define NAVI_TAG " "
  17:Task/Task_Navi.cpp **** #define NAVI_INFO(fmt, ...) Debug_Print(&DebugPort, NAVI_TAG, fmt, ##__VA_ARGS__)
  18:Task/Task_Navi.cpp **** 
  19:Task/Task_Navi.cpp **** using namespace std;
  20:Task/Task_Navi.cpp **** using namespace Eigen;
  21:Task/Task_Navi.cpp **** 
  22:Task/Task_Navi.cpp **** /* IMU coordinate is x->forward y->right z->down */
  23:Task/Task_Navi.cpp **** /*
  24:Task/Task_Navi.cpp ****     x Axis -> Roll  clock wise rotate positive
  25:Task/Task_Navi.cpp ****     y Axis -> Pitch noise up positive
  26:Task/Task_Navi.cpp ****     z Axis -> Yaw   anticlock wise rotate positice
  27:Task/Task_Navi.cpp **** */
  28:Task/Task_Navi.cpp **** #define FlipOver_Detect_HoldingTime 500 /* unit : ms */
  29:Task/Task_Navi.cpp **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 2


  30:Task/Task_Navi.cpp **** static bool TaskNavi_FlipOver_Detect(float roll_angle);
  31:Task/Task_Navi.cpp **** 
  32:Task/Task_Navi.cpp **** /* internal vriable */
  33:Task/Task_Navi.cpp **** TaskNavi_Monitor_TypeDef TaskNavi_Monitor;
  34:Task/Task_Navi.cpp **** 
  35:Task/Task_Navi.cpp **** /* data structure definition */
  36:Task/Task_Navi.cpp **** DataPipe_CreateDataObj(IMUAtt_TypeDef,  Navi_Attitude);
  37:Task/Task_Navi.cpp **** DataPipe_CreateDataObj(AltData_TypeDef, Navi_Altitude);
  38:Task/Task_Navi.cpp **** 
  39:Task/Task_Navi.cpp **** void TaskNavi_Init(uint32_t period)
  40:Task/Task_Navi.cpp **** {
  41:Task/Task_Navi.cpp ****     memset(&TaskNavi_Monitor, 0, sizeof(TaskNavi_Monitor_TypeDef));
  42:Task/Task_Navi.cpp **** 
  43:Task/Task_Navi.cpp ****     /* init DataPipe */
  44:Task/Task_Navi.cpp ****     memset(&Attitude_smp_DataPipe, 0, sizeof(Attitude_smp_DataPipe));
  45:Task/Task_Navi.cpp **** 
  46:Task/Task_Navi.cpp ****     memset(DataPipe_DataObjAddr(Navi_Attitude), 0, DataPipe_DataSize(Navi_Attitude));
  47:Task/Task_Navi.cpp ****     memset(DataPipe_DataObjAddr(Navi_Altitude), 0, DataPipe_DataSize(Navi_Altitude));
  48:Task/Task_Navi.cpp **** 
  49:Task/Task_Navi.cpp ****     Attitude_smp_DataPipe.data_addr = (uint32_t)DataPipe_DataObjAddr(Navi_Attitude);
  50:Task/Task_Navi.cpp ****     Attitude_smp_DataPipe.data_size = DataPipe_DataSize(Navi_Attitude);
  51:Task/Task_Navi.cpp ****     DataPipe_Enable(&Attitude_smp_DataPipe);
  52:Task/Task_Navi.cpp **** 
  53:Task/Task_Navi.cpp ****     Altitude_smp_DataPipe.data_addr = (uint32_t)DataPipe_DataObjAddr(Navi_Altitude);
  54:Task/Task_Navi.cpp ****     Altitude_smp_DataPipe.data_size = DataPipe_DataSize(Navi_Altitude);
  55:Task/Task_Navi.cpp ****     DataPipe_Enable(&Altitude_smp_DataPipe);
  56:Task/Task_Navi.cpp **** 
  57:Task/Task_Navi.cpp ****     TaskNavi_Monitor.period = period;
  58:Task/Task_Navi.cpp **** 
  59:Task/Task_Navi.cpp ****     /* eigen test */
  60:Task/Task_Navi.cpp ****     Matrix<float, 2, 3> matrix_23;
  61:Task/Task_Navi.cpp ****     Matrix<float, 3, 1> vd_3d;
  62:Task/Task_Navi.cpp ****     Matrix<float, 2, 1> result2;
  63:Task/Task_Navi.cpp **** 
  64:Task/Task_Navi.cpp ****     matrix_23 << 1, 2, 3, 4, 5, 6;
  65:Task/Task_Navi.cpp ****     vd_3d << 3, 2, 1;
  66:Task/Task_Navi.cpp **** 
  67:Task/Task_Navi.cpp ****     result2 = matrix_23 * vd_3d;
  68:Task/Task_Navi.cpp ****     NAVI_INFO("Eigen Test\r\n");
  69:Task/Task_Navi.cpp ****     for (int i = 0; i < 2; i++)
  70:Task/Task_Navi.cpp ****     {
  71:Task/Task_Navi.cpp ****         for (int j = 0; j < 1; j++)
  72:Task/Task_Navi.cpp ****         {
  73:Task/Task_Navi.cpp ****             NAVI_INFO("%f\t", result2(i, j));
  74:Task/Task_Navi.cpp ****         }
  75:Task/Task_Navi.cpp ****         NAVI_INFO("\r\n");
  76:Task/Task_Navi.cpp ****     }
  77:Task/Task_Navi.cpp ****     /* eigen test */
  78:Task/Task_Navi.cpp **** }
  79:Task/Task_Navi.cpp **** 
  80:Task/Task_Navi.cpp **** void TaskNavi_Core(void const *arg)
  81:Task/Task_Navi.cpp **** {
  82:Task/Task_Navi.cpp ****     uint32_t sys_time = SrvOsCommon.get_os_ms();
  83:Task/Task_Navi.cpp ****     bool imu_state = false;
  84:Task/Task_Navi.cpp ****     bool mag_state = false;
  85:Task/Task_Navi.cpp ****     bool bar_state = false;
  86:Task/Task_Navi.cpp ****     uint32_t Flt_IMU_TimeStamp = 0;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 3


  87:Task/Task_Navi.cpp ****     uint32_t MAG_TimeStamp = 0;
  88:Task/Task_Navi.cpp ****     uint32_t Baro_TimeStamp = 0;
  89:Task/Task_Navi.cpp ****     float Acc_Scale = 0.0f;
  90:Task/Task_Navi.cpp ****     float Gyr_Scale = 0.0f;
  91:Task/Task_Navi.cpp ****     float Mag_Scale = 0.0f;
  92:Task/Task_Navi.cpp ****     IMUAtt_TypeDef attitude;
  93:Task/Task_Navi.cpp ****     AlgoAttData_TypeDef algo_att;
  94:Task/Task_Navi.cpp ****     float Flt_Acc[Axis_Sum] = {0.0f};
  95:Task/Task_Navi.cpp ****     float Flt_Gyr[Axis_Sum] = {0.0f};
  96:Task/Task_Navi.cpp ****     float Flt_Mag[Axis_Sum] = {0.0f};
  97:Task/Task_Navi.cpp ****     float Flt_IMU_Tempra = 0.0f;
  98:Task/Task_Navi.cpp ****     float Bar_Pres = 0.0f;
  99:Task/Task_Navi.cpp ****     float Baro_Alt = 0.0f;
 100:Task/Task_Navi.cpp ****     float Baro_Alt_Offset = 0.0f;
 101:Task/Task_Navi.cpp ****     float Baro_Tempra = 0.0f;
 102:Task/Task_Navi.cpp ****     uint8_t IMU_Err = 0;
 103:Task/Task_Navi.cpp ****     uint8_t MAG_Err = 0;
 104:Task/Task_Navi.cpp ****     uint8_t BAR_Err = 0;
 105:Task/Task_Navi.cpp ****     
 106:Task/Task_Navi.cpp ****     bool Attitude_Update = false;
 107:Task/Task_Navi.cpp ****     memset(&attitude, 0, sizeof(IMUAtt_TypeDef));
 108:Task/Task_Navi.cpp ****     MadgwickAHRSInit(&algo_att);
 109:Task/Task_Navi.cpp **** 
 110:Task/Task_Navi.cpp ****     while(1)
 111:Task/Task_Navi.cpp ****     {
 112:Task/Task_Navi.cpp ****         SrvDataHub.get_imu_init_state(&imu_state);
 113:Task/Task_Navi.cpp ****         SrvDataHub.get_mag_init_state(&mag_state);
 114:Task/Task_Navi.cpp ****         SrvDataHub.get_baro_init_state(&bar_state);
 115:Task/Task_Navi.cpp **** 
 116:Task/Task_Navi.cpp ****         if(imu_state)
 117:Task/Task_Navi.cpp ****         {
 118:Task/Task_Navi.cpp ****             Attitude_Update = SrvDataHub.get_scaled_imu(&Flt_IMU_TimeStamp, &Acc_Scale, &Gyr_Scale,
 119:Task/Task_Navi.cpp ****                                                         &Flt_Acc[Axis_X], &Flt_Acc[Axis_Y], &Flt_Ac
 120:Task/Task_Navi.cpp ****                                                         &Flt_Gyr[Axis_X], &Flt_Gyr[Axis_Y], &Flt_Gy
 121:Task/Task_Navi.cpp ****                                                         &Flt_IMU_Tempra, &IMU_Err);
 122:Task/Task_Navi.cpp ****         }
 123:Task/Task_Navi.cpp ****         
 124:Task/Task_Navi.cpp ****         if(mag_state)
 125:Task/Task_Navi.cpp ****         {
 126:Task/Task_Navi.cpp ****             SrvDataHub.get_scaled_mag(&MAG_TimeStamp, &Mag_Scale, \
 127:Task/Task_Navi.cpp ****                                       &Flt_Mag[Axis_X], &Flt_Mag[Axis_Y], &Flt_Mag[Axis_Z], \
 128:Task/Task_Navi.cpp ****                                       &MAG_Err);
 129:Task/Task_Navi.cpp ****         }
 130:Task/Task_Navi.cpp ****         else
 131:Task/Task_Navi.cpp ****         {
 132:Task/Task_Navi.cpp ****             Flt_Mag[Axis_X] = 0.0f;
 133:Task/Task_Navi.cpp ****             Flt_Mag[Axis_Y] = 0.0f;
 134:Task/Task_Navi.cpp ****             Flt_Mag[Axis_Z] = 0.0f;
 135:Task/Task_Navi.cpp ****         }
 136:Task/Task_Navi.cpp ****         
 137:Task/Task_Navi.cpp ****         if(Attitude_Update)
 138:Task/Task_Navi.cpp ****         {
 139:Task/Task_Navi.cpp ****             /* update Attitude */
 140:Task/Task_Navi.cpp ****             MadgwickAHRSupdate(&algo_att, Deg2Rad(Flt_Gyr[Axis_X]), Deg2Rad(-Flt_Gyr[Axis_Y]), Deg2
 141:Task/Task_Navi.cpp ****                                           Flt_Acc[Axis_X],          -Flt_Acc[Axis_Y],          -Flt
 142:Task/Task_Navi.cpp ****                                           Flt_Mag[Axis_X],          Flt_Mag[Axis_Y],          Flt_M
 143:Task/Task_Navi.cpp ****             
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 4


 144:Task/Task_Navi.cpp ****             attitude.pitch = algo_att.pitch;
 145:Task/Task_Navi.cpp ****             attitude.roll  = algo_att.roll;
 146:Task/Task_Navi.cpp ****             attitude.yaw   = algo_att.yaw;
 147:Task/Task_Navi.cpp ****             attitude.q0    = algo_att.q0;
 148:Task/Task_Navi.cpp ****             attitude.q1    = algo_att.q1;
 149:Task/Task_Navi.cpp ****             attitude.q2    = algo_att.q2;
 150:Task/Task_Navi.cpp ****             attitude.q3    = algo_att.q3;
 151:Task/Task_Navi.cpp ****             
 152:Task/Task_Navi.cpp ****             attitude.flip_over = TaskNavi_FlipOver_Detect(attitude.roll);
 153:Task/Task_Navi.cpp ****             attitude.time_stamp = SrvOsCommon.get_os_ms();
 154:Task/Task_Navi.cpp **** 
 155:Task/Task_Navi.cpp ****             DataPipe_DataObj(Navi_Attitude) = attitude;
 156:Task/Task_Navi.cpp **** 
 157:Task/Task_Navi.cpp ****             /* DataPipe Attitude Data to SrvDataHub */
 158:Task/Task_Navi.cpp ****             DataPipe_SendTo(&Attitude_smp_DataPipe, &Attitude_hub_DataPipe);
 159:Task/Task_Navi.cpp ****             DataPipe_SendTo(&Attitude_smp_DataPipe, &Attitude_Log_DataPipe);
 160:Task/Task_Navi.cpp ****         }
 161:Task/Task_Navi.cpp **** 
 162:Task/Task_Navi.cpp ****         /* comput baro altitude */
 163:Task/Task_Navi.cpp ****         if (bar_state && Attitude_Update && \
 164:Task/Task_Navi.cpp ****             SrvDataHub.get_baro_altitude(&Baro_TimeStamp, &Bar_Pres, &Baro_Alt, &Baro_Alt_Offset, &
 165:Task/Task_Navi.cpp ****         {
 166:Task/Task_Navi.cpp ****             DataPipe_DataObj(Navi_Altitude).time = SrvOsCommon.get_os_ms();
 167:Task/Task_Navi.cpp ****             DataPipe_DataObj(Navi_Altitude).alt = 0.0f;
 168:Task/Task_Navi.cpp **** 
 169:Task/Task_Navi.cpp ****             DataPipe_SendTo(&Altitude_smp_DataPipe, &Altitude_hub_DataPipe);
 170:Task/Task_Navi.cpp ****             DataPipe_SendTo(&Altitude_smp_DataPipe, &Altitude_Log_DataPipe);
 171:Task/Task_Navi.cpp ****         }
 172:Task/Task_Navi.cpp **** 
 173:Task/Task_Navi.cpp ****         /* check imu data update freq on test */
 174:Task/Task_Navi.cpp ****         SrvOsCommon.precise_delay(&sys_time, TaskNavi_Monitor.period);
 175:Task/Task_Navi.cpp ****     }
 176:Task/Task_Navi.cpp **** }
 177:Task/Task_Navi.cpp **** 
 178:Task/Task_Navi.cpp **** static bool TaskNavi_FlipOver_Detect(float roll_angle)
 179:Task/Task_Navi.cpp **** {
  30              		.loc 1 179 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 179 1 is_stmt 0 view .LVU1
  35 0000 08B5     		push	{r3, lr}
  36              		.save {r3, lr}
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
 180:Task/Task_Navi.cpp ****     /* use roll angle detect drone up side down state */
 181:Task/Task_Navi.cpp ****     /* if drone flip over roll must between 180 ~ -180 */
 182:Task/Task_Navi.cpp ****     /* keep this value over than 1s we think is flip over */
 183:Task/Task_Navi.cpp ****     static uint32_t FilpOver_Trigger_Time = 0;
  40              		.loc 1 183 5 is_stmt 1 view .LVU2
 184:Task/Task_Navi.cpp ****     static uint32_t FlipOver_ResetTrigger_Time = 0;
  41              		.loc 1 184 5 view .LVU3
 185:Task/Task_Navi.cpp ****     static bool FlipOver_State = false;
  42              		.loc 1 185 5 view .LVU4
 186:Task/Task_Navi.cpp **** 
 187:Task/Task_Navi.cpp ****     if(!FlipOver_State)
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 5


  43              		.loc 1 187 5 view .LVU5
  44              		.loc 1 187 8 is_stmt 0 view .LVU6
  45 0002 344B     		ldr	r3, .L20
  46 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  47              		.loc 1 187 5 view .LVU7
  48 0006 002B     		cmp	r3, #0
  49 0008 38D1     		bne	.L2
 188:Task/Task_Navi.cpp ****     {
 189:Task/Task_Navi.cpp ****         if(((roll_angle < 180.0f) && (roll_angle > 80.0f)) || ((roll_angle > -180.0f) && (roll_angl
  50              		.loc 1 189 9 is_stmt 1 view .LVU8
  51 000a DFED337A 		vldr.32	s15, .L20+4
  52 000e B4EEE70A 		vcmpe.f32	s0, s15
  53 0012 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  54 0016 06D5     		bpl	.L3
  55              		.loc 1 189 35 is_stmt 0 discriminator 1 view .LVU9
  56 0018 DFED307A 		vldr.32	s15, .L20+8
  57 001c B4EEE70A 		vcmpe.f32	s0, s15
  58 0020 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  59 0024 0DDC     		bgt	.L5
  60              	.L3:
  61              		.loc 1 189 60 discriminator 3 view .LVU10
  62 0026 DFED2E7A 		vldr.32	s15, .L20+12
  63 002a B4EEE70A 		vcmpe.f32	s0, s15
  64 002e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  65 0032 1FDD     		ble	.L6
  66              		.loc 1 189 87 discriminator 4 view .LVU11
  67 0034 DFED2B7A 		vldr.32	s15, .L20+16
  68 0038 B4EEE70A 		vcmpe.f32	s0, s15
  69 003c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  70 0040 18D5     		bpl	.L6
  71              	.L5:
 190:Task/Task_Navi.cpp ****         {
 191:Task/Task_Navi.cpp ****             if(FilpOver_Trigger_Time == 0)
  72              		.loc 1 191 13 is_stmt 1 view .LVU12
  73              		.loc 1 191 38 is_stmt 0 view .LVU13
  74 0042 294B     		ldr	r3, .L20+20
  75 0044 1B68     		ldr	r3, [r3]
  76              		.loc 1 191 13 view .LVU14
  77 0046 2BB9     		cbnz	r3, .L9
 192:Task/Task_Navi.cpp ****             {
 193:Task/Task_Navi.cpp ****                 FilpOver_Trigger_Time = SrvOsCommon.get_os_ms();
  78              		.loc 1 193 17 is_stmt 1 view .LVU15
  79              		.loc 1 193 53 is_stmt 0 view .LVU16
  80 0048 284B     		ldr	r3, .L20+24
  81 004a 5B68     		ldr	r3, [r3, #4]
  82              		.loc 1 193 62 view .LVU17
  83 004c 9847     		blx	r3
  84              	.LVL1:
  85              		.loc 1 193 39 view .LVU18
  86 004e 264B     		ldr	r3, .L20+20
  87 0050 1860     		str	r0, [r3]
  88 0052 3CE0     		b	.L10
  89              	.LVL2:
  90              	.L9:
 194:Task/Task_Navi.cpp ****             }
 195:Task/Task_Navi.cpp ****             else
 196:Task/Task_Navi.cpp ****             {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 6


 197:Task/Task_Navi.cpp ****                 if((SrvOsCommon.get_os_ms() - FilpOver_Trigger_Time) >= FlipOver_Detect_HoldingTime
  91              		.loc 1 197 17 is_stmt 1 view .LVU19
  92              		.loc 1 197 33 is_stmt 0 view .LVU20
  93 0054 254B     		ldr	r3, .L20+24
  94 0056 5B68     		ldr	r3, [r3, #4]
  95              		.loc 1 197 42 view .LVU21
  96 0058 9847     		blx	r3
  97              	.LVL3:
  98              		.loc 1 197 45 view .LVU22
  99 005a 234B     		ldr	r3, .L20+20
 100 005c 1B68     		ldr	r3, [r3]
 101 005e C01A     		subs	r0, r0, r3
 102              		.loc 1 197 17 view .LVU23
 103 0060 B0F5FA7F 		cmp	r0, #500
 104 0064 33D3     		bcc	.L10
 198:Task/Task_Navi.cpp ****                 {
 199:Task/Task_Navi.cpp ****                     FilpOver_Trigger_Time = 0;
 105              		.loc 1 199 21 is_stmt 1 view .LVU24
 106              		.loc 1 199 43 is_stmt 0 view .LVU25
 107 0066 204B     		ldr	r3, .L20+20
 108 0068 0022     		movs	r2, #0
 109 006a 1A60     		str	r2, [r3]
 200:Task/Task_Navi.cpp ****                     FlipOver_State = true;
 110              		.loc 1 200 21 is_stmt 1 view .LVU26
 111              		.loc 1 200 36 is_stmt 0 view .LVU27
 112 006c 194B     		ldr	r3, .L20
 113 006e 0122     		movs	r2, #1
 114 0070 1A70     		strb	r2, [r3]
 115 0072 2CE0     		b	.L10
 116              	.LVL4:
 117              	.L6:
 201:Task/Task_Navi.cpp ****                 }
 202:Task/Task_Navi.cpp ****             }
 203:Task/Task_Navi.cpp ****         }
 204:Task/Task_Navi.cpp ****         else
 205:Task/Task_Navi.cpp ****             FilpOver_Trigger_Time = 0;
 118              		.loc 1 205 13 is_stmt 1 view .LVU28
 119              		.loc 1 205 35 is_stmt 0 view .LVU29
 120 0074 1C4B     		ldr	r3, .L20+20
 121 0076 0022     		movs	r2, #0
 122 0078 1A60     		str	r2, [r3]
 123 007a 28E0     		b	.L10
 124              	.L2:
 206:Task/Task_Navi.cpp ****     }
 207:Task/Task_Navi.cpp ****     else
 208:Task/Task_Navi.cpp ****     {
 209:Task/Task_Navi.cpp ****         if((roll_angle < 20.0f) && (roll_angle > -20.0f))
 125              		.loc 1 209 9 is_stmt 1 view .LVU30
 126 007c F3EE047A 		vmov.f32	s15, #2.0e+1
 127 0080 B4EEE70A 		vcmpe.f32	s0, s15
 128 0084 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 129 0088 1ED5     		bpl	.L11
 130              		.loc 1 209 33 is_stmt 0 discriminator 1 view .LVU31
 131 008a FBEE047A 		vmov.f32	s15, #-2.0e+1
 132 008e B4EEE70A 		vcmpe.f32	s0, s15
 133 0092 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 134 0096 17DD     		ble	.L11
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 7


 210:Task/Task_Navi.cpp ****         {
 211:Task/Task_Navi.cpp ****             if(FlipOver_ResetTrigger_Time == 0)
 135              		.loc 1 211 13 is_stmt 1 view .LVU32
 136              		.loc 1 211 43 is_stmt 0 view .LVU33
 137 0098 154B     		ldr	r3, .L20+28
 138 009a 1B68     		ldr	r3, [r3]
 139              		.loc 1 211 13 view .LVU34
 140 009c 2BB9     		cbnz	r3, .L14
 212:Task/Task_Navi.cpp ****             {
 213:Task/Task_Navi.cpp ****                 FlipOver_ResetTrigger_Time = SrvOsCommon.get_os_ms();
 141              		.loc 1 213 17 is_stmt 1 view .LVU35
 142              		.loc 1 213 58 is_stmt 0 view .LVU36
 143 009e 134B     		ldr	r3, .L20+24
 144 00a0 5B68     		ldr	r3, [r3, #4]
 145              		.loc 1 213 67 view .LVU37
 146 00a2 9847     		blx	r3
 147              	.LVL5:
 148              		.loc 1 213 44 view .LVU38
 149 00a4 124B     		ldr	r3, .L20+28
 150 00a6 1860     		str	r0, [r3]
 151 00a8 11E0     		b	.L10
 152              	.LVL6:
 153              	.L14:
 214:Task/Task_Navi.cpp ****             }
 215:Task/Task_Navi.cpp ****             else
 216:Task/Task_Navi.cpp ****             {
 217:Task/Task_Navi.cpp ****                 if(SrvOsCommon.get_os_ms() - FlipOver_ResetTrigger_Time >= FlipOver_Detect_HoldingT
 154              		.loc 1 217 17 is_stmt 1 view .LVU39
 155              		.loc 1 217 32 is_stmt 0 view .LVU40
 156 00aa 104B     		ldr	r3, .L20+24
 157 00ac 5B68     		ldr	r3, [r3, #4]
 158              		.loc 1 217 41 view .LVU41
 159 00ae 9847     		blx	r3
 160              	.LVL7:
 161              		.loc 1 217 44 view .LVU42
 162 00b0 0F4B     		ldr	r3, .L20+28
 163 00b2 1B68     		ldr	r3, [r3]
 164 00b4 C01A     		subs	r0, r0, r3
 165              		.loc 1 217 17 view .LVU43
 166 00b6 B0F5FA7F 		cmp	r0, #500
 167 00ba 08D3     		bcc	.L10
 218:Task/Task_Navi.cpp ****                 {
 219:Task/Task_Navi.cpp ****                     FlipOver_ResetTrigger_Time = 0;
 168              		.loc 1 219 21 is_stmt 1 view .LVU44
 169              		.loc 1 219 48 is_stmt 0 view .LVU45
 170 00bc 0023     		movs	r3, #0
 171 00be 0C4A     		ldr	r2, .L20+28
 172 00c0 1360     		str	r3, [r2]
 220:Task/Task_Navi.cpp ****                     FlipOver_State = false;
 173              		.loc 1 220 21 is_stmt 1 view .LVU46
 174              		.loc 1 220 36 is_stmt 0 view .LVU47
 175 00c2 044A     		ldr	r2, .L20
 176 00c4 1370     		strb	r3, [r2]
 177 00c6 02E0     		b	.L10
 178              	.LVL8:
 179              	.L11:
 221:Task/Task_Navi.cpp ****                 }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 8


 222:Task/Task_Navi.cpp ****             }
 223:Task/Task_Navi.cpp ****         }
 224:Task/Task_Navi.cpp ****         else
 225:Task/Task_Navi.cpp ****             FlipOver_ResetTrigger_Time = 0;
 180              		.loc 1 225 13 is_stmt 1 view .LVU48
 181              		.loc 1 225 40 is_stmt 0 view .LVU49
 182 00c8 094B     		ldr	r3, .L20+28
 183 00ca 0022     		movs	r2, #0
 184 00cc 1A60     		str	r2, [r3]
 185              	.LVL9:
 186              	.L10:
 226:Task/Task_Navi.cpp ****     }
 227:Task/Task_Navi.cpp **** 
 228:Task/Task_Navi.cpp ****     return FlipOver_State;
 187              		.loc 1 228 5 is_stmt 1 view .LVU50
 229:Task/Task_Navi.cpp **** }
 188              		.loc 1 229 1 is_stmt 0 view .LVU51
 189 00ce 014B     		ldr	r3, .L20
 190 00d0 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 191 00d2 08BD     		pop	{r3, pc}
 192              	.L21:
 193              		.align	2
 194              	.L20:
 195 00d4 00000000 		.word	.LANCHOR0
 196 00d8 00003443 		.word	1127481344
 197 00dc 0000A042 		.word	1117782016
 198 00e0 000034C3 		.word	-1020002304
 199 00e4 0000A0C2 		.word	-1029701632
 200 00e8 00000000 		.word	.LANCHOR1
 201 00ec 00000000 		.word	SrvOsCommon
 202 00f0 00000000 		.word	.LANCHOR2
 203              		.cfi_endproc
 204              	.LFE8394:
 205              		.fnend
 207              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
 208              		.align	1
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 213              	_Z41__static_initialization_and_destruction_0ii:
 214              		.fnstart
 215              	.LVL10:
 216              	.LFB9354:
 217              		.loc 1 229 1 is_stmt 1 view -0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              		.loc 1 229 1 is_stmt 0 view .LVU53
 222 0000 0128     		cmp	r0, #1
 223 0002 00D0     		beq	.L28
 224              	.L25:
 225 0004 7047     		bx	lr
 226              	.L28:
 227              		.loc 1 229 1 discriminator 1 view .LVU54
 228 0006 4FF6FF73 		movw	r3, #65535
 229 000a 9942     		cmp	r1, r3
 230 000c FAD1     		bne	.L25
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 9


 231              		.loc 1 229 1 view .LVU55
 232 000e 10B5     		push	{r4, lr}
 233              		.cfi_def_cfa_offset 8
 234              		.cfi_offset 4, -8
 235              		.cfi_offset 14, -4
 236              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
   1:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // Standard iostream objects -*- C++ -*-
   2:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** 
   3:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** //
   5:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // any later version.
  10:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** 
  11:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // GNU General Public License for more details.
  15:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** 
  16:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** 
  20:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** 
  25:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** /** @file include/iostream
  26:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****  *  This is a Standard C++ Library header.
  27:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****  */
  28:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** 
  29:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** //
  30:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** //
  32:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** 
  33:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** #define _GLIBCXX_IOSTREAM 1
  35:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** 
  36:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** #pragma GCC system_header
  37:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** 
  38:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** #include <bits/c++config.h>
  39:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** #include <ostream>
  40:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** #include <istream>
  41:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** 
  42:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** {
  44:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** 
  46:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****   /**
  47:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****    *  @name Standard Stream Objects
  48:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****    *
  49:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****    *  objects</em>.  For other declarations, see
  51:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 10


  52:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****    *
  54:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****    *  They are required by default to cooperate with the global C
  55:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****    *  library's @c FILE streams, and to be available during program
  56:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****    *  startup and termination. For more information, see the section of the
  57:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****    *  manual linked to above.
  58:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****   */
  59:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****   ///@{
  60:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****   extern istream cin;		/// Linked to standard input
  61:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****   extern ostream cout;		/// Linked to standard output
  62:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** 
  65:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****   extern wistream wcin;		/// Linked to standard input
  67:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****   extern wostream wcout;	/// Linked to standard output
  68:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** #endif
  71:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****   ///@}
  72:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream **** 
  73:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:c:\program files (x86)\gnu arm embedded toolchain\10 2021.10\arm-none-eabi\include\c++\10.3.1\iostream ****   static ios_base::Init __ioinit;
 237              		.loc 2 74 25 view .LVU56
 238 0010 044C     		ldr	r4, .L29
 239 0012 2046     		mov	r0, r4
 240              	.LVL11:
 241              		.loc 2 74 25 view .LVU57
 242 0014 FFF7FEFF 		bl	_ZNSt8ios_base4InitC1Ev
 243              	.LVL12:
 244              		.loc 2 74 25 view .LVU58
 245 0018 034A     		ldr	r2, .L29+4
 246 001a 0449     		ldr	r1, .L29+8
 247 001c 2046     		mov	r0, r4
 248 001e FFF7FEFF 		bl	__aeabi_atexit
 249              	.LVL13:
 250              		.loc 1 229 1 view .LVU59
 251 0022 10BD     		pop	{r4, pc}
 252              	.L30:
 253              		.align	2
 254              	.L29:
 255 0024 00000000 		.word	.LANCHOR3
 256 0028 00000000 		.word	__dso_handle
 257 002c 00000000 		.word	_ZNSt8ios_base4InitD1Ev
 258              		.cfi_endproc
 259              	.LFE9354:
 260              		.cantunwind
 261              		.fnend
 263              		.section	.text.TaskNavi_Core,"ax",%progbits
 264              		.align	1
 265              		.global	TaskNavi_Core
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 270              	TaskNavi_Core:
 271              		.fnstart
 272              	.LVL14:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 11


 273              	.LFB8393:
  81:Task/Task_Navi.cpp ****     uint32_t sys_time = SrvOsCommon.get_os_ms();
 274              		.loc 1 81 1 is_stmt 1 view -0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 160
 277              		@ frame_needed = 0, uses_anonymous_args = 0
  81:Task/Task_Navi.cpp ****     uint32_t sys_time = SrvOsCommon.get_os_ms();
 278              		.loc 1 81 1 is_stmt 0 view .LVU61
 279 0000 30B5     		push	{r4, r5, lr}
 280              		.save {r4, r5, lr}
 281              		.cfi_def_cfa_offset 12
 282              		.cfi_offset 4, -12
 283              		.cfi_offset 5, -8
 284              		.cfi_offset 14, -4
 285              		.pad #196
 286 0002 B1B0     		sub	sp, sp, #196
 287              		.cfi_def_cfa_offset 208
  82:Task/Task_Navi.cpp ****     bool imu_state = false;
 288              		.loc 1 82 5 is_stmt 1 view .LVU62
  82:Task/Task_Navi.cpp ****     bool imu_state = false;
 289              		.loc 1 82 37 is_stmt 0 view .LVU63
 290 0004 764B     		ldr	r3, .L40
 291 0006 5B68     		ldr	r3, [r3, #4]
  82:Task/Task_Navi.cpp ****     bool imu_state = false;
 292              		.loc 1 82 46 view .LVU64
 293 0008 9847     		blx	r3
 294              	.LVL15:
  82:Task/Task_Navi.cpp ****     bool imu_state = false;
 295              		.loc 1 82 47 view .LVU65
 296 000a 2F90     		str	r0, [sp, #188]
  83:Task/Task_Navi.cpp ****     bool mag_state = false;
 297              		.loc 1 83 5 is_stmt 1 view .LVU66
  83:Task/Task_Navi.cpp ****     bool mag_state = false;
 298              		.loc 1 83 10 is_stmt 0 view .LVU67
 299 000c 0025     		movs	r5, #0
 300 000e 8DF8BB50 		strb	r5, [sp, #187]
  84:Task/Task_Navi.cpp ****     bool bar_state = false;
 301              		.loc 1 84 5 is_stmt 1 view .LVU68
  84:Task/Task_Navi.cpp ****     bool bar_state = false;
 302              		.loc 1 84 10 is_stmt 0 view .LVU69
 303 0012 8DF8BA50 		strb	r5, [sp, #186]
  85:Task/Task_Navi.cpp ****     uint32_t Flt_IMU_TimeStamp = 0;
 304              		.loc 1 85 5 is_stmt 1 view .LVU70
  85:Task/Task_Navi.cpp ****     uint32_t Flt_IMU_TimeStamp = 0;
 305              		.loc 1 85 10 is_stmt 0 view .LVU71
 306 0016 8DF8B950 		strb	r5, [sp, #185]
  86:Task/Task_Navi.cpp ****     uint32_t MAG_TimeStamp = 0;
 307              		.loc 1 86 5 is_stmt 1 view .LVU72
  86:Task/Task_Navi.cpp ****     uint32_t MAG_TimeStamp = 0;
 308              		.loc 1 86 14 is_stmt 0 view .LVU73
 309 001a 2D95     		str	r5, [sp, #180]
  87:Task/Task_Navi.cpp ****     uint32_t Baro_TimeStamp = 0;
 310              		.loc 1 87 5 is_stmt 1 view .LVU74
  87:Task/Task_Navi.cpp ****     uint32_t Baro_TimeStamp = 0;
 311              		.loc 1 87 14 is_stmt 0 view .LVU75
 312 001c 2C95     		str	r5, [sp, #176]
  88:Task/Task_Navi.cpp ****     float Acc_Scale = 0.0f;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 12


 313              		.loc 1 88 5 is_stmt 1 view .LVU76
  88:Task/Task_Navi.cpp ****     float Acc_Scale = 0.0f;
 314              		.loc 1 88 14 is_stmt 0 view .LVU77
 315 001e 2B95     		str	r5, [sp, #172]
  89:Task/Task_Navi.cpp ****     float Gyr_Scale = 0.0f;
 316              		.loc 1 89 5 is_stmt 1 view .LVU78
  89:Task/Task_Navi.cpp ****     float Gyr_Scale = 0.0f;
 317              		.loc 1 89 11 is_stmt 0 view .LVU79
 318 0020 0023     		movs	r3, #0
 319 0022 2A93     		str	r3, [sp, #168]	@ float
  90:Task/Task_Navi.cpp ****     float Mag_Scale = 0.0f;
 320              		.loc 1 90 5 is_stmt 1 view .LVU80
  90:Task/Task_Navi.cpp ****     float Mag_Scale = 0.0f;
 321              		.loc 1 90 11 is_stmt 0 view .LVU81
 322 0024 2993     		str	r3, [sp, #164]	@ float
  91:Task/Task_Navi.cpp ****     IMUAtt_TypeDef attitude;
 323              		.loc 1 91 5 is_stmt 1 view .LVU82
  91:Task/Task_Navi.cpp ****     IMUAtt_TypeDef attitude;
 324              		.loc 1 91 11 is_stmt 0 view .LVU83
 325 0026 2893     		str	r3, [sp, #160]	@ float
  92:Task/Task_Navi.cpp ****     AlgoAttData_TypeDef algo_att;
 326              		.loc 1 92 5 is_stmt 1 view .LVU84
  93:Task/Task_Navi.cpp ****     float Flt_Acc[Axis_Sum] = {0.0f};
 327              		.loc 1 93 5 view .LVU85
  94:Task/Task_Navi.cpp ****     float Flt_Gyr[Axis_Sum] = {0.0f};
 328              		.loc 1 94 5 view .LVU86
  94:Task/Task_Navi.cpp ****     float Flt_Gyr[Axis_Sum] = {0.0f};
 329              		.loc 1 94 11 is_stmt 0 view .LVU87
 330 0028 1495     		str	r5, [sp, #80]
 331 002a 1595     		str	r5, [sp, #84]
 332 002c 1695     		str	r5, [sp, #88]
  95:Task/Task_Navi.cpp ****     float Flt_Mag[Axis_Sum] = {0.0f};
 333              		.loc 1 95 5 is_stmt 1 view .LVU88
  95:Task/Task_Navi.cpp ****     float Flt_Mag[Axis_Sum] = {0.0f};
 334              		.loc 1 95 11 is_stmt 0 view .LVU89
 335 002e 1195     		str	r5, [sp, #68]
 336 0030 1295     		str	r5, [sp, #72]
 337 0032 1395     		str	r5, [sp, #76]
  96:Task/Task_Navi.cpp ****     float Flt_IMU_Tempra = 0.0f;
 338              		.loc 1 96 5 is_stmt 1 view .LVU90
  96:Task/Task_Navi.cpp ****     float Flt_IMU_Tempra = 0.0f;
 339              		.loc 1 96 11 is_stmt 0 view .LVU91
 340 0034 0E95     		str	r5, [sp, #56]
 341 0036 0F95     		str	r5, [sp, #60]
 342 0038 1095     		str	r5, [sp, #64]
  97:Task/Task_Navi.cpp ****     float Bar_Pres = 0.0f;
 343              		.loc 1 97 5 is_stmt 1 view .LVU92
  97:Task/Task_Navi.cpp ****     float Bar_Pres = 0.0f;
 344              		.loc 1 97 11 is_stmt 0 view .LVU93
 345 003a 0D93     		str	r3, [sp, #52]	@ float
  98:Task/Task_Navi.cpp ****     float Baro_Alt = 0.0f;
 346              		.loc 1 98 5 is_stmt 1 view .LVU94
  98:Task/Task_Navi.cpp ****     float Baro_Alt = 0.0f;
 347              		.loc 1 98 11 is_stmt 0 view .LVU95
 348 003c 0C93     		str	r3, [sp, #48]	@ float
  99:Task/Task_Navi.cpp ****     float Baro_Alt_Offset = 0.0f;
 349              		.loc 1 99 5 is_stmt 1 view .LVU96
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 13


  99:Task/Task_Navi.cpp ****     float Baro_Alt_Offset = 0.0f;
 350              		.loc 1 99 11 is_stmt 0 view .LVU97
 351 003e 0B93     		str	r3, [sp, #44]	@ float
 100:Task/Task_Navi.cpp ****     float Baro_Tempra = 0.0f;
 352              		.loc 1 100 5 is_stmt 1 view .LVU98
 100:Task/Task_Navi.cpp ****     float Baro_Tempra = 0.0f;
 353              		.loc 1 100 11 is_stmt 0 view .LVU99
 354 0040 0A93     		str	r3, [sp, #40]	@ float
 101:Task/Task_Navi.cpp ****     uint8_t IMU_Err = 0;
 355              		.loc 1 101 5 is_stmt 1 view .LVU100
 101:Task/Task_Navi.cpp ****     uint8_t IMU_Err = 0;
 356              		.loc 1 101 11 is_stmt 0 view .LVU101
 357 0042 0993     		str	r3, [sp, #36]	@ float
 102:Task/Task_Navi.cpp ****     uint8_t MAG_Err = 0;
 358              		.loc 1 102 5 is_stmt 1 view .LVU102
 102:Task/Task_Navi.cpp ****     uint8_t MAG_Err = 0;
 359              		.loc 1 102 13 is_stmt 0 view .LVU103
 360 0044 8DF82350 		strb	r5, [sp, #35]
 103:Task/Task_Navi.cpp ****     uint8_t BAR_Err = 0;
 361              		.loc 1 103 5 is_stmt 1 view .LVU104
 103:Task/Task_Navi.cpp ****     uint8_t BAR_Err = 0;
 362              		.loc 1 103 13 is_stmt 0 view .LVU105
 363 0048 8DF82250 		strb	r5, [sp, #34]
 104:Task/Task_Navi.cpp ****     
 364              		.loc 1 104 5 is_stmt 1 view .LVU106
 104:Task/Task_Navi.cpp ****     
 365              		.loc 1 104 13 is_stmt 0 view .LVU107
 366 004c 8DF82150 		strb	r5, [sp, #33]
 106:Task/Task_Navi.cpp ****     memset(&attitude, 0, sizeof(IMUAtt_TypeDef));
 367              		.loc 1 106 5 is_stmt 1 view .LVU108
 368              	.LVL16:
 107:Task/Task_Navi.cpp ****     MadgwickAHRSInit(&algo_att);
 369              		.loc 1 107 5 view .LVU109
 107:Task/Task_Navi.cpp ****     MadgwickAHRSInit(&algo_att);
 370              		.loc 1 107 11 is_stmt 0 view .LVU110
 371 0050 2222     		movs	r2, #34
 372 0052 2946     		mov	r1, r5
 373 0054 1FA8     		add	r0, sp, #124
 374 0056 FFF7FEFF 		bl	memset
 375              	.LVL17:
 108:Task/Task_Navi.cpp **** 
 376              		.loc 1 108 5 is_stmt 1 view .LVU111
 108:Task/Task_Navi.cpp **** 
 377              		.loc 1 108 21 is_stmt 0 view .LVU112
 378 005a 17A8     		add	r0, sp, #92
 379 005c FFF7FEFF 		bl	MadgwickAHRSInit
 380              	.LVL18:
 381 0060 5EE0     		b	.L37
 382              	.LVL19:
 383              	.L33:
 132:Task/Task_Navi.cpp ****             Flt_Mag[Axis_Y] = 0.0f;
 384              		.loc 1 132 13 is_stmt 1 view .LVU113
 132:Task/Task_Navi.cpp ****             Flt_Mag[Axis_Y] = 0.0f;
 385              		.loc 1 132 29 is_stmt 0 view .LVU114
 386 0062 0023     		movs	r3, #0
 387 0064 0E93     		str	r3, [sp, #56]	@ float
 133:Task/Task_Navi.cpp ****             Flt_Mag[Axis_Z] = 0.0f;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 14


 388              		.loc 1 133 13 is_stmt 1 view .LVU115
 133:Task/Task_Navi.cpp ****             Flt_Mag[Axis_Z] = 0.0f;
 389              		.loc 1 133 29 is_stmt 0 view .LVU116
 390 0066 0F93     		str	r3, [sp, #60]	@ float
 134:Task/Task_Navi.cpp ****         }
 391              		.loc 1 134 13 is_stmt 1 view .LVU117
 134:Task/Task_Navi.cpp ****         }
 392              		.loc 1 134 29 is_stmt 0 view .LVU118
 393 0068 1093     		str	r3, [sp, #64]	@ float
 394 006a 90E0     		b	.L34
 395              	.L39:
 140:Task/Task_Navi.cpp ****                                           Flt_Acc[Axis_X],          -Flt_Acc[Axis_Y],          -Flt
 396              		.loc 1 140 13 is_stmt 1 view .LVU119
 397              	.LVL20:
 398              	.LBB1809:
 399              	.LBI1809:
 400              		.file 3 "Algorithm/math_util.h"
   1:Algorithm/math_util.h **** #ifndef __MATH_UTIL_H
   2:Algorithm/math_util.h **** #define __MATH_UTIL_H
   3:Algorithm/math_util.h **** 
   4:Algorithm/math_util.h **** #ifdef __cplusplus
   5:Algorithm/math_util.h **** extern "C" {
   6:Algorithm/math_util.h **** #endif
   7:Algorithm/math_util.h **** 
   8:Algorithm/math_util.h **** #include <stdbool.h>
   9:Algorithm/math_util.h **** #include <stdint.h>
  10:Algorithm/math_util.h **** 
  11:Algorithm/math_util.h **** inline float Deg2Rad(float deg)
 401              		.loc 3 11 14 view .LVU120
 402              	.LBB1810:
  12:Algorithm/math_util.h **** {
  13:Algorithm/math_util.h ****     return deg / 57.3f;
 403              		.loc 3 13 5 view .LVU121
 404              		.loc 3 13 18 is_stmt 0 view .LVU122
 405 006c DFED5D7A 		vldr.32	s15, .L40+4
 406              	.LVL21:
 407              		.loc 3 13 18 view .LVU123
 408              	.LBE1810:
 409              	.LBE1809:
 140:Task/Task_Navi.cpp ****                                           Flt_Acc[Axis_X],          -Flt_Acc[Axis_Y],          -Flt
 410              		.loc 1 140 92 view .LVU124
 411 0070 DDED120A 		vldr.32	s1, [sp, #72]
 140:Task/Task_Navi.cpp ****                                           Flt_Acc[Axis_X],          -Flt_Acc[Axis_Y],          -Flt
 412              		.loc 1 140 31 view .LVU125
 413 0074 F1EE600A 		vneg.f32	s1, s1
 414              	.LVL22:
 415              	.LBB1811:
 416              	.LBI1811:
  11:Algorithm/math_util.h **** {
 417              		.loc 3 11 14 is_stmt 1 view .LVU126
 418              	.LBB1812:
 419              		.loc 3 13 5 view .LVU127
 420              		.loc 3 13 5 is_stmt 0 view .LVU128
 421              	.LBE1812:
 422              	.LBE1811:
 140:Task/Task_Navi.cpp ****                                           Flt_Acc[Axis_X],          -Flt_Acc[Axis_Y],          -Flt
 423              		.loc 1 140 119 view .LVU129
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 15


 424 0078 9DED131A 		vldr.32	s2, [sp, #76]
 140:Task/Task_Navi.cpp ****                                           Flt_Acc[Axis_X],          -Flt_Acc[Axis_Y],          -Flt
 425              		.loc 1 140 31 view .LVU130
 426 007c B1EE411A 		vneg.f32	s2, s2
 427              	.LVL23:
 428              	.LBB1813:
 429              	.LBI1813:
  11:Algorithm/math_util.h **** {
 430              		.loc 3 11 14 is_stmt 1 view .LVU131
 431              	.LBB1814:
 432              		.loc 3 13 5 view .LVU132
 433              		.loc 3 13 5 is_stmt 0 view .LVU133
 434              	.LBE1814:
 435              	.LBE1813:
 140:Task/Task_Navi.cpp ****                                           Flt_Acc[Axis_X],          -Flt_Acc[Axis_Y],          -Flt
 436              		.loc 1 140 31 view .LVU134
 437 0080 9DED104A 		vldr.32	s8, [sp, #64]
 438 0084 DDED0F3A 		vldr.32	s7, [sp, #60]
 439 0088 9DED0E3A 		vldr.32	s6, [sp, #56]
 440 008c DDED162A 		vldr.32	s5, [sp, #88]
 441 0090 F1EE622A 		vneg.f32	s5, s5
 442 0094 9DED152A 		vldr.32	s4, [sp, #84]
 443 0098 B1EE422A 		vneg.f32	s4, s4
 444 009c DDED141A 		vldr.32	s3, [sp, #80]
 445 00a0 81EE271A 		vdiv.f32	s2, s2, s15
 446 00a4 C0EEA70A 		vdiv.f32	s1, s1, s15
 447 00a8 9DED110A 		vldr.32	s0, [sp, #68]
 448 00ac 80EE270A 		vdiv.f32	s0, s0, s15
 449 00b0 17A8     		add	r0, sp, #92
 450 00b2 FFF7FEFF 		bl	MadgwickAHRSupdate
 451              	.LVL24:
 144:Task/Task_Navi.cpp ****             attitude.roll  = algo_att.roll;
 452              		.loc 1 144 13 is_stmt 1 view .LVU135
 144:Task/Task_Navi.cpp ****             attitude.roll  = algo_att.roll;
 453              		.loc 1 144 39 is_stmt 0 view .LVU136
 454 00b6 1C9B     		ldr	r3, [sp, #112]	@ float
 144:Task/Task_Navi.cpp ****             attitude.roll  = algo_att.roll;
 455              		.loc 1 144 28 view .LVU137
 456 00b8 2093     		str	r3, [sp, #128]	@ float
 145:Task/Task_Navi.cpp ****             attitude.yaw   = algo_att.yaw;
 457              		.loc 1 145 13 is_stmt 1 view .LVU138
 145:Task/Task_Navi.cpp ****             attitude.yaw   = algo_att.yaw;
 458              		.loc 1 145 39 is_stmt 0 view .LVU139
 459 00ba 9DED1D0A 		vldr.32	s0, [sp, #116]
 145:Task/Task_Navi.cpp ****             attitude.yaw   = algo_att.yaw;
 460              		.loc 1 145 28 view .LVU140
 461 00be 8DED210A 		vstr.32	s0, [sp, #132]
 146:Task/Task_Navi.cpp ****             attitude.q0    = algo_att.q0;
 462              		.loc 1 146 13 is_stmt 1 view .LVU141
 146:Task/Task_Navi.cpp ****             attitude.q0    = algo_att.q0;
 463              		.loc 1 146 39 is_stmt 0 view .LVU142
 464 00c2 1E9B     		ldr	r3, [sp, #120]	@ float
 146:Task/Task_Navi.cpp ****             attitude.q0    = algo_att.q0;
 465              		.loc 1 146 28 view .LVU143
 466 00c4 2293     		str	r3, [sp, #136]	@ float
 147:Task/Task_Navi.cpp ****             attitude.q1    = algo_att.q1;
 467              		.loc 1 147 13 is_stmt 1 view .LVU144
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 16


 147:Task/Task_Navi.cpp ****             attitude.q1    = algo_att.q1;
 468              		.loc 1 147 39 is_stmt 0 view .LVU145
 469 00c6 189B     		ldr	r3, [sp, #96]	@ float
 147:Task/Task_Navi.cpp ****             attitude.q1    = algo_att.q1;
 470              		.loc 1 147 28 view .LVU146
 471 00c8 2393     		str	r3, [sp, #140]	@ float
 148:Task/Task_Navi.cpp ****             attitude.q2    = algo_att.q2;
 472              		.loc 1 148 13 is_stmt 1 view .LVU147
 148:Task/Task_Navi.cpp ****             attitude.q2    = algo_att.q2;
 473              		.loc 1 148 39 is_stmt 0 view .LVU148
 474 00ca 199B     		ldr	r3, [sp, #100]	@ float
 148:Task/Task_Navi.cpp ****             attitude.q2    = algo_att.q2;
 475              		.loc 1 148 28 view .LVU149
 476 00cc 2493     		str	r3, [sp, #144]	@ float
 149:Task/Task_Navi.cpp ****             attitude.q3    = algo_att.q3;
 477              		.loc 1 149 13 is_stmt 1 view .LVU150
 149:Task/Task_Navi.cpp ****             attitude.q3    = algo_att.q3;
 478              		.loc 1 149 39 is_stmt 0 view .LVU151
 479 00ce 1A9B     		ldr	r3, [sp, #104]	@ float
 149:Task/Task_Navi.cpp ****             attitude.q3    = algo_att.q3;
 480              		.loc 1 149 28 view .LVU152
 481 00d0 2593     		str	r3, [sp, #148]	@ float
 150:Task/Task_Navi.cpp ****             
 482              		.loc 1 150 13 is_stmt 1 view .LVU153
 150:Task/Task_Navi.cpp ****             
 483              		.loc 1 150 39 is_stmt 0 view .LVU154
 484 00d2 1B9B     		ldr	r3, [sp, #108]	@ float
 150:Task/Task_Navi.cpp ****             
 485              		.loc 1 150 28 view .LVU155
 486 00d4 2693     		str	r3, [sp, #152]	@ float
 152:Task/Task_Navi.cpp ****             attitude.time_stamp = SrvOsCommon.get_os_ms();
 487              		.loc 1 152 13 is_stmt 1 view .LVU156
 152:Task/Task_Navi.cpp ****             attitude.time_stamp = SrvOsCommon.get_os_ms();
 488              		.loc 1 152 58 is_stmt 0 view .LVU157
 489 00d6 FFF7FEFF 		bl	_ZL24TaskNavi_FlipOver_Detectf
 490              	.LVL25:
 152:Task/Task_Navi.cpp ****             attitude.time_stamp = SrvOsCommon.get_os_ms();
 491              		.loc 1 152 32 view .LVU158
 492 00da 8DF89C00 		strb	r0, [sp, #156]
 153:Task/Task_Navi.cpp **** 
 493              		.loc 1 153 13 is_stmt 1 view .LVU159
 153:Task/Task_Navi.cpp **** 
 494              		.loc 1 153 47 is_stmt 0 view .LVU160
 495 00de 404B     		ldr	r3, .L40
 496 00e0 5B68     		ldr	r3, [r3, #4]
 153:Task/Task_Navi.cpp **** 
 497              		.loc 1 153 56 view .LVU161
 498 00e2 9847     		blx	r3
 499              	.LVL26:
 153:Task/Task_Navi.cpp **** 
 500              		.loc 1 153 33 view .LVU162
 501 00e4 1F90     		str	r0, [sp, #124]
 155:Task/Task_Navi.cpp **** 
 502              		.loc 1 155 13 is_stmt 1 view .LVU163
 155:Task/Task_Navi.cpp **** 
 503              		.loc 1 155 45 is_stmt 0 view .LVU164
 504 00e6 404C     		ldr	r4, .L40+8
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 17


 505 00e8 0DF17C0C 		add	ip, sp, #124
 506 00ec BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 507 00f0 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 508 00f2 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 509 00f6 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 510 00f8 DCF80030 		ldr	r3, [ip]
 511 00fc 2380     		strh	r3, [r4]	@ movhi
 158:Task/Task_Navi.cpp ****             DataPipe_SendTo(&Attitude_smp_DataPipe, &Attitude_Log_DataPipe);
 512              		.loc 1 158 13 is_stmt 1 view .LVU165
 158:Task/Task_Navi.cpp ****             DataPipe_SendTo(&Attitude_smp_DataPipe, &Attitude_Log_DataPipe);
 513              		.loc 1 158 28 is_stmt 0 view .LVU166
 514 00fe 3B4C     		ldr	r4, .L40+12
 515 0100 3B49     		ldr	r1, .L40+16
 516 0102 2046     		mov	r0, r4
 517 0104 FFF7FEFF 		bl	DataPipe_SendTo
 518              	.LVL27:
 159:Task/Task_Navi.cpp ****         }
 519              		.loc 1 159 13 is_stmt 1 view .LVU167
 159:Task/Task_Navi.cpp ****         }
 520              		.loc 1 159 28 is_stmt 0 view .LVU168
 521 0108 3A49     		ldr	r1, .L40+20
 522 010a 2046     		mov	r0, r4
 523 010c FFF7FEFF 		bl	DataPipe_SendTo
 524              	.LVL28:
 525 0110 40E0     		b	.L35
 526              	.L36:
 174:Task/Task_Navi.cpp ****     }
 527              		.loc 1 174 9 is_stmt 1 view .LVU169
 174:Task/Task_Navi.cpp ****     }
 528              		.loc 1 174 21 is_stmt 0 view .LVU170
 529 0112 334B     		ldr	r3, .L40
 530 0114 DB68     		ldr	r3, [r3, #12]
 174:Task/Task_Navi.cpp ****     }
 531              		.loc 1 174 34 view .LVU171
 532 0116 384A     		ldr	r2, .L40+24
 533 0118 B2F85810 		ldrh	r1, [r2, #88]
 534 011c 2FA8     		add	r0, sp, #188
 535 011e 9847     		blx	r3
 536              	.LVL29:
 537              	.L37:
 110:Task/Task_Navi.cpp ****     {
 538              		.loc 1 110 5 is_stmt 1 view .LVU172
 112:Task/Task_Navi.cpp ****         SrvDataHub.get_mag_init_state(&mag_state);
 539              		.loc 1 112 9 view .LVU173
 112:Task/Task_Navi.cpp ****         SrvDataHub.get_mag_init_state(&mag_state);
 540              		.loc 1 112 20 is_stmt 0 view .LVU174
 541 0120 364C     		ldr	r4, .L40+28
 542 0122 E369     		ldr	r3, [r4, #28]
 112:Task/Task_Navi.cpp ****         SrvDataHub.get_mag_init_state(&mag_state);
 543              		.loc 1 112 38 view .LVU175
 544 0124 0DF1BB00 		add	r0, sp, #187
 545 0128 9847     		blx	r3
 546              	.LVL30:
 113:Task/Task_Navi.cpp ****         SrvDataHub.get_baro_init_state(&bar_state);
 547              		.loc 1 113 9 is_stmt 1 view .LVU176
 113:Task/Task_Navi.cpp ****         SrvDataHub.get_baro_init_state(&bar_state);
 548              		.loc 1 113 20 is_stmt 0 view .LVU177
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 18


 549 012a E36A     		ldr	r3, [r4, #44]
 113:Task/Task_Navi.cpp ****         SrvDataHub.get_baro_init_state(&bar_state);
 550              		.loc 1 113 38 view .LVU178
 551 012c 0DF1BA00 		add	r0, sp, #186
 552 0130 9847     		blx	r3
 553              	.LVL31:
 114:Task/Task_Navi.cpp **** 
 554              		.loc 1 114 9 is_stmt 1 view .LVU179
 114:Task/Task_Navi.cpp **** 
 555              		.loc 1 114 20 is_stmt 0 view .LVU180
 556 0132 A36A     		ldr	r3, [r4, #40]
 114:Task/Task_Navi.cpp **** 
 557              		.loc 1 114 39 view .LVU181
 558 0134 0DF1B900 		add	r0, sp, #185
 559 0138 9847     		blx	r3
 560              	.LVL32:
 116:Task/Task_Navi.cpp ****         {
 561              		.loc 1 116 9 is_stmt 1 view .LVU182
 562 013a 9DF8BB30 		ldrb	r3, [sp, #187]	@ zero_extendqisi2
 563 013e ABB1     		cbz	r3, .L32
 118:Task/Task_Navi.cpp ****                                                         &Flt_Acc[Axis_X], &Flt_Acc[Axis_Y], &Flt_Ac
 564              		.loc 1 118 13 view .LVU183
 118:Task/Task_Navi.cpp ****                                                         &Flt_Acc[Axis_X], &Flt_Acc[Axis_Y], &Flt_Ac
 565              		.loc 1 118 42 is_stmt 0 view .LVU184
 566 0140 A46B     		ldr	r4, [r4, #56]
 118:Task/Task_Navi.cpp ****                                                         &Flt_Acc[Axis_X], &Flt_Acc[Axis_Y], &Flt_Ac
 567              		.loc 1 118 56 view .LVU185
 568 0142 0DF12303 		add	r3, sp, #35
 569 0146 0693     		str	r3, [sp, #24]
 570 0148 0DAB     		add	r3, sp, #52
 571 014a 0593     		str	r3, [sp, #20]
 572 014c 13AB     		add	r3, sp, #76
 573 014e 0493     		str	r3, [sp, #16]
 574 0150 12AB     		add	r3, sp, #72
 575 0152 0393     		str	r3, [sp, #12]
 576 0154 11AB     		add	r3, sp, #68
 577 0156 0293     		str	r3, [sp, #8]
 578 0158 16AB     		add	r3, sp, #88
 579 015a 0193     		str	r3, [sp, #4]
 580 015c 15AB     		add	r3, sp, #84
 581 015e 0093     		str	r3, [sp]
 582 0160 14AB     		add	r3, sp, #80
 583 0162 29AA     		add	r2, sp, #164
 584 0164 2AA9     		add	r1, sp, #168
 585 0166 2DA8     		add	r0, sp, #180
 586 0168 A047     		blx	r4
 587              	.LVL33:
 588 016a 0546     		mov	r5, r0
 589              	.LVL34:
 590              	.L32:
 124:Task/Task_Navi.cpp ****         {
 591              		.loc 1 124 9 is_stmt 1 view .LVU186
 592 016c 9DF8BA30 		ldrb	r3, [sp, #186]	@ zero_extendqisi2
 593 0170 002B     		cmp	r3, #0
 594 0172 3FF476AF 		beq	.L33
 126:Task/Task_Navi.cpp ****                                       &Flt_Mag[Axis_X], &Flt_Mag[Axis_Y], &Flt_Mag[Axis_Z], \
 595              		.loc 1 126 13 view .LVU187
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 19


 126:Task/Task_Navi.cpp ****                                       &Flt_Mag[Axis_X], &Flt_Mag[Axis_Y], &Flt_Mag[Axis_Z], \
 596              		.loc 1 126 24 is_stmt 0 view .LVU188
 597 0176 214B     		ldr	r3, .L40+28
 598 0178 1C6C     		ldr	r4, [r3, #64]
 126:Task/Task_Navi.cpp ****                                       &Flt_Mag[Axis_X], &Flt_Mag[Axis_Y], &Flt_Mag[Axis_Z], \
 599              		.loc 1 126 38 view .LVU189
 600 017a 0DF12203 		add	r3, sp, #34
 601 017e 0193     		str	r3, [sp, #4]
 602 0180 10AB     		add	r3, sp, #64
 603 0182 0093     		str	r3, [sp]
 604 0184 0FAB     		add	r3, sp, #60
 605 0186 0EAA     		add	r2, sp, #56
 606 0188 28A9     		add	r1, sp, #160
 607 018a 2CA8     		add	r0, sp, #176
 608 018c A047     		blx	r4
 609              	.LVL35:
 610              	.L34:
 137:Task/Task_Navi.cpp ****         {
 611              		.loc 1 137 9 is_stmt 1 view .LVU190
 612 018e 002D     		cmp	r5, #0
 613 0190 7FF46CAF 		bne	.L39
 614              	.L35:
 163:Task/Task_Navi.cpp ****             SrvDataHub.get_baro_altitude(&Baro_TimeStamp, &Bar_Pres, &Baro_Alt, &Baro_Alt_Offset, &
 615              		.loc 1 163 9 view .LVU191
 163:Task/Task_Navi.cpp ****             SrvDataHub.get_baro_altitude(&Baro_TimeStamp, &Bar_Pres, &Baro_Alt, &Baro_Alt_Offset, &
 616              		.loc 1 163 42 is_stmt 0 view .LVU192
 617 0194 9DF8B930 		ldrb	r3, [sp, #185]	@ zero_extendqisi2
 618 0198 002B     		cmp	r3, #0
 619 019a BAD0     		beq	.L36
 163:Task/Task_Navi.cpp ****             SrvDataHub.get_baro_altitude(&Baro_TimeStamp, &Bar_Pres, &Baro_Alt, &Baro_Alt_Offset, &
 620              		.loc 1 163 23 discriminator 1 view .LVU193
 621 019c 002D     		cmp	r5, #0
 622 019e B8D0     		beq	.L36
 164:Task/Task_Navi.cpp ****         {
 623              		.loc 1 164 24 view .LVU194
 624 01a0 164B     		ldr	r3, .L40+28
 625 01a2 1C6D     		ldr	r4, [r3, #80]
 164:Task/Task_Navi.cpp ****         {
 626              		.loc 1 164 41 view .LVU195
 627 01a4 0DF12103 		add	r3, sp, #33
 628 01a8 0193     		str	r3, [sp, #4]
 629 01aa 09AB     		add	r3, sp, #36
 630 01ac 0093     		str	r3, [sp]
 631 01ae 0AAB     		add	r3, sp, #40
 632 01b0 0BAA     		add	r2, sp, #44
 633 01b2 0CA9     		add	r1, sp, #48
 634 01b4 2BA8     		add	r0, sp, #172
 635 01b6 A047     		blx	r4
 636              	.LVL36:
 163:Task/Task_Navi.cpp ****             SrvDataHub.get_baro_altitude(&Baro_TimeStamp, &Bar_Pres, &Baro_Alt, &Baro_Alt_Offset, &
 637              		.loc 1 163 42 view .LVU196
 638 01b8 0028     		cmp	r0, #0
 639 01ba AAD0     		beq	.L36
 166:Task/Task_Navi.cpp ****             DataPipe_DataObj(Navi_Altitude).alt = 0.0f;
 640              		.loc 1 166 13 is_stmt 1 view .LVU197
 166:Task/Task_Navi.cpp ****             DataPipe_DataObj(Navi_Altitude).alt = 0.0f;
 641              		.loc 1 166 64 is_stmt 0 view .LVU198
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 20


 642 01bc 084B     		ldr	r3, .L40
 643 01be 5B68     		ldr	r3, [r3, #4]
 166:Task/Task_Navi.cpp ****             DataPipe_DataObj(Navi_Altitude).alt = 0.0f;
 644              		.loc 1 166 73 view .LVU199
 645 01c0 9847     		blx	r3
 646              	.LVL37:
 166:Task/Task_Navi.cpp ****             DataPipe_DataObj(Navi_Altitude).alt = 0.0f;
 647              		.loc 1 166 50 view .LVU200
 648 01c2 094B     		ldr	r3, .L40+8
 649 01c4 5862     		str	r0, [r3, #36]
 167:Task/Task_Navi.cpp **** 
 650              		.loc 1 167 13 is_stmt 1 view .LVU201
 167:Task/Task_Navi.cpp **** 
 651              		.loc 1 167 49 is_stmt 0 view .LVU202
 652 01c6 0022     		movs	r2, #0
 653 01c8 9A62     		str	r2, [r3, #40]	@ float
 169:Task/Task_Navi.cpp ****             DataPipe_SendTo(&Altitude_smp_DataPipe, &Altitude_Log_DataPipe);
 654              		.loc 1 169 13 is_stmt 1 view .LVU203
 169:Task/Task_Navi.cpp ****             DataPipe_SendTo(&Altitude_smp_DataPipe, &Altitude_Log_DataPipe);
 655              		.loc 1 169 28 is_stmt 0 view .LVU204
 656 01ca 0D4C     		ldr	r4, .L40+32
 657 01cc 0D49     		ldr	r1, .L40+36
 658 01ce 2046     		mov	r0, r4
 659 01d0 FFF7FEFF 		bl	DataPipe_SendTo
 660              	.LVL38:
 170:Task/Task_Navi.cpp ****         }
 661              		.loc 1 170 13 is_stmt 1 view .LVU205
 170:Task/Task_Navi.cpp ****         }
 662              		.loc 1 170 28 is_stmt 0 view .LVU206
 663 01d4 0C49     		ldr	r1, .L40+40
 664 01d6 2046     		mov	r0, r4
 665 01d8 FFF7FEFF 		bl	DataPipe_SendTo
 666              	.LVL39:
 667 01dc 99E7     		b	.L36
 668              	.L41:
 669 01de 00BF     		.align	2
 670              	.L40:
 671 01e0 00000000 		.word	SrvOsCommon
 672 01e4 33336542 		.word	1113928499
 673 01e8 00000000 		.word	.LANCHOR4
 674 01ec 00000000 		.word	Attitude_smp_DataPipe
 675 01f0 00000000 		.word	Attitude_hub_DataPipe
 676 01f4 00000000 		.word	Attitude_Log_DataPipe
 677 01f8 00000000 		.word	.LANCHOR5
 678 01fc 00000000 		.word	SrvDataHub
 679 0200 00000000 		.word	Altitude_smp_DataPipe
 680 0204 00000000 		.word	Altitude_hub_DataPipe
 681 0208 00000000 		.word	Altitude_Log_DataPipe
 682              		.cfi_endproc
 683              	.LFE8393:
 684              		.fnend
 686              		.section	.rodata._ZN5Eigen16CommaInitializerINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE8finishedEv.str1.4
 687              		.align	2
 688              	.LC0:
 689 0000 28286D5F 		.ascii	"((m_row+m_currentBlockRows) == m_xpr.rows() || m_xp"
 689      726F772B 
 689      6D5F6375 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 21


 689      7272656E 
 689      74426C6F 
 690 0033 722E636F 		.ascii	"r.cols() == 0) && m_col == m_xpr.cols() && \"Too fe"
 690      6C732829 
 690      203D3D20 
 690      30292026 
 690      26206D5F 
 691 0065 7720636F 		.ascii	"w coefficients passed to comma initializer (operato"
 691      65666669 
 691      6369656E 
 691      74732070 
 691      61737365 
 692 0098 723C3C29 		.ascii	"r<<)\"\000"
 692      2200
 693 009e 0000     		.align	2
 694              	.LC1:
 695 00a0 58707254 		.ascii	"XprType& Eigen::CommaInitializer<MatrixType>::finis"
 695      79706526 
 695      20456967 
 695      656E3A3A 
 695      436F6D6D 
 696 00d3 68656428 		.ascii	"hed() [with XprType = Eigen::Matrix<float, 2, 3>]\000"
 696      29205B77 
 696      69746820 
 696      58707254 
 696      79706520 
 697 0105 000000   		.align	2
 698              	.LC2:
 699 0108 45696765 		.ascii	"Eigen/src/Core/CommaInitializer.h\000"
 699      6E2F7372 
 699      632F436F 
 699      72652F43 
 699      6F6D6D61 
 700              		.section	.text._ZN5Eigen16CommaInitializerINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE8finishedEv,"axG",%p
 701              		.align	1
 702              		.weak	_ZN5Eigen16CommaInitializerINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE8finishedEv
 703              		.syntax unified
 704              		.thumb
 705              		.thumb_func
 707              	_ZN5Eigen16CommaInitializerINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE8finishedEv:
 708              		.fnstart
 709              	.LVL40:
 710              	.LFB8733:
 711              		.file 4 "Eigen/src/Core/CommaInitializer.h"
   1:Eigen/src/Core/CommaInitializer.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/CommaInitializer.h **** // for linear algebra.
   3:Eigen/src/Core/CommaInitializer.h **** //
   4:Eigen/src/Core/CommaInitializer.h **** // Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:Eigen/src/Core/CommaInitializer.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:Eigen/src/Core/CommaInitializer.h **** //
   7:Eigen/src/Core/CommaInitializer.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/CommaInitializer.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/CommaInitializer.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:Eigen/src/Core/CommaInitializer.h **** 
  11:Eigen/src/Core/CommaInitializer.h **** #ifndef EIGEN_COMMAINITIALIZER_H
  12:Eigen/src/Core/CommaInitializer.h **** #define EIGEN_COMMAINITIALIZER_H
  13:Eigen/src/Core/CommaInitializer.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 22


  14:Eigen/src/Core/CommaInitializer.h **** namespace Eigen { 
  15:Eigen/src/Core/CommaInitializer.h **** 
  16:Eigen/src/Core/CommaInitializer.h **** /** \class CommaInitializer
  17:Eigen/src/Core/CommaInitializer.h ****   * \ingroup Core_Module
  18:Eigen/src/Core/CommaInitializer.h ****   *
  19:Eigen/src/Core/CommaInitializer.h ****   * \brief Helper class used by the comma initializer operator
  20:Eigen/src/Core/CommaInitializer.h ****   *
  21:Eigen/src/Core/CommaInitializer.h ****   * This class is internally used to implement the comma initializer feature. It is
  22:Eigen/src/Core/CommaInitializer.h ****   * the return type of MatrixBase::operator<<, and most of the time this is the only
  23:Eigen/src/Core/CommaInitializer.h ****   * way it is used.
  24:Eigen/src/Core/CommaInitializer.h ****   *
  25:Eigen/src/Core/CommaInitializer.h ****   * \sa \blank \ref MatrixBaseCommaInitRef "MatrixBase::operator<<", CommaInitializer::finished()
  26:Eigen/src/Core/CommaInitializer.h ****   */
  27:Eigen/src/Core/CommaInitializer.h **** template<typename XprType>
  28:Eigen/src/Core/CommaInitializer.h **** struct CommaInitializer
  29:Eigen/src/Core/CommaInitializer.h **** {
  30:Eigen/src/Core/CommaInitializer.h ****   typedef typename XprType::Scalar Scalar;
  31:Eigen/src/Core/CommaInitializer.h **** 
  32:Eigen/src/Core/CommaInitializer.h ****   EIGEN_DEVICE_FUNC
  33:Eigen/src/Core/CommaInitializer.h ****   inline CommaInitializer(XprType& xpr, const Scalar& s)
  34:Eigen/src/Core/CommaInitializer.h ****     : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
  35:Eigen/src/Core/CommaInitializer.h ****   {
  36:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(0,0) = s;
  37:Eigen/src/Core/CommaInitializer.h ****   }
  38:Eigen/src/Core/CommaInitializer.h **** 
  39:Eigen/src/Core/CommaInitializer.h ****   template<typename OtherDerived>
  40:Eigen/src/Core/CommaInitializer.h ****   EIGEN_DEVICE_FUNC
  41:Eigen/src/Core/CommaInitializer.h ****   inline CommaInitializer(XprType& xpr, const DenseBase<OtherDerived>& other)
  42:Eigen/src/Core/CommaInitializer.h ****     : m_xpr(xpr), m_row(0), m_col(other.cols()), m_currentBlockRows(other.rows())
  43:Eigen/src/Core/CommaInitializer.h ****   {
  44:Eigen/src/Core/CommaInitializer.h ****     m_xpr.block(0, 0, other.rows(), other.cols()) = other;
  45:Eigen/src/Core/CommaInitializer.h ****   }
  46:Eigen/src/Core/CommaInitializer.h **** 
  47:Eigen/src/Core/CommaInitializer.h ****   /* Copy/Move constructor which transfers ownership. This is crucial in 
  48:Eigen/src/Core/CommaInitializer.h ****    * absence of return value optimization to avoid assertions during destruction. */
  49:Eigen/src/Core/CommaInitializer.h ****   // FIXME in C++11 mode this could be replaced by a proper RValue constructor
  50:Eigen/src/Core/CommaInitializer.h ****   EIGEN_DEVICE_FUNC
  51:Eigen/src/Core/CommaInitializer.h ****   inline CommaInitializer(const CommaInitializer& o)
  52:Eigen/src/Core/CommaInitializer.h ****   : m_xpr(o.m_xpr), m_row(o.m_row), m_col(o.m_col), m_currentBlockRows(o.m_currentBlockRows) {
  53:Eigen/src/Core/CommaInitializer.h ****     // Mark original object as finished. In absence of R-value references we need to const_cast:
  54:Eigen/src/Core/CommaInitializer.h ****     const_cast<CommaInitializer&>(o).m_row = m_xpr.rows();
  55:Eigen/src/Core/CommaInitializer.h ****     const_cast<CommaInitializer&>(o).m_col = m_xpr.cols();
  56:Eigen/src/Core/CommaInitializer.h ****     const_cast<CommaInitializer&>(o).m_currentBlockRows = 0;
  57:Eigen/src/Core/CommaInitializer.h ****   }
  58:Eigen/src/Core/CommaInitializer.h **** 
  59:Eigen/src/Core/CommaInitializer.h ****   /* inserts a scalar value in the target matrix */
  60:Eigen/src/Core/CommaInitializer.h ****   EIGEN_DEVICE_FUNC
  61:Eigen/src/Core/CommaInitializer.h ****   CommaInitializer& operator,(const Scalar& s)
  62:Eigen/src/Core/CommaInitializer.h ****   {
  63:Eigen/src/Core/CommaInitializer.h ****     if (m_col==m_xpr.cols())
  64:Eigen/src/Core/CommaInitializer.h ****     {
  65:Eigen/src/Core/CommaInitializer.h ****       m_row+=m_currentBlockRows;
  66:Eigen/src/Core/CommaInitializer.h ****       m_col = 0;
  67:Eigen/src/Core/CommaInitializer.h ****       m_currentBlockRows = 1;
  68:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(m_row<m_xpr.rows()
  69:Eigen/src/Core/CommaInitializer.h ****         && "Too many rows passed to comma initializer (operator<<)");
  70:Eigen/src/Core/CommaInitializer.h ****     }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 23


  71:Eigen/src/Core/CommaInitializer.h ****     eigen_assert(m_col<m_xpr.cols()
  72:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
  73:Eigen/src/Core/CommaInitializer.h ****     eigen_assert(m_currentBlockRows==1);
  74:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
  75:Eigen/src/Core/CommaInitializer.h ****     return *this;
  76:Eigen/src/Core/CommaInitializer.h ****   }
  77:Eigen/src/Core/CommaInitializer.h **** 
  78:Eigen/src/Core/CommaInitializer.h ****   /* inserts a matrix expression in the target matrix */
  79:Eigen/src/Core/CommaInitializer.h ****   template<typename OtherDerived>
  80:Eigen/src/Core/CommaInitializer.h ****   EIGEN_DEVICE_FUNC
  81:Eigen/src/Core/CommaInitializer.h ****   CommaInitializer& operator,(const DenseBase<OtherDerived>& other)
  82:Eigen/src/Core/CommaInitializer.h ****   {
  83:Eigen/src/Core/CommaInitializer.h ****     if (m_col==m_xpr.cols() && (other.cols()!=0 || other.rows()!=m_currentBlockRows))
  84:Eigen/src/Core/CommaInitializer.h ****     {
  85:Eigen/src/Core/CommaInitializer.h ****       m_row+=m_currentBlockRows;
  86:Eigen/src/Core/CommaInitializer.h ****       m_col = 0;
  87:Eigen/src/Core/CommaInitializer.h ****       m_currentBlockRows = other.rows();
  88:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(m_row+m_currentBlockRows<=m_xpr.rows()
  89:Eigen/src/Core/CommaInitializer.h ****         && "Too many rows passed to comma initializer (operator<<)");
  90:Eigen/src/Core/CommaInitializer.h ****     }
  91:Eigen/src/Core/CommaInitializer.h ****     eigen_assert((m_col + other.cols() <= m_xpr.cols())
  92:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
  93:Eigen/src/Core/CommaInitializer.h ****     eigen_assert(m_currentBlockRows==other.rows());
  94:Eigen/src/Core/CommaInitializer.h ****     m_xpr.template block<OtherDerived::RowsAtCompileTime, OtherDerived::ColsAtCompileTime>
  95:Eigen/src/Core/CommaInitializer.h ****                     (m_row, m_col, other.rows(), other.cols()) = other;
  96:Eigen/src/Core/CommaInitializer.h ****     m_col += other.cols();
  97:Eigen/src/Core/CommaInitializer.h ****     return *this;
  98:Eigen/src/Core/CommaInitializer.h ****   }
  99:Eigen/src/Core/CommaInitializer.h **** 
 100:Eigen/src/Core/CommaInitializer.h ****   EIGEN_DEVICE_FUNC
 101:Eigen/src/Core/CommaInitializer.h ****   inline ~CommaInitializer()
 102:Eigen/src/Core/CommaInitializer.h **** #if defined VERIFY_RAISES_ASSERT && (!defined EIGEN_NO_ASSERTION_CHECKING) && defined EIGEN_EXCEPTI
 103:Eigen/src/Core/CommaInitializer.h ****   EIGEN_EXCEPTION_SPEC(Eigen::eigen_assert_exception)
 104:Eigen/src/Core/CommaInitializer.h **** #endif
 105:Eigen/src/Core/CommaInitializer.h ****   {
 106:Eigen/src/Core/CommaInitializer.h ****       finished();
 107:Eigen/src/Core/CommaInitializer.h ****   }
 108:Eigen/src/Core/CommaInitializer.h **** 
 109:Eigen/src/Core/CommaInitializer.h ****   /** \returns the built matrix once all its coefficients have been set.
 110:Eigen/src/Core/CommaInitializer.h ****     * Calling finished is 100% optional. Its purpose is to write expressions
 111:Eigen/src/Core/CommaInitializer.h ****     * like this:
 112:Eigen/src/Core/CommaInitializer.h ****     * \code
 113:Eigen/src/Core/CommaInitializer.h ****     * quaternion.fromRotationMatrix((Matrix3f() << axis0, axis1, axis2).finished());
 114:Eigen/src/Core/CommaInitializer.h ****     * \endcode
 115:Eigen/src/Core/CommaInitializer.h ****     */
 116:Eigen/src/Core/CommaInitializer.h ****   EIGEN_DEVICE_FUNC
 117:Eigen/src/Core/CommaInitializer.h ****   inline XprType& finished() {
 712              		.loc 4 117 19 is_stmt 1 view -0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 0
 715              		@ frame_needed = 0, uses_anonymous_args = 0
 716              		.loc 4 117 19 is_stmt 0 view .LVU208
 717 0000 08B5     		push	{r3, lr}
 718              		.save {r3, lr}
 719              		.cfi_def_cfa_offset 8
 720              		.cfi_offset 3, -8
 721              		.cfi_offset 14, -4
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 24


 722 0002 0346     		mov	r3, r0
 118:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 723              		.loc 4 118 7 view .LVU209
 724 0004 4268     		ldr	r2, [r0, #4]
 725 0006 C168     		ldr	r1, [r0, #12]
 726 0008 0A44     		add	r2, r2, r1
 727 000a 0068     		ldr	r0, [r0]
 728              	.LVL41:
 729              		.loc 4 118 7 view .LVU210
 730 000c 022A     		cmp	r2, #2
 731 000e 03D1     		bne	.L43
 732              		.loc 4 118 7 discriminator 3 view .LVU211
 733 0010 9B68     		ldr	r3, [r3, #8]
 734              	.LVL42:
 735              		.loc 4 118 7 discriminator 3 view .LVU212
 736 0012 032B     		cmp	r3, #3
 737 0014 00D1     		bne	.L43
 119:Eigen/src/Core/CommaInitializer.h ****            && m_col == m_xpr.cols()
 120:Eigen/src/Core/CommaInitializer.h ****            && "Too few coefficients passed to comma initializer (operator<<)");
 121:Eigen/src/Core/CommaInitializer.h ****       return m_xpr;
 122:Eigen/src/Core/CommaInitializer.h ****   }
 738              		.loc 4 122 3 view .LVU213
 739 0016 08BD     		pop	{r3, pc}
 740              	.L43:
 118:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 741              		.loc 4 118 7 discriminator 7 view .LVU214
 742 0018 024B     		ldr	r3, .L46
 743 001a 034A     		ldr	r2, .L46+4
 744 001c 7621     		movs	r1, #118
 745 001e 0348     		ldr	r0, .L46+8
 746 0020 FFF7FEFF 		bl	__assert_func
 747              	.LVL43:
 748              	.L47:
 749              		.align	2
 750              	.L46:
 751 0024 00000000 		.word	.LC0
 752 0028 A0000000 		.word	.LC1
 753 002c 08010000 		.word	.LC2
 754              		.cfi_endproc
 755              	.LFE8733:
 756              		.fnend
 758              		.section	.rodata._ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.str1.4
 759              		.align	2
 760              	.LC3:
 761 0000 58707254 		.ascii	"XprType& Eigen::CommaInitializer<MatrixType>::finis"
 761      79706526 
 761      20456967 
 761      656E3A3A 
 761      436F6D6D 
 762 0033 68656428 		.ascii	"hed() [with XprType = Eigen::Matrix<float, 3, 1>]\000"
 762      29205B77 
 762      69746820 
 762      58707254 
 762      79706520 
 763              		.section	.text._ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv,"axG",%p
 764              		.align	1
 765              		.weak	_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 25


 766              		.syntax unified
 767              		.thumb
 768              		.thumb_func
 770              	_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv:
 771              		.fnstart
 772              	.LVL44:
 773              	.LFB8743:
 117:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 774              		.loc 4 117 19 is_stmt 1 view -0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 0
 777              		@ frame_needed = 0, uses_anonymous_args = 0
 117:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 778              		.loc 4 117 19 is_stmt 0 view .LVU216
 779 0000 08B5     		push	{r3, lr}
 780              		.save {r3, lr}
 781              		.cfi_def_cfa_offset 8
 782              		.cfi_offset 3, -8
 783              		.cfi_offset 14, -4
 784 0002 0346     		mov	r3, r0
 118:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 785              		.loc 4 118 7 view .LVU217
 786 0004 4268     		ldr	r2, [r0, #4]
 787 0006 C168     		ldr	r1, [r0, #12]
 788 0008 0A44     		add	r2, r2, r1
 789 000a 0068     		ldr	r0, [r0]
 790              	.LVL45:
 118:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 791              		.loc 4 118 7 view .LVU218
 792 000c 032A     		cmp	r2, #3
 793 000e 03D1     		bne	.L49
 118:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 794              		.loc 4 118 7 discriminator 3 view .LVU219
 795 0010 9B68     		ldr	r3, [r3, #8]
 796              	.LVL46:
 118:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 797              		.loc 4 118 7 discriminator 3 view .LVU220
 798 0012 012B     		cmp	r3, #1
 799 0014 00D1     		bne	.L49
 800              		.loc 4 122 3 view .LVU221
 801 0016 08BD     		pop	{r3, pc}
 802              	.L49:
 118:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 803              		.loc 4 118 7 discriminator 7 view .LVU222
 804 0018 024B     		ldr	r3, .L52
 805 001a 034A     		ldr	r2, .L52+4
 806 001c 7621     		movs	r1, #118
 807 001e 0348     		ldr	r0, .L52+8
 808 0020 FFF7FEFF 		bl	__assert_func
 809              	.LVL47:
 810              	.L53:
 811              		.align	2
 812              	.L52:
 813 0024 00000000 		.word	.LC0
 814 0028 00000000 		.word	.LC3
 815 002c 08010000 		.word	.LC2
 816              		.cfi_endproc
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 26


 817              	.LFE8743:
 818              		.fnend
 820              		.section	.text._ZNK5Eigen10MatrixBaseINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE11lazyProductINS1_IfLi3EL
 821              		.align	1
 822              		.weak	_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi
 823              		.syntax unified
 824              		.thumb
 825              		.thumb_func
 827              	_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EE
 828              		.fnstart
 829              	.LVL48:
 830              	.LFB8961:
 831              		.file 5 "Eigen/src/Core/GeneralProduct.h"
   1:Eigen/src/Core/GeneralProduct.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/GeneralProduct.h **** // for linear algebra.
   3:Eigen/src/Core/GeneralProduct.h **** //
   4:Eigen/src/Core/GeneralProduct.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:Eigen/src/Core/GeneralProduct.h **** // Copyright (C) 2008-2011 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:Eigen/src/Core/GeneralProduct.h **** //
   7:Eigen/src/Core/GeneralProduct.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/GeneralProduct.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/GeneralProduct.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:Eigen/src/Core/GeneralProduct.h **** 
  11:Eigen/src/Core/GeneralProduct.h **** #ifndef EIGEN_GENERAL_PRODUCT_H
  12:Eigen/src/Core/GeneralProduct.h **** #define EIGEN_GENERAL_PRODUCT_H
  13:Eigen/src/Core/GeneralProduct.h **** 
  14:Eigen/src/Core/GeneralProduct.h **** namespace Eigen {
  15:Eigen/src/Core/GeneralProduct.h **** 
  16:Eigen/src/Core/GeneralProduct.h **** enum {
  17:Eigen/src/Core/GeneralProduct.h ****   Large = 2,
  18:Eigen/src/Core/GeneralProduct.h ****   Small = 3
  19:Eigen/src/Core/GeneralProduct.h **** };
  20:Eigen/src/Core/GeneralProduct.h **** 
  21:Eigen/src/Core/GeneralProduct.h **** namespace internal {
  22:Eigen/src/Core/GeneralProduct.h **** 
  23:Eigen/src/Core/GeneralProduct.h **** template<int Rows, int Cols, int Depth> struct product_type_selector;
  24:Eigen/src/Core/GeneralProduct.h **** 
  25:Eigen/src/Core/GeneralProduct.h **** template<int Size, int MaxSize> struct product_size_category
  26:Eigen/src/Core/GeneralProduct.h **** {
  27:Eigen/src/Core/GeneralProduct.h ****   enum {
  28:Eigen/src/Core/GeneralProduct.h ****     #ifndef EIGEN_CUDA_ARCH
  29:Eigen/src/Core/GeneralProduct.h ****     is_large = MaxSize == Dynamic ||
  30:Eigen/src/Core/GeneralProduct.h ****                Size >= EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD ||
  31:Eigen/src/Core/GeneralProduct.h ****                (Size==Dynamic && MaxSize>=EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD),
  32:Eigen/src/Core/GeneralProduct.h ****     #else
  33:Eigen/src/Core/GeneralProduct.h ****     is_large = 0,
  34:Eigen/src/Core/GeneralProduct.h ****     #endif
  35:Eigen/src/Core/GeneralProduct.h ****     value = is_large  ? Large
  36:Eigen/src/Core/GeneralProduct.h ****           : Size == 1 ? 1
  37:Eigen/src/Core/GeneralProduct.h ****                       : Small
  38:Eigen/src/Core/GeneralProduct.h ****   };
  39:Eigen/src/Core/GeneralProduct.h **** };
  40:Eigen/src/Core/GeneralProduct.h **** 
  41:Eigen/src/Core/GeneralProduct.h **** template<typename Lhs, typename Rhs> struct product_type
  42:Eigen/src/Core/GeneralProduct.h **** {
  43:Eigen/src/Core/GeneralProduct.h ****   typedef typename remove_all<Lhs>::type _Lhs;
  44:Eigen/src/Core/GeneralProduct.h ****   typedef typename remove_all<Rhs>::type _Rhs;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 27


  45:Eigen/src/Core/GeneralProduct.h ****   enum {
  46:Eigen/src/Core/GeneralProduct.h ****     MaxRows = traits<_Lhs>::MaxRowsAtCompileTime,
  47:Eigen/src/Core/GeneralProduct.h ****     Rows    = traits<_Lhs>::RowsAtCompileTime,
  48:Eigen/src/Core/GeneralProduct.h ****     MaxCols = traits<_Rhs>::MaxColsAtCompileTime,
  49:Eigen/src/Core/GeneralProduct.h ****     Cols    = traits<_Rhs>::ColsAtCompileTime,
  50:Eigen/src/Core/GeneralProduct.h ****     MaxDepth = EIGEN_SIZE_MIN_PREFER_FIXED(traits<_Lhs>::MaxColsAtCompileTime,
  51:Eigen/src/Core/GeneralProduct.h ****                                            traits<_Rhs>::MaxRowsAtCompileTime),
  52:Eigen/src/Core/GeneralProduct.h ****     Depth = EIGEN_SIZE_MIN_PREFER_FIXED(traits<_Lhs>::ColsAtCompileTime,
  53:Eigen/src/Core/GeneralProduct.h ****                                         traits<_Rhs>::RowsAtCompileTime)
  54:Eigen/src/Core/GeneralProduct.h ****   };
  55:Eigen/src/Core/GeneralProduct.h **** 
  56:Eigen/src/Core/GeneralProduct.h ****   // the splitting into different lines of code here, introducing the _select enums and the typedef
  57:Eigen/src/Core/GeneralProduct.h ****   // is to work around an internal compiler error with gcc 4.1 and 4.2.
  58:Eigen/src/Core/GeneralProduct.h **** private:
  59:Eigen/src/Core/GeneralProduct.h ****   enum {
  60:Eigen/src/Core/GeneralProduct.h ****     rows_select = product_size_category<Rows,MaxRows>::value,
  61:Eigen/src/Core/GeneralProduct.h ****     cols_select = product_size_category<Cols,MaxCols>::value,
  62:Eigen/src/Core/GeneralProduct.h ****     depth_select = product_size_category<Depth,MaxDepth>::value
  63:Eigen/src/Core/GeneralProduct.h ****   };
  64:Eigen/src/Core/GeneralProduct.h ****   typedef product_type_selector<rows_select, cols_select, depth_select> selector;
  65:Eigen/src/Core/GeneralProduct.h **** 
  66:Eigen/src/Core/GeneralProduct.h **** public:
  67:Eigen/src/Core/GeneralProduct.h ****   enum {
  68:Eigen/src/Core/GeneralProduct.h ****     value = selector::ret,
  69:Eigen/src/Core/GeneralProduct.h ****     ret = selector::ret
  70:Eigen/src/Core/GeneralProduct.h ****   };
  71:Eigen/src/Core/GeneralProduct.h **** #ifdef EIGEN_DEBUG_PRODUCT
  72:Eigen/src/Core/GeneralProduct.h ****   static void debug()
  73:Eigen/src/Core/GeneralProduct.h ****   {
  74:Eigen/src/Core/GeneralProduct.h ****       EIGEN_DEBUG_VAR(Rows);
  75:Eigen/src/Core/GeneralProduct.h ****       EIGEN_DEBUG_VAR(Cols);
  76:Eigen/src/Core/GeneralProduct.h ****       EIGEN_DEBUG_VAR(Depth);
  77:Eigen/src/Core/GeneralProduct.h ****       EIGEN_DEBUG_VAR(rows_select);
  78:Eigen/src/Core/GeneralProduct.h ****       EIGEN_DEBUG_VAR(cols_select);
  79:Eigen/src/Core/GeneralProduct.h ****       EIGEN_DEBUG_VAR(depth_select);
  80:Eigen/src/Core/GeneralProduct.h ****       EIGEN_DEBUG_VAR(value);
  81:Eigen/src/Core/GeneralProduct.h ****   }
  82:Eigen/src/Core/GeneralProduct.h **** #endif
  83:Eigen/src/Core/GeneralProduct.h **** };
  84:Eigen/src/Core/GeneralProduct.h **** 
  85:Eigen/src/Core/GeneralProduct.h **** /* The following allows to select the kind of product at compile time
  86:Eigen/src/Core/GeneralProduct.h ****  * based on the three dimensions of the product.
  87:Eigen/src/Core/GeneralProduct.h ****  * This is a compile time mapping from {1,Small,Large}^3 -> {product types} */
  88:Eigen/src/Core/GeneralProduct.h **** // FIXME I'm not sure the current mapping is the ideal one.
  89:Eigen/src/Core/GeneralProduct.h **** template<int M, int N>  struct product_type_selector<M,N,1>              { enum { ret = OuterProduc
  90:Eigen/src/Core/GeneralProduct.h **** template<int M>         struct product_type_selector<M, 1, 1>            { enum { ret = LazyCoeffBa
  91:Eigen/src/Core/GeneralProduct.h **** template<int N>         struct product_type_selector<1, N, 1>            { enum { ret = LazyCoeffBa
  92:Eigen/src/Core/GeneralProduct.h **** template<int Depth>     struct product_type_selector<1,    1,    Depth>  { enum { ret = InnerProduc
  93:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<1,    1,    1>      { enum { ret = InnerProduc
  94:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Small,1,    Small>  { enum { ret = CoeffBasedP
  95:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<1,    Small,Small>  { enum { ret = CoeffBasedP
  96:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Small,Small,Small>  { enum { ret = CoeffBasedP
  97:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Small, Small, 1>    { enum { ret = LazyCoeffBa
  98:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Small, Large, 1>    { enum { ret = LazyCoeffBa
  99:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Large, Small, 1>    { enum { ret = LazyCoeffBa
 100:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<1,    Large,Small>  { enum { ret = CoeffBasedP
 101:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<1,    Large,Large>  { enum { ret = GemvProduct
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 28


 102:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<1,    Small,Large>  { enum { ret = CoeffBasedP
 103:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Large,1,    Small>  { enum { ret = CoeffBasedP
 104:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Large,1,    Large>  { enum { ret = GemvProduct
 105:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Small,1,    Large>  { enum { ret = CoeffBasedP
 106:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Small,Small,Large>  { enum { ret = GemmProduct
 107:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Large,Small,Large>  { enum { ret = GemmProduct
 108:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Small,Large,Large>  { enum { ret = GemmProduct
 109:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Large,Large,Large>  { enum { ret = GemmProduct
 110:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Large,Small,Small>  { enum { ret = CoeffBasedP
 111:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Small,Large,Small>  { enum { ret = CoeffBasedP
 112:Eigen/src/Core/GeneralProduct.h **** template<>              struct product_type_selector<Large,Large,Small>  { enum { ret = GemmProduct
 113:Eigen/src/Core/GeneralProduct.h **** 
 114:Eigen/src/Core/GeneralProduct.h **** } // end namespace internal
 115:Eigen/src/Core/GeneralProduct.h **** 
 116:Eigen/src/Core/GeneralProduct.h **** /***********************************************************************
 117:Eigen/src/Core/GeneralProduct.h **** *  Implementation of Inner Vector Vector Product
 118:Eigen/src/Core/GeneralProduct.h **** ***********************************************************************/
 119:Eigen/src/Core/GeneralProduct.h **** 
 120:Eigen/src/Core/GeneralProduct.h **** // FIXME : maybe the "inner product" could return a Scalar
 121:Eigen/src/Core/GeneralProduct.h **** // instead of a 1x1 matrix ??
 122:Eigen/src/Core/GeneralProduct.h **** // Pro: more natural for the user
 123:Eigen/src/Core/GeneralProduct.h **** // Cons: this could be a problem if in a meta unrolled algorithm a matrix-matrix
 124:Eigen/src/Core/GeneralProduct.h **** // product ends up to a row-vector times col-vector product... To tackle this use
 125:Eigen/src/Core/GeneralProduct.h **** // case, we could have a specialization for Block<MatrixType,1,1> with: operator=(Scalar x);
 126:Eigen/src/Core/GeneralProduct.h **** 
 127:Eigen/src/Core/GeneralProduct.h **** /***********************************************************************
 128:Eigen/src/Core/GeneralProduct.h **** *  Implementation of Outer Vector Vector Product
 129:Eigen/src/Core/GeneralProduct.h **** ***********************************************************************/
 130:Eigen/src/Core/GeneralProduct.h **** 
 131:Eigen/src/Core/GeneralProduct.h **** /***********************************************************************
 132:Eigen/src/Core/GeneralProduct.h **** *  Implementation of General Matrix Vector Product
 133:Eigen/src/Core/GeneralProduct.h **** ***********************************************************************/
 134:Eigen/src/Core/GeneralProduct.h **** 
 135:Eigen/src/Core/GeneralProduct.h **** /*  According to the shape/flags of the matrix we have to distinghish 3 different cases:
 136:Eigen/src/Core/GeneralProduct.h ****  *   1 - the matrix is col-major, BLAS compatible and M is large => call fast BLAS-like colmajor ro
 137:Eigen/src/Core/GeneralProduct.h ****  *   2 - the matrix is row-major, BLAS compatible and N is large => call fast BLAS-like rowmajor ro
 138:Eigen/src/Core/GeneralProduct.h ****  *   3 - all other cases are handled using a simple loop along the outer-storage direction.
 139:Eigen/src/Core/GeneralProduct.h ****  *  Therefore we need a lower level meta selector.
 140:Eigen/src/Core/GeneralProduct.h ****  *  Furthermore, if the matrix is the rhs, then the product has to be transposed.
 141:Eigen/src/Core/GeneralProduct.h ****  */
 142:Eigen/src/Core/GeneralProduct.h **** namespace internal {
 143:Eigen/src/Core/GeneralProduct.h **** 
 144:Eigen/src/Core/GeneralProduct.h **** template<int Side, int StorageOrder, bool BlasCompatible>
 145:Eigen/src/Core/GeneralProduct.h **** struct gemv_dense_selector;
 146:Eigen/src/Core/GeneralProduct.h **** 
 147:Eigen/src/Core/GeneralProduct.h **** } // end namespace internal
 148:Eigen/src/Core/GeneralProduct.h **** 
 149:Eigen/src/Core/GeneralProduct.h **** namespace internal {
 150:Eigen/src/Core/GeneralProduct.h **** 
 151:Eigen/src/Core/GeneralProduct.h **** template<typename Scalar,int Size,int MaxSize,bool Cond> struct gemv_static_vector_if;
 152:Eigen/src/Core/GeneralProduct.h **** 
 153:Eigen/src/Core/GeneralProduct.h **** template<typename Scalar,int Size,int MaxSize>
 154:Eigen/src/Core/GeneralProduct.h **** struct gemv_static_vector_if<Scalar,Size,MaxSize,false>
 155:Eigen/src/Core/GeneralProduct.h **** {
 156:Eigen/src/Core/GeneralProduct.h ****   EIGEN_STRONG_INLINE  Scalar* data() { eigen_internal_assert(false && "should never be called"); r
 157:Eigen/src/Core/GeneralProduct.h **** };
 158:Eigen/src/Core/GeneralProduct.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 29


 159:Eigen/src/Core/GeneralProduct.h **** template<typename Scalar,int Size>
 160:Eigen/src/Core/GeneralProduct.h **** struct gemv_static_vector_if<Scalar,Size,Dynamic,true>
 161:Eigen/src/Core/GeneralProduct.h **** {
 162:Eigen/src/Core/GeneralProduct.h ****   EIGEN_STRONG_INLINE Scalar* data() { return 0; }
 163:Eigen/src/Core/GeneralProduct.h **** };
 164:Eigen/src/Core/GeneralProduct.h **** 
 165:Eigen/src/Core/GeneralProduct.h **** template<typename Scalar,int Size,int MaxSize>
 166:Eigen/src/Core/GeneralProduct.h **** struct gemv_static_vector_if<Scalar,Size,MaxSize,true>
 167:Eigen/src/Core/GeneralProduct.h **** {
 168:Eigen/src/Core/GeneralProduct.h ****   enum {
 169:Eigen/src/Core/GeneralProduct.h ****     ForceAlignment  = internal::packet_traits<Scalar>::Vectorizable,
 170:Eigen/src/Core/GeneralProduct.h ****     PacketSize      = internal::packet_traits<Scalar>::size
 171:Eigen/src/Core/GeneralProduct.h ****   };
 172:Eigen/src/Core/GeneralProduct.h ****   #if EIGEN_MAX_STATIC_ALIGN_BYTES!=0
 173:Eigen/src/Core/GeneralProduct.h ****   internal::plain_array<Scalar,EIGEN_SIZE_MIN_PREFER_FIXED(Size,MaxSize),0,EIGEN_PLAIN_ENUM_MIN(Ali
 174:Eigen/src/Core/GeneralProduct.h ****   EIGEN_STRONG_INLINE Scalar* data() { return m_data.array; }
 175:Eigen/src/Core/GeneralProduct.h ****   #else
 176:Eigen/src/Core/GeneralProduct.h ****   // Some architectures cannot align on the stack,
 177:Eigen/src/Core/GeneralProduct.h ****   // => let's manually enforce alignment by allocating more data and return the address of the firs
 178:Eigen/src/Core/GeneralProduct.h ****   internal::plain_array<Scalar,EIGEN_SIZE_MIN_PREFER_FIXED(Size,MaxSize)+(ForceAlignment?EIGEN_MAX_
 179:Eigen/src/Core/GeneralProduct.h ****   EIGEN_STRONG_INLINE Scalar* data() {
 180:Eigen/src/Core/GeneralProduct.h ****     return ForceAlignment
 181:Eigen/src/Core/GeneralProduct.h ****             ? reinterpret_cast<Scalar*>((internal::UIntPtr(m_data.array) & ~(std::size_t(EIGEN_MAX_
 182:Eigen/src/Core/GeneralProduct.h ****             : m_data.array;
 183:Eigen/src/Core/GeneralProduct.h ****   }
 184:Eigen/src/Core/GeneralProduct.h ****   #endif
 185:Eigen/src/Core/GeneralProduct.h **** };
 186:Eigen/src/Core/GeneralProduct.h **** 
 187:Eigen/src/Core/GeneralProduct.h **** // The vector is on the left => transposition
 188:Eigen/src/Core/GeneralProduct.h **** template<int StorageOrder, bool BlasCompatible>
 189:Eigen/src/Core/GeneralProduct.h **** struct gemv_dense_selector<OnTheLeft,StorageOrder,BlasCompatible>
 190:Eigen/src/Core/GeneralProduct.h **** {
 191:Eigen/src/Core/GeneralProduct.h ****   template<typename Lhs, typename Rhs, typename Dest>
 192:Eigen/src/Core/GeneralProduct.h ****   static void run(const Lhs &lhs, const Rhs &rhs, Dest& dest, const typename Dest::Scalar& alpha)
 193:Eigen/src/Core/GeneralProduct.h ****   {
 194:Eigen/src/Core/GeneralProduct.h ****     Transpose<Dest> destT(dest);
 195:Eigen/src/Core/GeneralProduct.h ****     enum { OtherStorageOrder = StorageOrder == RowMajor ? ColMajor : RowMajor };
 196:Eigen/src/Core/GeneralProduct.h ****     gemv_dense_selector<OnTheRight,OtherStorageOrder,BlasCompatible>
 197:Eigen/src/Core/GeneralProduct.h ****       ::run(rhs.transpose(), lhs.transpose(), destT, alpha);
 198:Eigen/src/Core/GeneralProduct.h ****   }
 199:Eigen/src/Core/GeneralProduct.h **** };
 200:Eigen/src/Core/GeneralProduct.h **** 
 201:Eigen/src/Core/GeneralProduct.h **** template<> struct gemv_dense_selector<OnTheRight,ColMajor,true>
 202:Eigen/src/Core/GeneralProduct.h **** {
 203:Eigen/src/Core/GeneralProduct.h ****   template<typename Lhs, typename Rhs, typename Dest>
 204:Eigen/src/Core/GeneralProduct.h ****   static inline void run(const Lhs &lhs, const Rhs &rhs, Dest& dest, const typename Dest::Scalar& a
 205:Eigen/src/Core/GeneralProduct.h ****   {
 206:Eigen/src/Core/GeneralProduct.h ****     typedef typename Lhs::Scalar   LhsScalar;
 207:Eigen/src/Core/GeneralProduct.h ****     typedef typename Rhs::Scalar   RhsScalar;
 208:Eigen/src/Core/GeneralProduct.h ****     typedef typename Dest::Scalar  ResScalar;
 209:Eigen/src/Core/GeneralProduct.h ****     typedef typename Dest::RealScalar  RealScalar;
 210:Eigen/src/Core/GeneralProduct.h ****     
 211:Eigen/src/Core/GeneralProduct.h ****     typedef internal::blas_traits<Lhs> LhsBlasTraits;
 212:Eigen/src/Core/GeneralProduct.h ****     typedef typename LhsBlasTraits::DirectLinearAccessType ActualLhsType;
 213:Eigen/src/Core/GeneralProduct.h ****     typedef internal::blas_traits<Rhs> RhsBlasTraits;
 214:Eigen/src/Core/GeneralProduct.h ****     typedef typename RhsBlasTraits::DirectLinearAccessType ActualRhsType;
 215:Eigen/src/Core/GeneralProduct.h ****   
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 30


 216:Eigen/src/Core/GeneralProduct.h ****     typedef Map<Matrix<ResScalar,Dynamic,1>, EIGEN_PLAIN_ENUM_MIN(AlignedMax,internal::packet_trait
 217:Eigen/src/Core/GeneralProduct.h **** 
 218:Eigen/src/Core/GeneralProduct.h ****     ActualLhsType actualLhs = LhsBlasTraits::extract(lhs);
 219:Eigen/src/Core/GeneralProduct.h ****     ActualRhsType actualRhs = RhsBlasTraits::extract(rhs);
 220:Eigen/src/Core/GeneralProduct.h **** 
 221:Eigen/src/Core/GeneralProduct.h ****     ResScalar actualAlpha = alpha * LhsBlasTraits::extractScalarFactor(lhs)
 222:Eigen/src/Core/GeneralProduct.h ****                                   * RhsBlasTraits::extractScalarFactor(rhs);
 223:Eigen/src/Core/GeneralProduct.h **** 
 224:Eigen/src/Core/GeneralProduct.h ****     // make sure Dest is a compile-time vector type (bug 1166)
 225:Eigen/src/Core/GeneralProduct.h ****     typedef typename conditional<Dest::IsVectorAtCompileTime, Dest, typename Dest::ColXpr>::type Ac
 226:Eigen/src/Core/GeneralProduct.h **** 
 227:Eigen/src/Core/GeneralProduct.h ****     enum {
 228:Eigen/src/Core/GeneralProduct.h ****       // FIXME find a way to allow an inner stride on the result if packet_traits<Scalar>::size==1
 229:Eigen/src/Core/GeneralProduct.h ****       // on, the other hand it is good for the cache to pack the vector anyways...
 230:Eigen/src/Core/GeneralProduct.h ****       EvalToDestAtCompileTime = (ActualDest::InnerStrideAtCompileTime==1),
 231:Eigen/src/Core/GeneralProduct.h ****       ComplexByReal = (NumTraits<LhsScalar>::IsComplex) && (!NumTraits<RhsScalar>::IsComplex),
 232:Eigen/src/Core/GeneralProduct.h ****       MightCannotUseDest = (!EvalToDestAtCompileTime) || ComplexByReal
 233:Eigen/src/Core/GeneralProduct.h ****     };
 234:Eigen/src/Core/GeneralProduct.h **** 
 235:Eigen/src/Core/GeneralProduct.h ****     typedef const_blas_data_mapper<LhsScalar,Index,ColMajor> LhsMapper;
 236:Eigen/src/Core/GeneralProduct.h ****     typedef const_blas_data_mapper<RhsScalar,Index,RowMajor> RhsMapper;
 237:Eigen/src/Core/GeneralProduct.h ****     RhsScalar compatibleAlpha = get_factor<ResScalar,RhsScalar>::run(actualAlpha);
 238:Eigen/src/Core/GeneralProduct.h **** 
 239:Eigen/src/Core/GeneralProduct.h ****     if(!MightCannotUseDest)
 240:Eigen/src/Core/GeneralProduct.h ****     {
 241:Eigen/src/Core/GeneralProduct.h ****       // shortcut if we are sure to be able to use dest directly,
 242:Eigen/src/Core/GeneralProduct.h ****       // this ease the compiler to generate cleaner and more optimzized code for most common cases
 243:Eigen/src/Core/GeneralProduct.h ****       general_matrix_vector_product
 244:Eigen/src/Core/GeneralProduct.h ****           <Index,LhsScalar,LhsMapper,ColMajor,LhsBlasTraits::NeedToConjugate,RhsScalar,RhsMapper,Rh
 245:Eigen/src/Core/GeneralProduct.h ****           actualLhs.rows(), actualLhs.cols(),
 246:Eigen/src/Core/GeneralProduct.h ****           LhsMapper(actualLhs.data(), actualLhs.outerStride()),
 247:Eigen/src/Core/GeneralProduct.h ****           RhsMapper(actualRhs.data(), actualRhs.innerStride()),
 248:Eigen/src/Core/GeneralProduct.h ****           dest.data(), 1,
 249:Eigen/src/Core/GeneralProduct.h ****           compatibleAlpha);
 250:Eigen/src/Core/GeneralProduct.h ****     }
 251:Eigen/src/Core/GeneralProduct.h ****     else
 252:Eigen/src/Core/GeneralProduct.h ****     {
 253:Eigen/src/Core/GeneralProduct.h ****       gemv_static_vector_if<ResScalar,ActualDest::SizeAtCompileTime,ActualDest::MaxSizeAtCompileTim
 254:Eigen/src/Core/GeneralProduct.h **** 
 255:Eigen/src/Core/GeneralProduct.h ****       const bool alphaIsCompatible = (!ComplexByReal) || (numext::imag(actualAlpha)==RealScalar(0))
 256:Eigen/src/Core/GeneralProduct.h ****       const bool evalToDest = EvalToDestAtCompileTime && alphaIsCompatible;
 257:Eigen/src/Core/GeneralProduct.h **** 
 258:Eigen/src/Core/GeneralProduct.h ****       ei_declare_aligned_stack_constructed_variable(ResScalar,actualDestPtr,dest.size(),
 259:Eigen/src/Core/GeneralProduct.h ****                                                     evalToDest ? dest.data() : static_dest.data());
 260:Eigen/src/Core/GeneralProduct.h **** 
 261:Eigen/src/Core/GeneralProduct.h ****       if(!evalToDest)
 262:Eigen/src/Core/GeneralProduct.h ****       {
 263:Eigen/src/Core/GeneralProduct.h ****         #ifdef EIGEN_DENSE_STORAGE_CTOR_PLUGIN
 264:Eigen/src/Core/GeneralProduct.h ****         Index size = dest.size();
 265:Eigen/src/Core/GeneralProduct.h ****         EIGEN_DENSE_STORAGE_CTOR_PLUGIN
 266:Eigen/src/Core/GeneralProduct.h ****         #endif
 267:Eigen/src/Core/GeneralProduct.h ****         if(!alphaIsCompatible)
 268:Eigen/src/Core/GeneralProduct.h ****         {
 269:Eigen/src/Core/GeneralProduct.h ****           MappedDest(actualDestPtr, dest.size()).setZero();
 270:Eigen/src/Core/GeneralProduct.h ****           compatibleAlpha = RhsScalar(1);
 271:Eigen/src/Core/GeneralProduct.h ****         }
 272:Eigen/src/Core/GeneralProduct.h ****         else
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 31


 273:Eigen/src/Core/GeneralProduct.h ****           MappedDest(actualDestPtr, dest.size()) = dest;
 274:Eigen/src/Core/GeneralProduct.h ****       }
 275:Eigen/src/Core/GeneralProduct.h **** 
 276:Eigen/src/Core/GeneralProduct.h ****       general_matrix_vector_product
 277:Eigen/src/Core/GeneralProduct.h ****           <Index,LhsScalar,LhsMapper,ColMajor,LhsBlasTraits::NeedToConjugate,RhsScalar,RhsMapper,Rh
 278:Eigen/src/Core/GeneralProduct.h ****           actualLhs.rows(), actualLhs.cols(),
 279:Eigen/src/Core/GeneralProduct.h ****           LhsMapper(actualLhs.data(), actualLhs.outerStride()),
 280:Eigen/src/Core/GeneralProduct.h ****           RhsMapper(actualRhs.data(), actualRhs.innerStride()),
 281:Eigen/src/Core/GeneralProduct.h ****           actualDestPtr, 1,
 282:Eigen/src/Core/GeneralProduct.h ****           compatibleAlpha);
 283:Eigen/src/Core/GeneralProduct.h **** 
 284:Eigen/src/Core/GeneralProduct.h ****       if (!evalToDest)
 285:Eigen/src/Core/GeneralProduct.h ****       {
 286:Eigen/src/Core/GeneralProduct.h ****         if(!alphaIsCompatible)
 287:Eigen/src/Core/GeneralProduct.h ****           dest.matrix() += actualAlpha * MappedDest(actualDestPtr, dest.size());
 288:Eigen/src/Core/GeneralProduct.h ****         else
 289:Eigen/src/Core/GeneralProduct.h ****           dest = MappedDest(actualDestPtr, dest.size());
 290:Eigen/src/Core/GeneralProduct.h ****       }
 291:Eigen/src/Core/GeneralProduct.h ****     }
 292:Eigen/src/Core/GeneralProduct.h ****   }
 293:Eigen/src/Core/GeneralProduct.h **** };
 294:Eigen/src/Core/GeneralProduct.h **** 
 295:Eigen/src/Core/GeneralProduct.h **** template<> struct gemv_dense_selector<OnTheRight,RowMajor,true>
 296:Eigen/src/Core/GeneralProduct.h **** {
 297:Eigen/src/Core/GeneralProduct.h ****   template<typename Lhs, typename Rhs, typename Dest>
 298:Eigen/src/Core/GeneralProduct.h ****   static void run(const Lhs &lhs, const Rhs &rhs, Dest& dest, const typename Dest::Scalar& alpha)
 299:Eigen/src/Core/GeneralProduct.h ****   {
 300:Eigen/src/Core/GeneralProduct.h ****     typedef typename Lhs::Scalar   LhsScalar;
 301:Eigen/src/Core/GeneralProduct.h ****     typedef typename Rhs::Scalar   RhsScalar;
 302:Eigen/src/Core/GeneralProduct.h ****     typedef typename Dest::Scalar  ResScalar;
 303:Eigen/src/Core/GeneralProduct.h ****     
 304:Eigen/src/Core/GeneralProduct.h ****     typedef internal::blas_traits<Lhs> LhsBlasTraits;
 305:Eigen/src/Core/GeneralProduct.h ****     typedef typename LhsBlasTraits::DirectLinearAccessType ActualLhsType;
 306:Eigen/src/Core/GeneralProduct.h ****     typedef internal::blas_traits<Rhs> RhsBlasTraits;
 307:Eigen/src/Core/GeneralProduct.h ****     typedef typename RhsBlasTraits::DirectLinearAccessType ActualRhsType;
 308:Eigen/src/Core/GeneralProduct.h ****     typedef typename internal::remove_all<ActualRhsType>::type ActualRhsTypeCleaned;
 309:Eigen/src/Core/GeneralProduct.h **** 
 310:Eigen/src/Core/GeneralProduct.h ****     typename add_const<ActualLhsType>::type actualLhs = LhsBlasTraits::extract(lhs);
 311:Eigen/src/Core/GeneralProduct.h ****     typename add_const<ActualRhsType>::type actualRhs = RhsBlasTraits::extract(rhs);
 312:Eigen/src/Core/GeneralProduct.h **** 
 313:Eigen/src/Core/GeneralProduct.h ****     ResScalar actualAlpha = alpha * LhsBlasTraits::extractScalarFactor(lhs)
 314:Eigen/src/Core/GeneralProduct.h ****                                   * RhsBlasTraits::extractScalarFactor(rhs);
 315:Eigen/src/Core/GeneralProduct.h **** 
 316:Eigen/src/Core/GeneralProduct.h ****     enum {
 317:Eigen/src/Core/GeneralProduct.h ****       // FIXME find a way to allow an inner stride on the result if packet_traits<Scalar>::size==1
 318:Eigen/src/Core/GeneralProduct.h ****       // on, the other hand it is good for the cache to pack the vector anyways...
 319:Eigen/src/Core/GeneralProduct.h ****       DirectlyUseRhs = ActualRhsTypeCleaned::InnerStrideAtCompileTime==1
 320:Eigen/src/Core/GeneralProduct.h ****     };
 321:Eigen/src/Core/GeneralProduct.h **** 
 322:Eigen/src/Core/GeneralProduct.h ****     gemv_static_vector_if<RhsScalar,ActualRhsTypeCleaned::SizeAtCompileTime,ActualRhsTypeCleaned::M
 323:Eigen/src/Core/GeneralProduct.h **** 
 324:Eigen/src/Core/GeneralProduct.h ****     ei_declare_aligned_stack_constructed_variable(RhsScalar,actualRhsPtr,actualRhs.size(),
 325:Eigen/src/Core/GeneralProduct.h ****         DirectlyUseRhs ? const_cast<RhsScalar*>(actualRhs.data()) : static_rhs.data());
 326:Eigen/src/Core/GeneralProduct.h **** 
 327:Eigen/src/Core/GeneralProduct.h ****     if(!DirectlyUseRhs)
 328:Eigen/src/Core/GeneralProduct.h ****     {
 329:Eigen/src/Core/GeneralProduct.h ****       #ifdef EIGEN_DENSE_STORAGE_CTOR_PLUGIN
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 32


 330:Eigen/src/Core/GeneralProduct.h ****       Index size = actualRhs.size();
 331:Eigen/src/Core/GeneralProduct.h ****       EIGEN_DENSE_STORAGE_CTOR_PLUGIN
 332:Eigen/src/Core/GeneralProduct.h ****       #endif
 333:Eigen/src/Core/GeneralProduct.h ****       Map<typename ActualRhsTypeCleaned::PlainObject>(actualRhsPtr, actualRhs.size()) = actualRhs;
 334:Eigen/src/Core/GeneralProduct.h ****     }
 335:Eigen/src/Core/GeneralProduct.h **** 
 336:Eigen/src/Core/GeneralProduct.h ****     typedef const_blas_data_mapper<LhsScalar,Index,RowMajor> LhsMapper;
 337:Eigen/src/Core/GeneralProduct.h ****     typedef const_blas_data_mapper<RhsScalar,Index,ColMajor> RhsMapper;
 338:Eigen/src/Core/GeneralProduct.h ****     general_matrix_vector_product
 339:Eigen/src/Core/GeneralProduct.h ****         <Index,LhsScalar,LhsMapper,RowMajor,LhsBlasTraits::NeedToConjugate,RhsScalar,RhsMapper,RhsB
 340:Eigen/src/Core/GeneralProduct.h ****         actualLhs.rows(), actualLhs.cols(),
 341:Eigen/src/Core/GeneralProduct.h ****         LhsMapper(actualLhs.data(), actualLhs.outerStride()),
 342:Eigen/src/Core/GeneralProduct.h ****         RhsMapper(actualRhsPtr, 1),
 343:Eigen/src/Core/GeneralProduct.h ****         dest.data(), dest.col(0).innerStride(), //NOTE  if dest is not a vector at compile-time, th
 344:Eigen/src/Core/GeneralProduct.h ****         actualAlpha);
 345:Eigen/src/Core/GeneralProduct.h ****   }
 346:Eigen/src/Core/GeneralProduct.h **** };
 347:Eigen/src/Core/GeneralProduct.h **** 
 348:Eigen/src/Core/GeneralProduct.h **** template<> struct gemv_dense_selector<OnTheRight,ColMajor,false>
 349:Eigen/src/Core/GeneralProduct.h **** {
 350:Eigen/src/Core/GeneralProduct.h ****   template<typename Lhs, typename Rhs, typename Dest>
 351:Eigen/src/Core/GeneralProduct.h ****   static void run(const Lhs &lhs, const Rhs &rhs, Dest& dest, const typename Dest::Scalar& alpha)
 352:Eigen/src/Core/GeneralProduct.h ****   {
 353:Eigen/src/Core/GeneralProduct.h ****     EIGEN_STATIC_ASSERT((!nested_eval<Lhs,1>::Evaluate),EIGEN_INTERNAL_COMPILATION_ERROR_OR_YOU_MAD
 354:Eigen/src/Core/GeneralProduct.h ****     // TODO if rhs is large enough it might be beneficial to make sure that dest is sequentially st
 355:Eigen/src/Core/GeneralProduct.h ****     typename nested_eval<Rhs,1>::type actual_rhs(rhs);
 356:Eigen/src/Core/GeneralProduct.h ****     const Index size = rhs.rows();
 357:Eigen/src/Core/GeneralProduct.h ****     for(Index k=0; k<size; ++k)
 358:Eigen/src/Core/GeneralProduct.h ****       dest += (alpha*actual_rhs.coeff(k)) * lhs.col(k);
 359:Eigen/src/Core/GeneralProduct.h ****   }
 360:Eigen/src/Core/GeneralProduct.h **** };
 361:Eigen/src/Core/GeneralProduct.h **** 
 362:Eigen/src/Core/GeneralProduct.h **** template<> struct gemv_dense_selector<OnTheRight,RowMajor,false>
 363:Eigen/src/Core/GeneralProduct.h **** {
 364:Eigen/src/Core/GeneralProduct.h ****   template<typename Lhs, typename Rhs, typename Dest>
 365:Eigen/src/Core/GeneralProduct.h ****   static void run(const Lhs &lhs, const Rhs &rhs, Dest& dest, const typename Dest::Scalar& alpha)
 366:Eigen/src/Core/GeneralProduct.h ****   {
 367:Eigen/src/Core/GeneralProduct.h ****     EIGEN_STATIC_ASSERT((!nested_eval<Lhs,1>::Evaluate),EIGEN_INTERNAL_COMPILATION_ERROR_OR_YOU_MAD
 368:Eigen/src/Core/GeneralProduct.h ****     typename nested_eval<Rhs,Lhs::RowsAtCompileTime>::type actual_rhs(rhs);
 369:Eigen/src/Core/GeneralProduct.h ****     const Index rows = dest.rows();
 370:Eigen/src/Core/GeneralProduct.h ****     for(Index i=0; i<rows; ++i)
 371:Eigen/src/Core/GeneralProduct.h ****       dest.coeffRef(i) += alpha * (lhs.row(i).cwiseProduct(actual_rhs.transpose())).sum();
 372:Eigen/src/Core/GeneralProduct.h ****   }
 373:Eigen/src/Core/GeneralProduct.h **** };
 374:Eigen/src/Core/GeneralProduct.h **** 
 375:Eigen/src/Core/GeneralProduct.h **** } // end namespace internal
 376:Eigen/src/Core/GeneralProduct.h **** 
 377:Eigen/src/Core/GeneralProduct.h **** /***************************************************************************
 378:Eigen/src/Core/GeneralProduct.h **** * Implementation of matrix base methods
 379:Eigen/src/Core/GeneralProduct.h **** ***************************************************************************/
 380:Eigen/src/Core/GeneralProduct.h **** 
 381:Eigen/src/Core/GeneralProduct.h **** /** \returns the matrix product of \c *this and \a other.
 382:Eigen/src/Core/GeneralProduct.h ****   *
 383:Eigen/src/Core/GeneralProduct.h ****   * \note If instead of the matrix product you want the coefficient-wise product, see Cwise::operat
 384:Eigen/src/Core/GeneralProduct.h ****   *
 385:Eigen/src/Core/GeneralProduct.h ****   * \sa lazyProduct(), operator*=(const MatrixBase&), Cwise::operator*()
 386:Eigen/src/Core/GeneralProduct.h ****   */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 33


 387:Eigen/src/Core/GeneralProduct.h **** template<typename Derived>
 388:Eigen/src/Core/GeneralProduct.h **** template<typename OtherDerived>
 389:Eigen/src/Core/GeneralProduct.h **** inline const Product<Derived, OtherDerived>
 390:Eigen/src/Core/GeneralProduct.h **** MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 391:Eigen/src/Core/GeneralProduct.h **** {
 392:Eigen/src/Core/GeneralProduct.h ****   // A note regarding the function declaration: In MSVC, this function will sometimes
 393:Eigen/src/Core/GeneralProduct.h ****   // not be inlined since DenseStorage is an unwindable object for dynamic
 394:Eigen/src/Core/GeneralProduct.h ****   // matrices and product types are holding a member to store the result.
 395:Eigen/src/Core/GeneralProduct.h ****   // Thus it does not help tagging this function with EIGEN_STRONG_INLINE.
 396:Eigen/src/Core/GeneralProduct.h ****   enum {
 397:Eigen/src/Core/GeneralProduct.h ****     ProductIsValid =  Derived::ColsAtCompileTime==Dynamic
 398:Eigen/src/Core/GeneralProduct.h ****                    || OtherDerived::RowsAtCompileTime==Dynamic
 399:Eigen/src/Core/GeneralProduct.h ****                    || int(Derived::ColsAtCompileTime)==int(OtherDerived::RowsAtCompileTime),
 400:Eigen/src/Core/GeneralProduct.h ****     AreVectors = Derived::IsVectorAtCompileTime && OtherDerived::IsVectorAtCompileTime,
 401:Eigen/src/Core/GeneralProduct.h ****     SameSizes = EIGEN_PREDICATE_SAME_MATRIX_SIZE(Derived,OtherDerived)
 402:Eigen/src/Core/GeneralProduct.h ****   };
 403:Eigen/src/Core/GeneralProduct.h ****   // note to the lost user:
 404:Eigen/src/Core/GeneralProduct.h ****   //    * for a dot product use: v1.dot(v2)
 405:Eigen/src/Core/GeneralProduct.h ****   //    * for a coeff-wise product use: v1.cwiseProduct(v2)
 406:Eigen/src/Core/GeneralProduct.h ****   EIGEN_STATIC_ASSERT(ProductIsValid || !(AreVectors && SameSizes),
 407:Eigen/src/Core/GeneralProduct.h ****     INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLI
 408:Eigen/src/Core/GeneralProduct.h ****   EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),
 409:Eigen/src/Core/GeneralProduct.h ****     INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)
 410:Eigen/src/Core/GeneralProduct.h ****   EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)
 411:Eigen/src/Core/GeneralProduct.h **** #ifdef EIGEN_DEBUG_PRODUCT
 412:Eigen/src/Core/GeneralProduct.h ****   internal::product_type<Derived,OtherDerived>::debug();
 413:Eigen/src/Core/GeneralProduct.h **** #endif
 414:Eigen/src/Core/GeneralProduct.h **** 
 415:Eigen/src/Core/GeneralProduct.h ****   return Product<Derived, OtherDerived>(derived(), other.derived());
 416:Eigen/src/Core/GeneralProduct.h **** }
 417:Eigen/src/Core/GeneralProduct.h **** 
 418:Eigen/src/Core/GeneralProduct.h **** /** \returns an expression of the matrix product of \c *this and \a other without implicit evaluati
 419:Eigen/src/Core/GeneralProduct.h ****   *
 420:Eigen/src/Core/GeneralProduct.h ****   * The returned product will behave like any other expressions: the coefficients of the product wi
 421:Eigen/src/Core/GeneralProduct.h ****   * computed once at a time as requested. This might be useful in some extremely rare cases when on
 422:Eigen/src/Core/GeneralProduct.h ****   * a small and no coherent fraction of the result's coefficients have to be computed.
 423:Eigen/src/Core/GeneralProduct.h ****   *
 424:Eigen/src/Core/GeneralProduct.h ****   * \warning This version of the matrix product can be much much slower. So use it only if you know
 425:Eigen/src/Core/GeneralProduct.h ****   * what you are doing and that you measured a true speed improvement.
 426:Eigen/src/Core/GeneralProduct.h ****   *
 427:Eigen/src/Core/GeneralProduct.h ****   * \sa operator*(const MatrixBase&)
 428:Eigen/src/Core/GeneralProduct.h ****   */
 429:Eigen/src/Core/GeneralProduct.h **** template<typename Derived>
 430:Eigen/src/Core/GeneralProduct.h **** template<typename OtherDerived>
 431:Eigen/src/Core/GeneralProduct.h **** const Product<Derived,OtherDerived,LazyProduct>
 432:Eigen/src/Core/GeneralProduct.h **** MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 832              		.loc 5 432 1 is_stmt 1 view -0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 0
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 836              		@ link register save eliminated.
 837              	.LBB1815:
 838              	.LBI1815:
 839              		.file 6 "Eigen/src/Core/Product.h"
   1:Eigen/src/Core/Product.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/Product.h **** // for linear algebra.
   3:Eigen/src/Core/Product.h **** //
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 34


   4:Eigen/src/Core/Product.h **** // Copyright (C) 2008-2011 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:Eigen/src/Core/Product.h **** //
   6:Eigen/src/Core/Product.h **** // This Source Code Form is subject to the terms of the Mozilla
   7:Eigen/src/Core/Product.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   8:Eigen/src/Core/Product.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
   9:Eigen/src/Core/Product.h **** 
  10:Eigen/src/Core/Product.h **** #ifndef EIGEN_PRODUCT_H
  11:Eigen/src/Core/Product.h **** #define EIGEN_PRODUCT_H
  12:Eigen/src/Core/Product.h **** 
  13:Eigen/src/Core/Product.h **** namespace Eigen {
  14:Eigen/src/Core/Product.h **** 
  15:Eigen/src/Core/Product.h **** template<typename Lhs, typename Rhs, int Option, typename StorageKind> class ProductImpl;
  16:Eigen/src/Core/Product.h **** 
  17:Eigen/src/Core/Product.h **** namespace internal {
  18:Eigen/src/Core/Product.h **** 
  19:Eigen/src/Core/Product.h **** template<typename Lhs, typename Rhs, int Option>
  20:Eigen/src/Core/Product.h **** struct traits<Product<Lhs, Rhs, Option> >
  21:Eigen/src/Core/Product.h **** {
  22:Eigen/src/Core/Product.h ****   typedef typename remove_all<Lhs>::type LhsCleaned;
  23:Eigen/src/Core/Product.h ****   typedef typename remove_all<Rhs>::type RhsCleaned;
  24:Eigen/src/Core/Product.h ****   typedef traits<LhsCleaned> LhsTraits;
  25:Eigen/src/Core/Product.h ****   typedef traits<RhsCleaned> RhsTraits;
  26:Eigen/src/Core/Product.h ****   
  27:Eigen/src/Core/Product.h ****   typedef MatrixXpr XprKind;
  28:Eigen/src/Core/Product.h ****   
  29:Eigen/src/Core/Product.h ****   typedef typename ScalarBinaryOpTraits<typename traits<LhsCleaned>::Scalar, typename traits<RhsCle
  30:Eigen/src/Core/Product.h ****   typedef typename product_promote_storage_type<typename LhsTraits::StorageKind,
  31:Eigen/src/Core/Product.h ****                                                 typename RhsTraits::StorageKind,
  32:Eigen/src/Core/Product.h ****                                                 internal::product_type<Lhs,Rhs>::ret>::ret StorageK
  33:Eigen/src/Core/Product.h ****   typedef typename promote_index_type<typename LhsTraits::StorageIndex,
  34:Eigen/src/Core/Product.h ****                                       typename RhsTraits::StorageIndex>::type StorageIndex;
  35:Eigen/src/Core/Product.h ****   
  36:Eigen/src/Core/Product.h ****   enum {
  37:Eigen/src/Core/Product.h ****     RowsAtCompileTime    = LhsTraits::RowsAtCompileTime,
  38:Eigen/src/Core/Product.h ****     ColsAtCompileTime    = RhsTraits::ColsAtCompileTime,
  39:Eigen/src/Core/Product.h ****     MaxRowsAtCompileTime = LhsTraits::MaxRowsAtCompileTime,
  40:Eigen/src/Core/Product.h ****     MaxColsAtCompileTime = RhsTraits::MaxColsAtCompileTime,
  41:Eigen/src/Core/Product.h ****     
  42:Eigen/src/Core/Product.h ****     // FIXME: only needed by GeneralMatrixMatrixTriangular
  43:Eigen/src/Core/Product.h ****     InnerSize = EIGEN_SIZE_MIN_PREFER_FIXED(LhsTraits::ColsAtCompileTime, RhsTraits::RowsAtCompileT
  44:Eigen/src/Core/Product.h ****     
  45:Eigen/src/Core/Product.h ****     // The storage order is somewhat arbitrary here. The correct one will be determined through the
  46:Eigen/src/Core/Product.h ****     Flags = (MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1) ? RowMajorBit
  47:Eigen/src/Core/Product.h ****           : (MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1) ? 0
  48:Eigen/src/Core/Product.h ****           : (   ((LhsTraits::Flags&NoPreferredStorageOrderBit) && (RhsTraits::Flags&RowMajorBit))
  49:Eigen/src/Core/Product.h ****              || ((RhsTraits::Flags&NoPreferredStorageOrderBit) && (LhsTraits::Flags&RowMajorBit)) )
  50:Eigen/src/Core/Product.h ****           : NoPreferredStorageOrderBit
  51:Eigen/src/Core/Product.h ****   };
  52:Eigen/src/Core/Product.h **** };
  53:Eigen/src/Core/Product.h **** 
  54:Eigen/src/Core/Product.h **** } // end namespace internal
  55:Eigen/src/Core/Product.h **** 
  56:Eigen/src/Core/Product.h **** /** \class Product
  57:Eigen/src/Core/Product.h ****   * \ingroup Core_Module
  58:Eigen/src/Core/Product.h ****   *
  59:Eigen/src/Core/Product.h ****   * \brief Expression of the product of two arbitrary matrices or vectors
  60:Eigen/src/Core/Product.h ****   *
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 35


  61:Eigen/src/Core/Product.h ****   * \tparam _Lhs the type of the left-hand side expression
  62:Eigen/src/Core/Product.h ****   * \tparam _Rhs the type of the right-hand side expression
  63:Eigen/src/Core/Product.h ****   *
  64:Eigen/src/Core/Product.h ****   * This class represents an expression of the product of two arbitrary matrices.
  65:Eigen/src/Core/Product.h ****   *
  66:Eigen/src/Core/Product.h ****   * The other template parameters are:
  67:Eigen/src/Core/Product.h ****   * \tparam Option     can be DefaultProduct, AliasFreeProduct, or LazyProduct
  68:Eigen/src/Core/Product.h ****   *
  69:Eigen/src/Core/Product.h ****   */
  70:Eigen/src/Core/Product.h **** template<typename _Lhs, typename _Rhs, int Option>
  71:Eigen/src/Core/Product.h **** class Product : public ProductImpl<_Lhs,_Rhs,Option,
  72:Eigen/src/Core/Product.h ****                                    typename internal::product_promote_storage_type<typename interna
  73:Eigen/src/Core/Product.h ****                                                                                    typename interna
  74:Eigen/src/Core/Product.h ****                                                                                    internal::produc
  75:Eigen/src/Core/Product.h **** {
  76:Eigen/src/Core/Product.h ****   public:
  77:Eigen/src/Core/Product.h ****     
  78:Eigen/src/Core/Product.h ****     typedef _Lhs Lhs;
  79:Eigen/src/Core/Product.h ****     typedef _Rhs Rhs;
  80:Eigen/src/Core/Product.h ****     
  81:Eigen/src/Core/Product.h ****     typedef typename ProductImpl<
  82:Eigen/src/Core/Product.h ****         Lhs, Rhs, Option,
  83:Eigen/src/Core/Product.h ****         typename internal::product_promote_storage_type<typename internal::traits<Lhs>::StorageKind
  84:Eigen/src/Core/Product.h ****                                                         typename internal::traits<Rhs>::StorageKind
  85:Eigen/src/Core/Product.h ****                                                         internal::product_type<Lhs,Rhs>::ret>::ret>
  86:Eigen/src/Core/Product.h ****     EIGEN_GENERIC_PUBLIC_INTERFACE(Product)
  87:Eigen/src/Core/Product.h **** 
  88:Eigen/src/Core/Product.h ****     typedef typename internal::ref_selector<Lhs>::type LhsNested;
  89:Eigen/src/Core/Product.h ****     typedef typename internal::ref_selector<Rhs>::type RhsNested;
  90:Eigen/src/Core/Product.h ****     typedef typename internal::remove_all<LhsNested>::type LhsNestedCleaned;
  91:Eigen/src/Core/Product.h ****     typedef typename internal::remove_all<RhsNested>::type RhsNestedCleaned;
  92:Eigen/src/Core/Product.h **** 
  93:Eigen/src/Core/Product.h ****     EIGEN_DEVICE_FUNC Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 840              		.loc 6 93 23 view .LVU224
 841              	.LBB1816:
 842              	.LBB1817:
 843              	.LBB1818:
 844              	.LBI1818:
  94:Eigen/src/Core/Product.h ****     {
  95:Eigen/src/Core/Product.h ****       eigen_assert(lhs.cols() == rhs.rows()
  96:Eigen/src/Core/Product.h ****         && "invalid matrix product"
  97:Eigen/src/Core/Product.h ****         && "if you wanted a coeff-wise or a dot product use the respective explicit functions");
  98:Eigen/src/Core/Product.h ****     }
  99:Eigen/src/Core/Product.h **** 
 100:Eigen/src/Core/Product.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index rows() const { return m_lhs.rows(); }
 101:Eigen/src/Core/Product.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index cols() const { return m_rhs.cols(); }
 102:Eigen/src/Core/Product.h **** 
 103:Eigen/src/Core/Product.h ****     EIGEN_DEVICE_FUNC const LhsNestedCleaned& lhs() const { return m_lhs; }
 104:Eigen/src/Core/Product.h ****     EIGEN_DEVICE_FUNC const RhsNestedCleaned& rhs() const { return m_rhs; }
 105:Eigen/src/Core/Product.h **** 
 106:Eigen/src/Core/Product.h ****   protected:
 107:Eigen/src/Core/Product.h **** 
 108:Eigen/src/Core/Product.h ****     LhsNested m_lhs;
 109:Eigen/src/Core/Product.h ****     RhsNested m_rhs;
 110:Eigen/src/Core/Product.h **** };
 111:Eigen/src/Core/Product.h **** 
 112:Eigen/src/Core/Product.h **** namespace internal {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 36


 113:Eigen/src/Core/Product.h ****   
 114:Eigen/src/Core/Product.h **** template<typename Lhs, typename Rhs, int Option, int ProductTag = internal::product_type<Lhs,Rhs>::
 115:Eigen/src/Core/Product.h **** class dense_product_base
 116:Eigen/src/Core/Product.h ****  : public internal::dense_xpr_base<Product<Lhs,Rhs,Option> >::type
 117:Eigen/src/Core/Product.h **** {};
 118:Eigen/src/Core/Product.h **** 
 119:Eigen/src/Core/Product.h **** /** Convertion to scalar for inner-products */
 120:Eigen/src/Core/Product.h **** template<typename Lhs, typename Rhs, int Option>
 121:Eigen/src/Core/Product.h **** class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 122:Eigen/src/Core/Product.h ****  : public internal::dense_xpr_base<Product<Lhs,Rhs,Option> >::type
 123:Eigen/src/Core/Product.h **** {
 124:Eigen/src/Core/Product.h ****   typedef Product<Lhs,Rhs,Option> ProductXpr;
 125:Eigen/src/Core/Product.h ****   typedef typename internal::dense_xpr_base<ProductXpr>::type Base;
 126:Eigen/src/Core/Product.h **** public:
 127:Eigen/src/Core/Product.h ****   using Base::derived;
 128:Eigen/src/Core/Product.h ****   typedef typename Base::Scalar Scalar;
 129:Eigen/src/Core/Product.h ****   
 130:Eigen/src/Core/Product.h ****   EIGEN_STRONG_INLINE operator const Scalar() const
 131:Eigen/src/Core/Product.h ****   {
 132:Eigen/src/Core/Product.h ****     return internal::evaluator<ProductXpr>(derived()).coeff(0,0);
 133:Eigen/src/Core/Product.h ****   }
 134:Eigen/src/Core/Product.h **** };
 135:Eigen/src/Core/Product.h **** 
 136:Eigen/src/Core/Product.h **** } // namespace internal
 137:Eigen/src/Core/Product.h **** 
 138:Eigen/src/Core/Product.h **** // Generic API dispatcher
 139:Eigen/src/Core/Product.h **** template<typename Lhs, typename Rhs, int Option, typename StorageKind>
 140:Eigen/src/Core/Product.h **** class ProductImpl : public internal::generic_xpr_base<Product<Lhs,Rhs,Option>, MatrixXpr, StorageKi
 141:Eigen/src/Core/Product.h **** {
 142:Eigen/src/Core/Product.h ****   public:
 143:Eigen/src/Core/Product.h ****     typedef typename internal::generic_xpr_base<Product<Lhs,Rhs,Option>, MatrixXpr, StorageKind>::t
 144:Eigen/src/Core/Product.h **** };
 145:Eigen/src/Core/Product.h **** 
 146:Eigen/src/Core/Product.h **** template<typename Lhs, typename Rhs, int Option>
 147:Eigen/src/Core/Product.h **** class ProductImpl<Lhs,Rhs,Option,Dense>
 845              		.loc 6 147 7 view .LVU225
 846              	.LBB1819:
 847              	.LBI1819:
 115:Eigen/src/Core/Product.h ****  : public internal::dense_xpr_base<Product<Lhs,Rhs,Option> >::type
 848              		.loc 6 115 7 view .LVU226
 849              	.LBB1820:
 850              	.LBI1820:
 851              		.file 7 "Eigen/src/Core/MatrixBase.h"
   1:Eigen/src/Core/MatrixBase.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/MatrixBase.h **** // for linear algebra.
   3:Eigen/src/Core/MatrixBase.h **** //
   4:Eigen/src/Core/MatrixBase.h **** // Copyright (C) 2006-2009 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:Eigen/src/Core/MatrixBase.h **** // Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:Eigen/src/Core/MatrixBase.h **** //
   7:Eigen/src/Core/MatrixBase.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/MatrixBase.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/MatrixBase.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:Eigen/src/Core/MatrixBase.h **** 
  11:Eigen/src/Core/MatrixBase.h **** #ifndef EIGEN_MATRIXBASE_H
  12:Eigen/src/Core/MatrixBase.h **** #define EIGEN_MATRIXBASE_H
  13:Eigen/src/Core/MatrixBase.h **** 
  14:Eigen/src/Core/MatrixBase.h **** namespace Eigen {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 37


  15:Eigen/src/Core/MatrixBase.h **** 
  16:Eigen/src/Core/MatrixBase.h **** /** \class MatrixBase
  17:Eigen/src/Core/MatrixBase.h ****   * \ingroup Core_Module
  18:Eigen/src/Core/MatrixBase.h ****   *
  19:Eigen/src/Core/MatrixBase.h ****   * \brief Base class for all dense matrices, vectors, and expressions
  20:Eigen/src/Core/MatrixBase.h ****   *
  21:Eigen/src/Core/MatrixBase.h ****   * This class is the base that is inherited by all matrix, vector, and related expression
  22:Eigen/src/Core/MatrixBase.h ****   * types. Most of the Eigen API is contained in this class, and its base classes. Other important
  23:Eigen/src/Core/MatrixBase.h ****   * classes for the Eigen API are Matrix, and VectorwiseOp.
  24:Eigen/src/Core/MatrixBase.h ****   *
  25:Eigen/src/Core/MatrixBase.h ****   * Note that some methods are defined in other modules such as the \ref LU_Module LU module
  26:Eigen/src/Core/MatrixBase.h ****   * for all functions related to matrix inversions.
  27:Eigen/src/Core/MatrixBase.h ****   *
  28:Eigen/src/Core/MatrixBase.h ****   * \tparam Derived is the derived type, e.g. a matrix type, or an expression, etc.
  29:Eigen/src/Core/MatrixBase.h ****   *
  30:Eigen/src/Core/MatrixBase.h ****   * When writing a function taking Eigen objects as argument, if you want your function
  31:Eigen/src/Core/MatrixBase.h ****   * to take as argument any matrix, vector, or expression, just let it take a
  32:Eigen/src/Core/MatrixBase.h ****   * MatrixBase argument. As an example, here is a function printFirstRow which, given
  33:Eigen/src/Core/MatrixBase.h ****   * a matrix, vector, or expression \a x, prints the first row of \a x.
  34:Eigen/src/Core/MatrixBase.h ****   *
  35:Eigen/src/Core/MatrixBase.h ****   * \code
  36:Eigen/src/Core/MatrixBase.h ****     template<typename Derived>
  37:Eigen/src/Core/MatrixBase.h ****     void printFirstRow(const Eigen::MatrixBase<Derived>& x)
  38:Eigen/src/Core/MatrixBase.h ****     {
  39:Eigen/src/Core/MatrixBase.h ****       cout << x.row(0) << endl;
  40:Eigen/src/Core/MatrixBase.h ****     }
  41:Eigen/src/Core/MatrixBase.h ****   * \endcode
  42:Eigen/src/Core/MatrixBase.h ****   *
  43:Eigen/src/Core/MatrixBase.h ****   * This class can be extended with the help of the plugin mechanism described on the page
  44:Eigen/src/Core/MatrixBase.h ****   * \ref TopicCustomizing_Plugins by defining the preprocessor symbol \c EIGEN_MATRIXBASE_PLUGIN.
  45:Eigen/src/Core/MatrixBase.h ****   *
  46:Eigen/src/Core/MatrixBase.h ****   * \sa \blank \ref TopicClassHierarchy
  47:Eigen/src/Core/MatrixBase.h ****   */
  48:Eigen/src/Core/MatrixBase.h **** template<typename Derived> class MatrixBase
  49:Eigen/src/Core/MatrixBase.h ****   : public DenseBase<Derived>
  50:Eigen/src/Core/MatrixBase.h **** {
  51:Eigen/src/Core/MatrixBase.h ****   public:
  52:Eigen/src/Core/MatrixBase.h **** #ifndef EIGEN_PARSED_BY_DOXYGEN
  53:Eigen/src/Core/MatrixBase.h ****     typedef MatrixBase StorageBaseType;
  54:Eigen/src/Core/MatrixBase.h ****     typedef typename internal::traits<Derived>::StorageKind StorageKind;
  55:Eigen/src/Core/MatrixBase.h ****     typedef typename internal::traits<Derived>::StorageIndex StorageIndex;
  56:Eigen/src/Core/MatrixBase.h ****     typedef typename internal::traits<Derived>::Scalar Scalar;
  57:Eigen/src/Core/MatrixBase.h ****     typedef typename internal::packet_traits<Scalar>::type PacketScalar;
  58:Eigen/src/Core/MatrixBase.h ****     typedef typename NumTraits<Scalar>::Real RealScalar;
  59:Eigen/src/Core/MatrixBase.h **** 
  60:Eigen/src/Core/MatrixBase.h ****     typedef DenseBase<Derived> Base;
  61:Eigen/src/Core/MatrixBase.h ****     using Base::RowsAtCompileTime;
  62:Eigen/src/Core/MatrixBase.h ****     using Base::ColsAtCompileTime;
  63:Eigen/src/Core/MatrixBase.h ****     using Base::SizeAtCompileTime;
  64:Eigen/src/Core/MatrixBase.h ****     using Base::MaxRowsAtCompileTime;
  65:Eigen/src/Core/MatrixBase.h ****     using Base::MaxColsAtCompileTime;
  66:Eigen/src/Core/MatrixBase.h ****     using Base::MaxSizeAtCompileTime;
  67:Eigen/src/Core/MatrixBase.h ****     using Base::IsVectorAtCompileTime;
  68:Eigen/src/Core/MatrixBase.h ****     using Base::Flags;
  69:Eigen/src/Core/MatrixBase.h **** 
  70:Eigen/src/Core/MatrixBase.h ****     using Base::derived;
  71:Eigen/src/Core/MatrixBase.h ****     using Base::const_cast_derived;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 38


  72:Eigen/src/Core/MatrixBase.h ****     using Base::rows;
  73:Eigen/src/Core/MatrixBase.h ****     using Base::cols;
  74:Eigen/src/Core/MatrixBase.h ****     using Base::size;
  75:Eigen/src/Core/MatrixBase.h ****     using Base::coeff;
  76:Eigen/src/Core/MatrixBase.h ****     using Base::coeffRef;
  77:Eigen/src/Core/MatrixBase.h ****     using Base::lazyAssign;
  78:Eigen/src/Core/MatrixBase.h ****     using Base::eval;
  79:Eigen/src/Core/MatrixBase.h ****     using Base::operator+=;
  80:Eigen/src/Core/MatrixBase.h ****     using Base::operator-=;
  81:Eigen/src/Core/MatrixBase.h ****     using Base::operator*=;
  82:Eigen/src/Core/MatrixBase.h ****     using Base::operator/=;
  83:Eigen/src/Core/MatrixBase.h **** 
  84:Eigen/src/Core/MatrixBase.h ****     typedef typename Base::CoeffReturnType CoeffReturnType;
  85:Eigen/src/Core/MatrixBase.h ****     typedef typename Base::ConstTransposeReturnType ConstTransposeReturnType;
  86:Eigen/src/Core/MatrixBase.h ****     typedef typename Base::RowXpr RowXpr;
  87:Eigen/src/Core/MatrixBase.h ****     typedef typename Base::ColXpr ColXpr;
  88:Eigen/src/Core/MatrixBase.h **** #endif // not EIGEN_PARSED_BY_DOXYGEN
  89:Eigen/src/Core/MatrixBase.h **** 
  90:Eigen/src/Core/MatrixBase.h **** 
  91:Eigen/src/Core/MatrixBase.h **** 
  92:Eigen/src/Core/MatrixBase.h **** #ifndef EIGEN_PARSED_BY_DOXYGEN
  93:Eigen/src/Core/MatrixBase.h ****     /** type of the equivalent square matrix */
  94:Eigen/src/Core/MatrixBase.h ****     typedef Matrix<Scalar,EIGEN_SIZE_MAX(RowsAtCompileTime,ColsAtCompileTime),
  95:Eigen/src/Core/MatrixBase.h ****                           EIGEN_SIZE_MAX(RowsAtCompileTime,ColsAtCompileTime)> SquareMatrixType;
  96:Eigen/src/Core/MatrixBase.h **** #endif // not EIGEN_PARSED_BY_DOXYGEN
  97:Eigen/src/Core/MatrixBase.h **** 
  98:Eigen/src/Core/MatrixBase.h ****     /** \returns the size of the main diagonal, which is min(rows(),cols()).
  99:Eigen/src/Core/MatrixBase.h ****       * \sa rows(), cols(), SizeAtCompileTime. */
 100:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 101:Eigen/src/Core/MatrixBase.h ****     inline Index diagonalSize() const { return (numext::mini)(rows(),cols()); }
 102:Eigen/src/Core/MatrixBase.h **** 
 103:Eigen/src/Core/MatrixBase.h ****     typedef typename Base::PlainObject PlainObject;
 104:Eigen/src/Core/MatrixBase.h **** 
 105:Eigen/src/Core/MatrixBase.h **** #ifndef EIGEN_PARSED_BY_DOXYGEN
 106:Eigen/src/Core/MatrixBase.h ****     /** \internal Represents a matrix with all coefficients equal to one another*/
 107:Eigen/src/Core/MatrixBase.h ****     typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,PlainObject> ConstantReturnType;
 108:Eigen/src/Core/MatrixBase.h ****     /** \internal the return type of MatrixBase::adjoint() */
 109:Eigen/src/Core/MatrixBase.h ****     typedef typename internal::conditional<NumTraits<Scalar>::IsComplex,
 110:Eigen/src/Core/MatrixBase.h ****                         CwiseUnaryOp<internal::scalar_conjugate_op<Scalar>, ConstTransposeReturnTyp
 111:Eigen/src/Core/MatrixBase.h ****                         ConstTransposeReturnType
 112:Eigen/src/Core/MatrixBase.h ****                      >::type AdjointReturnType;
 113:Eigen/src/Core/MatrixBase.h ****     /** \internal Return type of eigenvalues() */
 114:Eigen/src/Core/MatrixBase.h ****     typedef Matrix<std::complex<RealScalar>, internal::traits<Derived>::ColsAtCompileTime, 1, ColMa
 115:Eigen/src/Core/MatrixBase.h ****     /** \internal the return type of identity */
 116:Eigen/src/Core/MatrixBase.h ****     typedef CwiseNullaryOp<internal::scalar_identity_op<Scalar>,PlainObject> IdentityReturnType;
 117:Eigen/src/Core/MatrixBase.h ****     /** \internal the return type of unit vectors */
 118:Eigen/src/Core/MatrixBase.h ****     typedef Block<const CwiseNullaryOp<internal::scalar_identity_op<Scalar>, SquareMatrixType>,
 119:Eigen/src/Core/MatrixBase.h ****                   internal::traits<Derived>::RowsAtCompileTime,
 120:Eigen/src/Core/MatrixBase.h ****                   internal::traits<Derived>::ColsAtCompileTime> BasisReturnType;
 121:Eigen/src/Core/MatrixBase.h **** #endif // not EIGEN_PARSED_BY_DOXYGEN
 122:Eigen/src/Core/MatrixBase.h **** 
 123:Eigen/src/Core/MatrixBase.h **** #define EIGEN_CURRENT_STORAGE_BASE_CLASS Eigen::MatrixBase
 124:Eigen/src/Core/MatrixBase.h **** #define EIGEN_DOC_UNARY_ADDONS(X,Y)
 125:Eigen/src/Core/MatrixBase.h **** #   include "../plugins/CommonCwiseUnaryOps.h"
 126:Eigen/src/Core/MatrixBase.h **** #   include "../plugins/CommonCwiseBinaryOps.h"
 127:Eigen/src/Core/MatrixBase.h **** #   include "../plugins/MatrixCwiseUnaryOps.h"
 128:Eigen/src/Core/MatrixBase.h **** #   include "../plugins/MatrixCwiseBinaryOps.h"
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 39


 129:Eigen/src/Core/MatrixBase.h **** #   ifdef EIGEN_MATRIXBASE_PLUGIN
 130:Eigen/src/Core/MatrixBase.h **** #     include EIGEN_MATRIXBASE_PLUGIN
 131:Eigen/src/Core/MatrixBase.h **** #   endif
 132:Eigen/src/Core/MatrixBase.h **** #undef EIGEN_CURRENT_STORAGE_BASE_CLASS
 133:Eigen/src/Core/MatrixBase.h **** #undef EIGEN_DOC_UNARY_ADDONS
 134:Eigen/src/Core/MatrixBase.h **** 
 135:Eigen/src/Core/MatrixBase.h ****     /** Special case of the template operator=, in order to prevent the compiler
 136:Eigen/src/Core/MatrixBase.h ****       * from generating a default operator= (issue hit with g++ 4.1)
 137:Eigen/src/Core/MatrixBase.h ****       */
 138:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 139:Eigen/src/Core/MatrixBase.h ****     Derived& operator=(const MatrixBase& other);
 140:Eigen/src/Core/MatrixBase.h **** 
 141:Eigen/src/Core/MatrixBase.h ****     // We cannot inherit here via Base::operator= since it is causing
 142:Eigen/src/Core/MatrixBase.h ****     // trouble with MSVC.
 143:Eigen/src/Core/MatrixBase.h **** 
 144:Eigen/src/Core/MatrixBase.h ****     template <typename OtherDerived>
 145:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 146:Eigen/src/Core/MatrixBase.h ****     Derived& operator=(const DenseBase<OtherDerived>& other);
 147:Eigen/src/Core/MatrixBase.h **** 
 148:Eigen/src/Core/MatrixBase.h ****     template <typename OtherDerived>
 149:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 150:Eigen/src/Core/MatrixBase.h ****     Derived& operator=(const EigenBase<OtherDerived>& other);
 151:Eigen/src/Core/MatrixBase.h **** 
 152:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 153:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 154:Eigen/src/Core/MatrixBase.h ****     Derived& operator=(const ReturnByValue<OtherDerived>& other);
 155:Eigen/src/Core/MatrixBase.h **** 
 156:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 157:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 158:Eigen/src/Core/MatrixBase.h ****     Derived& operator+=(const MatrixBase<OtherDerived>& other);
 159:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 160:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 161:Eigen/src/Core/MatrixBase.h ****     Derived& operator-=(const MatrixBase<OtherDerived>& other);
 162:Eigen/src/Core/MatrixBase.h **** 
 163:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 164:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 165:Eigen/src/Core/MatrixBase.h ****     const Product<Derived,OtherDerived>
 166:Eigen/src/Core/MatrixBase.h ****     operator*(const MatrixBase<OtherDerived> &other) const;
 167:Eigen/src/Core/MatrixBase.h **** 
 168:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 169:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 170:Eigen/src/Core/MatrixBase.h ****     const Product<Derived,OtherDerived,LazyProduct>
 171:Eigen/src/Core/MatrixBase.h ****     lazyProduct(const MatrixBase<OtherDerived> &other) const;
 172:Eigen/src/Core/MatrixBase.h **** 
 173:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 174:Eigen/src/Core/MatrixBase.h ****     Derived& operator*=(const EigenBase<OtherDerived>& other);
 175:Eigen/src/Core/MatrixBase.h **** 
 176:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 177:Eigen/src/Core/MatrixBase.h ****     void applyOnTheLeft(const EigenBase<OtherDerived>& other);
 178:Eigen/src/Core/MatrixBase.h **** 
 179:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 180:Eigen/src/Core/MatrixBase.h ****     void applyOnTheRight(const EigenBase<OtherDerived>& other);
 181:Eigen/src/Core/MatrixBase.h **** 
 182:Eigen/src/Core/MatrixBase.h ****     template<typename DiagonalDerived>
 183:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 184:Eigen/src/Core/MatrixBase.h ****     const Product<Derived, DiagonalDerived, LazyProduct>
 185:Eigen/src/Core/MatrixBase.h ****     operator*(const DiagonalBase<DiagonalDerived> &diagonal) const;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 40


 186:Eigen/src/Core/MatrixBase.h **** 
 187:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 188:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 189:Eigen/src/Core/MatrixBase.h ****     typename ScalarBinaryOpTraits<typename internal::traits<Derived>::Scalar,typename internal::tra
 190:Eigen/src/Core/MatrixBase.h ****     dot(const MatrixBase<OtherDerived>& other) const;
 191:Eigen/src/Core/MatrixBase.h **** 
 192:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC RealScalar squaredNorm() const;
 193:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC RealScalar norm() const;
 194:Eigen/src/Core/MatrixBase.h ****     RealScalar stableNorm() const;
 195:Eigen/src/Core/MatrixBase.h ****     RealScalar blueNorm() const;
 196:Eigen/src/Core/MatrixBase.h ****     RealScalar hypotNorm() const;
 197:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC const PlainObject normalized() const;
 198:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC const PlainObject stableNormalized() const;
 199:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC void normalize();
 200:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC void stableNormalize();
 201:Eigen/src/Core/MatrixBase.h **** 
 202:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC const AdjointReturnType adjoint() const;
 203:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC void adjointInPlace();
 204:Eigen/src/Core/MatrixBase.h **** 
 205:Eigen/src/Core/MatrixBase.h ****     typedef Diagonal<Derived> DiagonalReturnType;
 206:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 207:Eigen/src/Core/MatrixBase.h ****     DiagonalReturnType diagonal();
 208:Eigen/src/Core/MatrixBase.h **** 
 209:Eigen/src/Core/MatrixBase.h ****     typedef typename internal::add_const<Diagonal<const Derived> >::type ConstDiagonalReturnType;
 210:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 211:Eigen/src/Core/MatrixBase.h ****     ConstDiagonalReturnType diagonal() const;
 212:Eigen/src/Core/MatrixBase.h **** 
 213:Eigen/src/Core/MatrixBase.h ****     template<int Index> struct DiagonalIndexReturnType { typedef Diagonal<Derived,Index> Type; };
 214:Eigen/src/Core/MatrixBase.h ****     template<int Index> struct ConstDiagonalIndexReturnType { typedef const Diagonal<const Derived,
 215:Eigen/src/Core/MatrixBase.h **** 
 216:Eigen/src/Core/MatrixBase.h ****     template<int Index>
 217:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 218:Eigen/src/Core/MatrixBase.h ****     typename DiagonalIndexReturnType<Index>::Type diagonal();
 219:Eigen/src/Core/MatrixBase.h **** 
 220:Eigen/src/Core/MatrixBase.h ****     template<int Index>
 221:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 222:Eigen/src/Core/MatrixBase.h ****     typename ConstDiagonalIndexReturnType<Index>::Type diagonal() const;
 223:Eigen/src/Core/MatrixBase.h **** 
 224:Eigen/src/Core/MatrixBase.h ****     typedef Diagonal<Derived,DynamicIndex> DiagonalDynamicIndexReturnType;
 225:Eigen/src/Core/MatrixBase.h ****     typedef typename internal::add_const<Diagonal<const Derived,DynamicIndex> >::type ConstDiagonal
 226:Eigen/src/Core/MatrixBase.h **** 
 227:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 228:Eigen/src/Core/MatrixBase.h ****     DiagonalDynamicIndexReturnType diagonal(Index index);
 229:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 230:Eigen/src/Core/MatrixBase.h ****     ConstDiagonalDynamicIndexReturnType diagonal(Index index) const;
 231:Eigen/src/Core/MatrixBase.h **** 
 232:Eigen/src/Core/MatrixBase.h ****     template<unsigned int Mode> struct TriangularViewReturnType { typedef TriangularView<Derived, M
 233:Eigen/src/Core/MatrixBase.h ****     template<unsigned int Mode> struct ConstTriangularViewReturnType { typedef const TriangularView
 234:Eigen/src/Core/MatrixBase.h **** 
 235:Eigen/src/Core/MatrixBase.h ****     template<unsigned int Mode>
 236:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 237:Eigen/src/Core/MatrixBase.h ****     typename TriangularViewReturnType<Mode>::Type triangularView();
 238:Eigen/src/Core/MatrixBase.h ****     template<unsigned int Mode>
 239:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 240:Eigen/src/Core/MatrixBase.h ****     typename ConstTriangularViewReturnType<Mode>::Type triangularView() const;
 241:Eigen/src/Core/MatrixBase.h **** 
 242:Eigen/src/Core/MatrixBase.h ****     template<unsigned int UpLo> struct SelfAdjointViewReturnType { typedef SelfAdjointView<Derived,
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 41


 243:Eigen/src/Core/MatrixBase.h ****     template<unsigned int UpLo> struct ConstSelfAdjointViewReturnType { typedef const SelfAdjointVi
 244:Eigen/src/Core/MatrixBase.h **** 
 245:Eigen/src/Core/MatrixBase.h ****     template<unsigned int UpLo>
 246:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 247:Eigen/src/Core/MatrixBase.h ****     typename SelfAdjointViewReturnType<UpLo>::Type selfadjointView();
 248:Eigen/src/Core/MatrixBase.h ****     template<unsigned int UpLo>
 249:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 250:Eigen/src/Core/MatrixBase.h ****     typename ConstSelfAdjointViewReturnType<UpLo>::Type selfadjointView() const;
 251:Eigen/src/Core/MatrixBase.h **** 
 252:Eigen/src/Core/MatrixBase.h ****     const SparseView<Derived> sparseView(const Scalar& m_reference = Scalar(0),
 253:Eigen/src/Core/MatrixBase.h ****                                          const typename NumTraits<Scalar>::Real& m_epsilon = NumTra
 254:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const IdentityReturnType Identity();
 255:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const IdentityReturnType Identity(Index rows, Index cols);
 256:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const BasisReturnType Unit(Index size, Index i);
 257:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const BasisReturnType Unit(Index i);
 258:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const BasisReturnType UnitX();
 259:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const BasisReturnType UnitY();
 260:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const BasisReturnType UnitZ();
 261:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const BasisReturnType UnitW();
 262:Eigen/src/Core/MatrixBase.h **** 
 263:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 264:Eigen/src/Core/MatrixBase.h ****     const DiagonalWrapper<const Derived> asDiagonal() const;
 265:Eigen/src/Core/MatrixBase.h ****     const PermutationWrapper<const Derived> asPermutation() const;
 266:Eigen/src/Core/MatrixBase.h **** 
 267:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 268:Eigen/src/Core/MatrixBase.h ****     Derived& setIdentity();
 269:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 270:Eigen/src/Core/MatrixBase.h ****     Derived& setIdentity(Index rows, Index cols);
 271:Eigen/src/Core/MatrixBase.h **** 
 272:Eigen/src/Core/MatrixBase.h ****     bool isIdentity(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 273:Eigen/src/Core/MatrixBase.h ****     bool isDiagonal(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 274:Eigen/src/Core/MatrixBase.h **** 
 275:Eigen/src/Core/MatrixBase.h ****     bool isUpperTriangular(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 276:Eigen/src/Core/MatrixBase.h ****     bool isLowerTriangular(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 277:Eigen/src/Core/MatrixBase.h **** 
 278:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 279:Eigen/src/Core/MatrixBase.h ****     bool isOrthogonal(const MatrixBase<OtherDerived>& other,
 280:Eigen/src/Core/MatrixBase.h ****                       const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 281:Eigen/src/Core/MatrixBase.h ****     bool isUnitary(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 282:Eigen/src/Core/MatrixBase.h **** 
 283:Eigen/src/Core/MatrixBase.h ****     /** \returns true if each coefficients of \c *this and \a other are all exactly equal.
 284:Eigen/src/Core/MatrixBase.h ****       * \warning When using floating point scalar values you probably should rather use a
 285:Eigen/src/Core/MatrixBase.h ****       *          fuzzy comparison such as isApprox()
 286:Eigen/src/Core/MatrixBase.h ****       * \sa isApprox(), operator!= */
 287:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 288:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC inline bool operator==(const MatrixBase<OtherDerived>& other) const
 289:Eigen/src/Core/MatrixBase.h ****     { return cwiseEqual(other).all(); }
 290:Eigen/src/Core/MatrixBase.h **** 
 291:Eigen/src/Core/MatrixBase.h ****     /** \returns true if at least one pair of coefficients of \c *this and \a other are not exactly
 292:Eigen/src/Core/MatrixBase.h ****       * \warning When using floating point scalar values you probably should rather use a
 293:Eigen/src/Core/MatrixBase.h ****       *          fuzzy comparison such as isApprox()
 294:Eigen/src/Core/MatrixBase.h ****       * \sa isApprox(), operator== */
 295:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 296:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC inline bool operator!=(const MatrixBase<OtherDerived>& other) const
 297:Eigen/src/Core/MatrixBase.h ****     { return cwiseNotEqual(other).any(); }
 298:Eigen/src/Core/MatrixBase.h **** 
 299:Eigen/src/Core/MatrixBase.h ****     NoAlias<Derived,Eigen::MatrixBase > noalias();
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 42


 300:Eigen/src/Core/MatrixBase.h **** 
 301:Eigen/src/Core/MatrixBase.h ****     // TODO forceAlignedAccess is temporarily disabled
 302:Eigen/src/Core/MatrixBase.h ****     // Need to find a nicer workaround.
 303:Eigen/src/Core/MatrixBase.h ****     inline const Derived& forceAlignedAccess() const { return derived(); }
 304:Eigen/src/Core/MatrixBase.h ****     inline Derived& forceAlignedAccess() { return derived(); }
 305:Eigen/src/Core/MatrixBase.h ****     template<bool Enable> inline const Derived& forceAlignedAccessIf() const { return derived(); }
 306:Eigen/src/Core/MatrixBase.h ****     template<bool Enable> inline Derived& forceAlignedAccessIf() { return derived(); }
 307:Eigen/src/Core/MatrixBase.h **** 
 308:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC Scalar trace() const;
 309:Eigen/src/Core/MatrixBase.h **** 
 310:Eigen/src/Core/MatrixBase.h ****     template<int p> EIGEN_DEVICE_FUNC RealScalar lpNorm() const;
 311:Eigen/src/Core/MatrixBase.h **** 
 312:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC MatrixBase<Derived>& matrix() { return *this; }
 313:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC const MatrixBase<Derived>& matrix() const { return *this; }
 314:Eigen/src/Core/MatrixBase.h **** 
 315:Eigen/src/Core/MatrixBase.h ****     /** \returns an \link Eigen::ArrayBase Array \endlink expression of this matrix
 316:Eigen/src/Core/MatrixBase.h ****       * \sa ArrayBase::matrix() */
 317:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ArrayWrapper<Derived> array() { return ArrayWrapper<Deriv
 318:Eigen/src/Core/MatrixBase.h ****     /** \returns a const \link Eigen::ArrayBase Array \endlink expression of this matrix
 319:Eigen/src/Core/MatrixBase.h ****       * \sa ArrayBase::matrix() */
 320:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const ArrayWrapper<const Derived> array() const { return 
 321:Eigen/src/Core/MatrixBase.h **** 
 322:Eigen/src/Core/MatrixBase.h **** /////////// LU module ///////////
 323:Eigen/src/Core/MatrixBase.h **** 
 324:Eigen/src/Core/MatrixBase.h ****     inline const FullPivLU<PlainObject> fullPivLu() const;
 325:Eigen/src/Core/MatrixBase.h ****     inline const PartialPivLU<PlainObject> partialPivLu() const;
 326:Eigen/src/Core/MatrixBase.h **** 
 327:Eigen/src/Core/MatrixBase.h ****     inline const PartialPivLU<PlainObject> lu() const;
 328:Eigen/src/Core/MatrixBase.h **** 
 329:Eigen/src/Core/MatrixBase.h ****     inline const Inverse<Derived> inverse() const;
 330:Eigen/src/Core/MatrixBase.h **** 
 331:Eigen/src/Core/MatrixBase.h ****     template<typename ResultType>
 332:Eigen/src/Core/MatrixBase.h ****     inline void computeInverseAndDetWithCheck(
 333:Eigen/src/Core/MatrixBase.h ****       ResultType& inverse,
 334:Eigen/src/Core/MatrixBase.h ****       typename ResultType::Scalar& determinant,
 335:Eigen/src/Core/MatrixBase.h ****       bool& invertible,
 336:Eigen/src/Core/MatrixBase.h ****       const RealScalar& absDeterminantThreshold = NumTraits<Scalar>::dummy_precision()
 337:Eigen/src/Core/MatrixBase.h ****     ) const;
 338:Eigen/src/Core/MatrixBase.h ****     template<typename ResultType>
 339:Eigen/src/Core/MatrixBase.h ****     inline void computeInverseWithCheck(
 340:Eigen/src/Core/MatrixBase.h ****       ResultType& inverse,
 341:Eigen/src/Core/MatrixBase.h ****       bool& invertible,
 342:Eigen/src/Core/MatrixBase.h ****       const RealScalar& absDeterminantThreshold = NumTraits<Scalar>::dummy_precision()
 343:Eigen/src/Core/MatrixBase.h ****     ) const;
 344:Eigen/src/Core/MatrixBase.h ****     Scalar determinant() const;
 345:Eigen/src/Core/MatrixBase.h **** 
 346:Eigen/src/Core/MatrixBase.h **** /////////// Cholesky module ///////////
 347:Eigen/src/Core/MatrixBase.h **** 
 348:Eigen/src/Core/MatrixBase.h ****     inline const LLT<PlainObject>  llt() const;
 349:Eigen/src/Core/MatrixBase.h ****     inline const LDLT<PlainObject> ldlt() const;
 350:Eigen/src/Core/MatrixBase.h **** 
 351:Eigen/src/Core/MatrixBase.h **** /////////// QR module ///////////
 352:Eigen/src/Core/MatrixBase.h **** 
 353:Eigen/src/Core/MatrixBase.h ****     inline const HouseholderQR<PlainObject> householderQr() const;
 354:Eigen/src/Core/MatrixBase.h ****     inline const ColPivHouseholderQR<PlainObject> colPivHouseholderQr() const;
 355:Eigen/src/Core/MatrixBase.h ****     inline const FullPivHouseholderQR<PlainObject> fullPivHouseholderQr() const;
 356:Eigen/src/Core/MatrixBase.h ****     inline const CompleteOrthogonalDecomposition<PlainObject> completeOrthogonalDecomposition() con
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 43


 357:Eigen/src/Core/MatrixBase.h **** 
 358:Eigen/src/Core/MatrixBase.h **** /////////// Eigenvalues module ///////////
 359:Eigen/src/Core/MatrixBase.h **** 
 360:Eigen/src/Core/MatrixBase.h ****     inline EigenvaluesReturnType eigenvalues() const;
 361:Eigen/src/Core/MatrixBase.h ****     inline RealScalar operatorNorm() const;
 362:Eigen/src/Core/MatrixBase.h **** 
 363:Eigen/src/Core/MatrixBase.h **** /////////// SVD module ///////////
 364:Eigen/src/Core/MatrixBase.h **** 
 365:Eigen/src/Core/MatrixBase.h ****     inline JacobiSVD<PlainObject> jacobiSvd(unsigned int computationOptions = 0) const;
 366:Eigen/src/Core/MatrixBase.h ****     inline BDCSVD<PlainObject>    bdcSvd(unsigned int computationOptions = 0) const;
 367:Eigen/src/Core/MatrixBase.h **** 
 368:Eigen/src/Core/MatrixBase.h **** /////////// Geometry module ///////////
 369:Eigen/src/Core/MatrixBase.h **** 
 370:Eigen/src/Core/MatrixBase.h ****     #ifndef EIGEN_PARSED_BY_DOXYGEN
 371:Eigen/src/Core/MatrixBase.h ****     /// \internal helper struct to form the return type of the cross product
 372:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived> struct cross_product_return_type {
 373:Eigen/src/Core/MatrixBase.h ****       typedef typename ScalarBinaryOpTraits<typename internal::traits<Derived>::Scalar,typename int
 374:Eigen/src/Core/MatrixBase.h ****       typedef Matrix<Scalar,MatrixBase::RowsAtCompileTime,MatrixBase::ColsAtCompileTime> type;
 375:Eigen/src/Core/MatrixBase.h ****     };
 376:Eigen/src/Core/MatrixBase.h ****     #endif // EIGEN_PARSED_BY_DOXYGEN
 377:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 378:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 379:Eigen/src/Core/MatrixBase.h **** #ifndef EIGEN_PARSED_BY_DOXYGEN
 380:Eigen/src/Core/MatrixBase.h ****     inline typename cross_product_return_type<OtherDerived>::type
 381:Eigen/src/Core/MatrixBase.h **** #else
 382:Eigen/src/Core/MatrixBase.h ****     inline PlainObject
 383:Eigen/src/Core/MatrixBase.h **** #endif
 384:Eigen/src/Core/MatrixBase.h ****     cross(const MatrixBase<OtherDerived>& other) const;
 385:Eigen/src/Core/MatrixBase.h **** 
 386:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 387:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 388:Eigen/src/Core/MatrixBase.h ****     inline PlainObject cross3(const MatrixBase<OtherDerived>& other) const;
 389:Eigen/src/Core/MatrixBase.h **** 
 390:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 391:Eigen/src/Core/MatrixBase.h ****     inline PlainObject unitOrthogonal(void) const;
 392:Eigen/src/Core/MatrixBase.h **** 
 393:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 394:Eigen/src/Core/MatrixBase.h ****     inline Matrix<Scalar,3,1> eulerAngles(Index a0, Index a1, Index a2) const;
 395:Eigen/src/Core/MatrixBase.h **** 
 396:Eigen/src/Core/MatrixBase.h ****     // put this as separate enum value to work around possible GCC 4.3 bug (?)
 397:Eigen/src/Core/MatrixBase.h ****     enum { HomogeneousReturnTypeDirection = ColsAtCompileTime==1&&RowsAtCompileTime==1 ? ((internal
 398:Eigen/src/Core/MatrixBase.h ****                                           : ColsAtCompileTime==1 ? Vertical : Horizontal };
 399:Eigen/src/Core/MatrixBase.h ****     typedef Homogeneous<Derived, HomogeneousReturnTypeDirection> HomogeneousReturnType;
 400:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 401:Eigen/src/Core/MatrixBase.h ****     inline HomogeneousReturnType homogeneous() const;
 402:Eigen/src/Core/MatrixBase.h **** 
 403:Eigen/src/Core/MatrixBase.h ****     enum {
 404:Eigen/src/Core/MatrixBase.h ****       SizeMinusOne = SizeAtCompileTime==Dynamic ? Dynamic : SizeAtCompileTime-1
 405:Eigen/src/Core/MatrixBase.h ****     };
 406:Eigen/src/Core/MatrixBase.h ****     typedef Block<const Derived,
 407:Eigen/src/Core/MatrixBase.h ****                   internal::traits<Derived>::ColsAtCompileTime==1 ? SizeMinusOne : 1,
 408:Eigen/src/Core/MatrixBase.h ****                   internal::traits<Derived>::ColsAtCompileTime==1 ? 1 : SizeMinusOne> ConstStartMin
 409:Eigen/src/Core/MatrixBase.h ****     typedef EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(ConstStartMinusOne,Scalar,quotient) HNormalizedR
 410:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 411:Eigen/src/Core/MatrixBase.h ****     inline const HNormalizedReturnType hnormalized() const;
 412:Eigen/src/Core/MatrixBase.h **** 
 413:Eigen/src/Core/MatrixBase.h **** ////////// Householder module ///////////
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 44


 414:Eigen/src/Core/MatrixBase.h **** 
 415:Eigen/src/Core/MatrixBase.h ****     void makeHouseholderInPlace(Scalar& tau, RealScalar& beta);
 416:Eigen/src/Core/MatrixBase.h ****     template<typename EssentialPart>
 417:Eigen/src/Core/MatrixBase.h ****     void makeHouseholder(EssentialPart& essential,
 418:Eigen/src/Core/MatrixBase.h ****                          Scalar& tau, RealScalar& beta) const;
 419:Eigen/src/Core/MatrixBase.h ****     template<typename EssentialPart>
 420:Eigen/src/Core/MatrixBase.h ****     void applyHouseholderOnTheLeft(const EssentialPart& essential,
 421:Eigen/src/Core/MatrixBase.h ****                                    const Scalar& tau,
 422:Eigen/src/Core/MatrixBase.h ****                                    Scalar* workspace);
 423:Eigen/src/Core/MatrixBase.h ****     template<typename EssentialPart>
 424:Eigen/src/Core/MatrixBase.h ****     void applyHouseholderOnTheRight(const EssentialPart& essential,
 425:Eigen/src/Core/MatrixBase.h ****                                     const Scalar& tau,
 426:Eigen/src/Core/MatrixBase.h ****                                     Scalar* workspace);
 427:Eigen/src/Core/MatrixBase.h **** 
 428:Eigen/src/Core/MatrixBase.h **** ///////// Jacobi module /////////
 429:Eigen/src/Core/MatrixBase.h **** 
 430:Eigen/src/Core/MatrixBase.h ****     template<typename OtherScalar>
 431:Eigen/src/Core/MatrixBase.h ****     void applyOnTheLeft(Index p, Index q, const JacobiRotation<OtherScalar>& j);
 432:Eigen/src/Core/MatrixBase.h ****     template<typename OtherScalar>
 433:Eigen/src/Core/MatrixBase.h ****     void applyOnTheRight(Index p, Index q, const JacobiRotation<OtherScalar>& j);
 434:Eigen/src/Core/MatrixBase.h **** 
 435:Eigen/src/Core/MatrixBase.h **** ///////// SparseCore module /////////
 436:Eigen/src/Core/MatrixBase.h **** 
 437:Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 438:Eigen/src/Core/MatrixBase.h ****     EIGEN_STRONG_INLINE const typename SparseMatrixBase<OtherDerived>::template CwiseProductDenseRe
 439:Eigen/src/Core/MatrixBase.h ****     cwiseProduct(const SparseMatrixBase<OtherDerived> &other) const
 440:Eigen/src/Core/MatrixBase.h ****     {
 441:Eigen/src/Core/MatrixBase.h ****       return other.cwiseProduct(derived());
 442:Eigen/src/Core/MatrixBase.h ****     }
 443:Eigen/src/Core/MatrixBase.h **** 
 444:Eigen/src/Core/MatrixBase.h **** ///////// MatrixFunctions module /////////
 445:Eigen/src/Core/MatrixBase.h **** 
 446:Eigen/src/Core/MatrixBase.h ****     typedef typename internal::stem_function<Scalar>::type StemFunction;
 447:Eigen/src/Core/MatrixBase.h **** #define EIGEN_MATRIX_FUNCTION(ReturnType, Name, Description) \
 448:Eigen/src/Core/MatrixBase.h ****     /** \returns an expression of the matrix Description of \c *this. \brief This function requires
 449:Eigen/src/Core/MatrixBase.h ****     const ReturnType<Derived> Name() const;
 450:Eigen/src/Core/MatrixBase.h **** #define EIGEN_MATRIX_FUNCTION_1(ReturnType, Name, Description, Argument) \
 451:Eigen/src/Core/MatrixBase.h ****     /** \returns an expression of the matrix Description of \c *this. \brief This function requires
 452:Eigen/src/Core/MatrixBase.h ****     const ReturnType<Derived> Name(Argument) const;
 453:Eigen/src/Core/MatrixBase.h **** 
 454:Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixExponentialReturnValue, exp, exponential)
 455:Eigen/src/Core/MatrixBase.h ****     /** \brief Helper function for the <a href="unsupported/group__MatrixFunctions__Module.html"> u
 456:Eigen/src/Core/MatrixBase.h ****     const MatrixFunctionReturnValue<Derived> matrixFunction(StemFunction f) const;
 457:Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, cosh, hyperbolic cosine)
 458:Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, sinh, hyperbolic sine)
 459:Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, cos, cosine)
 460:Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, sin, sine)
 461:Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixSquareRootReturnValue, sqrt, square root)
 462:Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixLogarithmReturnValue, log, logarithm)
 463:Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue,        pow, power to \c p, const RealScalar& p)
 464:Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \c p, const std::complex<R
 465:Eigen/src/Core/MatrixBase.h **** 
 466:Eigen/src/Core/MatrixBase.h ****   protected:
 467:Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC MatrixBase() : Base() {}
 852              		.loc 7 467 23 view .LVU227
 853              	.LBB1821:
 854              	.LBI1821:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 45


 855              		.file 8 "Eigen/src/Core/DenseBase.h"
   1:Eigen/src/Core/DenseBase.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/DenseBase.h **** // for linear algebra.
   3:Eigen/src/Core/DenseBase.h **** //
   4:Eigen/src/Core/DenseBase.h **** // Copyright (C) 2007-2010 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:Eigen/src/Core/DenseBase.h **** // Copyright (C) 2008-2010 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:Eigen/src/Core/DenseBase.h **** //
   7:Eigen/src/Core/DenseBase.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/DenseBase.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/DenseBase.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:Eigen/src/Core/DenseBase.h **** 
  11:Eigen/src/Core/DenseBase.h **** #ifndef EIGEN_DENSEBASE_H
  12:Eigen/src/Core/DenseBase.h **** #define EIGEN_DENSEBASE_H
  13:Eigen/src/Core/DenseBase.h **** 
  14:Eigen/src/Core/DenseBase.h **** namespace Eigen {
  15:Eigen/src/Core/DenseBase.h **** 
  16:Eigen/src/Core/DenseBase.h **** namespace internal {
  17:Eigen/src/Core/DenseBase.h ****   
  18:Eigen/src/Core/DenseBase.h **** // The index type defined by EIGEN_DEFAULT_DENSE_INDEX_TYPE must be a signed type.
  19:Eigen/src/Core/DenseBase.h **** // This dummy function simply aims at checking that at compile time.
  20:Eigen/src/Core/DenseBase.h **** static inline void check_DenseIndex_is_signed() {
  21:Eigen/src/Core/DenseBase.h ****   EIGEN_STATIC_ASSERT(NumTraits<DenseIndex>::IsSigned,THE_INDEX_TYPE_MUST_BE_A_SIGNED_TYPE); 
  22:Eigen/src/Core/DenseBase.h **** }
  23:Eigen/src/Core/DenseBase.h **** 
  24:Eigen/src/Core/DenseBase.h **** } // end namespace internal
  25:Eigen/src/Core/DenseBase.h ****   
  26:Eigen/src/Core/DenseBase.h **** /** \class DenseBase
  27:Eigen/src/Core/DenseBase.h ****   * \ingroup Core_Module
  28:Eigen/src/Core/DenseBase.h ****   *
  29:Eigen/src/Core/DenseBase.h ****   * \brief Base class for all dense matrices, vectors, and arrays
  30:Eigen/src/Core/DenseBase.h ****   *
  31:Eigen/src/Core/DenseBase.h ****   * This class is the base that is inherited by all dense objects (matrix, vector, arrays,
  32:Eigen/src/Core/DenseBase.h ****   * and related expression types). The common Eigen API for dense objects is contained in this clas
  33:Eigen/src/Core/DenseBase.h ****   *
  34:Eigen/src/Core/DenseBase.h ****   * \tparam Derived is the derived type, e.g., a matrix type or an expression.
  35:Eigen/src/Core/DenseBase.h ****   *
  36:Eigen/src/Core/DenseBase.h ****   * This class can be extended with the help of the plugin mechanism described on the page
  37:Eigen/src/Core/DenseBase.h ****   * \ref TopicCustomizing_Plugins by defining the preprocessor symbol \c EIGEN_DENSEBASE_PLUGIN.
  38:Eigen/src/Core/DenseBase.h ****   *
  39:Eigen/src/Core/DenseBase.h ****   * \sa \blank \ref TopicClassHierarchy
  40:Eigen/src/Core/DenseBase.h ****   */
  41:Eigen/src/Core/DenseBase.h **** template<typename Derived> class DenseBase
  42:Eigen/src/Core/DenseBase.h **** #ifndef EIGEN_PARSED_BY_DOXYGEN
  43:Eigen/src/Core/DenseBase.h ****   : public DenseCoeffsBase<Derived>
  44:Eigen/src/Core/DenseBase.h **** #else
  45:Eigen/src/Core/DenseBase.h ****   : public DenseCoeffsBase<Derived,DirectWriteAccessors>
  46:Eigen/src/Core/DenseBase.h **** #endif // not EIGEN_PARSED_BY_DOXYGEN
  47:Eigen/src/Core/DenseBase.h **** {
  48:Eigen/src/Core/DenseBase.h ****   public:
  49:Eigen/src/Core/DenseBase.h **** 
  50:Eigen/src/Core/DenseBase.h ****     /** Inner iterator type to iterate over the coefficients of a row or column.
  51:Eigen/src/Core/DenseBase.h ****       * \sa class InnerIterator
  52:Eigen/src/Core/DenseBase.h ****       */
  53:Eigen/src/Core/DenseBase.h ****     typedef Eigen::InnerIterator<Derived> InnerIterator;
  54:Eigen/src/Core/DenseBase.h **** 
  55:Eigen/src/Core/DenseBase.h ****     typedef typename internal::traits<Derived>::StorageKind StorageKind;
  56:Eigen/src/Core/DenseBase.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 46


  57:Eigen/src/Core/DenseBase.h ****     /**
  58:Eigen/src/Core/DenseBase.h ****       * \brief The type used to store indices
  59:Eigen/src/Core/DenseBase.h ****       * \details This typedef is relevant for types that store multiple indices such as
  60:Eigen/src/Core/DenseBase.h ****       *          PermutationMatrix or Transpositions, otherwise it defaults to Eigen::Index
  61:Eigen/src/Core/DenseBase.h ****       * \sa \blank \ref TopicPreprocessorDirectives, Eigen::Index, SparseMatrixBase.
  62:Eigen/src/Core/DenseBase.h ****      */
  63:Eigen/src/Core/DenseBase.h ****     typedef typename internal::traits<Derived>::StorageIndex StorageIndex;
  64:Eigen/src/Core/DenseBase.h **** 
  65:Eigen/src/Core/DenseBase.h ****     /** The numeric type of the expression' coefficients, e.g. float, double, int or std::complex<f
  66:Eigen/src/Core/DenseBase.h ****     typedef typename internal::traits<Derived>::Scalar Scalar;
  67:Eigen/src/Core/DenseBase.h ****     
  68:Eigen/src/Core/DenseBase.h ****     /** The numeric type of the expression' coefficients, e.g. float, double, int or std::complex<f
  69:Eigen/src/Core/DenseBase.h ****       *
  70:Eigen/src/Core/DenseBase.h ****       * It is an alias for the Scalar type */
  71:Eigen/src/Core/DenseBase.h ****     typedef Scalar value_type;
  72:Eigen/src/Core/DenseBase.h ****     
  73:Eigen/src/Core/DenseBase.h ****     typedef typename NumTraits<Scalar>::Real RealScalar;
  74:Eigen/src/Core/DenseBase.h ****     typedef DenseCoeffsBase<Derived> Base;
  75:Eigen/src/Core/DenseBase.h **** 
  76:Eigen/src/Core/DenseBase.h ****     using Base::derived;
  77:Eigen/src/Core/DenseBase.h ****     using Base::const_cast_derived;
  78:Eigen/src/Core/DenseBase.h ****     using Base::rows;
  79:Eigen/src/Core/DenseBase.h ****     using Base::cols;
  80:Eigen/src/Core/DenseBase.h ****     using Base::size;
  81:Eigen/src/Core/DenseBase.h ****     using Base::rowIndexByOuterInner;
  82:Eigen/src/Core/DenseBase.h ****     using Base::colIndexByOuterInner;
  83:Eigen/src/Core/DenseBase.h ****     using Base::coeff;
  84:Eigen/src/Core/DenseBase.h ****     using Base::coeffByOuterInner;
  85:Eigen/src/Core/DenseBase.h ****     using Base::operator();
  86:Eigen/src/Core/DenseBase.h ****     using Base::operator[];
  87:Eigen/src/Core/DenseBase.h ****     using Base::x;
  88:Eigen/src/Core/DenseBase.h ****     using Base::y;
  89:Eigen/src/Core/DenseBase.h ****     using Base::z;
  90:Eigen/src/Core/DenseBase.h ****     using Base::w;
  91:Eigen/src/Core/DenseBase.h ****     using Base::stride;
  92:Eigen/src/Core/DenseBase.h ****     using Base::innerStride;
  93:Eigen/src/Core/DenseBase.h ****     using Base::outerStride;
  94:Eigen/src/Core/DenseBase.h ****     using Base::rowStride;
  95:Eigen/src/Core/DenseBase.h ****     using Base::colStride;
  96:Eigen/src/Core/DenseBase.h ****     typedef typename Base::CoeffReturnType CoeffReturnType;
  97:Eigen/src/Core/DenseBase.h **** 
  98:Eigen/src/Core/DenseBase.h ****     enum {
  99:Eigen/src/Core/DenseBase.h **** 
 100:Eigen/src/Core/DenseBase.h ****       RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,
 101:Eigen/src/Core/DenseBase.h ****         /**< The number of rows at compile-time. This is just a copy of the value provided
 102:Eigen/src/Core/DenseBase.h ****           * by the \a Derived type. If a value is not known at compile-time,
 103:Eigen/src/Core/DenseBase.h ****           * it is set to the \a Dynamic constant.
 104:Eigen/src/Core/DenseBase.h ****           * \sa MatrixBase::rows(), MatrixBase::cols(), ColsAtCompileTime, SizeAtCompileTime */
 105:Eigen/src/Core/DenseBase.h **** 
 106:Eigen/src/Core/DenseBase.h ****       ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,
 107:Eigen/src/Core/DenseBase.h ****         /**< The number of columns at compile-time. This is just a copy of the value provided
 108:Eigen/src/Core/DenseBase.h ****           * by the \a Derived type. If a value is not known at compile-time,
 109:Eigen/src/Core/DenseBase.h ****           * it is set to the \a Dynamic constant.
 110:Eigen/src/Core/DenseBase.h ****           * \sa MatrixBase::rows(), MatrixBase::cols(), RowsAtCompileTime, SizeAtCompileTime */
 111:Eigen/src/Core/DenseBase.h **** 
 112:Eigen/src/Core/DenseBase.h **** 
 113:Eigen/src/Core/DenseBase.h ****       SizeAtCompileTime = (internal::size_at_compile_time<internal::traits<Derived>::RowsAtCompileT
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 47


 114:Eigen/src/Core/DenseBase.h ****                                                    internal::traits<Derived>::ColsAtCompileTime>::r
 115:Eigen/src/Core/DenseBase.h ****         /**< This is equal to the number of coefficients, i.e. the number of
 116:Eigen/src/Core/DenseBase.h ****           * rows times the number of columns, or to \a Dynamic if this is not
 117:Eigen/src/Core/DenseBase.h ****           * known at compile-time. \sa RowsAtCompileTime, ColsAtCompileTime */
 118:Eigen/src/Core/DenseBase.h **** 
 119:Eigen/src/Core/DenseBase.h ****       MaxRowsAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime,
 120:Eigen/src/Core/DenseBase.h ****         /**< This value is equal to the maximum possible number of rows that this expression
 121:Eigen/src/Core/DenseBase.h ****           * might have. If this expression might have an arbitrarily high number of rows,
 122:Eigen/src/Core/DenseBase.h ****           * this value is set to \a Dynamic.
 123:Eigen/src/Core/DenseBase.h ****           *
 124:Eigen/src/Core/DenseBase.h ****           * This value is useful to know when evaluating an expression, in order to determine
 125:Eigen/src/Core/DenseBase.h ****           * whether it is possible to avoid doing a dynamic memory allocation.
 126:Eigen/src/Core/DenseBase.h ****           *
 127:Eigen/src/Core/DenseBase.h ****           * \sa RowsAtCompileTime, MaxColsAtCompileTime, MaxSizeAtCompileTime
 128:Eigen/src/Core/DenseBase.h ****           */
 129:Eigen/src/Core/DenseBase.h **** 
 130:Eigen/src/Core/DenseBase.h ****       MaxColsAtCompileTime = internal::traits<Derived>::MaxColsAtCompileTime,
 131:Eigen/src/Core/DenseBase.h ****         /**< This value is equal to the maximum possible number of columns that this expression
 132:Eigen/src/Core/DenseBase.h ****           * might have. If this expression might have an arbitrarily high number of columns,
 133:Eigen/src/Core/DenseBase.h ****           * this value is set to \a Dynamic.
 134:Eigen/src/Core/DenseBase.h ****           *
 135:Eigen/src/Core/DenseBase.h ****           * This value is useful to know when evaluating an expression, in order to determine
 136:Eigen/src/Core/DenseBase.h ****           * whether it is possible to avoid doing a dynamic memory allocation.
 137:Eigen/src/Core/DenseBase.h ****           *
 138:Eigen/src/Core/DenseBase.h ****           * \sa ColsAtCompileTime, MaxRowsAtCompileTime, MaxSizeAtCompileTime
 139:Eigen/src/Core/DenseBase.h ****           */
 140:Eigen/src/Core/DenseBase.h **** 
 141:Eigen/src/Core/DenseBase.h ****       MaxSizeAtCompileTime = (internal::size_at_compile_time<internal::traits<Derived>::MaxRowsAtCo
 142:Eigen/src/Core/DenseBase.h ****                                                       internal::traits<Derived>::MaxColsAtCompileTi
 143:Eigen/src/Core/DenseBase.h ****         /**< This value is equal to the maximum possible number of coefficients that this expressio
 144:Eigen/src/Core/DenseBase.h ****           * might have. If this expression might have an arbitrarily high number of coefficients,
 145:Eigen/src/Core/DenseBase.h ****           * this value is set to \a Dynamic.
 146:Eigen/src/Core/DenseBase.h ****           *
 147:Eigen/src/Core/DenseBase.h ****           * This value is useful to know when evaluating an expression, in order to determine
 148:Eigen/src/Core/DenseBase.h ****           * whether it is possible to avoid doing a dynamic memory allocation.
 149:Eigen/src/Core/DenseBase.h ****           *
 150:Eigen/src/Core/DenseBase.h ****           * \sa SizeAtCompileTime, MaxRowsAtCompileTime, MaxColsAtCompileTime
 151:Eigen/src/Core/DenseBase.h ****           */
 152:Eigen/src/Core/DenseBase.h **** 
 153:Eigen/src/Core/DenseBase.h ****       IsVectorAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime == 1
 154:Eigen/src/Core/DenseBase.h ****                            || internal::traits<Derived>::MaxColsAtCompileTime == 1,
 155:Eigen/src/Core/DenseBase.h ****         /**< This is set to true if either the number of rows or the number of
 156:Eigen/src/Core/DenseBase.h ****           * columns is known at compile-time to be equal to 1. Indeed, in that case,
 157:Eigen/src/Core/DenseBase.h ****           * we are dealing with a column-vector (if there is only one column) or with
 158:Eigen/src/Core/DenseBase.h ****           * a row-vector (if there is only one row). */
 159:Eigen/src/Core/DenseBase.h **** 
 160:Eigen/src/Core/DenseBase.h ****       Flags = internal::traits<Derived>::Flags,
 161:Eigen/src/Core/DenseBase.h ****         /**< This stores expression \ref flags flags which may or may not be inherited by new expre
 162:Eigen/src/Core/DenseBase.h ****           * constructed from this one. See the \ref flags "list of flags".
 163:Eigen/src/Core/DenseBase.h ****           */
 164:Eigen/src/Core/DenseBase.h **** 
 165:Eigen/src/Core/DenseBase.h ****       IsRowMajor = int(Flags) & RowMajorBit, /**< True if this expression has row-major storage ord
 166:Eigen/src/Core/DenseBase.h **** 
 167:Eigen/src/Core/DenseBase.h ****       InnerSizeAtCompileTime = int(IsVectorAtCompileTime) ? int(SizeAtCompileTime)
 168:Eigen/src/Core/DenseBase.h ****                              : int(IsRowMajor) ? int(ColsAtCompileTime) : int(RowsAtCompileTime),
 169:Eigen/src/Core/DenseBase.h **** 
 170:Eigen/src/Core/DenseBase.h ****       InnerStrideAtCompileTime = internal::inner_stride_at_compile_time<Derived>::ret,
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 48


 171:Eigen/src/Core/DenseBase.h ****       OuterStrideAtCompileTime = internal::outer_stride_at_compile_time<Derived>::ret
 172:Eigen/src/Core/DenseBase.h ****     };
 173:Eigen/src/Core/DenseBase.h ****     
 174:Eigen/src/Core/DenseBase.h ****     typedef typename internal::find_best_packet<Scalar,SizeAtCompileTime>::type PacketScalar;
 175:Eigen/src/Core/DenseBase.h **** 
 176:Eigen/src/Core/DenseBase.h ****     enum { IsPlainObjectBase = 0 };
 177:Eigen/src/Core/DenseBase.h ****     
 178:Eigen/src/Core/DenseBase.h ****     /** The plain matrix type corresponding to this expression.
 179:Eigen/src/Core/DenseBase.h ****       * \sa PlainObject */
 180:Eigen/src/Core/DenseBase.h ****     typedef Matrix<typename internal::traits<Derived>::Scalar,
 181:Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::RowsAtCompileTime,
 182:Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::ColsAtCompileTime,
 183:Eigen/src/Core/DenseBase.h ****                 AutoAlign | (internal::traits<Derived>::Flags&RowMajorBit ? RowMajor : ColMajor),
 184:Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::MaxRowsAtCompileTime,
 185:Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::MaxColsAtCompileTime
 186:Eigen/src/Core/DenseBase.h ****           > PlainMatrix;
 187:Eigen/src/Core/DenseBase.h ****     
 188:Eigen/src/Core/DenseBase.h ****     /** The plain array type corresponding to this expression.
 189:Eigen/src/Core/DenseBase.h ****       * \sa PlainObject */
 190:Eigen/src/Core/DenseBase.h ****     typedef Array<typename internal::traits<Derived>::Scalar,
 191:Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::RowsAtCompileTime,
 192:Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::ColsAtCompileTime,
 193:Eigen/src/Core/DenseBase.h ****                 AutoAlign | (internal::traits<Derived>::Flags&RowMajorBit ? RowMajor : ColMajor),
 194:Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::MaxRowsAtCompileTime,
 195:Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::MaxColsAtCompileTime
 196:Eigen/src/Core/DenseBase.h ****           > PlainArray;
 197:Eigen/src/Core/DenseBase.h **** 
 198:Eigen/src/Core/DenseBase.h ****     /** \brief The plain matrix or array type corresponding to this expression.
 199:Eigen/src/Core/DenseBase.h ****       *
 200:Eigen/src/Core/DenseBase.h ****       * This is not necessarily exactly the return type of eval(). In the case of plain matrices,
 201:Eigen/src/Core/DenseBase.h ****       * the return type of eval() is a const reference to a matrix, not a matrix! It is however gua
 202:Eigen/src/Core/DenseBase.h ****       * that the return type of eval() is either PlainObject or const PlainObject&.
 203:Eigen/src/Core/DenseBase.h ****       */
 204:Eigen/src/Core/DenseBase.h ****     typedef typename internal::conditional<internal::is_same<typename internal::traits<Derived>::Xp
 205:Eigen/src/Core/DenseBase.h ****                                  PlainMatrix, PlainArray>::type PlainObject;
 206:Eigen/src/Core/DenseBase.h **** 
 207:Eigen/src/Core/DenseBase.h ****     /** \returns the number of nonzero coefficients which is in practice the number
 208:Eigen/src/Core/DenseBase.h ****       * of stored coefficients. */
 209:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 210:Eigen/src/Core/DenseBase.h ****     inline Index nonZeros() const { return size(); }
 211:Eigen/src/Core/DenseBase.h **** 
 212:Eigen/src/Core/DenseBase.h ****     /** \returns the outer size.
 213:Eigen/src/Core/DenseBase.h ****       *
 214:Eigen/src/Core/DenseBase.h ****       * \note For a vector, this returns just 1. For a matrix (non-vector), this is the major dimen
 215:Eigen/src/Core/DenseBase.h ****       * with respect to the \ref TopicStorageOrders "storage order", i.e., the number of columns fo
 216:Eigen/src/Core/DenseBase.h ****       * column-major matrix, and the number of rows for a row-major matrix. */
 217:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 218:Eigen/src/Core/DenseBase.h ****     Index outerSize() const
 219:Eigen/src/Core/DenseBase.h ****     {
 220:Eigen/src/Core/DenseBase.h ****       return IsVectorAtCompileTime ? 1
 221:Eigen/src/Core/DenseBase.h ****            : int(IsRowMajor) ? this->rows() : this->cols();
 222:Eigen/src/Core/DenseBase.h ****     }
 223:Eigen/src/Core/DenseBase.h **** 
 224:Eigen/src/Core/DenseBase.h ****     /** \returns the inner size.
 225:Eigen/src/Core/DenseBase.h ****       *
 226:Eigen/src/Core/DenseBase.h ****       * \note For a vector, this is just the size. For a matrix (non-vector), this is the minor dim
 227:Eigen/src/Core/DenseBase.h ****       * with respect to the \ref TopicStorageOrders "storage order", i.e., the number of rows for a
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 49


 228:Eigen/src/Core/DenseBase.h ****       * column-major matrix, and the number of columns for a row-major matrix. */
 229:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 230:Eigen/src/Core/DenseBase.h ****     Index innerSize() const
 231:Eigen/src/Core/DenseBase.h ****     {
 232:Eigen/src/Core/DenseBase.h ****       return IsVectorAtCompileTime ? this->size()
 233:Eigen/src/Core/DenseBase.h ****            : int(IsRowMajor) ? this->cols() : this->rows();
 234:Eigen/src/Core/DenseBase.h ****     }
 235:Eigen/src/Core/DenseBase.h **** 
 236:Eigen/src/Core/DenseBase.h ****     /** Only plain matrices/arrays, not expressions, may be resized; therefore the only useful resi
 237:Eigen/src/Core/DenseBase.h ****       * Matrix::resize() and Array::resize(). The present method only asserts that the new size equ
 238:Eigen/src/Core/DenseBase.h ****       * nothing else.
 239:Eigen/src/Core/DenseBase.h ****       */
 240:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 241:Eigen/src/Core/DenseBase.h ****     void resize(Index newSize)
 242:Eigen/src/Core/DenseBase.h ****     {
 243:Eigen/src/Core/DenseBase.h ****       EIGEN_ONLY_USED_FOR_DEBUG(newSize);
 244:Eigen/src/Core/DenseBase.h ****       eigen_assert(newSize == this->size()
 245:Eigen/src/Core/DenseBase.h ****                 && "DenseBase::resize() does not actually allow to resize.");
 246:Eigen/src/Core/DenseBase.h ****     }
 247:Eigen/src/Core/DenseBase.h ****     /** Only plain matrices/arrays, not expressions, may be resized; therefore the only useful resi
 248:Eigen/src/Core/DenseBase.h ****       * Matrix::resize() and Array::resize(). The present method only asserts that the new size equ
 249:Eigen/src/Core/DenseBase.h ****       * nothing else.
 250:Eigen/src/Core/DenseBase.h ****       */
 251:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 252:Eigen/src/Core/DenseBase.h ****     void resize(Index rows, Index cols)
 253:Eigen/src/Core/DenseBase.h ****     {
 254:Eigen/src/Core/DenseBase.h ****       EIGEN_ONLY_USED_FOR_DEBUG(rows);
 255:Eigen/src/Core/DenseBase.h ****       EIGEN_ONLY_USED_FOR_DEBUG(cols);
 256:Eigen/src/Core/DenseBase.h ****       eigen_assert(rows == this->rows() && cols == this->cols()
 257:Eigen/src/Core/DenseBase.h ****                 && "DenseBase::resize() does not actually allow to resize.");
 258:Eigen/src/Core/DenseBase.h ****     }
 259:Eigen/src/Core/DenseBase.h **** 
 260:Eigen/src/Core/DenseBase.h **** #ifndef EIGEN_PARSED_BY_DOXYGEN
 261:Eigen/src/Core/DenseBase.h ****     /** \internal Represents a matrix with all coefficients equal to one another*/
 262:Eigen/src/Core/DenseBase.h ****     typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,PlainObject> ConstantReturnType;
 263:Eigen/src/Core/DenseBase.h ****     /** \internal \deprecated Represents a vector with linearly spaced coefficients that allows seq
 264:Eigen/src/Core/DenseBase.h ****     typedef CwiseNullaryOp<internal::linspaced_op<Scalar,PacketScalar>,PlainObject> SequentialLinSp
 265:Eigen/src/Core/DenseBase.h ****     /** \internal Represents a vector with linearly spaced coefficients that allows random access. 
 266:Eigen/src/Core/DenseBase.h ****     typedef CwiseNullaryOp<internal::linspaced_op<Scalar,PacketScalar>,PlainObject> RandomAccessLin
 267:Eigen/src/Core/DenseBase.h ****     /** \internal the return type of MatrixBase::eigenvalues() */
 268:Eigen/src/Core/DenseBase.h ****     typedef Matrix<typename NumTraits<typename internal::traits<Derived>::Scalar>::Real, internal::
 269:Eigen/src/Core/DenseBase.h **** 
 270:Eigen/src/Core/DenseBase.h **** #endif // not EIGEN_PARSED_BY_DOXYGEN
 271:Eigen/src/Core/DenseBase.h **** 
 272:Eigen/src/Core/DenseBase.h ****     /** Copies \a other into *this. \returns a reference to *this. */
 273:Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 274:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 275:Eigen/src/Core/DenseBase.h ****     Derived& operator=(const DenseBase<OtherDerived>& other);
 276:Eigen/src/Core/DenseBase.h **** 
 277:Eigen/src/Core/DenseBase.h ****     /** Special case of the template operator=, in order to prevent the compiler
 278:Eigen/src/Core/DenseBase.h ****       * from generating a default operator= (issue hit with g++ 4.1)
 279:Eigen/src/Core/DenseBase.h ****       */
 280:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 281:Eigen/src/Core/DenseBase.h ****     Derived& operator=(const DenseBase& other);
 282:Eigen/src/Core/DenseBase.h **** 
 283:Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 284:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 50


 285:Eigen/src/Core/DenseBase.h ****     Derived& operator=(const EigenBase<OtherDerived> &other);
 286:Eigen/src/Core/DenseBase.h **** 
 287:Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 288:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 289:Eigen/src/Core/DenseBase.h ****     Derived& operator+=(const EigenBase<OtherDerived> &other);
 290:Eigen/src/Core/DenseBase.h **** 
 291:Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 292:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 293:Eigen/src/Core/DenseBase.h ****     Derived& operator-=(const EigenBase<OtherDerived> &other);
 294:Eigen/src/Core/DenseBase.h **** 
 295:Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 296:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 297:Eigen/src/Core/DenseBase.h ****     Derived& operator=(const ReturnByValue<OtherDerived>& func);
 298:Eigen/src/Core/DenseBase.h **** 
 299:Eigen/src/Core/DenseBase.h ****     /** \internal
 300:Eigen/src/Core/DenseBase.h ****       * Copies \a other into *this without evaluating other. \returns a reference to *this.
 301:Eigen/src/Core/DenseBase.h ****       * \deprecated */
 302:Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 303:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 304:Eigen/src/Core/DenseBase.h ****     Derived& lazyAssign(const DenseBase<OtherDerived>& other);
 305:Eigen/src/Core/DenseBase.h **** 
 306:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 307:Eigen/src/Core/DenseBase.h ****     CommaInitializer<Derived> operator<< (const Scalar& s);
 308:Eigen/src/Core/DenseBase.h **** 
 309:Eigen/src/Core/DenseBase.h ****     /** \deprecated it now returns \c *this */
 310:Eigen/src/Core/DenseBase.h ****     template<unsigned int Added,unsigned int Removed>
 311:Eigen/src/Core/DenseBase.h ****     EIGEN_DEPRECATED
 312:Eigen/src/Core/DenseBase.h ****     const Derived& flagged() const
 313:Eigen/src/Core/DenseBase.h ****     { return derived(); }
 314:Eigen/src/Core/DenseBase.h **** 
 315:Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 316:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 317:Eigen/src/Core/DenseBase.h ****     CommaInitializer<Derived> operator<< (const DenseBase<OtherDerived>& other);
 318:Eigen/src/Core/DenseBase.h **** 
 319:Eigen/src/Core/DenseBase.h ****     typedef Transpose<Derived> TransposeReturnType;
 320:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 321:Eigen/src/Core/DenseBase.h ****     TransposeReturnType transpose();
 322:Eigen/src/Core/DenseBase.h ****     typedef typename internal::add_const<Transpose<const Derived> >::type ConstTransposeReturnType;
 323:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 324:Eigen/src/Core/DenseBase.h ****     ConstTransposeReturnType transpose() const;
 325:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 326:Eigen/src/Core/DenseBase.h ****     void transposeInPlace();
 327:Eigen/src/Core/DenseBase.h **** 
 328:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType
 329:Eigen/src/Core/DenseBase.h ****     Constant(Index rows, Index cols, const Scalar& value);
 330:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType
 331:Eigen/src/Core/DenseBase.h ****     Constant(Index size, const Scalar& value);
 332:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType
 333:Eigen/src/Core/DenseBase.h ****     Constant(const Scalar& value);
 334:Eigen/src/Core/DenseBase.h **** 
 335:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const SequentialLinSpacedReturnType
 336:Eigen/src/Core/DenseBase.h ****     LinSpaced(Sequential_t, Index size, const Scalar& low, const Scalar& high);
 337:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const RandomAccessLinSpacedReturnType
 338:Eigen/src/Core/DenseBase.h ****     LinSpaced(Index size, const Scalar& low, const Scalar& high);
 339:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const SequentialLinSpacedReturnType
 340:Eigen/src/Core/DenseBase.h ****     LinSpaced(Sequential_t, const Scalar& low, const Scalar& high);
 341:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const RandomAccessLinSpacedReturnType
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 51


 342:Eigen/src/Core/DenseBase.h ****     LinSpaced(const Scalar& low, const Scalar& high);
 343:Eigen/src/Core/DenseBase.h **** 
 344:Eigen/src/Core/DenseBase.h ****     template<typename CustomNullaryOp> EIGEN_DEVICE_FUNC
 345:Eigen/src/Core/DenseBase.h ****     static const CwiseNullaryOp<CustomNullaryOp, PlainObject>
 346:Eigen/src/Core/DenseBase.h ****     NullaryExpr(Index rows, Index cols, const CustomNullaryOp& func);
 347:Eigen/src/Core/DenseBase.h ****     template<typename CustomNullaryOp> EIGEN_DEVICE_FUNC
 348:Eigen/src/Core/DenseBase.h ****     static const CwiseNullaryOp<CustomNullaryOp, PlainObject>
 349:Eigen/src/Core/DenseBase.h ****     NullaryExpr(Index size, const CustomNullaryOp& func);
 350:Eigen/src/Core/DenseBase.h ****     template<typename CustomNullaryOp> EIGEN_DEVICE_FUNC
 351:Eigen/src/Core/DenseBase.h ****     static const CwiseNullaryOp<CustomNullaryOp, PlainObject>
 352:Eigen/src/Core/DenseBase.h ****     NullaryExpr(const CustomNullaryOp& func);
 353:Eigen/src/Core/DenseBase.h **** 
 354:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType Zero(Index rows, Index cols);
 355:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType Zero(Index size);
 356:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType Zero();
 357:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType Ones(Index rows, Index cols);
 358:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType Ones(Index size);
 359:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType Ones();
 360:Eigen/src/Core/DenseBase.h **** 
 361:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC void fill(const Scalar& value);
 362:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Derived& setConstant(const Scalar& value);
 363:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Derived& setLinSpaced(Index size, const Scalar& low, const Scalar& high);
 364:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Derived& setLinSpaced(const Scalar& low, const Scalar& high);
 365:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Derived& setZero();
 366:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Derived& setOnes();
 367:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Derived& setRandom();
 368:Eigen/src/Core/DenseBase.h **** 
 369:Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived> EIGEN_DEVICE_FUNC
 370:Eigen/src/Core/DenseBase.h ****     bool isApprox(const DenseBase<OtherDerived>& other,
 371:Eigen/src/Core/DenseBase.h ****                   const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 372:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC 
 373:Eigen/src/Core/DenseBase.h ****     bool isMuchSmallerThan(const RealScalar& other,
 374:Eigen/src/Core/DenseBase.h ****                            const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 375:Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived> EIGEN_DEVICE_FUNC
 376:Eigen/src/Core/DenseBase.h ****     bool isMuchSmallerThan(const DenseBase<OtherDerived>& other,
 377:Eigen/src/Core/DenseBase.h ****                            const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 378:Eigen/src/Core/DenseBase.h **** 
 379:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC bool isApproxToConstant(const Scalar& value, const RealScalar& prec = NumTrai
 380:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC bool isConstant(const Scalar& value, const RealScalar& prec = NumTraits<Scala
 381:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC bool isZero(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) co
 382:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC bool isOnes(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) co
 383:Eigen/src/Core/DenseBase.h ****     
 384:Eigen/src/Core/DenseBase.h ****     inline bool hasNaN() const;
 385:Eigen/src/Core/DenseBase.h ****     inline bool allFinite() const;
 386:Eigen/src/Core/DenseBase.h **** 
 387:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 388:Eigen/src/Core/DenseBase.h ****     Derived& operator*=(const Scalar& other);
 389:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 390:Eigen/src/Core/DenseBase.h ****     Derived& operator/=(const Scalar& other);
 391:Eigen/src/Core/DenseBase.h **** 
 392:Eigen/src/Core/DenseBase.h ****     typedef typename internal::add_const_on_value_type<typename internal::eval<Derived>::type>::typ
 393:Eigen/src/Core/DenseBase.h ****     /** \returns the matrix or vector obtained by evaluating this expression.
 394:Eigen/src/Core/DenseBase.h ****       *
 395:Eigen/src/Core/DenseBase.h ****       * Notice that in the case of a plain matrix or vector (not an expression) this function just 
 396:Eigen/src/Core/DenseBase.h ****       * a const reference, in order to avoid a useless copy.
 397:Eigen/src/Core/DenseBase.h ****       * 
 398:Eigen/src/Core/DenseBase.h ****       * \warning Be carefull with eval() and the auto C++ keyword, as detailed in this \link TopicP
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 52


 399:Eigen/src/Core/DenseBase.h ****       */
 400:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 401:Eigen/src/Core/DenseBase.h ****     EIGEN_STRONG_INLINE EvalReturnType eval() const
 402:Eigen/src/Core/DenseBase.h ****     {
 403:Eigen/src/Core/DenseBase.h ****       // Even though MSVC does not honor strong inlining when the return type
 404:Eigen/src/Core/DenseBase.h ****       // is a dynamic matrix, we desperately need strong inlining for fixed
 405:Eigen/src/Core/DenseBase.h ****       // size types on MSVC.
 406:Eigen/src/Core/DenseBase.h ****       return typename internal::eval<Derived>::type(derived());
 407:Eigen/src/Core/DenseBase.h ****     }
 408:Eigen/src/Core/DenseBase.h ****     
 409:Eigen/src/Core/DenseBase.h ****     /** swaps *this with the expression \a other.
 410:Eigen/src/Core/DenseBase.h ****       *
 411:Eigen/src/Core/DenseBase.h ****       */
 412:Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 413:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 414:Eigen/src/Core/DenseBase.h ****     void swap(const DenseBase<OtherDerived>& other)
 415:Eigen/src/Core/DenseBase.h ****     {
 416:Eigen/src/Core/DenseBase.h ****       EIGEN_STATIC_ASSERT(!OtherDerived::IsPlainObjectBase,THIS_EXPRESSION_IS_NOT_A_LVALUE__IT_IS_R
 417:Eigen/src/Core/DenseBase.h ****       eigen_assert(rows()==other.rows() && cols()==other.cols());
 418:Eigen/src/Core/DenseBase.h ****       call_assignment(derived(), other.const_cast_derived(), internal::swap_assign_op<Scalar>());
 419:Eigen/src/Core/DenseBase.h ****     }
 420:Eigen/src/Core/DenseBase.h **** 
 421:Eigen/src/Core/DenseBase.h ****     /** swaps *this with the matrix or array \a other.
 422:Eigen/src/Core/DenseBase.h ****       *
 423:Eigen/src/Core/DenseBase.h ****       */
 424:Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 425:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 426:Eigen/src/Core/DenseBase.h ****     void swap(PlainObjectBase<OtherDerived>& other)
 427:Eigen/src/Core/DenseBase.h ****     {
 428:Eigen/src/Core/DenseBase.h ****       eigen_assert(rows()==other.rows() && cols()==other.cols());
 429:Eigen/src/Core/DenseBase.h ****       call_assignment(derived(), other.derived(), internal::swap_assign_op<Scalar>());
 430:Eigen/src/Core/DenseBase.h ****     }
 431:Eigen/src/Core/DenseBase.h **** 
 432:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline const NestByValue<Derived> nestByValue() const;
 433:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline const ForceAlignedAccess<Derived> forceAlignedAccess() const;
 434:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline ForceAlignedAccess<Derived> forceAlignedAccess();
 435:Eigen/src/Core/DenseBase.h ****     template<bool Enable> EIGEN_DEVICE_FUNC
 436:Eigen/src/Core/DenseBase.h ****     inline const typename internal::conditional<Enable,ForceAlignedAccess<Derived>,Derived&>::type 
 437:Eigen/src/Core/DenseBase.h ****     template<bool Enable> EIGEN_DEVICE_FUNC
 438:Eigen/src/Core/DenseBase.h ****     inline typename internal::conditional<Enable,ForceAlignedAccess<Derived>,Derived&>::type forceA
 439:Eigen/src/Core/DenseBase.h **** 
 440:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Scalar sum() const;
 441:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Scalar mean() const;
 442:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Scalar trace() const;
 443:Eigen/src/Core/DenseBase.h **** 
 444:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Scalar prod() const;
 445:Eigen/src/Core/DenseBase.h **** 
 446:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC typename internal::traits<Derived>::Scalar minCoeff() const;
 447:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC typename internal::traits<Derived>::Scalar maxCoeff() const;
 448:Eigen/src/Core/DenseBase.h **** 
 449:Eigen/src/Core/DenseBase.h ****     template<typename IndexType> EIGEN_DEVICE_FUNC
 450:Eigen/src/Core/DenseBase.h ****     typename internal::traits<Derived>::Scalar minCoeff(IndexType* row, IndexType* col) const;
 451:Eigen/src/Core/DenseBase.h ****     template<typename IndexType> EIGEN_DEVICE_FUNC
 452:Eigen/src/Core/DenseBase.h ****     typename internal::traits<Derived>::Scalar maxCoeff(IndexType* row, IndexType* col) const;
 453:Eigen/src/Core/DenseBase.h ****     template<typename IndexType> EIGEN_DEVICE_FUNC
 454:Eigen/src/Core/DenseBase.h ****     typename internal::traits<Derived>::Scalar minCoeff(IndexType* index) const;
 455:Eigen/src/Core/DenseBase.h ****     template<typename IndexType> EIGEN_DEVICE_FUNC
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 53


 456:Eigen/src/Core/DenseBase.h ****     typename internal::traits<Derived>::Scalar maxCoeff(IndexType* index) const;
 457:Eigen/src/Core/DenseBase.h **** 
 458:Eigen/src/Core/DenseBase.h ****     template<typename BinaryOp>
 459:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 460:Eigen/src/Core/DenseBase.h ****     Scalar redux(const BinaryOp& func) const;
 461:Eigen/src/Core/DenseBase.h **** 
 462:Eigen/src/Core/DenseBase.h ****     template<typename Visitor>
 463:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 464:Eigen/src/Core/DenseBase.h ****     void visit(Visitor& func) const;
 465:Eigen/src/Core/DenseBase.h **** 
 466:Eigen/src/Core/DenseBase.h ****     /** \returns a WithFormat proxy object allowing to print a matrix the with given
 467:Eigen/src/Core/DenseBase.h ****       * format \a fmt.
 468:Eigen/src/Core/DenseBase.h ****       *
 469:Eigen/src/Core/DenseBase.h ****       * See class IOFormat for some examples.
 470:Eigen/src/Core/DenseBase.h ****       *
 471:Eigen/src/Core/DenseBase.h ****       * \sa class IOFormat, class WithFormat
 472:Eigen/src/Core/DenseBase.h ****       */
 473:Eigen/src/Core/DenseBase.h ****     inline const WithFormat<Derived> format(const IOFormat& fmt) const
 474:Eigen/src/Core/DenseBase.h ****     {
 475:Eigen/src/Core/DenseBase.h ****       return WithFormat<Derived>(derived(), fmt);
 476:Eigen/src/Core/DenseBase.h ****     }
 477:Eigen/src/Core/DenseBase.h **** 
 478:Eigen/src/Core/DenseBase.h ****     /** \returns the unique coefficient of a 1x1 expression */
 479:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 480:Eigen/src/Core/DenseBase.h ****     CoeffReturnType value() const
 481:Eigen/src/Core/DenseBase.h ****     {
 482:Eigen/src/Core/DenseBase.h ****       EIGEN_STATIC_ASSERT_SIZE_1x1(Derived)
 483:Eigen/src/Core/DenseBase.h ****       eigen_assert(this->rows() == 1 && this->cols() == 1);
 484:Eigen/src/Core/DenseBase.h ****       return derived().coeff(0,0);
 485:Eigen/src/Core/DenseBase.h ****     }
 486:Eigen/src/Core/DenseBase.h **** 
 487:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC bool all() const;
 488:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC bool any() const;
 489:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Index count() const;
 490:Eigen/src/Core/DenseBase.h **** 
 491:Eigen/src/Core/DenseBase.h ****     typedef VectorwiseOp<Derived, Horizontal> RowwiseReturnType;
 492:Eigen/src/Core/DenseBase.h ****     typedef const VectorwiseOp<const Derived, Horizontal> ConstRowwiseReturnType;
 493:Eigen/src/Core/DenseBase.h ****     typedef VectorwiseOp<Derived, Vertical> ColwiseReturnType;
 494:Eigen/src/Core/DenseBase.h ****     typedef const VectorwiseOp<const Derived, Vertical> ConstColwiseReturnType;
 495:Eigen/src/Core/DenseBase.h **** 
 496:Eigen/src/Core/DenseBase.h ****     /** \returns a VectorwiseOp wrapper of *this providing additional partial reduction operations
 497:Eigen/src/Core/DenseBase.h ****     *
 498:Eigen/src/Core/DenseBase.h ****     * Example: \include MatrixBase_rowwise.cpp
 499:Eigen/src/Core/DenseBase.h ****     * Output: \verbinclude MatrixBase_rowwise.out
 500:Eigen/src/Core/DenseBase.h ****     *
 501:Eigen/src/Core/DenseBase.h ****     * \sa colwise(), class VectorwiseOp, \ref TutorialReductionsVisitorsBroadcasting
 502:Eigen/src/Core/DenseBase.h ****     */
 503:Eigen/src/Core/DenseBase.h ****     //Code moved here due to a CUDA compiler bug
 504:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline ConstRowwiseReturnType rowwise() const {
 505:Eigen/src/Core/DenseBase.h ****       return ConstRowwiseReturnType(derived());
 506:Eigen/src/Core/DenseBase.h ****     }
 507:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC RowwiseReturnType rowwise();
 508:Eigen/src/Core/DenseBase.h **** 
 509:Eigen/src/Core/DenseBase.h ****     /** \returns a VectorwiseOp wrapper of *this providing additional partial reduction operations
 510:Eigen/src/Core/DenseBase.h ****     *
 511:Eigen/src/Core/DenseBase.h ****     * Example: \include MatrixBase_colwise.cpp
 512:Eigen/src/Core/DenseBase.h ****     * Output: \verbinclude MatrixBase_colwise.out
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 54


 513:Eigen/src/Core/DenseBase.h ****     *
 514:Eigen/src/Core/DenseBase.h ****     * \sa rowwise(), class VectorwiseOp, \ref TutorialReductionsVisitorsBroadcasting
 515:Eigen/src/Core/DenseBase.h ****     */
 516:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline ConstColwiseReturnType colwise() const {
 517:Eigen/src/Core/DenseBase.h ****       return ConstColwiseReturnType(derived());
 518:Eigen/src/Core/DenseBase.h ****     }
 519:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC ColwiseReturnType colwise();
 520:Eigen/src/Core/DenseBase.h **** 
 521:Eigen/src/Core/DenseBase.h ****     typedef CwiseNullaryOp<internal::scalar_random_op<Scalar>,PlainObject> RandomReturnType;
 522:Eigen/src/Core/DenseBase.h ****     static const RandomReturnType Random(Index rows, Index cols);
 523:Eigen/src/Core/DenseBase.h ****     static const RandomReturnType Random(Index size);
 524:Eigen/src/Core/DenseBase.h ****     static const RandomReturnType Random();
 525:Eigen/src/Core/DenseBase.h **** 
 526:Eigen/src/Core/DenseBase.h ****     template<typename ThenDerived,typename ElseDerived>
 527:Eigen/src/Core/DenseBase.h ****     const Select<Derived,ThenDerived,ElseDerived>
 528:Eigen/src/Core/DenseBase.h ****     select(const DenseBase<ThenDerived>& thenMatrix,
 529:Eigen/src/Core/DenseBase.h ****            const DenseBase<ElseDerived>& elseMatrix) const;
 530:Eigen/src/Core/DenseBase.h **** 
 531:Eigen/src/Core/DenseBase.h ****     template<typename ThenDerived>
 532:Eigen/src/Core/DenseBase.h ****     inline const Select<Derived,ThenDerived, typename ThenDerived::ConstantReturnType>
 533:Eigen/src/Core/DenseBase.h ****     select(const DenseBase<ThenDerived>& thenMatrix, const typename ThenDerived::Scalar& elseScalar
 534:Eigen/src/Core/DenseBase.h **** 
 535:Eigen/src/Core/DenseBase.h ****     template<typename ElseDerived>
 536:Eigen/src/Core/DenseBase.h ****     inline const Select<Derived, typename ElseDerived::ConstantReturnType, ElseDerived >
 537:Eigen/src/Core/DenseBase.h ****     select(const typename ElseDerived::Scalar& thenScalar, const DenseBase<ElseDerived>& elseMatrix
 538:Eigen/src/Core/DenseBase.h **** 
 539:Eigen/src/Core/DenseBase.h ****     template<int p> RealScalar lpNorm() const;
 540:Eigen/src/Core/DenseBase.h **** 
 541:Eigen/src/Core/DenseBase.h ****     template<int RowFactor, int ColFactor>
 542:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 543:Eigen/src/Core/DenseBase.h ****     const Replicate<Derived,RowFactor,ColFactor> replicate() const;
 544:Eigen/src/Core/DenseBase.h ****     /**
 545:Eigen/src/Core/DenseBase.h ****     * \return an expression of the replication of \c *this
 546:Eigen/src/Core/DenseBase.h ****     *
 547:Eigen/src/Core/DenseBase.h ****     * Example: \include MatrixBase_replicate_int_int.cpp
 548:Eigen/src/Core/DenseBase.h ****     * Output: \verbinclude MatrixBase_replicate_int_int.out
 549:Eigen/src/Core/DenseBase.h ****     *
 550:Eigen/src/Core/DenseBase.h ****     * \sa VectorwiseOp::replicate(), DenseBase::replicate<int,int>(), class Replicate
 551:Eigen/src/Core/DenseBase.h ****     */
 552:Eigen/src/Core/DenseBase.h ****     //Code moved here due to a CUDA compiler bug
 553:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 554:Eigen/src/Core/DenseBase.h ****     const Replicate<Derived, Dynamic, Dynamic> replicate(Index rowFactor, Index colFactor) const
 555:Eigen/src/Core/DenseBase.h ****     {
 556:Eigen/src/Core/DenseBase.h ****       return Replicate<Derived, Dynamic, Dynamic>(derived(), rowFactor, colFactor);
 557:Eigen/src/Core/DenseBase.h ****     }
 558:Eigen/src/Core/DenseBase.h **** 
 559:Eigen/src/Core/DenseBase.h ****     typedef Reverse<Derived, BothDirections> ReverseReturnType;
 560:Eigen/src/Core/DenseBase.h ****     typedef const Reverse<const Derived, BothDirections> ConstReverseReturnType;
 561:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC ReverseReturnType reverse();
 562:Eigen/src/Core/DenseBase.h ****     /** This is the const version of reverse(). */
 563:Eigen/src/Core/DenseBase.h ****     //Code moved here due to a CUDA compiler bug
 564:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC ConstReverseReturnType reverse() const
 565:Eigen/src/Core/DenseBase.h ****     {
 566:Eigen/src/Core/DenseBase.h ****       return ConstReverseReturnType(derived());
 567:Eigen/src/Core/DenseBase.h ****     }
 568:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC void reverseInPlace();
 569:Eigen/src/Core/DenseBase.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 55


 570:Eigen/src/Core/DenseBase.h **** #define EIGEN_CURRENT_STORAGE_BASE_CLASS Eigen::DenseBase
 571:Eigen/src/Core/DenseBase.h **** #define EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 572:Eigen/src/Core/DenseBase.h **** #define EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(COND)
 573:Eigen/src/Core/DenseBase.h **** #   include "../plugins/BlockMethods.h"
 574:Eigen/src/Core/DenseBase.h **** #   ifdef EIGEN_DENSEBASE_PLUGIN
 575:Eigen/src/Core/DenseBase.h **** #     include EIGEN_DENSEBASE_PLUGIN
 576:Eigen/src/Core/DenseBase.h **** #   endif
 577:Eigen/src/Core/DenseBase.h **** #undef EIGEN_CURRENT_STORAGE_BASE_CLASS
 578:Eigen/src/Core/DenseBase.h **** #undef EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 579:Eigen/src/Core/DenseBase.h **** #undef EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF
 580:Eigen/src/Core/DenseBase.h **** 
 581:Eigen/src/Core/DenseBase.h ****     // disable the use of evalTo for dense objects with a nice compilation error
 582:Eigen/src/Core/DenseBase.h ****     template<typename Dest>
 583:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 584:Eigen/src/Core/DenseBase.h ****     inline void evalTo(Dest& ) const
 585:Eigen/src/Core/DenseBase.h ****     {
 586:Eigen/src/Core/DenseBase.h ****       EIGEN_STATIC_ASSERT((internal::is_same<Dest,void>::value),THE_EVAL_EVALTO_FUNCTION_SHOULD_NEV
 587:Eigen/src/Core/DenseBase.h ****     }
 588:Eigen/src/Core/DenseBase.h **** 
 589:Eigen/src/Core/DenseBase.h ****   protected:
 590:Eigen/src/Core/DenseBase.h ****     /** Default constructor. Do nothing. */
 591:Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC DenseBase()
 856              		.loc 8 591 23 view .LVU228
 857              		.loc 8 591 23 is_stmt 0 view .LVU229
 858              	.LBE1821:
 859              	.LBE1820:
 860              	.LBE1819:
 861              	.LBE1818:
  93:Eigen/src/Core/Product.h ****     {
 862              		.loc 6 93 86 view .LVU230
 863 0000 0160     		str	r1, [r0]
 864 0002 4260     		str	r2, [r0, #4]
 865              	.LVL49:
 866              	.LBB1822:
 867              	.LBI1822:
 868              		.file 9 "Eigen/src/Core/PlainObjectBase.h"
   1:Eigen/src/Core/PlainObjectBase.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/PlainObjectBase.h **** // for linear algebra.
   3:Eigen/src/Core/PlainObjectBase.h **** //
   4:Eigen/src/Core/PlainObjectBase.h **** // Copyright (C) 2008-2009 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:Eigen/src/Core/PlainObjectBase.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:Eigen/src/Core/PlainObjectBase.h **** //
   7:Eigen/src/Core/PlainObjectBase.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/PlainObjectBase.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/PlainObjectBase.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:Eigen/src/Core/PlainObjectBase.h **** 
  11:Eigen/src/Core/PlainObjectBase.h **** #ifndef EIGEN_DENSESTORAGEBASE_H
  12:Eigen/src/Core/PlainObjectBase.h **** #define EIGEN_DENSESTORAGEBASE_H
  13:Eigen/src/Core/PlainObjectBase.h **** 
  14:Eigen/src/Core/PlainObjectBase.h **** #if defined(EIGEN_INITIALIZE_MATRICES_BY_ZERO)
  15:Eigen/src/Core/PlainObjectBase.h **** # define EIGEN_INITIALIZE_COEFFS
  16:Eigen/src/Core/PlainObjectBase.h **** # define EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED for(int i=0;i<base().size();++i) coeffRe
  17:Eigen/src/Core/PlainObjectBase.h **** #elif defined(EIGEN_INITIALIZE_MATRICES_BY_NAN)
  18:Eigen/src/Core/PlainObjectBase.h **** # define EIGEN_INITIALIZE_COEFFS
  19:Eigen/src/Core/PlainObjectBase.h **** # define EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED for(int i=0;i<base().size();++i) coeffRe
  20:Eigen/src/Core/PlainObjectBase.h **** #else
  21:Eigen/src/Core/PlainObjectBase.h **** # undef EIGEN_INITIALIZE_COEFFS
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 56


  22:Eigen/src/Core/PlainObjectBase.h **** # define EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
  23:Eigen/src/Core/PlainObjectBase.h **** #endif
  24:Eigen/src/Core/PlainObjectBase.h **** 
  25:Eigen/src/Core/PlainObjectBase.h **** namespace Eigen {
  26:Eigen/src/Core/PlainObjectBase.h **** 
  27:Eigen/src/Core/PlainObjectBase.h **** namespace internal {
  28:Eigen/src/Core/PlainObjectBase.h **** 
  29:Eigen/src/Core/PlainObjectBase.h **** template<int MaxSizeAtCompileTime> struct check_rows_cols_for_overflow {
  30:Eigen/src/Core/PlainObjectBase.h ****   template<typename Index>
  31:Eigen/src/Core/PlainObjectBase.h ****   EIGEN_DEVICE_FUNC
  32:Eigen/src/Core/PlainObjectBase.h ****   static EIGEN_ALWAYS_INLINE void run(Index, Index)
  33:Eigen/src/Core/PlainObjectBase.h ****   {
  34:Eigen/src/Core/PlainObjectBase.h ****   }
  35:Eigen/src/Core/PlainObjectBase.h **** };
  36:Eigen/src/Core/PlainObjectBase.h **** 
  37:Eigen/src/Core/PlainObjectBase.h **** template<> struct check_rows_cols_for_overflow<Dynamic> {
  38:Eigen/src/Core/PlainObjectBase.h ****   template<typename Index>
  39:Eigen/src/Core/PlainObjectBase.h ****   EIGEN_DEVICE_FUNC
  40:Eigen/src/Core/PlainObjectBase.h ****   static EIGEN_ALWAYS_INLINE void run(Index rows, Index cols)
  41:Eigen/src/Core/PlainObjectBase.h ****   {
  42:Eigen/src/Core/PlainObjectBase.h ****     // http://hg.mozilla.org/mozilla-central/file/6c8a909977d3/xpcom/ds/CheckedInt.h#l242
  43:Eigen/src/Core/PlainObjectBase.h ****     // we assume Index is signed
  44:Eigen/src/Core/PlainObjectBase.h ****     Index max_index = (std::size_t(1) << (8 * sizeof(Index) - 1)) - 1; // assume Index is signed
  45:Eigen/src/Core/PlainObjectBase.h ****     bool error = (rows == 0 || cols == 0) ? false
  46:Eigen/src/Core/PlainObjectBase.h ****                : (rows > max_index / cols);
  47:Eigen/src/Core/PlainObjectBase.h ****     if (error)
  48:Eigen/src/Core/PlainObjectBase.h ****       throw_std_bad_alloc();
  49:Eigen/src/Core/PlainObjectBase.h ****   }
  50:Eigen/src/Core/PlainObjectBase.h **** };
  51:Eigen/src/Core/PlainObjectBase.h **** 
  52:Eigen/src/Core/PlainObjectBase.h **** template <typename Derived,
  53:Eigen/src/Core/PlainObjectBase.h ****           typename OtherDerived = Derived,
  54:Eigen/src/Core/PlainObjectBase.h ****           bool IsVector = bool(Derived::IsVectorAtCompileTime) && bool(OtherDerived::IsVectorAtComp
  55:Eigen/src/Core/PlainObjectBase.h **** struct conservative_resize_like_impl;
  56:Eigen/src/Core/PlainObjectBase.h **** 
  57:Eigen/src/Core/PlainObjectBase.h **** template<typename MatrixTypeA, typename MatrixTypeB, bool SwapPointers> struct matrix_swap_impl;
  58:Eigen/src/Core/PlainObjectBase.h **** 
  59:Eigen/src/Core/PlainObjectBase.h **** } // end namespace internal
  60:Eigen/src/Core/PlainObjectBase.h **** 
  61:Eigen/src/Core/PlainObjectBase.h **** #ifdef EIGEN_PARSED_BY_DOXYGEN
  62:Eigen/src/Core/PlainObjectBase.h **** namespace doxygen {
  63:Eigen/src/Core/PlainObjectBase.h **** 
  64:Eigen/src/Core/PlainObjectBase.h **** // This is a workaround to doxygen not being able to understand the inheritance logic
  65:Eigen/src/Core/PlainObjectBase.h **** // when it is hidden by the dense_xpr_base helper struct.
  66:Eigen/src/Core/PlainObjectBase.h **** // Moreover, doxygen fails to include members that are not documented in the declaration body of
  67:Eigen/src/Core/PlainObjectBase.h **** // MatrixBase if we inherits MatrixBase<Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>
  68:Eigen/src/Core/PlainObjectBase.h **** // this is why we simply inherits MatrixBase, though this does not make sense.
  69:Eigen/src/Core/PlainObjectBase.h **** 
  70:Eigen/src/Core/PlainObjectBase.h **** /** This class is just a workaround for Doxygen and it does not not actually exist. */
  71:Eigen/src/Core/PlainObjectBase.h **** template<typename Derived> struct dense_xpr_base_dispatcher;
  72:Eigen/src/Core/PlainObjectBase.h **** /** This class is just a workaround for Doxygen and it does not not actually exist. */
  73:Eigen/src/Core/PlainObjectBase.h **** template<typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
  74:Eigen/src/Core/PlainObjectBase.h **** struct dense_xpr_base_dispatcher<Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >
  75:Eigen/src/Core/PlainObjectBase.h ****     : public MatrixBase {};
  76:Eigen/src/Core/PlainObjectBase.h **** /** This class is just a workaround for Doxygen and it does not not actually exist. */
  77:Eigen/src/Core/PlainObjectBase.h **** template<typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
  78:Eigen/src/Core/PlainObjectBase.h **** struct dense_xpr_base_dispatcher<Array<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 57


  79:Eigen/src/Core/PlainObjectBase.h ****     : public ArrayBase {};
  80:Eigen/src/Core/PlainObjectBase.h **** 
  81:Eigen/src/Core/PlainObjectBase.h **** } // namespace doxygen
  82:Eigen/src/Core/PlainObjectBase.h **** 
  83:Eigen/src/Core/PlainObjectBase.h **** /** \class PlainObjectBase
  84:Eigen/src/Core/PlainObjectBase.h ****   * \ingroup Core_Module
  85:Eigen/src/Core/PlainObjectBase.h ****   * \brief %Dense storage base class for matrices and arrays.
  86:Eigen/src/Core/PlainObjectBase.h ****   *
  87:Eigen/src/Core/PlainObjectBase.h ****   * This class can be extended with the help of the plugin mechanism described on the page
  88:Eigen/src/Core/PlainObjectBase.h ****   * \ref TopicCustomizing_Plugins by defining the preprocessor symbol \c EIGEN_PLAINOBJECTBASE_PLUG
  89:Eigen/src/Core/PlainObjectBase.h ****   *
  90:Eigen/src/Core/PlainObjectBase.h ****   * \tparam Derived is the derived type, e.g., a Matrix or Array
  91:Eigen/src/Core/PlainObjectBase.h ****   *
  92:Eigen/src/Core/PlainObjectBase.h ****   * \sa \ref TopicClassHierarchy
  93:Eigen/src/Core/PlainObjectBase.h ****   */
  94:Eigen/src/Core/PlainObjectBase.h **** template<typename Derived>
  95:Eigen/src/Core/PlainObjectBase.h **** class PlainObjectBase : public doxygen::dense_xpr_base_dispatcher<Derived>
  96:Eigen/src/Core/PlainObjectBase.h **** #else
  97:Eigen/src/Core/PlainObjectBase.h **** template<typename Derived>
  98:Eigen/src/Core/PlainObjectBase.h **** class PlainObjectBase : public internal::dense_xpr_base<Derived>::type
  99:Eigen/src/Core/PlainObjectBase.h **** #endif
 100:Eigen/src/Core/PlainObjectBase.h **** {
 101:Eigen/src/Core/PlainObjectBase.h ****   public:
 102:Eigen/src/Core/PlainObjectBase.h ****     enum { Options = internal::traits<Derived>::Options };
 103:Eigen/src/Core/PlainObjectBase.h ****     typedef typename internal::dense_xpr_base<Derived>::type Base;
 104:Eigen/src/Core/PlainObjectBase.h **** 
 105:Eigen/src/Core/PlainObjectBase.h ****     typedef typename internal::traits<Derived>::StorageKind StorageKind;
 106:Eigen/src/Core/PlainObjectBase.h ****     typedef typename internal::traits<Derived>::Scalar Scalar;
 107:Eigen/src/Core/PlainObjectBase.h ****     
 108:Eigen/src/Core/PlainObjectBase.h ****     typedef typename internal::packet_traits<Scalar>::type PacketScalar;
 109:Eigen/src/Core/PlainObjectBase.h ****     typedef typename NumTraits<Scalar>::Real RealScalar;
 110:Eigen/src/Core/PlainObjectBase.h ****     typedef Derived DenseType;
 111:Eigen/src/Core/PlainObjectBase.h **** 
 112:Eigen/src/Core/PlainObjectBase.h ****     using Base::RowsAtCompileTime;
 113:Eigen/src/Core/PlainObjectBase.h ****     using Base::ColsAtCompileTime;
 114:Eigen/src/Core/PlainObjectBase.h ****     using Base::SizeAtCompileTime;
 115:Eigen/src/Core/PlainObjectBase.h ****     using Base::MaxRowsAtCompileTime;
 116:Eigen/src/Core/PlainObjectBase.h ****     using Base::MaxColsAtCompileTime;
 117:Eigen/src/Core/PlainObjectBase.h ****     using Base::MaxSizeAtCompileTime;
 118:Eigen/src/Core/PlainObjectBase.h ****     using Base::IsVectorAtCompileTime;
 119:Eigen/src/Core/PlainObjectBase.h ****     using Base::Flags;
 120:Eigen/src/Core/PlainObjectBase.h **** 
 121:Eigen/src/Core/PlainObjectBase.h ****     template<typename PlainObjectType, int MapOptions, typename StrideType> friend class Eigen::Map
 122:Eigen/src/Core/PlainObjectBase.h ****     friend  class Eigen::Map<Derived, Unaligned>;
 123:Eigen/src/Core/PlainObjectBase.h ****     typedef Eigen::Map<Derived, Unaligned>  MapType;
 124:Eigen/src/Core/PlainObjectBase.h ****     friend  class Eigen::Map<const Derived, Unaligned>;
 125:Eigen/src/Core/PlainObjectBase.h ****     typedef const Eigen::Map<const Derived, Unaligned> ConstMapType;
 126:Eigen/src/Core/PlainObjectBase.h **** #if EIGEN_MAX_ALIGN_BYTES>0
 127:Eigen/src/Core/PlainObjectBase.h ****     // for EIGEN_MAX_ALIGN_BYTES==0, AlignedMax==Unaligned, and many compilers generate warnings fo
 128:Eigen/src/Core/PlainObjectBase.h ****     friend  class Eigen::Map<Derived, AlignedMax>;
 129:Eigen/src/Core/PlainObjectBase.h ****     friend  class Eigen::Map<const Derived, AlignedMax>;
 130:Eigen/src/Core/PlainObjectBase.h **** #endif
 131:Eigen/src/Core/PlainObjectBase.h ****     typedef Eigen::Map<Derived, AlignedMax> AlignedMapType;
 132:Eigen/src/Core/PlainObjectBase.h ****     typedef const Eigen::Map<const Derived, AlignedMax> ConstAlignedMapType;
 133:Eigen/src/Core/PlainObjectBase.h ****     template<typename StrideType> struct StridedMapType { typedef Eigen::Map<Derived, Unaligned, St
 134:Eigen/src/Core/PlainObjectBase.h ****     template<typename StrideType> struct StridedConstMapType { typedef Eigen::Map<const Derived, Un
 135:Eigen/src/Core/PlainObjectBase.h ****     template<typename StrideType> struct StridedAlignedMapType { typedef Eigen::Map<Derived, Aligne
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 58


 136:Eigen/src/Core/PlainObjectBase.h ****     template<typename StrideType> struct StridedConstAlignedMapType { typedef Eigen::Map<const Deri
 137:Eigen/src/Core/PlainObjectBase.h **** 
 138:Eigen/src/Core/PlainObjectBase.h ****   protected:
 139:Eigen/src/Core/PlainObjectBase.h ****     DenseStorage<Scalar, Base::MaxSizeAtCompileTime, Base::RowsAtCompileTime, Base::ColsAtCompileTi
 140:Eigen/src/Core/PlainObjectBase.h **** 
 141:Eigen/src/Core/PlainObjectBase.h ****   public:
 142:Eigen/src/Core/PlainObjectBase.h ****     enum { NeedsToAlign = (SizeAtCompileTime != Dynamic) && (internal::traits<Derived>::Alignment>0
 143:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF(NeedsToAlign)
 144:Eigen/src/Core/PlainObjectBase.h **** 
 145:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 146:Eigen/src/Core/PlainObjectBase.h ****     Base& base() { return *static_cast<Base*>(this); }
 147:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 148:Eigen/src/Core/PlainObjectBase.h ****     const Base& base() const { return *static_cast<const Base*>(this); }
 149:Eigen/src/Core/PlainObjectBase.h **** 
 150:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 151:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE Index rows() const { return m_storage.rows(); }
 152:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 153:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE Index cols() const { return m_storage.cols(); }
 869              		.loc 9 153 31 is_stmt 1 view .LVU231
 870              		.loc 9 153 31 is_stmt 0 view .LVU232
 871              	.LBE1822:
 872              	.LBB1823:
 873              	.LBI1823:
 151:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 874              		.loc 9 151 31 is_stmt 1 view .LVU233
 151:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 875              		.loc 9 151 31 is_stmt 0 view .LVU234
 876              	.LBE1823:
 877              	.LBE1817:
 878              	.LBE1816:
 879              	.LBE1815:
 433:Eigen/src/Core/GeneralProduct.h **** {
 434:Eigen/src/Core/GeneralProduct.h ****   enum {
 435:Eigen/src/Core/GeneralProduct.h ****     ProductIsValid =  Derived::ColsAtCompileTime==Dynamic
 436:Eigen/src/Core/GeneralProduct.h ****                    || OtherDerived::RowsAtCompileTime==Dynamic
 437:Eigen/src/Core/GeneralProduct.h ****                    || int(Derived::ColsAtCompileTime)==int(OtherDerived::RowsAtCompileTime),
 438:Eigen/src/Core/GeneralProduct.h ****     AreVectors = Derived::IsVectorAtCompileTime && OtherDerived::IsVectorAtCompileTime,
 439:Eigen/src/Core/GeneralProduct.h ****     SameSizes = EIGEN_PREDICATE_SAME_MATRIX_SIZE(Derived,OtherDerived)
 440:Eigen/src/Core/GeneralProduct.h ****   };
 441:Eigen/src/Core/GeneralProduct.h ****   // note to the lost user:
 442:Eigen/src/Core/GeneralProduct.h ****   //    * for a dot product use: v1.dot(v2)
 443:Eigen/src/Core/GeneralProduct.h ****   //    * for a coeff-wise product use: v1.cwiseProduct(v2)
 444:Eigen/src/Core/GeneralProduct.h ****   EIGEN_STATIC_ASSERT(ProductIsValid || !(AreVectors && SameSizes),
 445:Eigen/src/Core/GeneralProduct.h ****     INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLI
 446:Eigen/src/Core/GeneralProduct.h ****   EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),
 447:Eigen/src/Core/GeneralProduct.h ****     INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)
 448:Eigen/src/Core/GeneralProduct.h ****   EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)
 449:Eigen/src/Core/GeneralProduct.h **** 
 450:Eigen/src/Core/GeneralProduct.h ****   return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 451:Eigen/src/Core/GeneralProduct.h **** }
 880              		.loc 5 451 1 view .LVU235
 881 0004 7047     		bx	lr
 882              		.cfi_endproc
 883              	.LFE8961:
 884              		.cantunwind
 885              		.fnend
 887              		.section	.rodata._ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi2ELi1ELi0ELi2ELi1EEENS_7Product
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 59


 888              		.align	2
 889              	.LC4:
 890 0000 76203D3D 		.ascii	"v == T(Value)\000"
 890      20542856 
 890      616C7565 
 890      2900
 891 000e 0000     		.align	2
 892              	.LC5:
 893 0010 45696765 		.ascii	"Eigen::internal::variable_if_dynamic<T, Value>::var"
 893      6E3A3A69 
 893      6E746572 
 893      6E616C3A 
 893      3A766172 
 894 0043 6961626C 		.ascii	"iable_if_dynamic(T) [with T = int; int Value = 1]\000"
 894      655F6966 
 894      5F64796E 
 894      616D6963 
 894      28542920 
 895 0075 000000   		.align	2
 896              	.LC6:
 897 0078 45696765 		.ascii	"Eigen/src/Core/util/XprHelper.h\000"
 897      6E2F7372 
 897      632F436F 
 897      72652F75 
 897      74696C2F 
 898              		.align	2
 899              	.LC7:
 900 0098 45696765 		.ascii	"Eigen::internal::variable_if_dynamic<T, Value>::var"
 900      6E3A3A69 
 900      6E746572 
 900      6E616C3A 
 900      3A766172 
 901 00cb 6961626C 		.ascii	"iable_if_dynamic(T) [with T = int; int Value = 3]\000"
 901      655F6966 
 901      5F64796E 
 901      616D6963 
 901      28542920 
 902              		.section	.text._ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi2ELi1ELi0ELi2ELi1EEENS_7ProductIN
 903              		.align	1
 904              		.weak	_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi2ELi1ELi0ELi2ELi1EEENS_7ProductINS2_IfLi2E
 905              		.syntax unified
 906              		.thumb
 907              		.thumb_func
 909              	_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi2ELi1ELi0ELi2ELi1EEENS_7ProductINS2_IfLi2ELi3ELi0
 910              		.fnstart
 911              	.LVL50:
 912              	.LFB8889:
 913              		.file 10 "Eigen/src/Core/AssignEvaluator.h"
   1:Eigen/src/Core/AssignEvaluator.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/AssignEvaluator.h **** // for linear algebra.
   3:Eigen/src/Core/AssignEvaluator.h **** //
   4:Eigen/src/Core/AssignEvaluator.h **** // Copyright (C) 2011 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:Eigen/src/Core/AssignEvaluator.h **** // Copyright (C) 2011-2014 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:Eigen/src/Core/AssignEvaluator.h **** // Copyright (C) 2011-2012 Jitse Niesen <jitse@maths.leeds.ac.uk>
   7:Eigen/src/Core/AssignEvaluator.h **** //
   8:Eigen/src/Core/AssignEvaluator.h **** // This Source Code Form is subject to the terms of the Mozilla
   9:Eigen/src/Core/AssignEvaluator.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 60


  10:Eigen/src/Core/AssignEvaluator.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  11:Eigen/src/Core/AssignEvaluator.h **** 
  12:Eigen/src/Core/AssignEvaluator.h **** #ifndef EIGEN_ASSIGN_EVALUATOR_H
  13:Eigen/src/Core/AssignEvaluator.h **** #define EIGEN_ASSIGN_EVALUATOR_H
  14:Eigen/src/Core/AssignEvaluator.h **** 
  15:Eigen/src/Core/AssignEvaluator.h **** namespace Eigen {
  16:Eigen/src/Core/AssignEvaluator.h **** 
  17:Eigen/src/Core/AssignEvaluator.h **** // This implementation is based on Assign.h
  18:Eigen/src/Core/AssignEvaluator.h **** 
  19:Eigen/src/Core/AssignEvaluator.h **** namespace internal {
  20:Eigen/src/Core/AssignEvaluator.h ****   
  21:Eigen/src/Core/AssignEvaluator.h **** /***************************************************************************
  22:Eigen/src/Core/AssignEvaluator.h **** * Part 1 : the logic deciding a strategy for traversal and unrolling       *
  23:Eigen/src/Core/AssignEvaluator.h **** ***************************************************************************/
  24:Eigen/src/Core/AssignEvaluator.h **** 
  25:Eigen/src/Core/AssignEvaluator.h **** // copy_using_evaluator_traits is based on assign_traits
  26:Eigen/src/Core/AssignEvaluator.h **** 
  27:Eigen/src/Core/AssignEvaluator.h **** template <typename DstEvaluator, typename SrcEvaluator, typename AssignFunc>
  28:Eigen/src/Core/AssignEvaluator.h **** struct copy_using_evaluator_traits
  29:Eigen/src/Core/AssignEvaluator.h **** {
  30:Eigen/src/Core/AssignEvaluator.h ****   typedef typename DstEvaluator::XprType Dst;
  31:Eigen/src/Core/AssignEvaluator.h ****   typedef typename Dst::Scalar DstScalar;
  32:Eigen/src/Core/AssignEvaluator.h ****   
  33:Eigen/src/Core/AssignEvaluator.h ****   enum {
  34:Eigen/src/Core/AssignEvaluator.h ****     DstFlags = DstEvaluator::Flags,
  35:Eigen/src/Core/AssignEvaluator.h ****     SrcFlags = SrcEvaluator::Flags
  36:Eigen/src/Core/AssignEvaluator.h ****   };
  37:Eigen/src/Core/AssignEvaluator.h ****   
  38:Eigen/src/Core/AssignEvaluator.h **** public:
  39:Eigen/src/Core/AssignEvaluator.h ****   enum {
  40:Eigen/src/Core/AssignEvaluator.h ****     DstAlignment = DstEvaluator::Alignment,
  41:Eigen/src/Core/AssignEvaluator.h ****     SrcAlignment = SrcEvaluator::Alignment,
  42:Eigen/src/Core/AssignEvaluator.h ****     DstHasDirectAccess = (DstFlags & DirectAccessBit) == DirectAccessBit,
  43:Eigen/src/Core/AssignEvaluator.h ****     JointAlignment = EIGEN_PLAIN_ENUM_MIN(DstAlignment,SrcAlignment)
  44:Eigen/src/Core/AssignEvaluator.h ****   };
  45:Eigen/src/Core/AssignEvaluator.h **** 
  46:Eigen/src/Core/AssignEvaluator.h **** private:
  47:Eigen/src/Core/AssignEvaluator.h ****   enum {
  48:Eigen/src/Core/AssignEvaluator.h ****     InnerSize = int(Dst::IsVectorAtCompileTime) ? int(Dst::SizeAtCompileTime)
  49:Eigen/src/Core/AssignEvaluator.h ****               : int(DstFlags)&RowMajorBit ? int(Dst::ColsAtCompileTime)
  50:Eigen/src/Core/AssignEvaluator.h ****               : int(Dst::RowsAtCompileTime),
  51:Eigen/src/Core/AssignEvaluator.h ****     InnerMaxSize = int(Dst::IsVectorAtCompileTime) ? int(Dst::MaxSizeAtCompileTime)
  52:Eigen/src/Core/AssignEvaluator.h ****               : int(DstFlags)&RowMajorBit ? int(Dst::MaxColsAtCompileTime)
  53:Eigen/src/Core/AssignEvaluator.h ****               : int(Dst::MaxRowsAtCompileTime),
  54:Eigen/src/Core/AssignEvaluator.h ****     OuterStride = int(outer_stride_at_compile_time<Dst>::ret),
  55:Eigen/src/Core/AssignEvaluator.h ****     MaxSizeAtCompileTime = Dst::SizeAtCompileTime
  56:Eigen/src/Core/AssignEvaluator.h ****   };
  57:Eigen/src/Core/AssignEvaluator.h **** 
  58:Eigen/src/Core/AssignEvaluator.h ****   // TODO distinguish between linear traversal and inner-traversals
  59:Eigen/src/Core/AssignEvaluator.h ****   typedef typename find_best_packet<DstScalar,Dst::SizeAtCompileTime>::type LinearPacketType;
  60:Eigen/src/Core/AssignEvaluator.h ****   typedef typename find_best_packet<DstScalar,InnerSize>::type InnerPacketType;
  61:Eigen/src/Core/AssignEvaluator.h **** 
  62:Eigen/src/Core/AssignEvaluator.h ****   enum {
  63:Eigen/src/Core/AssignEvaluator.h ****     LinearPacketSize = unpacket_traits<LinearPacketType>::size,
  64:Eigen/src/Core/AssignEvaluator.h ****     InnerPacketSize = unpacket_traits<InnerPacketType>::size
  65:Eigen/src/Core/AssignEvaluator.h ****   };
  66:Eigen/src/Core/AssignEvaluator.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 61


  67:Eigen/src/Core/AssignEvaluator.h **** public:
  68:Eigen/src/Core/AssignEvaluator.h ****   enum {
  69:Eigen/src/Core/AssignEvaluator.h ****     LinearRequiredAlignment = unpacket_traits<LinearPacketType>::alignment,
  70:Eigen/src/Core/AssignEvaluator.h ****     InnerRequiredAlignment = unpacket_traits<InnerPacketType>::alignment
  71:Eigen/src/Core/AssignEvaluator.h ****   };
  72:Eigen/src/Core/AssignEvaluator.h **** 
  73:Eigen/src/Core/AssignEvaluator.h **** private:
  74:Eigen/src/Core/AssignEvaluator.h ****   enum {
  75:Eigen/src/Core/AssignEvaluator.h ****     DstIsRowMajor = DstFlags&RowMajorBit,
  76:Eigen/src/Core/AssignEvaluator.h ****     SrcIsRowMajor = SrcFlags&RowMajorBit,
  77:Eigen/src/Core/AssignEvaluator.h ****     StorageOrdersAgree = (int(DstIsRowMajor) == int(SrcIsRowMajor)),
  78:Eigen/src/Core/AssignEvaluator.h ****     MightVectorize = bool(StorageOrdersAgree)
  79:Eigen/src/Core/AssignEvaluator.h ****                   && (int(DstFlags) & int(SrcFlags) & ActualPacketAccessBit)
  80:Eigen/src/Core/AssignEvaluator.h ****                   && bool(functor_traits<AssignFunc>::PacketAccess),
  81:Eigen/src/Core/AssignEvaluator.h ****     MayInnerVectorize  = MightVectorize
  82:Eigen/src/Core/AssignEvaluator.h ****                        && int(InnerSize)!=Dynamic && int(InnerSize)%int(InnerPacketSize)==0
  83:Eigen/src/Core/AssignEvaluator.h ****                        && int(OuterStride)!=Dynamic && int(OuterStride)%int(InnerPacketSize)==0
  84:Eigen/src/Core/AssignEvaluator.h ****                        && (EIGEN_UNALIGNED_VECTORIZE  || int(JointAlignment)>=int(InnerRequiredAlig
  85:Eigen/src/Core/AssignEvaluator.h ****     MayLinearize = bool(StorageOrdersAgree) && (int(DstFlags) & int(SrcFlags) & LinearAccessBit),
  86:Eigen/src/Core/AssignEvaluator.h ****     MayLinearVectorize = bool(MightVectorize) && bool(MayLinearize) && bool(DstHasDirectAccess)
  87:Eigen/src/Core/AssignEvaluator.h ****                        && (EIGEN_UNALIGNED_VECTORIZE || (int(DstAlignment)>=int(LinearRequiredAlign
  88:Eigen/src/Core/AssignEvaluator.h ****       /* If the destination isn't aligned, we have to do runtime checks and we don't unroll,
  89:Eigen/src/Core/AssignEvaluator.h ****          so it's only good for large enough sizes. */
  90:Eigen/src/Core/AssignEvaluator.h ****     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
  91:Eigen/src/Core/AssignEvaluator.h ****                        && (int(InnerMaxSize)==Dynamic || int(InnerMaxSize)>=(EIGEN_UNALIGNED_VECTOR
  92:Eigen/src/Core/AssignEvaluator.h ****       /* slice vectorization can be slow, so we only want it if the slices are big, which is
  93:Eigen/src/Core/AssignEvaluator.h ****          indicated by InnerMaxSize rather than InnerSize, think of the case of a dynamic block
  94:Eigen/src/Core/AssignEvaluator.h ****          in a fixed-size matrix
  95:Eigen/src/Core/AssignEvaluator.h ****          However, with EIGEN_UNALIGNED_VECTORIZE and unrolling, slice vectorization is still worth 
  96:Eigen/src/Core/AssignEvaluator.h ****   };
  97:Eigen/src/Core/AssignEvaluator.h **** 
  98:Eigen/src/Core/AssignEvaluator.h **** public:
  99:Eigen/src/Core/AssignEvaluator.h ****   enum {
 100:Eigen/src/Core/AssignEvaluator.h ****     Traversal = int(MayLinearVectorize) && (LinearPacketSize>InnerPacketSize) ? int(LinearVectorize
 101:Eigen/src/Core/AssignEvaluator.h ****               : int(MayInnerVectorize)   ? int(InnerVectorizedTraversal)
 102:Eigen/src/Core/AssignEvaluator.h ****               : int(MayLinearVectorize)  ? int(LinearVectorizedTraversal)
 103:Eigen/src/Core/AssignEvaluator.h ****               : int(MaySliceVectorize)   ? int(SliceVectorizedTraversal)
 104:Eigen/src/Core/AssignEvaluator.h ****               : int(MayLinearize)        ? int(LinearTraversal)
 105:Eigen/src/Core/AssignEvaluator.h ****                                          : int(DefaultTraversal),
 106:Eigen/src/Core/AssignEvaluator.h ****     Vectorized = int(Traversal) == InnerVectorizedTraversal
 107:Eigen/src/Core/AssignEvaluator.h ****               || int(Traversal) == LinearVectorizedTraversal
 108:Eigen/src/Core/AssignEvaluator.h ****               || int(Traversal) == SliceVectorizedTraversal
 109:Eigen/src/Core/AssignEvaluator.h ****   };
 110:Eigen/src/Core/AssignEvaluator.h **** 
 111:Eigen/src/Core/AssignEvaluator.h ****   typedef typename conditional<int(Traversal)==LinearVectorizedTraversal, LinearPacketType, InnerPa
 112:Eigen/src/Core/AssignEvaluator.h **** 
 113:Eigen/src/Core/AssignEvaluator.h **** private:
 114:Eigen/src/Core/AssignEvaluator.h ****   enum {
 115:Eigen/src/Core/AssignEvaluator.h ****     ActualPacketSize    = int(Traversal)==LinearVectorizedTraversal ? LinearPacketSize
 116:Eigen/src/Core/AssignEvaluator.h ****                         : Vectorized ? InnerPacketSize
 117:Eigen/src/Core/AssignEvaluator.h ****                         : 1,
 118:Eigen/src/Core/AssignEvaluator.h ****     UnrollingLimit      = EIGEN_UNROLLING_LIMIT * ActualPacketSize,
 119:Eigen/src/Core/AssignEvaluator.h ****     MayUnrollCompletely = int(Dst::SizeAtCompileTime) != Dynamic
 120:Eigen/src/Core/AssignEvaluator.h ****                        && int(Dst::SizeAtCompileTime) * (int(DstEvaluator::CoeffReadCost)+int(SrcEv
 121:Eigen/src/Core/AssignEvaluator.h ****     MayUnrollInner      = int(InnerSize) != Dynamic
 122:Eigen/src/Core/AssignEvaluator.h ****                        && int(InnerSize) * (int(DstEvaluator::CoeffReadCost)+int(SrcEvaluator::Coef
 123:Eigen/src/Core/AssignEvaluator.h ****   };
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 62


 124:Eigen/src/Core/AssignEvaluator.h **** 
 125:Eigen/src/Core/AssignEvaluator.h **** public:
 126:Eigen/src/Core/AssignEvaluator.h ****   enum {
 127:Eigen/src/Core/AssignEvaluator.h ****     Unrolling = (int(Traversal) == int(InnerVectorizedTraversal) || int(Traversal) == int(DefaultTr
 128:Eigen/src/Core/AssignEvaluator.h ****                 ? (
 129:Eigen/src/Core/AssignEvaluator.h ****                     int(MayUnrollCompletely) ? int(CompleteUnrolling)
 130:Eigen/src/Core/AssignEvaluator.h ****                   : int(MayUnrollInner)      ? int(InnerUnrolling)
 131:Eigen/src/Core/AssignEvaluator.h ****                                              : int(NoUnrolling)
 132:Eigen/src/Core/AssignEvaluator.h ****                   )
 133:Eigen/src/Core/AssignEvaluator.h ****               : int(Traversal) == int(LinearVectorizedTraversal)
 134:Eigen/src/Core/AssignEvaluator.h ****                 ? ( bool(MayUnrollCompletely) && ( EIGEN_UNALIGNED_VECTORIZE || (int(DstAlignment)>
 135:Eigen/src/Core/AssignEvaluator.h ****                           ? int(CompleteUnrolling)
 136:Eigen/src/Core/AssignEvaluator.h ****                           : int(NoUnrolling) )
 137:Eigen/src/Core/AssignEvaluator.h ****               : int(Traversal) == int(LinearTraversal)
 138:Eigen/src/Core/AssignEvaluator.h ****                 ? ( bool(MayUnrollCompletely) ? int(CompleteUnrolling) 
 139:Eigen/src/Core/AssignEvaluator.h ****                                               : int(NoUnrolling) )
 140:Eigen/src/Core/AssignEvaluator.h **** #if EIGEN_UNALIGNED_VECTORIZE
 141:Eigen/src/Core/AssignEvaluator.h ****               : int(Traversal) == int(SliceVectorizedTraversal)
 142:Eigen/src/Core/AssignEvaluator.h ****                 ? ( bool(MayUnrollInner) ? int(InnerUnrolling)
 143:Eigen/src/Core/AssignEvaluator.h ****                                          : int(NoUnrolling) )
 144:Eigen/src/Core/AssignEvaluator.h **** #endif
 145:Eigen/src/Core/AssignEvaluator.h ****               : int(NoUnrolling)
 146:Eigen/src/Core/AssignEvaluator.h ****   };
 147:Eigen/src/Core/AssignEvaluator.h **** 
 148:Eigen/src/Core/AssignEvaluator.h **** #ifdef EIGEN_DEBUG_ASSIGN
 149:Eigen/src/Core/AssignEvaluator.h ****   static void debug()
 150:Eigen/src/Core/AssignEvaluator.h ****   {
 151:Eigen/src/Core/AssignEvaluator.h ****     std::cerr << "DstXpr: " << typeid(typename DstEvaluator::XprType).name() << std::endl;
 152:Eigen/src/Core/AssignEvaluator.h ****     std::cerr << "SrcXpr: " << typeid(typename SrcEvaluator::XprType).name() << std::endl;
 153:Eigen/src/Core/AssignEvaluator.h ****     std::cerr.setf(std::ios::hex, std::ios::basefield);
 154:Eigen/src/Core/AssignEvaluator.h ****     std::cerr << "DstFlags" << " = " << DstFlags << " (" << demangle_flags(DstFlags) << " )" << std
 155:Eigen/src/Core/AssignEvaluator.h ****     std::cerr << "SrcFlags" << " = " << SrcFlags << " (" << demangle_flags(SrcFlags) << " )" << std
 156:Eigen/src/Core/AssignEvaluator.h ****     std::cerr.unsetf(std::ios::hex);
 157:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(DstAlignment)
 158:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(SrcAlignment)
 159:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(LinearRequiredAlignment)
 160:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(InnerRequiredAlignment)
 161:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(JointAlignment)
 162:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(InnerSize)
 163:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(InnerMaxSize)
 164:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(LinearPacketSize)
 165:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(InnerPacketSize)
 166:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(ActualPacketSize)
 167:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(StorageOrdersAgree)
 168:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(MightVectorize)
 169:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(MayLinearize)
 170:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(MayInnerVectorize)
 171:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(MayLinearVectorize)
 172:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(MaySliceVectorize)
 173:Eigen/src/Core/AssignEvaluator.h ****     std::cerr << "Traversal" << " = " << Traversal << " (" << demangle_traversal(Traversal) << ")" 
 174:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(SrcEvaluator::CoeffReadCost)
 175:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(UnrollingLimit)
 176:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(MayUnrollCompletely)
 177:Eigen/src/Core/AssignEvaluator.h ****     EIGEN_DEBUG_VAR(MayUnrollInner)
 178:Eigen/src/Core/AssignEvaluator.h ****     std::cerr << "Unrolling" << " = " << Unrolling << " (" << demangle_unrolling(Unrolling) << ")" 
 179:Eigen/src/Core/AssignEvaluator.h ****     std::cerr << std::endl;
 180:Eigen/src/Core/AssignEvaluator.h ****   }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 63


 181:Eigen/src/Core/AssignEvaluator.h **** #endif
 182:Eigen/src/Core/AssignEvaluator.h **** };
 183:Eigen/src/Core/AssignEvaluator.h **** 
 184:Eigen/src/Core/AssignEvaluator.h **** /***************************************************************************
 185:Eigen/src/Core/AssignEvaluator.h **** * Part 2 : meta-unrollers
 186:Eigen/src/Core/AssignEvaluator.h **** ***************************************************************************/
 187:Eigen/src/Core/AssignEvaluator.h **** 
 188:Eigen/src/Core/AssignEvaluator.h **** /************************
 189:Eigen/src/Core/AssignEvaluator.h **** *** Default traversal ***
 190:Eigen/src/Core/AssignEvaluator.h **** ************************/
 191:Eigen/src/Core/AssignEvaluator.h **** 
 192:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel, int Index, int Stop>
 193:Eigen/src/Core/AssignEvaluator.h **** struct copy_using_evaluator_DefaultTraversal_CompleteUnrolling
 194:Eigen/src/Core/AssignEvaluator.h **** {
 195:Eigen/src/Core/AssignEvaluator.h ****   // FIXME: this is not very clean, perhaps this information should be provided by the kernel?
 196:Eigen/src/Core/AssignEvaluator.h ****   typedef typename Kernel::DstEvaluatorType DstEvaluatorType;
 197:Eigen/src/Core/AssignEvaluator.h ****   typedef typename DstEvaluatorType::XprType DstXprType;
 198:Eigen/src/Core/AssignEvaluator.h ****   
 199:Eigen/src/Core/AssignEvaluator.h ****   enum {
 200:Eigen/src/Core/AssignEvaluator.h ****     outer = Index / DstXprType::InnerSizeAtCompileTime,
 201:Eigen/src/Core/AssignEvaluator.h ****     inner = Index % DstXprType::InnerSizeAtCompileTime
 202:Eigen/src/Core/AssignEvaluator.h ****   };
 203:Eigen/src/Core/AssignEvaluator.h **** 
 204:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 205:Eigen/src/Core/AssignEvaluator.h ****   {
 206:Eigen/src/Core/AssignEvaluator.h ****     kernel.assignCoeffByOuterInner(outer, inner);
 207:Eigen/src/Core/AssignEvaluator.h ****     copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 208:Eigen/src/Core/AssignEvaluator.h ****   }
 209:Eigen/src/Core/AssignEvaluator.h **** };
 210:Eigen/src/Core/AssignEvaluator.h **** 
 211:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel, int Stop>
 212:Eigen/src/Core/AssignEvaluator.h **** struct copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Stop, Stop>
 213:Eigen/src/Core/AssignEvaluator.h **** {
 214:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 215:Eigen/src/Core/AssignEvaluator.h **** };
 216:Eigen/src/Core/AssignEvaluator.h **** 
 217:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel, int Index_, int Stop>
 218:Eigen/src/Core/AssignEvaluator.h **** struct copy_using_evaluator_DefaultTraversal_InnerUnrolling
 219:Eigen/src/Core/AssignEvaluator.h **** {
 220:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel, Index outer)
 221:Eigen/src/Core/AssignEvaluator.h ****   {
 222:Eigen/src/Core/AssignEvaluator.h ****     kernel.assignCoeffByOuterInner(outer, Index_);
 223:Eigen/src/Core/AssignEvaluator.h ****     copy_using_evaluator_DefaultTraversal_InnerUnrolling<Kernel, Index_+1, Stop>::run(kernel, outer
 224:Eigen/src/Core/AssignEvaluator.h ****   }
 225:Eigen/src/Core/AssignEvaluator.h **** };
 226:Eigen/src/Core/AssignEvaluator.h **** 
 227:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel, int Stop>
 228:Eigen/src/Core/AssignEvaluator.h **** struct copy_using_evaluator_DefaultTraversal_InnerUnrolling<Kernel, Stop, Stop>
 229:Eigen/src/Core/AssignEvaluator.h **** {
 230:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&, Index) { }
 231:Eigen/src/Core/AssignEvaluator.h **** };
 232:Eigen/src/Core/AssignEvaluator.h **** 
 233:Eigen/src/Core/AssignEvaluator.h **** /***********************
 234:Eigen/src/Core/AssignEvaluator.h **** *** Linear traversal ***
 235:Eigen/src/Core/AssignEvaluator.h **** ***********************/
 236:Eigen/src/Core/AssignEvaluator.h **** 
 237:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel, int Index, int Stop>
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 64


 238:Eigen/src/Core/AssignEvaluator.h **** struct copy_using_evaluator_LinearTraversal_CompleteUnrolling
 239:Eigen/src/Core/AssignEvaluator.h **** {
 240:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 241:Eigen/src/Core/AssignEvaluator.h ****   {
 242:Eigen/src/Core/AssignEvaluator.h ****     kernel.assignCoeff(Index);
 243:Eigen/src/Core/AssignEvaluator.h ****     copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 244:Eigen/src/Core/AssignEvaluator.h ****   }
 245:Eigen/src/Core/AssignEvaluator.h **** };
 246:Eigen/src/Core/AssignEvaluator.h **** 
 247:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel, int Stop>
 248:Eigen/src/Core/AssignEvaluator.h **** struct copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Stop, Stop>
 249:Eigen/src/Core/AssignEvaluator.h **** {
 250:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 251:Eigen/src/Core/AssignEvaluator.h **** };
 252:Eigen/src/Core/AssignEvaluator.h **** 
 253:Eigen/src/Core/AssignEvaluator.h **** /**************************
 254:Eigen/src/Core/AssignEvaluator.h **** *** Inner vectorization ***
 255:Eigen/src/Core/AssignEvaluator.h **** **************************/
 256:Eigen/src/Core/AssignEvaluator.h **** 
 257:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel, int Index, int Stop>
 258:Eigen/src/Core/AssignEvaluator.h **** struct copy_using_evaluator_innervec_CompleteUnrolling
 259:Eigen/src/Core/AssignEvaluator.h **** {
 260:Eigen/src/Core/AssignEvaluator.h ****   // FIXME: this is not very clean, perhaps this information should be provided by the kernel?
 261:Eigen/src/Core/AssignEvaluator.h ****   typedef typename Kernel::DstEvaluatorType DstEvaluatorType;
 262:Eigen/src/Core/AssignEvaluator.h ****   typedef typename DstEvaluatorType::XprType DstXprType;
 263:Eigen/src/Core/AssignEvaluator.h ****   typedef typename Kernel::PacketType PacketType;
 264:Eigen/src/Core/AssignEvaluator.h ****   
 265:Eigen/src/Core/AssignEvaluator.h ****   enum {
 266:Eigen/src/Core/AssignEvaluator.h ****     outer = Index / DstXprType::InnerSizeAtCompileTime,
 267:Eigen/src/Core/AssignEvaluator.h ****     inner = Index % DstXprType::InnerSizeAtCompileTime,
 268:Eigen/src/Core/AssignEvaluator.h ****     SrcAlignment = Kernel::AssignmentTraits::SrcAlignment,
 269:Eigen/src/Core/AssignEvaluator.h ****     DstAlignment = Kernel::AssignmentTraits::DstAlignment
 270:Eigen/src/Core/AssignEvaluator.h ****   };
 271:Eigen/src/Core/AssignEvaluator.h **** 
 272:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 273:Eigen/src/Core/AssignEvaluator.h ****   {
 274:Eigen/src/Core/AssignEvaluator.h ****     kernel.template assignPacketByOuterInner<DstAlignment, SrcAlignment, PacketType>(outer, inner);
 275:Eigen/src/Core/AssignEvaluator.h ****     enum { NextIndex = Index + unpacket_traits<PacketType>::size };
 276:Eigen/src/Core/AssignEvaluator.h ****     copy_using_evaluator_innervec_CompleteUnrolling<Kernel, NextIndex, Stop>::run(kernel);
 277:Eigen/src/Core/AssignEvaluator.h ****   }
 278:Eigen/src/Core/AssignEvaluator.h **** };
 279:Eigen/src/Core/AssignEvaluator.h **** 
 280:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel, int Stop>
 281:Eigen/src/Core/AssignEvaluator.h **** struct copy_using_evaluator_innervec_CompleteUnrolling<Kernel, Stop, Stop>
 282:Eigen/src/Core/AssignEvaluator.h **** {
 283:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 284:Eigen/src/Core/AssignEvaluator.h **** };
 285:Eigen/src/Core/AssignEvaluator.h **** 
 286:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel, int Index_, int Stop, int SrcAlignment, int DstAlignment>
 287:Eigen/src/Core/AssignEvaluator.h **** struct copy_using_evaluator_innervec_InnerUnrolling
 288:Eigen/src/Core/AssignEvaluator.h **** {
 289:Eigen/src/Core/AssignEvaluator.h ****   typedef typename Kernel::PacketType PacketType;
 290:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel, Index outer)
 291:Eigen/src/Core/AssignEvaluator.h ****   {
 292:Eigen/src/Core/AssignEvaluator.h ****     kernel.template assignPacketByOuterInner<DstAlignment, SrcAlignment, PacketType>(outer, Index_)
 293:Eigen/src/Core/AssignEvaluator.h ****     enum { NextIndex = Index_ + unpacket_traits<PacketType>::size };
 294:Eigen/src/Core/AssignEvaluator.h ****     copy_using_evaluator_innervec_InnerUnrolling<Kernel, NextIndex, Stop, SrcAlignment, DstAlignmen
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 65


 295:Eigen/src/Core/AssignEvaluator.h ****   }
 296:Eigen/src/Core/AssignEvaluator.h **** };
 297:Eigen/src/Core/AssignEvaluator.h **** 
 298:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel, int Stop, int SrcAlignment, int DstAlignment>
 299:Eigen/src/Core/AssignEvaluator.h **** struct copy_using_evaluator_innervec_InnerUnrolling<Kernel, Stop, Stop, SrcAlignment, DstAlignment>
 300:Eigen/src/Core/AssignEvaluator.h **** {
 301:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &, Index) { }
 302:Eigen/src/Core/AssignEvaluator.h **** };
 303:Eigen/src/Core/AssignEvaluator.h **** 
 304:Eigen/src/Core/AssignEvaluator.h **** /***************************************************************************
 305:Eigen/src/Core/AssignEvaluator.h **** * Part 3 : implementation of all cases
 306:Eigen/src/Core/AssignEvaluator.h **** ***************************************************************************/
 307:Eigen/src/Core/AssignEvaluator.h **** 
 308:Eigen/src/Core/AssignEvaluator.h **** // dense_assignment_loop is based on assign_impl
 309:Eigen/src/Core/AssignEvaluator.h **** 
 310:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel,
 311:Eigen/src/Core/AssignEvaluator.h ****          int Traversal = Kernel::AssignmentTraits::Traversal,
 312:Eigen/src/Core/AssignEvaluator.h ****          int Unrolling = Kernel::AssignmentTraits::Unrolling>
 313:Eigen/src/Core/AssignEvaluator.h **** struct dense_assignment_loop;
 314:Eigen/src/Core/AssignEvaluator.h **** 
 315:Eigen/src/Core/AssignEvaluator.h **** /************************
 316:Eigen/src/Core/AssignEvaluator.h **** *** Default traversal ***
 317:Eigen/src/Core/AssignEvaluator.h **** ************************/
 318:Eigen/src/Core/AssignEvaluator.h **** 
 319:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel>
 320:Eigen/src/Core/AssignEvaluator.h **** struct dense_assignment_loop<Kernel, DefaultTraversal, NoUnrolling>
 321:Eigen/src/Core/AssignEvaluator.h **** {
 322:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static void EIGEN_STRONG_INLINE run(Kernel &kernel)
 323:Eigen/src/Core/AssignEvaluator.h ****   {
 324:Eigen/src/Core/AssignEvaluator.h ****     for(Index outer = 0; outer < kernel.outerSize(); ++outer) {
 325:Eigen/src/Core/AssignEvaluator.h ****       for(Index inner = 0; inner < kernel.innerSize(); ++inner) {
 326:Eigen/src/Core/AssignEvaluator.h ****         kernel.assignCoeffByOuterInner(outer, inner);
 327:Eigen/src/Core/AssignEvaluator.h ****       }
 328:Eigen/src/Core/AssignEvaluator.h ****     }
 329:Eigen/src/Core/AssignEvaluator.h ****   }
 330:Eigen/src/Core/AssignEvaluator.h **** };
 331:Eigen/src/Core/AssignEvaluator.h **** 
 332:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel>
 333:Eigen/src/Core/AssignEvaluator.h **** struct dense_assignment_loop<Kernel, DefaultTraversal, CompleteUnrolling>
 334:Eigen/src/Core/AssignEvaluator.h **** {
 335:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 336:Eigen/src/Core/AssignEvaluator.h ****   {
 337:Eigen/src/Core/AssignEvaluator.h ****     typedef typename Kernel::DstEvaluatorType::XprType DstXprType;
 338:Eigen/src/Core/AssignEvaluator.h ****     copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTim
 339:Eigen/src/Core/AssignEvaluator.h ****   }
 340:Eigen/src/Core/AssignEvaluator.h **** };
 341:Eigen/src/Core/AssignEvaluator.h **** 
 342:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel>
 343:Eigen/src/Core/AssignEvaluator.h **** struct dense_assignment_loop<Kernel, DefaultTraversal, InnerUnrolling>
 344:Eigen/src/Core/AssignEvaluator.h **** {
 345:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 346:Eigen/src/Core/AssignEvaluator.h ****   {
 347:Eigen/src/Core/AssignEvaluator.h ****     typedef typename Kernel::DstEvaluatorType::XprType DstXprType;
 348:Eigen/src/Core/AssignEvaluator.h **** 
 349:Eigen/src/Core/AssignEvaluator.h ****     const Index outerSize = kernel.outerSize();
 350:Eigen/src/Core/AssignEvaluator.h ****     for(Index outer = 0; outer < outerSize; ++outer)
 351:Eigen/src/Core/AssignEvaluator.h ****       copy_using_evaluator_DefaultTraversal_InnerUnrolling<Kernel, 0, DstXprType::InnerSizeAtCompil
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 66


 352:Eigen/src/Core/AssignEvaluator.h ****   }
 353:Eigen/src/Core/AssignEvaluator.h **** };
 354:Eigen/src/Core/AssignEvaluator.h **** 
 355:Eigen/src/Core/AssignEvaluator.h **** /***************************
 356:Eigen/src/Core/AssignEvaluator.h **** *** Linear vectorization ***
 357:Eigen/src/Core/AssignEvaluator.h **** ***************************/
 358:Eigen/src/Core/AssignEvaluator.h **** 
 359:Eigen/src/Core/AssignEvaluator.h **** 
 360:Eigen/src/Core/AssignEvaluator.h **** // The goal of unaligned_dense_assignment_loop is simply to factorize the handling
 361:Eigen/src/Core/AssignEvaluator.h **** // of the non vectorizable beginning and ending parts
 362:Eigen/src/Core/AssignEvaluator.h **** 
 363:Eigen/src/Core/AssignEvaluator.h **** template <bool IsAligned = false>
 364:Eigen/src/Core/AssignEvaluator.h **** struct unaligned_dense_assignment_loop
 365:Eigen/src/Core/AssignEvaluator.h **** {
 366:Eigen/src/Core/AssignEvaluator.h ****   // if IsAligned = true, then do nothing
 367:Eigen/src/Core/AssignEvaluator.h ****   template <typename Kernel>
 368:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&, Index, Index) {}
 369:Eigen/src/Core/AssignEvaluator.h **** };
 370:Eigen/src/Core/AssignEvaluator.h **** 
 371:Eigen/src/Core/AssignEvaluator.h **** template <>
 372:Eigen/src/Core/AssignEvaluator.h **** struct unaligned_dense_assignment_loop<false>
 373:Eigen/src/Core/AssignEvaluator.h **** {
 374:Eigen/src/Core/AssignEvaluator.h ****   // MSVC must not inline this functions. If it does, it fails to optimize the
 375:Eigen/src/Core/AssignEvaluator.h ****   // packet access path.
 376:Eigen/src/Core/AssignEvaluator.h ****   // FIXME check which version exhibits this issue
 377:Eigen/src/Core/AssignEvaluator.h **** #if EIGEN_COMP_MSVC
 378:Eigen/src/Core/AssignEvaluator.h ****   template <typename Kernel>
 379:Eigen/src/Core/AssignEvaluator.h ****   static EIGEN_DONT_INLINE void run(Kernel &kernel,
 380:Eigen/src/Core/AssignEvaluator.h ****                                     Index start,
 381:Eigen/src/Core/AssignEvaluator.h ****                                     Index end)
 382:Eigen/src/Core/AssignEvaluator.h **** #else
 383:Eigen/src/Core/AssignEvaluator.h ****   template <typename Kernel>
 384:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel,
 385:Eigen/src/Core/AssignEvaluator.h ****                                       Index start,
 386:Eigen/src/Core/AssignEvaluator.h ****                                       Index end)
 387:Eigen/src/Core/AssignEvaluator.h **** #endif
 388:Eigen/src/Core/AssignEvaluator.h ****   {
 389:Eigen/src/Core/AssignEvaluator.h ****     for (Index index = start; index < end; ++index)
 390:Eigen/src/Core/AssignEvaluator.h ****       kernel.assignCoeff(index);
 391:Eigen/src/Core/AssignEvaluator.h ****   }
 392:Eigen/src/Core/AssignEvaluator.h **** };
 393:Eigen/src/Core/AssignEvaluator.h **** 
 394:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel>
 395:Eigen/src/Core/AssignEvaluator.h **** struct dense_assignment_loop<Kernel, LinearVectorizedTraversal, NoUnrolling>
 396:Eigen/src/Core/AssignEvaluator.h **** {
 397:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 398:Eigen/src/Core/AssignEvaluator.h ****   {
 399:Eigen/src/Core/AssignEvaluator.h ****     const Index size = kernel.size();
 400:Eigen/src/Core/AssignEvaluator.h ****     typedef typename Kernel::Scalar Scalar;
 401:Eigen/src/Core/AssignEvaluator.h ****     typedef typename Kernel::PacketType PacketType;
 402:Eigen/src/Core/AssignEvaluator.h ****     enum {
 403:Eigen/src/Core/AssignEvaluator.h ****       requestedAlignment = Kernel::AssignmentTraits::LinearRequiredAlignment,
 404:Eigen/src/Core/AssignEvaluator.h ****       packetSize = unpacket_traits<PacketType>::size,
 405:Eigen/src/Core/AssignEvaluator.h ****       dstIsAligned = int(Kernel::AssignmentTraits::DstAlignment)>=int(requestedAlignment),
 406:Eigen/src/Core/AssignEvaluator.h ****       dstAlignment = packet_traits<Scalar>::AlignedOnScalar ? int(requestedAlignment)
 407:Eigen/src/Core/AssignEvaluator.h ****                                                             : int(Kernel::AssignmentTraits::DstAlig
 408:Eigen/src/Core/AssignEvaluator.h ****       srcAlignment = Kernel::AssignmentTraits::JointAlignment
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 67


 409:Eigen/src/Core/AssignEvaluator.h ****     };
 410:Eigen/src/Core/AssignEvaluator.h ****     const Index alignedStart = dstIsAligned ? 0 : internal::first_aligned<requestedAlignment>(kerne
 411:Eigen/src/Core/AssignEvaluator.h ****     const Index alignedEnd = alignedStart + ((size-alignedStart)/packetSize)*packetSize;
 412:Eigen/src/Core/AssignEvaluator.h **** 
 413:Eigen/src/Core/AssignEvaluator.h ****     unaligned_dense_assignment_loop<dstIsAligned!=0>::run(kernel, 0, alignedStart);
 414:Eigen/src/Core/AssignEvaluator.h **** 
 415:Eigen/src/Core/AssignEvaluator.h ****     for(Index index = alignedStart; index < alignedEnd; index += packetSize)
 416:Eigen/src/Core/AssignEvaluator.h ****       kernel.template assignPacket<dstAlignment, srcAlignment, PacketType>(index);
 417:Eigen/src/Core/AssignEvaluator.h **** 
 418:Eigen/src/Core/AssignEvaluator.h ****     unaligned_dense_assignment_loop<>::run(kernel, alignedEnd, size);
 419:Eigen/src/Core/AssignEvaluator.h ****   }
 420:Eigen/src/Core/AssignEvaluator.h **** };
 421:Eigen/src/Core/AssignEvaluator.h **** 
 422:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel>
 423:Eigen/src/Core/AssignEvaluator.h **** struct dense_assignment_loop<Kernel, LinearVectorizedTraversal, CompleteUnrolling>
 424:Eigen/src/Core/AssignEvaluator.h **** {
 425:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 426:Eigen/src/Core/AssignEvaluator.h ****   {
 427:Eigen/src/Core/AssignEvaluator.h ****     typedef typename Kernel::DstEvaluatorType::XprType DstXprType;
 428:Eigen/src/Core/AssignEvaluator.h ****     typedef typename Kernel::PacketType PacketType;
 429:Eigen/src/Core/AssignEvaluator.h ****     
 430:Eigen/src/Core/AssignEvaluator.h ****     enum { size = DstXprType::SizeAtCompileTime,
 431:Eigen/src/Core/AssignEvaluator.h ****            packetSize =unpacket_traits<PacketType>::size,
 432:Eigen/src/Core/AssignEvaluator.h ****            alignedSize = (size/packetSize)*packetSize };
 433:Eigen/src/Core/AssignEvaluator.h **** 
 434:Eigen/src/Core/AssignEvaluator.h ****     copy_using_evaluator_innervec_CompleteUnrolling<Kernel, 0, alignedSize>::run(kernel);
 435:Eigen/src/Core/AssignEvaluator.h ****     copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, alignedSize, size>::run(kernel)
 436:Eigen/src/Core/AssignEvaluator.h ****   }
 437:Eigen/src/Core/AssignEvaluator.h **** };
 438:Eigen/src/Core/AssignEvaluator.h **** 
 439:Eigen/src/Core/AssignEvaluator.h **** /**************************
 440:Eigen/src/Core/AssignEvaluator.h **** *** Inner vectorization ***
 441:Eigen/src/Core/AssignEvaluator.h **** **************************/
 442:Eigen/src/Core/AssignEvaluator.h **** 
 443:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel>
 444:Eigen/src/Core/AssignEvaluator.h **** struct dense_assignment_loop<Kernel, InnerVectorizedTraversal, NoUnrolling>
 445:Eigen/src/Core/AssignEvaluator.h **** {
 446:Eigen/src/Core/AssignEvaluator.h ****   typedef typename Kernel::PacketType PacketType;
 447:Eigen/src/Core/AssignEvaluator.h ****   enum {
 448:Eigen/src/Core/AssignEvaluator.h ****     SrcAlignment = Kernel::AssignmentTraits::SrcAlignment,
 449:Eigen/src/Core/AssignEvaluator.h ****     DstAlignment = Kernel::AssignmentTraits::DstAlignment
 450:Eigen/src/Core/AssignEvaluator.h ****   };
 451:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 452:Eigen/src/Core/AssignEvaluator.h ****   {
 453:Eigen/src/Core/AssignEvaluator.h ****     const Index innerSize = kernel.innerSize();
 454:Eigen/src/Core/AssignEvaluator.h ****     const Index outerSize = kernel.outerSize();
 455:Eigen/src/Core/AssignEvaluator.h ****     const Index packetSize = unpacket_traits<PacketType>::size;
 456:Eigen/src/Core/AssignEvaluator.h ****     for(Index outer = 0; outer < outerSize; ++outer)
 457:Eigen/src/Core/AssignEvaluator.h ****       for(Index inner = 0; inner < innerSize; inner+=packetSize)
 458:Eigen/src/Core/AssignEvaluator.h ****         kernel.template assignPacketByOuterInner<DstAlignment, SrcAlignment, PacketType>(outer, inn
 459:Eigen/src/Core/AssignEvaluator.h ****   }
 460:Eigen/src/Core/AssignEvaluator.h **** };
 461:Eigen/src/Core/AssignEvaluator.h **** 
 462:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel>
 463:Eigen/src/Core/AssignEvaluator.h **** struct dense_assignment_loop<Kernel, InnerVectorizedTraversal, CompleteUnrolling>
 464:Eigen/src/Core/AssignEvaluator.h **** {
 465:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 68


 466:Eigen/src/Core/AssignEvaluator.h ****   {
 467:Eigen/src/Core/AssignEvaluator.h ****     typedef typename Kernel::DstEvaluatorType::XprType DstXprType;
 468:Eigen/src/Core/AssignEvaluator.h ****     copy_using_evaluator_innervec_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(
 469:Eigen/src/Core/AssignEvaluator.h ****   }
 470:Eigen/src/Core/AssignEvaluator.h **** };
 471:Eigen/src/Core/AssignEvaluator.h **** 
 472:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel>
 473:Eigen/src/Core/AssignEvaluator.h **** struct dense_assignment_loop<Kernel, InnerVectorizedTraversal, InnerUnrolling>
 474:Eigen/src/Core/AssignEvaluator.h **** {
 475:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 476:Eigen/src/Core/AssignEvaluator.h ****   {
 477:Eigen/src/Core/AssignEvaluator.h ****     typedef typename Kernel::DstEvaluatorType::XprType DstXprType;
 478:Eigen/src/Core/AssignEvaluator.h ****     typedef typename Kernel::AssignmentTraits Traits;
 479:Eigen/src/Core/AssignEvaluator.h ****     const Index outerSize = kernel.outerSize();
 480:Eigen/src/Core/AssignEvaluator.h ****     for(Index outer = 0; outer < outerSize; ++outer)
 481:Eigen/src/Core/AssignEvaluator.h ****       copy_using_evaluator_innervec_InnerUnrolling<Kernel, 0, DstXprType::InnerSizeAtCompileTime,
 482:Eigen/src/Core/AssignEvaluator.h ****                                                    Traits::SrcAlignment, Traits::DstAlignment>::run
 483:Eigen/src/Core/AssignEvaluator.h ****   }
 484:Eigen/src/Core/AssignEvaluator.h **** };
 485:Eigen/src/Core/AssignEvaluator.h **** 
 486:Eigen/src/Core/AssignEvaluator.h **** /***********************
 487:Eigen/src/Core/AssignEvaluator.h **** *** Linear traversal ***
 488:Eigen/src/Core/AssignEvaluator.h **** ***********************/
 489:Eigen/src/Core/AssignEvaluator.h **** 
 490:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel>
 491:Eigen/src/Core/AssignEvaluator.h **** struct dense_assignment_loop<Kernel, LinearTraversal, NoUnrolling>
 492:Eigen/src/Core/AssignEvaluator.h **** {
 493:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 494:Eigen/src/Core/AssignEvaluator.h ****   {
 495:Eigen/src/Core/AssignEvaluator.h ****     const Index size = kernel.size();
 496:Eigen/src/Core/AssignEvaluator.h ****     for(Index i = 0; i < size; ++i)
 497:Eigen/src/Core/AssignEvaluator.h ****       kernel.assignCoeff(i);
 498:Eigen/src/Core/AssignEvaluator.h ****   }
 499:Eigen/src/Core/AssignEvaluator.h **** };
 500:Eigen/src/Core/AssignEvaluator.h **** 
 501:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel>
 502:Eigen/src/Core/AssignEvaluator.h **** struct dense_assignment_loop<Kernel, LinearTraversal, CompleteUnrolling>
 503:Eigen/src/Core/AssignEvaluator.h **** {
 504:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 505:Eigen/src/Core/AssignEvaluator.h ****   {
 506:Eigen/src/Core/AssignEvaluator.h ****     typedef typename Kernel::DstEvaluatorType::XprType DstXprType;
 507:Eigen/src/Core/AssignEvaluator.h ****     copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime
 508:Eigen/src/Core/AssignEvaluator.h ****   }
 509:Eigen/src/Core/AssignEvaluator.h **** };
 510:Eigen/src/Core/AssignEvaluator.h **** 
 511:Eigen/src/Core/AssignEvaluator.h **** /**************************
 512:Eigen/src/Core/AssignEvaluator.h **** *** Slice vectorization ***
 513:Eigen/src/Core/AssignEvaluator.h **** ***************************/
 514:Eigen/src/Core/AssignEvaluator.h **** 
 515:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel>
 516:Eigen/src/Core/AssignEvaluator.h **** struct dense_assignment_loop<Kernel, SliceVectorizedTraversal, NoUnrolling>
 517:Eigen/src/Core/AssignEvaluator.h **** {
 518:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 519:Eigen/src/Core/AssignEvaluator.h ****   {
 520:Eigen/src/Core/AssignEvaluator.h ****     typedef typename Kernel::Scalar Scalar;
 521:Eigen/src/Core/AssignEvaluator.h ****     typedef typename Kernel::PacketType PacketType;
 522:Eigen/src/Core/AssignEvaluator.h ****     enum {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 69


 523:Eigen/src/Core/AssignEvaluator.h ****       packetSize = unpacket_traits<PacketType>::size,
 524:Eigen/src/Core/AssignEvaluator.h ****       requestedAlignment = int(Kernel::AssignmentTraits::InnerRequiredAlignment),
 525:Eigen/src/Core/AssignEvaluator.h ****       alignable = packet_traits<Scalar>::AlignedOnScalar || int(Kernel::AssignmentTraits::DstAlignm
 526:Eigen/src/Core/AssignEvaluator.h ****       dstIsAligned = int(Kernel::AssignmentTraits::DstAlignment)>=int(requestedAlignment),
 527:Eigen/src/Core/AssignEvaluator.h ****       dstAlignment = alignable ? int(requestedAlignment)
 528:Eigen/src/Core/AssignEvaluator.h ****                                : int(Kernel::AssignmentTraits::DstAlignment)
 529:Eigen/src/Core/AssignEvaluator.h ****     };
 530:Eigen/src/Core/AssignEvaluator.h ****     const Scalar *dst_ptr = kernel.dstDataPtr();
 531:Eigen/src/Core/AssignEvaluator.h ****     if((!bool(dstIsAligned)) && (UIntPtr(dst_ptr) % sizeof(Scalar))>0)
 532:Eigen/src/Core/AssignEvaluator.h ****     {
 533:Eigen/src/Core/AssignEvaluator.h ****       // the pointer is not aligend-on scalar, so alignment is not possible
 534:Eigen/src/Core/AssignEvaluator.h ****       return dense_assignment_loop<Kernel,DefaultTraversal,NoUnrolling>::run(kernel);
 535:Eigen/src/Core/AssignEvaluator.h ****     }
 536:Eigen/src/Core/AssignEvaluator.h ****     const Index packetAlignedMask = packetSize - 1;
 537:Eigen/src/Core/AssignEvaluator.h ****     const Index innerSize = kernel.innerSize();
 538:Eigen/src/Core/AssignEvaluator.h ****     const Index outerSize = kernel.outerSize();
 539:Eigen/src/Core/AssignEvaluator.h ****     const Index alignedStep = alignable ? (packetSize - kernel.outerStride() % packetSize) & packet
 540:Eigen/src/Core/AssignEvaluator.h ****     Index alignedStart = ((!alignable) || bool(dstIsAligned)) ? 0 : internal::first_aligned<request
 541:Eigen/src/Core/AssignEvaluator.h **** 
 542:Eigen/src/Core/AssignEvaluator.h ****     for(Index outer = 0; outer < outerSize; ++outer)
 543:Eigen/src/Core/AssignEvaluator.h ****     {
 544:Eigen/src/Core/AssignEvaluator.h ****       const Index alignedEnd = alignedStart + ((innerSize-alignedStart) & ~packetAlignedMask);
 545:Eigen/src/Core/AssignEvaluator.h ****       // do the non-vectorizable part of the assignment
 546:Eigen/src/Core/AssignEvaluator.h ****       for(Index inner = 0; inner<alignedStart ; ++inner)
 547:Eigen/src/Core/AssignEvaluator.h ****         kernel.assignCoeffByOuterInner(outer, inner);
 548:Eigen/src/Core/AssignEvaluator.h **** 
 549:Eigen/src/Core/AssignEvaluator.h ****       // do the vectorizable part of the assignment
 550:Eigen/src/Core/AssignEvaluator.h ****       for(Index inner = alignedStart; inner<alignedEnd; inner+=packetSize)
 551:Eigen/src/Core/AssignEvaluator.h ****         kernel.template assignPacketByOuterInner<dstAlignment, Unaligned, PacketType>(outer, inner)
 552:Eigen/src/Core/AssignEvaluator.h **** 
 553:Eigen/src/Core/AssignEvaluator.h ****       // do the non-vectorizable part of the assignment
 554:Eigen/src/Core/AssignEvaluator.h ****       for(Index inner = alignedEnd; inner<innerSize ; ++inner)
 555:Eigen/src/Core/AssignEvaluator.h ****         kernel.assignCoeffByOuterInner(outer, inner);
 556:Eigen/src/Core/AssignEvaluator.h **** 
 557:Eigen/src/Core/AssignEvaluator.h ****       alignedStart = numext::mini((alignedStart+alignedStep)%packetSize, innerSize);
 558:Eigen/src/Core/AssignEvaluator.h ****     }
 559:Eigen/src/Core/AssignEvaluator.h ****   }
 560:Eigen/src/Core/AssignEvaluator.h **** };
 561:Eigen/src/Core/AssignEvaluator.h **** 
 562:Eigen/src/Core/AssignEvaluator.h **** #if EIGEN_UNALIGNED_VECTORIZE
 563:Eigen/src/Core/AssignEvaluator.h **** template<typename Kernel>
 564:Eigen/src/Core/AssignEvaluator.h **** struct dense_assignment_loop<Kernel, SliceVectorizedTraversal, InnerUnrolling>
 565:Eigen/src/Core/AssignEvaluator.h **** {
 566:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 567:Eigen/src/Core/AssignEvaluator.h ****   {
 568:Eigen/src/Core/AssignEvaluator.h ****     typedef typename Kernel::DstEvaluatorType::XprType DstXprType;
 569:Eigen/src/Core/AssignEvaluator.h ****     typedef typename Kernel::PacketType PacketType;
 570:Eigen/src/Core/AssignEvaluator.h **** 
 571:Eigen/src/Core/AssignEvaluator.h ****     enum { size = DstXprType::InnerSizeAtCompileTime,
 572:Eigen/src/Core/AssignEvaluator.h ****            packetSize =unpacket_traits<PacketType>::size,
 573:Eigen/src/Core/AssignEvaluator.h ****            vectorizableSize = (size/packetSize)*packetSize };
 574:Eigen/src/Core/AssignEvaluator.h **** 
 575:Eigen/src/Core/AssignEvaluator.h ****     for(Index outer = 0; outer < kernel.outerSize(); ++outer)
 576:Eigen/src/Core/AssignEvaluator.h ****     {
 577:Eigen/src/Core/AssignEvaluator.h ****       copy_using_evaluator_innervec_InnerUnrolling<Kernel, 0, vectorizableSize, 0, 0>::run(kernel, 
 578:Eigen/src/Core/AssignEvaluator.h ****       copy_using_evaluator_DefaultTraversal_InnerUnrolling<Kernel, vectorizableSize, size>::run(ker
 579:Eigen/src/Core/AssignEvaluator.h ****     }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 70


 580:Eigen/src/Core/AssignEvaluator.h ****   }
 581:Eigen/src/Core/AssignEvaluator.h **** };
 582:Eigen/src/Core/AssignEvaluator.h **** #endif
 583:Eigen/src/Core/AssignEvaluator.h **** 
 584:Eigen/src/Core/AssignEvaluator.h **** 
 585:Eigen/src/Core/AssignEvaluator.h **** /***************************************************************************
 586:Eigen/src/Core/AssignEvaluator.h **** * Part 4 : Generic dense assignment kernel
 587:Eigen/src/Core/AssignEvaluator.h **** ***************************************************************************/
 588:Eigen/src/Core/AssignEvaluator.h **** 
 589:Eigen/src/Core/AssignEvaluator.h **** // This class generalize the assignment of a coefficient (or packet) from one dense evaluator
 590:Eigen/src/Core/AssignEvaluator.h **** // to another dense writable evaluator.
 591:Eigen/src/Core/AssignEvaluator.h **** // It is parametrized by the two evaluators, and the actual assignment functor.
 592:Eigen/src/Core/AssignEvaluator.h **** // This abstraction level permits to keep the evaluation loops as simple and as generic as possible
 593:Eigen/src/Core/AssignEvaluator.h **** // One can customize the assignment using this generic dense_assignment_kernel with different
 594:Eigen/src/Core/AssignEvaluator.h **** // functors, or by completely overloading it, by-passing a functor.
 595:Eigen/src/Core/AssignEvaluator.h **** template<typename DstEvaluatorTypeT, typename SrcEvaluatorTypeT, typename Functor, int Version = Sp
 596:Eigen/src/Core/AssignEvaluator.h **** class generic_dense_assignment_kernel
 597:Eigen/src/Core/AssignEvaluator.h **** {
 598:Eigen/src/Core/AssignEvaluator.h **** protected:
 599:Eigen/src/Core/AssignEvaluator.h ****   typedef typename DstEvaluatorTypeT::XprType DstXprType;
 600:Eigen/src/Core/AssignEvaluator.h ****   typedef typename SrcEvaluatorTypeT::XprType SrcXprType;
 601:Eigen/src/Core/AssignEvaluator.h **** public:
 602:Eigen/src/Core/AssignEvaluator.h ****   
 603:Eigen/src/Core/AssignEvaluator.h ****   typedef DstEvaluatorTypeT DstEvaluatorType;
 604:Eigen/src/Core/AssignEvaluator.h ****   typedef SrcEvaluatorTypeT SrcEvaluatorType;
 605:Eigen/src/Core/AssignEvaluator.h ****   typedef typename DstEvaluatorType::Scalar Scalar;
 606:Eigen/src/Core/AssignEvaluator.h ****   typedef copy_using_evaluator_traits<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor> AssignmentTrai
 607:Eigen/src/Core/AssignEvaluator.h ****   typedef typename AssignmentTraits::PacketType PacketType;
 608:Eigen/src/Core/AssignEvaluator.h ****   
 609:Eigen/src/Core/AssignEvaluator.h ****   
 610:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &
 611:Eigen/src/Core/AssignEvaluator.h ****     : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 612:Eigen/src/Core/AssignEvaluator.h ****   {
 613:Eigen/src/Core/AssignEvaluator.h ****     #ifdef EIGEN_DEBUG_ASSIGN
 614:Eigen/src/Core/AssignEvaluator.h ****     AssignmentTraits::debug();
 615:Eigen/src/Core/AssignEvaluator.h ****     #endif
 616:Eigen/src/Core/AssignEvaluator.h ****   }
 617:Eigen/src/Core/AssignEvaluator.h ****   
 618:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC Index size() const        { return m_dstExpr.size(); }
 619:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC Index innerSize() const   { return m_dstExpr.innerSize(); }
 620:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC Index outerSize() const   { return m_dstExpr.outerSize(); }
 621:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC Index rows() const        { return m_dstExpr.rows(); }
 622:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC Index cols() const        { return m_dstExpr.cols(); }
 623:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC Index outerStride() const { return m_dstExpr.outerStride(); }
 624:Eigen/src/Core/AssignEvaluator.h ****   
 625:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC DstEvaluatorType& dstEvaluator() { return m_dst; }
 626:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC const SrcEvaluatorType& srcEvaluator() const { return m_src; }
 627:Eigen/src/Core/AssignEvaluator.h ****   
 628:Eigen/src/Core/AssignEvaluator.h ****   /// Assign src(row,col) to dst(row,col) through the assignment functor.
 629:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 630:Eigen/src/Core/AssignEvaluator.h ****   {
 631:Eigen/src/Core/AssignEvaluator.h ****     m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 632:Eigen/src/Core/AssignEvaluator.h ****   }
 633:Eigen/src/Core/AssignEvaluator.h ****   
 634:Eigen/src/Core/AssignEvaluator.h ****   /// \sa assignCoeff(Index,Index)
 635:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 636:Eigen/src/Core/AssignEvaluator.h ****   {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 71


 637:Eigen/src/Core/AssignEvaluator.h ****     m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 638:Eigen/src/Core/AssignEvaluator.h ****   }
 639:Eigen/src/Core/AssignEvaluator.h ****   
 640:Eigen/src/Core/AssignEvaluator.h ****   /// \sa assignCoeff(Index,Index)
 641:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 642:Eigen/src/Core/AssignEvaluator.h ****   {
 643:Eigen/src/Core/AssignEvaluator.h ****     Index row = rowIndexByOuterInner(outer, inner); 
 644:Eigen/src/Core/AssignEvaluator.h ****     Index col = colIndexByOuterInner(outer, inner); 
 645:Eigen/src/Core/AssignEvaluator.h ****     assignCoeff(row, col);
 646:Eigen/src/Core/AssignEvaluator.h ****   }
 647:Eigen/src/Core/AssignEvaluator.h ****   
 648:Eigen/src/Core/AssignEvaluator.h ****   
 649:Eigen/src/Core/AssignEvaluator.h ****   template<int StoreMode, int LoadMode, typename PacketType>
 650:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignPacket(Index row, Index col)
 651:Eigen/src/Core/AssignEvaluator.h ****   {
 652:Eigen/src/Core/AssignEvaluator.h ****     m_functor.template assignPacket<StoreMode>(&m_dst.coeffRef(row,col), m_src.template packet<Load
 653:Eigen/src/Core/AssignEvaluator.h ****   }
 654:Eigen/src/Core/AssignEvaluator.h ****   
 655:Eigen/src/Core/AssignEvaluator.h ****   template<int StoreMode, int LoadMode, typename PacketType>
 656:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignPacket(Index index)
 657:Eigen/src/Core/AssignEvaluator.h ****   {
 658:Eigen/src/Core/AssignEvaluator.h ****     m_functor.template assignPacket<StoreMode>(&m_dst.coeffRef(index), m_src.template packet<LoadMo
 659:Eigen/src/Core/AssignEvaluator.h ****   }
 660:Eigen/src/Core/AssignEvaluator.h ****   
 661:Eigen/src/Core/AssignEvaluator.h ****   template<int StoreMode, int LoadMode, typename PacketType>
 662:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignPacketByOuterInner(Index outer, Index inner)
 663:Eigen/src/Core/AssignEvaluator.h ****   {
 664:Eigen/src/Core/AssignEvaluator.h ****     Index row = rowIndexByOuterInner(outer, inner); 
 665:Eigen/src/Core/AssignEvaluator.h ****     Index col = colIndexByOuterInner(outer, inner);
 666:Eigen/src/Core/AssignEvaluator.h ****     assignPacket<StoreMode,LoadMode,PacketType>(row, col);
 667:Eigen/src/Core/AssignEvaluator.h ****   }
 668:Eigen/src/Core/AssignEvaluator.h ****   
 669:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 670:Eigen/src/Core/AssignEvaluator.h ****   {
 671:Eigen/src/Core/AssignEvaluator.h ****     typedef typename DstEvaluatorType::ExpressionTraits Traits;
 672:Eigen/src/Core/AssignEvaluator.h ****     return int(Traits::RowsAtCompileTime) == 1 ? 0
 673:Eigen/src/Core/AssignEvaluator.h ****       : int(Traits::ColsAtCompileTime) == 1 ? inner
 674:Eigen/src/Core/AssignEvaluator.h ****       : int(DstEvaluatorType::Flags)&RowMajorBit ? outer
 675:Eigen/src/Core/AssignEvaluator.h ****       : inner;
 676:Eigen/src/Core/AssignEvaluator.h ****   }
 677:Eigen/src/Core/AssignEvaluator.h **** 
 678:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 679:Eigen/src/Core/AssignEvaluator.h ****   {
 680:Eigen/src/Core/AssignEvaluator.h ****     typedef typename DstEvaluatorType::ExpressionTraits Traits;
 681:Eigen/src/Core/AssignEvaluator.h ****     return int(Traits::ColsAtCompileTime) == 1 ? 0
 682:Eigen/src/Core/AssignEvaluator.h ****       : int(Traits::RowsAtCompileTime) == 1 ? inner
 683:Eigen/src/Core/AssignEvaluator.h ****       : int(DstEvaluatorType::Flags)&RowMajorBit ? inner
 684:Eigen/src/Core/AssignEvaluator.h ****       : outer;
 685:Eigen/src/Core/AssignEvaluator.h ****   }
 686:Eigen/src/Core/AssignEvaluator.h **** 
 687:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC const Scalar* dstDataPtr() const
 688:Eigen/src/Core/AssignEvaluator.h ****   {
 689:Eigen/src/Core/AssignEvaluator.h ****     return m_dstExpr.data();
 690:Eigen/src/Core/AssignEvaluator.h ****   }
 691:Eigen/src/Core/AssignEvaluator.h ****   
 692:Eigen/src/Core/AssignEvaluator.h **** protected:
 693:Eigen/src/Core/AssignEvaluator.h ****   DstEvaluatorType& m_dst;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 72


 694:Eigen/src/Core/AssignEvaluator.h ****   const SrcEvaluatorType& m_src;
 695:Eigen/src/Core/AssignEvaluator.h ****   const Functor &m_functor;
 696:Eigen/src/Core/AssignEvaluator.h ****   // TODO find a way to avoid the needs of the original expression
 697:Eigen/src/Core/AssignEvaluator.h ****   DstXprType& m_dstExpr;
 698:Eigen/src/Core/AssignEvaluator.h **** };
 699:Eigen/src/Core/AssignEvaluator.h **** 
 700:Eigen/src/Core/AssignEvaluator.h **** /***************************************************************************
 701:Eigen/src/Core/AssignEvaluator.h **** * Part 5 : Entry point for dense rectangular assignment
 702:Eigen/src/Core/AssignEvaluator.h **** ***************************************************************************/
 703:Eigen/src/Core/AssignEvaluator.h **** 
 704:Eigen/src/Core/AssignEvaluator.h **** template<typename DstXprType,typename SrcXprType, typename Functor>
 705:Eigen/src/Core/AssignEvaluator.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 706:Eigen/src/Core/AssignEvaluator.h **** void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 707:Eigen/src/Core/AssignEvaluator.h **** {
 708:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_ONLY_USED_FOR_DEBUG(dst);
 709:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_ONLY_USED_FOR_DEBUG(src);
 710:Eigen/src/Core/AssignEvaluator.h ****   eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 711:Eigen/src/Core/AssignEvaluator.h **** }
 712:Eigen/src/Core/AssignEvaluator.h **** 
 713:Eigen/src/Core/AssignEvaluator.h **** template<typename DstXprType,typename SrcXprType, typename T1, typename T2>
 714:Eigen/src/Core/AssignEvaluator.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 715:Eigen/src/Core/AssignEvaluator.h **** void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*
 716:Eigen/src/Core/AssignEvaluator.h **** {
 717:Eigen/src/Core/AssignEvaluator.h ****   Index dstRows = src.rows();
 718:Eigen/src/Core/AssignEvaluator.h ****   Index dstCols = src.cols();
 719:Eigen/src/Core/AssignEvaluator.h ****   if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 720:Eigen/src/Core/AssignEvaluator.h ****     dst.resize(dstRows, dstCols);
 721:Eigen/src/Core/AssignEvaluator.h ****   eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 722:Eigen/src/Core/AssignEvaluator.h **** }
 723:Eigen/src/Core/AssignEvaluator.h **** 
 724:Eigen/src/Core/AssignEvaluator.h **** template<typename DstXprType, typename SrcXprType, typename Functor>
 725:Eigen/src/Core/AssignEvaluator.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXpr
 726:Eigen/src/Core/AssignEvaluator.h **** {
 727:Eigen/src/Core/AssignEvaluator.h ****   typedef evaluator<DstXprType> DstEvaluatorType;
 728:Eigen/src/Core/AssignEvaluator.h ****   typedef evaluator<SrcXprType> SrcEvaluatorType;
 729:Eigen/src/Core/AssignEvaluator.h **** 
 730:Eigen/src/Core/AssignEvaluator.h ****   SrcEvaluatorType srcEvaluator(src);
 731:Eigen/src/Core/AssignEvaluator.h **** 
 732:Eigen/src/Core/AssignEvaluator.h ****   // NOTE To properly handle A = (A*A.transpose())/s with A rectangular,
 733:Eigen/src/Core/AssignEvaluator.h ****   // we need to resize the destination after the source evaluator has been created.
 734:Eigen/src/Core/AssignEvaluator.h ****   resize_if_allowed(dst, src, func);
 735:Eigen/src/Core/AssignEvaluator.h **** 
 736:Eigen/src/Core/AssignEvaluator.h ****   DstEvaluatorType dstEvaluator(dst);
 737:Eigen/src/Core/AssignEvaluator.h ****     
 738:Eigen/src/Core/AssignEvaluator.h ****   typedef generic_dense_assignment_kernel<DstEvaluatorType,SrcEvaluatorType,Functor> Kernel;
 739:Eigen/src/Core/AssignEvaluator.h ****   Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 740:Eigen/src/Core/AssignEvaluator.h **** 
 741:Eigen/src/Core/AssignEvaluator.h ****   dense_assignment_loop<Kernel>::run(kernel);
 742:Eigen/src/Core/AssignEvaluator.h **** }
 743:Eigen/src/Core/AssignEvaluator.h **** 
 744:Eigen/src/Core/AssignEvaluator.h **** template<typename DstXprType, typename SrcXprType>
 745:Eigen/src/Core/AssignEvaluator.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXpr
 746:Eigen/src/Core/AssignEvaluator.h **** {
 747:Eigen/src/Core/AssignEvaluator.h ****   call_dense_assignment_loop(dst, src, internal::assign_op<typename DstXprType::Scalar,typename Src
 748:Eigen/src/Core/AssignEvaluator.h **** }
 749:Eigen/src/Core/AssignEvaluator.h **** 
 750:Eigen/src/Core/AssignEvaluator.h **** /***************************************************************************
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 73


 751:Eigen/src/Core/AssignEvaluator.h **** * Part 6 : Generic assignment
 752:Eigen/src/Core/AssignEvaluator.h **** ***************************************************************************/
 753:Eigen/src/Core/AssignEvaluator.h **** 
 754:Eigen/src/Core/AssignEvaluator.h **** // Based on the respective shapes of the destination and source,
 755:Eigen/src/Core/AssignEvaluator.h **** // the class AssignmentKind determine the kind of assignment mechanism.
 756:Eigen/src/Core/AssignEvaluator.h **** // AssignmentKind must define a Kind typedef.
 757:Eigen/src/Core/AssignEvaluator.h **** template<typename DstShape, typename SrcShape> struct AssignmentKind;
 758:Eigen/src/Core/AssignEvaluator.h **** 
 759:Eigen/src/Core/AssignEvaluator.h **** // Assignement kind defined in this file:
 760:Eigen/src/Core/AssignEvaluator.h **** struct Dense2Dense {};
 761:Eigen/src/Core/AssignEvaluator.h **** struct EigenBase2EigenBase {};
 762:Eigen/src/Core/AssignEvaluator.h **** 
 763:Eigen/src/Core/AssignEvaluator.h **** template<typename,typename> struct AssignmentKind { typedef EigenBase2EigenBase Kind; };
 764:Eigen/src/Core/AssignEvaluator.h **** template<> struct AssignmentKind<DenseShape,DenseShape> { typedef Dense2Dense Kind; };
 765:Eigen/src/Core/AssignEvaluator.h ****     
 766:Eigen/src/Core/AssignEvaluator.h **** // This is the main assignment class
 767:Eigen/src/Core/AssignEvaluator.h **** template< typename DstXprType, typename SrcXprType, typename Functor,
 768:Eigen/src/Core/AssignEvaluator.h ****           typename Kind = typename AssignmentKind< typename evaluator_traits<DstXprType>::Shape , t
 769:Eigen/src/Core/AssignEvaluator.h ****           typename EnableIf = void>
 770:Eigen/src/Core/AssignEvaluator.h **** struct Assignment;
 771:Eigen/src/Core/AssignEvaluator.h **** 
 772:Eigen/src/Core/AssignEvaluator.h **** 
 773:Eigen/src/Core/AssignEvaluator.h **** // The only purpose of this call_assignment() function is to deal with noalias() / "assume-aliasing
 774:Eigen/src/Core/AssignEvaluator.h **** // Indeed, I (Gael) think that this concept of "assume-aliasing" was a mistake, and it makes thing 
 775:Eigen/src/Core/AssignEvaluator.h **** // So this intermediate function removes everything related to "assume-aliasing" such that Assignme
 776:Eigen/src/Core/AssignEvaluator.h **** // does not has to bother about these annoying details.
 777:Eigen/src/Core/AssignEvaluator.h **** 
 778:Eigen/src/Core/AssignEvaluator.h **** template<typename Dst, typename Src>
 779:Eigen/src/Core/AssignEvaluator.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 780:Eigen/src/Core/AssignEvaluator.h **** void call_assignment(Dst& dst, const Src& src)
 781:Eigen/src/Core/AssignEvaluator.h **** {
 782:Eigen/src/Core/AssignEvaluator.h ****   call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 783:Eigen/src/Core/AssignEvaluator.h **** }
 784:Eigen/src/Core/AssignEvaluator.h **** template<typename Dst, typename Src>
 785:Eigen/src/Core/AssignEvaluator.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 786:Eigen/src/Core/AssignEvaluator.h **** void call_assignment(const Dst& dst, const Src& src)
 787:Eigen/src/Core/AssignEvaluator.h **** {
 788:Eigen/src/Core/AssignEvaluator.h ****   call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 789:Eigen/src/Core/AssignEvaluator.h **** }
 790:Eigen/src/Core/AssignEvaluator.h ****                      
 791:Eigen/src/Core/AssignEvaluator.h **** // Deal with "assume-aliasing"
 792:Eigen/src/Core/AssignEvaluator.h **** template<typename Dst, typename Src, typename Func>
 793:Eigen/src/Core/AssignEvaluator.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 794:Eigen/src/Core/AssignEvaluator.h **** void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assu
 914              		.loc 10 794 6 is_stmt 1 view -0
 915              		.cfi_startproc
 916              		@ args = 0, pretend = 0, frame = 296
 917              		@ frame_needed = 0, uses_anonymous_args = 0
 918              		.loc 10 794 6 is_stmt 0 view .LVU237
 919 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 920              		.save {r4, r5, r6, r7, lr}
 921              		.cfi_def_cfa_offset 20
 922              		.cfi_offset 4, -20
 923              		.cfi_offset 5, -16
 924              		.cfi_offset 6, -12
 925              		.cfi_offset 7, -8
 926              		.cfi_offset 14, -4
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 74


 927              		.pad #300
 928 0002 CBB0     		sub	sp, sp, #300
 929              		.cfi_def_cfa_offset 320
 930 0004 0546     		mov	r5, r0
 931 0006 1646     		mov	r6, r2
 932              	.LVL51:
 933              	.LBB2634:
 934              	.LBI2634:
 935              		.file 11 "Eigen/src/Core/Matrix.h"
   1:Eigen/src/Core/Matrix.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/Matrix.h **** // for linear algebra.
   3:Eigen/src/Core/Matrix.h **** //
   4:Eigen/src/Core/Matrix.h **** // Copyright (C) 2006-2010 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:Eigen/src/Core/Matrix.h **** // Copyright (C) 2008-2009 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:Eigen/src/Core/Matrix.h **** //
   7:Eigen/src/Core/Matrix.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/Matrix.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/Matrix.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:Eigen/src/Core/Matrix.h **** 
  11:Eigen/src/Core/Matrix.h **** #ifndef EIGEN_MATRIX_H
  12:Eigen/src/Core/Matrix.h **** #define EIGEN_MATRIX_H
  13:Eigen/src/Core/Matrix.h **** 
  14:Eigen/src/Core/Matrix.h **** namespace Eigen {
  15:Eigen/src/Core/Matrix.h **** 
  16:Eigen/src/Core/Matrix.h **** namespace internal {
  17:Eigen/src/Core/Matrix.h **** template<typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
  18:Eigen/src/Core/Matrix.h **** struct traits<Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >
  19:Eigen/src/Core/Matrix.h **** {
  20:Eigen/src/Core/Matrix.h **** private:
  21:Eigen/src/Core/Matrix.h ****   enum { size = internal::size_at_compile_time<_Rows,_Cols>::ret };
  22:Eigen/src/Core/Matrix.h ****   typedef typename find_best_packet<_Scalar,size>::type PacketScalar;
  23:Eigen/src/Core/Matrix.h ****   enum {
  24:Eigen/src/Core/Matrix.h ****       row_major_bit = _Options&RowMajor ? RowMajorBit : 0,
  25:Eigen/src/Core/Matrix.h ****       is_dynamic_size_storage = _MaxRows==Dynamic || _MaxCols==Dynamic,
  26:Eigen/src/Core/Matrix.h ****       max_size = is_dynamic_size_storage ? Dynamic : _MaxRows*_MaxCols,
  27:Eigen/src/Core/Matrix.h ****       default_alignment = compute_default_alignment<_Scalar,max_size>::value,
  28:Eigen/src/Core/Matrix.h ****       actual_alignment = ((_Options&DontAlign)==0) ? default_alignment : 0,
  29:Eigen/src/Core/Matrix.h ****       required_alignment = unpacket_traits<PacketScalar>::alignment,
  30:Eigen/src/Core/Matrix.h ****       packet_access_bit = (packet_traits<_Scalar>::Vectorizable && (EIGEN_UNALIGNED_VECTORIZE || (a
  31:Eigen/src/Core/Matrix.h ****     };
  32:Eigen/src/Core/Matrix.h ****     
  33:Eigen/src/Core/Matrix.h **** public:
  34:Eigen/src/Core/Matrix.h ****   typedef _Scalar Scalar;
  35:Eigen/src/Core/Matrix.h ****   typedef Dense StorageKind;
  36:Eigen/src/Core/Matrix.h ****   typedef Eigen::Index StorageIndex;
  37:Eigen/src/Core/Matrix.h ****   typedef MatrixXpr XprKind;
  38:Eigen/src/Core/Matrix.h ****   enum {
  39:Eigen/src/Core/Matrix.h ****     RowsAtCompileTime = _Rows,
  40:Eigen/src/Core/Matrix.h ****     ColsAtCompileTime = _Cols,
  41:Eigen/src/Core/Matrix.h ****     MaxRowsAtCompileTime = _MaxRows,
  42:Eigen/src/Core/Matrix.h ****     MaxColsAtCompileTime = _MaxCols,
  43:Eigen/src/Core/Matrix.h ****     Flags = compute_matrix_flags<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::ret,
  44:Eigen/src/Core/Matrix.h ****     Options = _Options,
  45:Eigen/src/Core/Matrix.h ****     InnerStrideAtCompileTime = 1,
  46:Eigen/src/Core/Matrix.h ****     OuterStrideAtCompileTime = (Options&RowMajor) ? ColsAtCompileTime : RowsAtCompileTime,
  47:Eigen/src/Core/Matrix.h ****     
  48:Eigen/src/Core/Matrix.h ****     // FIXME, the following flag in only used to define NeedsToAlign in PlainObjectBase
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 75


  49:Eigen/src/Core/Matrix.h ****     EvaluatorFlags = LinearAccessBit | DirectAccessBit | packet_access_bit | row_major_bit,
  50:Eigen/src/Core/Matrix.h ****     Alignment = actual_alignment
  51:Eigen/src/Core/Matrix.h ****   };
  52:Eigen/src/Core/Matrix.h **** };
  53:Eigen/src/Core/Matrix.h **** }
  54:Eigen/src/Core/Matrix.h **** 
  55:Eigen/src/Core/Matrix.h **** /** \class Matrix
  56:Eigen/src/Core/Matrix.h ****   * \ingroup Core_Module
  57:Eigen/src/Core/Matrix.h ****   *
  58:Eigen/src/Core/Matrix.h ****   * \brief The matrix class, also used for vectors and row-vectors
  59:Eigen/src/Core/Matrix.h ****   *
  60:Eigen/src/Core/Matrix.h ****   * The %Matrix class is the work-horse for all \em dense (\ref dense "note") matrices and vectors 
  61:Eigen/src/Core/Matrix.h ****   * Vectors are matrices with one column, and row-vectors are matrices with one row.
  62:Eigen/src/Core/Matrix.h ****   *
  63:Eigen/src/Core/Matrix.h ****   * The %Matrix class encompasses \em both fixed-size and dynamic-size objects (\ref fixedsize "not
  64:Eigen/src/Core/Matrix.h ****   *
  65:Eigen/src/Core/Matrix.h ****   * The first three template parameters are required:
  66:Eigen/src/Core/Matrix.h ****   * \tparam _Scalar Numeric type, e.g. float, double, int or std::complex<float>.
  67:Eigen/src/Core/Matrix.h ****   *                 User defined scalar types are supported as well (see \ref user_defined_scalars 
  68:Eigen/src/Core/Matrix.h ****   * \tparam _Rows Number of rows, or \b Dynamic
  69:Eigen/src/Core/Matrix.h ****   * \tparam _Cols Number of columns, or \b Dynamic
  70:Eigen/src/Core/Matrix.h ****   *
  71:Eigen/src/Core/Matrix.h ****   * The remaining template parameters are optional -- in most cases you don't have to worry about t
  72:Eigen/src/Core/Matrix.h ****   * \tparam _Options A combination of either \b #RowMajor or \b #ColMajor, and of either
  73:Eigen/src/Core/Matrix.h ****   *                 \b #AutoAlign or \b #DontAlign.
  74:Eigen/src/Core/Matrix.h ****   *                 The former controls \ref TopicStorageOrders "storage order", and defaults to co
  75:Eigen/src/Core/Matrix.h ****   *                 for vectorization. It defaults to aligning matrices except for fixed sizes that
  76:Eigen/src/Core/Matrix.h ****   * \tparam _MaxRows Maximum number of rows. Defaults to \a _Rows (\ref maxrows "note").
  77:Eigen/src/Core/Matrix.h ****   * \tparam _MaxCols Maximum number of columns. Defaults to \a _Cols (\ref maxrows "note").
  78:Eigen/src/Core/Matrix.h ****   *
  79:Eigen/src/Core/Matrix.h ****   * Eigen provides a number of typedefs covering the usual cases. Here are some examples:
  80:Eigen/src/Core/Matrix.h ****   *
  81:Eigen/src/Core/Matrix.h ****   * \li \c Matrix2d is a 2x2 square matrix of doubles (\c Matrix<double, 2, 2>)
  82:Eigen/src/Core/Matrix.h ****   * \li \c Vector4f is a vector of 4 floats (\c Matrix<float, 4, 1>)
  83:Eigen/src/Core/Matrix.h ****   * \li \c RowVector3i is a row-vector of 3 ints (\c Matrix<int, 1, 3>)
  84:Eigen/src/Core/Matrix.h ****   *
  85:Eigen/src/Core/Matrix.h ****   * \li \c MatrixXf is a dynamic-size matrix of floats (\c Matrix<float, Dynamic, Dynamic>)
  86:Eigen/src/Core/Matrix.h ****   * \li \c VectorXf is a dynamic-size vector of floats (\c Matrix<float, Dynamic, 1>)
  87:Eigen/src/Core/Matrix.h ****   *
  88:Eigen/src/Core/Matrix.h ****   * \li \c Matrix2Xf is a partially fixed-size (dynamic-size) matrix of floats (\c Matrix<float, 2,
  89:Eigen/src/Core/Matrix.h ****   * \li \c MatrixX3d is a partially dynamic-size (fixed-size) matrix of double (\c Matrix<double, D
  90:Eigen/src/Core/Matrix.h ****   *
  91:Eigen/src/Core/Matrix.h ****   * See \link matrixtypedefs this page \endlink for a complete list of predefined \em %Matrix and \
  92:Eigen/src/Core/Matrix.h ****   *
  93:Eigen/src/Core/Matrix.h ****   * You can access elements of vectors and matrices using normal subscripting:
  94:Eigen/src/Core/Matrix.h ****   *
  95:Eigen/src/Core/Matrix.h ****   * \code
  96:Eigen/src/Core/Matrix.h ****   * Eigen::VectorXd v(10);
  97:Eigen/src/Core/Matrix.h ****   * v[0] = 0.1;
  98:Eigen/src/Core/Matrix.h ****   * v[1] = 0.2;
  99:Eigen/src/Core/Matrix.h ****   * v(0) = 0.3;
 100:Eigen/src/Core/Matrix.h ****   * v(1) = 0.4;
 101:Eigen/src/Core/Matrix.h ****   *
 102:Eigen/src/Core/Matrix.h ****   * Eigen::MatrixXi m(10, 10);
 103:Eigen/src/Core/Matrix.h ****   * m(0, 1) = 1;
 104:Eigen/src/Core/Matrix.h ****   * m(0, 2) = 2;
 105:Eigen/src/Core/Matrix.h ****   * m(0, 3) = 3;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 76


 106:Eigen/src/Core/Matrix.h ****   * \endcode
 107:Eigen/src/Core/Matrix.h ****   *
 108:Eigen/src/Core/Matrix.h ****   * This class can be extended with the help of the plugin mechanism described on the page
 109:Eigen/src/Core/Matrix.h ****   * \ref TopicCustomizing_Plugins by defining the preprocessor symbol \c EIGEN_MATRIX_PLUGIN.
 110:Eigen/src/Core/Matrix.h ****   *
 111:Eigen/src/Core/Matrix.h ****   * <i><b>Some notes:</b></i>
 112:Eigen/src/Core/Matrix.h ****   *
 113:Eigen/src/Core/Matrix.h ****   * <dl>
 114:Eigen/src/Core/Matrix.h ****   * <dt><b>\anchor dense Dense versus sparse:</b></dt>
 115:Eigen/src/Core/Matrix.h ****   * <dd>This %Matrix class handles dense, not sparse matrices and vectors. For sparse matrices and 
 116:Eigen/src/Core/Matrix.h ****   *
 117:Eigen/src/Core/Matrix.h ****   * Dense matrices and vectors are plain usual arrays of coefficients. All the coefficients are sto
 118:Eigen/src/Core/Matrix.h ****   * This is unlike Sparse matrices and vectors where the coefficients are stored as a list of nonze
 119:Eigen/src/Core/Matrix.h ****   *
 120:Eigen/src/Core/Matrix.h ****   * <dt><b>\anchor fixedsize Fixed-size versus dynamic-size:</b></dt>
 121:Eigen/src/Core/Matrix.h ****   * <dd>Fixed-size means that the numbers of rows and columns are known are compile-time. In this c
 122:Eigen/src/Core/Matrix.h ****   * of coefficients as a fixed-size array, as a class member. This makes sense for very small matri
 123:Eigen/src/Core/Matrix.h ****   * to 16x16. Larger matrices should be declared as dynamic-size even if one happens to know their 
 124:Eigen/src/Core/Matrix.h ****   *
 125:Eigen/src/Core/Matrix.h ****   * Dynamic-size means that the numbers of rows or columns are not necessarily known at compile-tim
 126:Eigen/src/Core/Matrix.h ****   * variables, and the array of coefficients is allocated dynamically on the heap.
 127:Eigen/src/Core/Matrix.h ****   *
 128:Eigen/src/Core/Matrix.h ****   * Note that \em dense matrices, be they Fixed-size or Dynamic-size, <em>do not</em> expand dynami
 129:Eigen/src/Core/Matrix.h ****   * If you want this behavior, see the Sparse module.</dd>
 130:Eigen/src/Core/Matrix.h ****   *
 131:Eigen/src/Core/Matrix.h ****   * <dt><b>\anchor maxrows _MaxRows and _MaxCols:</b></dt>
 132:Eigen/src/Core/Matrix.h ****   * <dd>In most cases, one just leaves these parameters to the default values.
 133:Eigen/src/Core/Matrix.h ****   * These parameters mean the maximum size of rows and columns that the matrix may have. They are u
 134:Eigen/src/Core/Matrix.h ****   * when the exact numbers of rows and columns are not known are compile-time, but it is known at c
 135:Eigen/src/Core/Matrix.h ****   * exceed a certain value. This happens when taking dynamic-size blocks inside fixed-size matrices
 136:Eigen/src/Core/Matrix.h ****   * are the dimensions of the original matrix, while _Rows and _Cols are Dynamic.</dd>
 137:Eigen/src/Core/Matrix.h ****   * </dl>
 138:Eigen/src/Core/Matrix.h ****   *
 139:Eigen/src/Core/Matrix.h ****   * <i><b>ABI and storage layout</b></i>
 140:Eigen/src/Core/Matrix.h ****   *
 141:Eigen/src/Core/Matrix.h ****   * The table below summarizes the ABI of some possible Matrix instances which is fixed thorough th
 142:Eigen/src/Core/Matrix.h ****   * <table  class="manual">
 143:Eigen/src/Core/Matrix.h ****   * <tr><th>Matrix type</th><th>Equivalent C structure</th></tr>
 144:Eigen/src/Core/Matrix.h ****   * <tr><td>\code Matrix<T,Dynamic,Dynamic> \endcode</td><td>\code
 145:Eigen/src/Core/Matrix.h ****   * struct {
 146:Eigen/src/Core/Matrix.h ****   *   T *data;                  // with (size_t(data)%EIGEN_MAX_ALIGN_BYTES)==0
 147:Eigen/src/Core/Matrix.h ****   *   Eigen::Index rows, cols;
 148:Eigen/src/Core/Matrix.h ****   *  };
 149:Eigen/src/Core/Matrix.h ****   * \endcode</td></tr>
 150:Eigen/src/Core/Matrix.h ****   * <tr class="alt"><td>\code
 151:Eigen/src/Core/Matrix.h ****   * Matrix<T,Dynamic,1>
 152:Eigen/src/Core/Matrix.h ****   * Matrix<T,1,Dynamic> \endcode</td><td>\code
 153:Eigen/src/Core/Matrix.h ****   * struct {
 154:Eigen/src/Core/Matrix.h ****   *   T *data;                  // with (size_t(data)%EIGEN_MAX_ALIGN_BYTES)==0
 155:Eigen/src/Core/Matrix.h ****   *   Eigen::Index size;
 156:Eigen/src/Core/Matrix.h ****   *  };
 157:Eigen/src/Core/Matrix.h ****   * \endcode</td></tr>
 158:Eigen/src/Core/Matrix.h ****   * <tr><td>\code Matrix<T,Rows,Cols> \endcode</td><td>\code
 159:Eigen/src/Core/Matrix.h ****   * struct {
 160:Eigen/src/Core/Matrix.h ****   *   T data[Rows*Cols];        // with (size_t(data)%A(Rows*Cols*sizeof(T)))==0
 161:Eigen/src/Core/Matrix.h ****   *  };
 162:Eigen/src/Core/Matrix.h ****   * \endcode</td></tr>
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 77


 163:Eigen/src/Core/Matrix.h ****   * <tr class="alt"><td>\code Matrix<T,Dynamic,Dynamic,0,MaxRows,MaxCols> \endcode</td><td>\code
 164:Eigen/src/Core/Matrix.h ****   * struct {
 165:Eigen/src/Core/Matrix.h ****   *   T data[MaxRows*MaxCols];  // with (size_t(data)%A(MaxRows*MaxCols*sizeof(T)))==0
 166:Eigen/src/Core/Matrix.h ****   *   Eigen::Index rows, cols;
 167:Eigen/src/Core/Matrix.h ****   *  };
 168:Eigen/src/Core/Matrix.h ****   * \endcode</td></tr>
 169:Eigen/src/Core/Matrix.h ****   * </table>
 170:Eigen/src/Core/Matrix.h ****   * Note that in this table Rows, Cols, MaxRows and MaxCols are all positive integers. A(S) is defi
 171:Eigen/src/Core/Matrix.h ****   * smaller to EIGEN_MAX_STATIC_ALIGN_BYTES.
 172:Eigen/src/Core/Matrix.h ****   *
 173:Eigen/src/Core/Matrix.h ****   * \see MatrixBase for the majority of the API methods for matrices, \ref TopicClassHierarchy,
 174:Eigen/src/Core/Matrix.h ****   * \ref TopicStorageOrders
 175:Eigen/src/Core/Matrix.h ****   */
 176:Eigen/src/Core/Matrix.h **** 
 177:Eigen/src/Core/Matrix.h **** template<typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
 178:Eigen/src/Core/Matrix.h **** class Matrix
 179:Eigen/src/Core/Matrix.h ****   : public PlainObjectBase<Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >
 180:Eigen/src/Core/Matrix.h **** {
 181:Eigen/src/Core/Matrix.h ****   public:
 182:Eigen/src/Core/Matrix.h **** 
 183:Eigen/src/Core/Matrix.h ****     /** \brief Base class typedef.
 184:Eigen/src/Core/Matrix.h ****       * \sa PlainObjectBase
 185:Eigen/src/Core/Matrix.h ****       */
 186:Eigen/src/Core/Matrix.h ****     typedef PlainObjectBase<Matrix> Base;
 187:Eigen/src/Core/Matrix.h **** 
 188:Eigen/src/Core/Matrix.h ****     enum { Options = _Options };
 189:Eigen/src/Core/Matrix.h **** 
 190:Eigen/src/Core/Matrix.h ****     EIGEN_DENSE_PUBLIC_INTERFACE(Matrix)
 191:Eigen/src/Core/Matrix.h **** 
 192:Eigen/src/Core/Matrix.h ****     typedef typename Base::PlainObject PlainObject;
 193:Eigen/src/Core/Matrix.h **** 
 194:Eigen/src/Core/Matrix.h ****     using Base::base;
 195:Eigen/src/Core/Matrix.h ****     using Base::coeffRef;
 196:Eigen/src/Core/Matrix.h **** 
 197:Eigen/src/Core/Matrix.h ****     /**
 198:Eigen/src/Core/Matrix.h ****       * \brief Assigns matrices to each other.
 199:Eigen/src/Core/Matrix.h ****       *
 200:Eigen/src/Core/Matrix.h ****       * \note This is a special case of the templated operator=. Its purpose is
 201:Eigen/src/Core/Matrix.h ****       * to prevent a default operator= from hiding the templated operator=.
 202:Eigen/src/Core/Matrix.h ****       *
 203:Eigen/src/Core/Matrix.h ****       * \callgraph
 204:Eigen/src/Core/Matrix.h ****       */
 205:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 206:Eigen/src/Core/Matrix.h ****     EIGEN_STRONG_INLINE Matrix& operator=(const Matrix& other)
 207:Eigen/src/Core/Matrix.h ****     {
 208:Eigen/src/Core/Matrix.h ****       return Base::_set(other);
 209:Eigen/src/Core/Matrix.h ****     }
 210:Eigen/src/Core/Matrix.h **** 
 211:Eigen/src/Core/Matrix.h ****     /** \internal
 212:Eigen/src/Core/Matrix.h ****       * \brief Copies the value of the expression \a other into \c *this with automatic resizing.
 213:Eigen/src/Core/Matrix.h ****       *
 214:Eigen/src/Core/Matrix.h ****       * *this might be resized to match the dimensions of \a other. If *this was a null matrix (not
 215:Eigen/src/Core/Matrix.h ****       * it will be initialized.
 216:Eigen/src/Core/Matrix.h ****       *
 217:Eigen/src/Core/Matrix.h ****       * Note that copying a row-vector into a vector (and conversely) is allowed.
 218:Eigen/src/Core/Matrix.h ****       * The resizing, if any, is then done in the appropriate way so that row-vectors
 219:Eigen/src/Core/Matrix.h ****       * remain row-vectors and vectors remain vectors.
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 78


 220:Eigen/src/Core/Matrix.h ****       */
 221:Eigen/src/Core/Matrix.h ****     template<typename OtherDerived>
 222:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 223:Eigen/src/Core/Matrix.h ****     EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 224:Eigen/src/Core/Matrix.h ****     {
 225:Eigen/src/Core/Matrix.h ****       return Base::_set(other);
 226:Eigen/src/Core/Matrix.h ****     }
 227:Eigen/src/Core/Matrix.h **** 
 228:Eigen/src/Core/Matrix.h ****     /* Here, doxygen failed to copy the brief information when using \copydoc */
 229:Eigen/src/Core/Matrix.h **** 
 230:Eigen/src/Core/Matrix.h ****     /**
 231:Eigen/src/Core/Matrix.h ****       * \brief Copies the generic expression \a other into *this.
 232:Eigen/src/Core/Matrix.h ****       * \copydetails DenseBase::operator=(const EigenBase<OtherDerived> &other)
 233:Eigen/src/Core/Matrix.h ****       */
 234:Eigen/src/Core/Matrix.h ****     template<typename OtherDerived>
 235:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 236:Eigen/src/Core/Matrix.h ****     EIGEN_STRONG_INLINE Matrix& operator=(const EigenBase<OtherDerived> &other)
 237:Eigen/src/Core/Matrix.h ****     {
 238:Eigen/src/Core/Matrix.h ****       return Base::operator=(other);
 239:Eigen/src/Core/Matrix.h ****     }
 240:Eigen/src/Core/Matrix.h **** 
 241:Eigen/src/Core/Matrix.h ****     template<typename OtherDerived>
 242:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 243:Eigen/src/Core/Matrix.h ****     EIGEN_STRONG_INLINE Matrix& operator=(const ReturnByValue<OtherDerived>& func)
 244:Eigen/src/Core/Matrix.h ****     {
 245:Eigen/src/Core/Matrix.h ****       return Base::operator=(func);
 246:Eigen/src/Core/Matrix.h ****     }
 247:Eigen/src/Core/Matrix.h **** 
 248:Eigen/src/Core/Matrix.h ****     /** \brief Default constructor.
 249:Eigen/src/Core/Matrix.h ****       *
 250:Eigen/src/Core/Matrix.h ****       * For fixed-size matrices, does nothing.
 251:Eigen/src/Core/Matrix.h ****       *
 252:Eigen/src/Core/Matrix.h ****       * For dynamic-size matrices, creates an empty matrix of size 0. Does not allocate any array. 
 253:Eigen/src/Core/Matrix.h ****       * is called a null matrix. This constructor is the unique way to create null matrices: resizi
 254:Eigen/src/Core/Matrix.h ****       * a matrix to 0 is not supported.
 255:Eigen/src/Core/Matrix.h ****       *
 256:Eigen/src/Core/Matrix.h ****       * \sa resize(Index,Index)
 257:Eigen/src/Core/Matrix.h ****       */
 258:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 259:Eigen/src/Core/Matrix.h ****     EIGEN_STRONG_INLINE Matrix() : Base()
 260:Eigen/src/Core/Matrix.h ****     {
 261:Eigen/src/Core/Matrix.h ****       Base::_check_template_params();
 262:Eigen/src/Core/Matrix.h ****       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
 263:Eigen/src/Core/Matrix.h ****     }
 264:Eigen/src/Core/Matrix.h **** 
 265:Eigen/src/Core/Matrix.h ****     // FIXME is it still needed
 266:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 267:Eigen/src/Core/Matrix.h ****     explicit Matrix(internal::constructor_without_unaligned_array_assert)
 268:Eigen/src/Core/Matrix.h ****       : Base(internal::constructor_without_unaligned_array_assert())
 269:Eigen/src/Core/Matrix.h ****     { Base::_check_template_params(); EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED }
 270:Eigen/src/Core/Matrix.h **** 
 271:Eigen/src/Core/Matrix.h **** #if EIGEN_HAS_RVALUE_REFERENCES
 272:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 273:Eigen/src/Core/Matrix.h ****     Matrix(Matrix&& other) EIGEN_NOEXCEPT_IF(std::is_nothrow_move_constructible<Scalar>::value)
 274:Eigen/src/Core/Matrix.h ****       : Base(std::move(other))
 275:Eigen/src/Core/Matrix.h ****     {
 276:Eigen/src/Core/Matrix.h ****       Base::_check_template_params();
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 79


 277:Eigen/src/Core/Matrix.h ****     }
 278:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 279:Eigen/src/Core/Matrix.h ****     Matrix& operator=(Matrix&& other) EIGEN_NOEXCEPT_IF(std::is_nothrow_move_assignable<Scalar>::va
 280:Eigen/src/Core/Matrix.h ****     {
 281:Eigen/src/Core/Matrix.h ****       other.swap(*this);
 282:Eigen/src/Core/Matrix.h ****       return *this;
 283:Eigen/src/Core/Matrix.h ****     }
 284:Eigen/src/Core/Matrix.h **** #endif
 285:Eigen/src/Core/Matrix.h **** 
 286:Eigen/src/Core/Matrix.h ****     #ifndef EIGEN_PARSED_BY_DOXYGEN
 287:Eigen/src/Core/Matrix.h **** 
 288:Eigen/src/Core/Matrix.h ****     // This constructor is for both 1x1 matrices and dynamic vectors
 289:Eigen/src/Core/Matrix.h ****     template<typename T>
 290:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 291:Eigen/src/Core/Matrix.h ****     EIGEN_STRONG_INLINE explicit Matrix(const T& x)
 936              		.loc 11 291 34 is_stmt 1 view .LVU238
 937              	.LBB2635:
 938              	.LBB2636:
 939              	.LBI2636:
 154:Eigen/src/Core/PlainObjectBase.h **** 
 155:Eigen/src/Core/PlainObjectBase.h ****     /** This is an overloaded version of DenseCoeffsBase<Derived,ReadOnlyAccessors>::coeff(Index,In
 156:Eigen/src/Core/PlainObjectBase.h ****       * provided to by-pass the creation of an evaluator of the expression, thus saving compilation
 157:Eigen/src/Core/PlainObjectBase.h ****       *
 158:Eigen/src/Core/PlainObjectBase.h ****       * See DenseCoeffsBase<Derived,ReadOnlyAccessors>::coeff(Index) const for details. */
 159:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 160:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE const Scalar& coeff(Index rowId, Index colId) const
 161:Eigen/src/Core/PlainObjectBase.h ****     {
 162:Eigen/src/Core/PlainObjectBase.h ****       if(Flags & RowMajorBit)
 163:Eigen/src/Core/PlainObjectBase.h ****         return m_storage.data()[colId + rowId * m_storage.cols()];
 164:Eigen/src/Core/PlainObjectBase.h ****       else // column-major
 165:Eigen/src/Core/PlainObjectBase.h ****         return m_storage.data()[rowId + colId * m_storage.rows()];
 166:Eigen/src/Core/PlainObjectBase.h ****     }
 167:Eigen/src/Core/PlainObjectBase.h **** 
 168:Eigen/src/Core/PlainObjectBase.h ****     /** This is an overloaded version of DenseCoeffsBase<Derived,ReadOnlyAccessors>::coeff(Index) c
 169:Eigen/src/Core/PlainObjectBase.h ****       * provided to by-pass the creation of an evaluator of the expression, thus saving compilation
 170:Eigen/src/Core/PlainObjectBase.h ****       *
 171:Eigen/src/Core/PlainObjectBase.h ****       * See DenseCoeffsBase<Derived,ReadOnlyAccessors>::coeff(Index) const for details. */
 172:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 173:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE const Scalar& coeff(Index index) const
 174:Eigen/src/Core/PlainObjectBase.h ****     {
 175:Eigen/src/Core/PlainObjectBase.h ****       return m_storage.data()[index];
 176:Eigen/src/Core/PlainObjectBase.h ****     }
 177:Eigen/src/Core/PlainObjectBase.h **** 
 178:Eigen/src/Core/PlainObjectBase.h ****     /** This is an overloaded version of DenseCoeffsBase<Derived,WriteAccessors>::coeffRef(Index,In
 179:Eigen/src/Core/PlainObjectBase.h ****       * provided to by-pass the creation of an evaluator of the expression, thus saving compilation
 180:Eigen/src/Core/PlainObjectBase.h ****       *
 181:Eigen/src/Core/PlainObjectBase.h ****       * See DenseCoeffsBase<Derived,WriteAccessors>::coeffRef(Index,Index) const for details. */
 182:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 183:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 184:Eigen/src/Core/PlainObjectBase.h ****     {
 185:Eigen/src/Core/PlainObjectBase.h ****       if(Flags & RowMajorBit)
 186:Eigen/src/Core/PlainObjectBase.h ****         return m_storage.data()[colId + rowId * m_storage.cols()];
 187:Eigen/src/Core/PlainObjectBase.h ****       else // column-major
 188:Eigen/src/Core/PlainObjectBase.h ****         return m_storage.data()[rowId + colId * m_storage.rows()];
 189:Eigen/src/Core/PlainObjectBase.h ****     }
 190:Eigen/src/Core/PlainObjectBase.h **** 
 191:Eigen/src/Core/PlainObjectBase.h ****     /** This is an overloaded version of DenseCoeffsBase<Derived,WriteAccessors>::coeffRef(Index) c
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 80


 192:Eigen/src/Core/PlainObjectBase.h ****       * provided to by-pass the creation of an evaluator of the expression, thus saving compilation
 193:Eigen/src/Core/PlainObjectBase.h ****       *
 194:Eigen/src/Core/PlainObjectBase.h ****       * See DenseCoeffsBase<Derived,WriteAccessors>::coeffRef(Index) const for details. */
 195:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 196:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE Scalar& coeffRef(Index index)
 197:Eigen/src/Core/PlainObjectBase.h ****     {
 198:Eigen/src/Core/PlainObjectBase.h ****       return m_storage.data()[index];
 199:Eigen/src/Core/PlainObjectBase.h ****     }
 200:Eigen/src/Core/PlainObjectBase.h **** 
 201:Eigen/src/Core/PlainObjectBase.h ****     /** This is the const version of coeffRef(Index,Index) which is thus synonym of coeff(Index,Ind
 202:Eigen/src/Core/PlainObjectBase.h ****       * It is provided for convenience. */
 203:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 204:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE const Scalar& coeffRef(Index rowId, Index colId) const
 205:Eigen/src/Core/PlainObjectBase.h ****     {
 206:Eigen/src/Core/PlainObjectBase.h ****       if(Flags & RowMajorBit)
 207:Eigen/src/Core/PlainObjectBase.h ****         return m_storage.data()[colId + rowId * m_storage.cols()];
 208:Eigen/src/Core/PlainObjectBase.h ****       else // column-major
 209:Eigen/src/Core/PlainObjectBase.h ****         return m_storage.data()[rowId + colId * m_storage.rows()];
 210:Eigen/src/Core/PlainObjectBase.h ****     }
 211:Eigen/src/Core/PlainObjectBase.h **** 
 212:Eigen/src/Core/PlainObjectBase.h ****     /** This is the const version of coeffRef(Index) which is thus synonym of coeff(Index).
 213:Eigen/src/Core/PlainObjectBase.h ****       * It is provided for convenience. */
 214:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 215:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE const Scalar& coeffRef(Index index) const
 216:Eigen/src/Core/PlainObjectBase.h ****     {
 217:Eigen/src/Core/PlainObjectBase.h ****       return m_storage.data()[index];
 218:Eigen/src/Core/PlainObjectBase.h ****     }
 219:Eigen/src/Core/PlainObjectBase.h **** 
 220:Eigen/src/Core/PlainObjectBase.h ****     /** \internal */
 221:Eigen/src/Core/PlainObjectBase.h ****     template<int LoadMode>
 222:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE PacketScalar packet(Index rowId, Index colId) const
 223:Eigen/src/Core/PlainObjectBase.h ****     {
 224:Eigen/src/Core/PlainObjectBase.h ****       return internal::ploadt<PacketScalar, LoadMode>
 225:Eigen/src/Core/PlainObjectBase.h ****                (m_storage.data() + (Flags & RowMajorBit
 226:Eigen/src/Core/PlainObjectBase.h ****                                    ? colId + rowId * m_storage.cols()
 227:Eigen/src/Core/PlainObjectBase.h ****                                    : rowId + colId * m_storage.rows()));
 228:Eigen/src/Core/PlainObjectBase.h ****     }
 229:Eigen/src/Core/PlainObjectBase.h **** 
 230:Eigen/src/Core/PlainObjectBase.h ****     /** \internal */
 231:Eigen/src/Core/PlainObjectBase.h ****     template<int LoadMode>
 232:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE PacketScalar packet(Index index) const
 233:Eigen/src/Core/PlainObjectBase.h ****     {
 234:Eigen/src/Core/PlainObjectBase.h ****       return internal::ploadt<PacketScalar, LoadMode>(m_storage.data() + index);
 235:Eigen/src/Core/PlainObjectBase.h ****     }
 236:Eigen/src/Core/PlainObjectBase.h **** 
 237:Eigen/src/Core/PlainObjectBase.h ****     /** \internal */
 238:Eigen/src/Core/PlainObjectBase.h ****     template<int StoreMode>
 239:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void writePacket(Index rowId, Index colId, const PacketScalar& val)
 240:Eigen/src/Core/PlainObjectBase.h ****     {
 241:Eigen/src/Core/PlainObjectBase.h ****       internal::pstoret<Scalar, PacketScalar, StoreMode>
 242:Eigen/src/Core/PlainObjectBase.h ****               (m_storage.data() + (Flags & RowMajorBit
 243:Eigen/src/Core/PlainObjectBase.h ****                                    ? colId + rowId * m_storage.cols()
 244:Eigen/src/Core/PlainObjectBase.h ****                                    : rowId + colId * m_storage.rows()), val);
 245:Eigen/src/Core/PlainObjectBase.h ****     }
 246:Eigen/src/Core/PlainObjectBase.h **** 
 247:Eigen/src/Core/PlainObjectBase.h ****     /** \internal */
 248:Eigen/src/Core/PlainObjectBase.h ****     template<int StoreMode>
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 81


 249:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void writePacket(Index index, const PacketScalar& val)
 250:Eigen/src/Core/PlainObjectBase.h ****     {
 251:Eigen/src/Core/PlainObjectBase.h ****       internal::pstoret<Scalar, PacketScalar, StoreMode>(m_storage.data() + index, val);
 252:Eigen/src/Core/PlainObjectBase.h ****     }
 253:Eigen/src/Core/PlainObjectBase.h **** 
 254:Eigen/src/Core/PlainObjectBase.h ****     /** \returns a const pointer to the data array of this matrix */
 255:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 256:Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 257:Eigen/src/Core/PlainObjectBase.h **** 
 258:Eigen/src/Core/PlainObjectBase.h ****     /** \returns a pointer to the data array of this matrix */
 259:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar *data()
 260:Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 261:Eigen/src/Core/PlainObjectBase.h **** 
 262:Eigen/src/Core/PlainObjectBase.h ****     /** Resizes \c *this to a \a rows x \a cols matrix.
 263:Eigen/src/Core/PlainObjectBase.h ****       *
 264:Eigen/src/Core/PlainObjectBase.h ****       * This method is intended for dynamic-size matrices, although it is legal to call it on any
 265:Eigen/src/Core/PlainObjectBase.h ****       * matrix as long as fixed dimensions are left unchanged. If you only want to change the numbe
 266:Eigen/src/Core/PlainObjectBase.h ****       * of rows and/or of columns, you can use resize(NoChange_t, Index), resize(Index, NoChange_t)
 267:Eigen/src/Core/PlainObjectBase.h ****       *
 268:Eigen/src/Core/PlainObjectBase.h ****       * If the current number of coefficients of \c *this exactly matches the
 269:Eigen/src/Core/PlainObjectBase.h ****       * product \a rows * \a cols, then no memory allocation is performed and
 270:Eigen/src/Core/PlainObjectBase.h ****       * the current values are left unchanged. In all other cases, including
 271:Eigen/src/Core/PlainObjectBase.h ****       * shrinking, the data is reallocated and all previous values are lost.
 272:Eigen/src/Core/PlainObjectBase.h ****       *
 273:Eigen/src/Core/PlainObjectBase.h ****       * Example: \include Matrix_resize_int_int.cpp
 274:Eigen/src/Core/PlainObjectBase.h ****       * Output: \verbinclude Matrix_resize_int_int.out
 275:Eigen/src/Core/PlainObjectBase.h ****       *
 276:Eigen/src/Core/PlainObjectBase.h ****       * \sa resize(Index) for vectors, resize(NoChange_t, Index), resize(Index, NoChange_t)
 277:Eigen/src/Core/PlainObjectBase.h ****       */
 278:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 279:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 280:Eigen/src/Core/PlainObjectBase.h ****     {
 281:Eigen/src/Core/PlainObjectBase.h ****       eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 282:Eigen/src/Core/PlainObjectBase.h ****                    && EIGEN_IMPLIES(ColsAtCompileTime!=Dynamic,cols==ColsAtCompileTime)
 283:Eigen/src/Core/PlainObjectBase.h ****                    && EIGEN_IMPLIES(RowsAtCompileTime==Dynamic && MaxRowsAtCompileTime!=Dynamic,row
 284:Eigen/src/Core/PlainObjectBase.h ****                    && EIGEN_IMPLIES(ColsAtCompileTime==Dynamic && MaxColsAtCompileTime!=Dynamic,col
 285:Eigen/src/Core/PlainObjectBase.h ****                    && rows>=0 && cols>=0 && "Invalid sizes when resizing a matrix or array.");
 286:Eigen/src/Core/PlainObjectBase.h ****       internal::check_rows_cols_for_overflow<MaxSizeAtCompileTime>::run(rows, cols);
 287:Eigen/src/Core/PlainObjectBase.h ****       #ifdef EIGEN_INITIALIZE_COEFFS
 288:Eigen/src/Core/PlainObjectBase.h ****         Index size = rows*cols;
 289:Eigen/src/Core/PlainObjectBase.h ****         bool size_changed = size != this->size();
 290:Eigen/src/Core/PlainObjectBase.h ****         m_storage.resize(size, rows, cols);
 291:Eigen/src/Core/PlainObjectBase.h ****         if(size_changed) EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
 292:Eigen/src/Core/PlainObjectBase.h ****       #else
 293:Eigen/src/Core/PlainObjectBase.h ****         m_storage.resize(rows*cols, rows, cols);
 294:Eigen/src/Core/PlainObjectBase.h ****       #endif
 295:Eigen/src/Core/PlainObjectBase.h ****     }
 296:Eigen/src/Core/PlainObjectBase.h **** 
 297:Eigen/src/Core/PlainObjectBase.h ****     /** Resizes \c *this to a vector of length \a size
 298:Eigen/src/Core/PlainObjectBase.h ****       *
 299:Eigen/src/Core/PlainObjectBase.h ****       * \only_for_vectors. This method does not work for
 300:Eigen/src/Core/PlainObjectBase.h ****       * partially dynamic matrices when the static dimension is anything other
 301:Eigen/src/Core/PlainObjectBase.h ****       * than 1. For example it will not work with Matrix<double, 2, Dynamic>.
 302:Eigen/src/Core/PlainObjectBase.h ****       *
 303:Eigen/src/Core/PlainObjectBase.h ****       * Example: \include Matrix_resize_int.cpp
 304:Eigen/src/Core/PlainObjectBase.h ****       * Output: \verbinclude Matrix_resize_int.out
 305:Eigen/src/Core/PlainObjectBase.h ****       *
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 82


 306:Eigen/src/Core/PlainObjectBase.h ****       * \sa resize(Index,Index), resize(NoChange_t, Index), resize(Index, NoChange_t)
 307:Eigen/src/Core/PlainObjectBase.h ****       */
 308:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 309:Eigen/src/Core/PlainObjectBase.h ****     inline void resize(Index size)
 310:Eigen/src/Core/PlainObjectBase.h ****     {
 311:Eigen/src/Core/PlainObjectBase.h ****       EIGEN_STATIC_ASSERT_VECTOR_ONLY(PlainObjectBase)
 312:Eigen/src/Core/PlainObjectBase.h ****       eigen_assert(((SizeAtCompileTime == Dynamic && (MaxSizeAtCompileTime==Dynamic || size<=MaxSiz
 313:Eigen/src/Core/PlainObjectBase.h ****       #ifdef EIGEN_INITIALIZE_COEFFS
 314:Eigen/src/Core/PlainObjectBase.h ****         bool size_changed = size != this->size();
 315:Eigen/src/Core/PlainObjectBase.h ****       #endif
 316:Eigen/src/Core/PlainObjectBase.h ****       if(RowsAtCompileTime == 1)
 317:Eigen/src/Core/PlainObjectBase.h ****         m_storage.resize(size, 1, size);
 318:Eigen/src/Core/PlainObjectBase.h ****       else
 319:Eigen/src/Core/PlainObjectBase.h ****         m_storage.resize(size, size, 1);
 320:Eigen/src/Core/PlainObjectBase.h ****       #ifdef EIGEN_INITIALIZE_COEFFS
 321:Eigen/src/Core/PlainObjectBase.h ****         if(size_changed) EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
 322:Eigen/src/Core/PlainObjectBase.h ****       #endif
 323:Eigen/src/Core/PlainObjectBase.h ****     }
 324:Eigen/src/Core/PlainObjectBase.h **** 
 325:Eigen/src/Core/PlainObjectBase.h ****     /** Resizes the matrix, changing only the number of columns. For the parameter of type NoChange
 326:Eigen/src/Core/PlainObjectBase.h ****       * as in the example below.
 327:Eigen/src/Core/PlainObjectBase.h ****       *
 328:Eigen/src/Core/PlainObjectBase.h ****       * Example: \include Matrix_resize_NoChange_int.cpp
 329:Eigen/src/Core/PlainObjectBase.h ****       * Output: \verbinclude Matrix_resize_NoChange_int.out
 330:Eigen/src/Core/PlainObjectBase.h ****       *
 331:Eigen/src/Core/PlainObjectBase.h ****       * \sa resize(Index,Index)
 332:Eigen/src/Core/PlainObjectBase.h ****       */
 333:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 334:Eigen/src/Core/PlainObjectBase.h ****     inline void resize(NoChange_t, Index cols)
 335:Eigen/src/Core/PlainObjectBase.h ****     {
 336:Eigen/src/Core/PlainObjectBase.h ****       resize(rows(), cols);
 337:Eigen/src/Core/PlainObjectBase.h ****     }
 338:Eigen/src/Core/PlainObjectBase.h **** 
 339:Eigen/src/Core/PlainObjectBase.h ****     /** Resizes the matrix, changing only the number of rows. For the parameter of type NoChange_t,
 340:Eigen/src/Core/PlainObjectBase.h ****       * as in the example below.
 341:Eigen/src/Core/PlainObjectBase.h ****       *
 342:Eigen/src/Core/PlainObjectBase.h ****       * Example: \include Matrix_resize_int_NoChange.cpp
 343:Eigen/src/Core/PlainObjectBase.h ****       * Output: \verbinclude Matrix_resize_int_NoChange.out
 344:Eigen/src/Core/PlainObjectBase.h ****       *
 345:Eigen/src/Core/PlainObjectBase.h ****       * \sa resize(Index,Index)
 346:Eigen/src/Core/PlainObjectBase.h ****       */
 347:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 348:Eigen/src/Core/PlainObjectBase.h ****     inline void resize(Index rows, NoChange_t)
 349:Eigen/src/Core/PlainObjectBase.h ****     {
 350:Eigen/src/Core/PlainObjectBase.h ****       resize(rows, cols());
 351:Eigen/src/Core/PlainObjectBase.h ****     }
 352:Eigen/src/Core/PlainObjectBase.h **** 
 353:Eigen/src/Core/PlainObjectBase.h ****     /** Resizes \c *this to have the same dimensions as \a other.
 354:Eigen/src/Core/PlainObjectBase.h ****       * Takes care of doing all the checking that's needed.
 355:Eigen/src/Core/PlainObjectBase.h ****       *
 356:Eigen/src/Core/PlainObjectBase.h ****       * Note that copying a row-vector into a vector (and conversely) is allowed.
 357:Eigen/src/Core/PlainObjectBase.h ****       * The resizing, if any, is then done in the appropriate way so that row-vectors
 358:Eigen/src/Core/PlainObjectBase.h ****       * remain row-vectors and vectors remain vectors.
 359:Eigen/src/Core/PlainObjectBase.h ****       */
 360:Eigen/src/Core/PlainObjectBase.h ****     template<typename OtherDerived>
 361:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC 
 362:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void resizeLike(const EigenBase<OtherDerived>& _other)
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 83


 363:Eigen/src/Core/PlainObjectBase.h ****     {
 364:Eigen/src/Core/PlainObjectBase.h ****       const OtherDerived& other = _other.derived();
 365:Eigen/src/Core/PlainObjectBase.h ****       internal::check_rows_cols_for_overflow<MaxSizeAtCompileTime>::run(other.rows(), other.cols())
 366:Eigen/src/Core/PlainObjectBase.h ****       const Index othersize = other.rows()*other.cols();
 367:Eigen/src/Core/PlainObjectBase.h ****       if(RowsAtCompileTime == 1)
 368:Eigen/src/Core/PlainObjectBase.h ****       {
 369:Eigen/src/Core/PlainObjectBase.h ****         eigen_assert(other.rows() == 1 || other.cols() == 1);
 370:Eigen/src/Core/PlainObjectBase.h ****         resize(1, othersize);
 371:Eigen/src/Core/PlainObjectBase.h ****       }
 372:Eigen/src/Core/PlainObjectBase.h ****       else if(ColsAtCompileTime == 1)
 373:Eigen/src/Core/PlainObjectBase.h ****       {
 374:Eigen/src/Core/PlainObjectBase.h ****         eigen_assert(other.rows() == 1 || other.cols() == 1);
 375:Eigen/src/Core/PlainObjectBase.h ****         resize(othersize, 1);
 376:Eigen/src/Core/PlainObjectBase.h ****       }
 377:Eigen/src/Core/PlainObjectBase.h ****       else resize(other.rows(), other.cols());
 378:Eigen/src/Core/PlainObjectBase.h ****     }
 379:Eigen/src/Core/PlainObjectBase.h **** 
 380:Eigen/src/Core/PlainObjectBase.h ****     /** Resizes the matrix to \a rows x \a cols while leaving old values untouched.
 381:Eigen/src/Core/PlainObjectBase.h ****       *
 382:Eigen/src/Core/PlainObjectBase.h ****       * The method is intended for matrices of dynamic size. If you only want to change the number
 383:Eigen/src/Core/PlainObjectBase.h ****       * of rows and/or of columns, you can use conservativeResize(NoChange_t, Index) or
 384:Eigen/src/Core/PlainObjectBase.h ****       * conservativeResize(Index, NoChange_t).
 385:Eigen/src/Core/PlainObjectBase.h ****       *
 386:Eigen/src/Core/PlainObjectBase.h ****       * Matrices are resized relative to the top-left element. In case values need to be 
 387:Eigen/src/Core/PlainObjectBase.h ****       * appended to the matrix they will be uninitialized.
 388:Eigen/src/Core/PlainObjectBase.h ****       */
 389:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 390:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void conservativeResize(Index rows, Index cols)
 391:Eigen/src/Core/PlainObjectBase.h ****     {
 392:Eigen/src/Core/PlainObjectBase.h ****       internal::conservative_resize_like_impl<Derived>::run(*this, rows, cols);
 393:Eigen/src/Core/PlainObjectBase.h ****     }
 394:Eigen/src/Core/PlainObjectBase.h **** 
 395:Eigen/src/Core/PlainObjectBase.h ****     /** Resizes the matrix to \a rows x \a cols while leaving old values untouched.
 396:Eigen/src/Core/PlainObjectBase.h ****       *
 397:Eigen/src/Core/PlainObjectBase.h ****       * As opposed to conservativeResize(Index rows, Index cols), this version leaves
 398:Eigen/src/Core/PlainObjectBase.h ****       * the number of columns unchanged.
 399:Eigen/src/Core/PlainObjectBase.h ****       *
 400:Eigen/src/Core/PlainObjectBase.h ****       * In case the matrix is growing, new rows will be uninitialized.
 401:Eigen/src/Core/PlainObjectBase.h ****       */
 402:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 403:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void conservativeResize(Index rows, NoChange_t)
 404:Eigen/src/Core/PlainObjectBase.h ****     {
 405:Eigen/src/Core/PlainObjectBase.h ****       // Note: see the comment in conservativeResize(Index,Index)
 406:Eigen/src/Core/PlainObjectBase.h ****       conservativeResize(rows, cols());
 407:Eigen/src/Core/PlainObjectBase.h ****     }
 408:Eigen/src/Core/PlainObjectBase.h **** 
 409:Eigen/src/Core/PlainObjectBase.h ****     /** Resizes the matrix to \a rows x \a cols while leaving old values untouched.
 410:Eigen/src/Core/PlainObjectBase.h ****       *
 411:Eigen/src/Core/PlainObjectBase.h ****       * As opposed to conservativeResize(Index rows, Index cols), this version leaves
 412:Eigen/src/Core/PlainObjectBase.h ****       * the number of rows unchanged.
 413:Eigen/src/Core/PlainObjectBase.h ****       *
 414:Eigen/src/Core/PlainObjectBase.h ****       * In case the matrix is growing, new columns will be uninitialized.
 415:Eigen/src/Core/PlainObjectBase.h ****       */
 416:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 417:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void conservativeResize(NoChange_t, Index cols)
 418:Eigen/src/Core/PlainObjectBase.h ****     {
 419:Eigen/src/Core/PlainObjectBase.h ****       // Note: see the comment in conservativeResize(Index,Index)
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 84


 420:Eigen/src/Core/PlainObjectBase.h ****       conservativeResize(rows(), cols);
 421:Eigen/src/Core/PlainObjectBase.h ****     }
 422:Eigen/src/Core/PlainObjectBase.h **** 
 423:Eigen/src/Core/PlainObjectBase.h ****     /** Resizes the vector to \a size while retaining old values.
 424:Eigen/src/Core/PlainObjectBase.h ****       *
 425:Eigen/src/Core/PlainObjectBase.h ****       * \only_for_vectors. This method does not work for
 426:Eigen/src/Core/PlainObjectBase.h ****       * partially dynamic matrices when the static dimension is anything other
 427:Eigen/src/Core/PlainObjectBase.h ****       * than 1. For example it will not work with Matrix<double, 2, Dynamic>.
 428:Eigen/src/Core/PlainObjectBase.h ****       *
 429:Eigen/src/Core/PlainObjectBase.h ****       * When values are appended, they will be uninitialized.
 430:Eigen/src/Core/PlainObjectBase.h ****       */
 431:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 432:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void conservativeResize(Index size)
 433:Eigen/src/Core/PlainObjectBase.h ****     {
 434:Eigen/src/Core/PlainObjectBase.h ****       internal::conservative_resize_like_impl<Derived>::run(*this, size);
 435:Eigen/src/Core/PlainObjectBase.h ****     }
 436:Eigen/src/Core/PlainObjectBase.h **** 
 437:Eigen/src/Core/PlainObjectBase.h ****     /** Resizes the matrix to \a rows x \a cols of \c other, while leaving old values untouched.
 438:Eigen/src/Core/PlainObjectBase.h ****       *
 439:Eigen/src/Core/PlainObjectBase.h ****       * The method is intended for matrices of dynamic size. If you only want to change the number
 440:Eigen/src/Core/PlainObjectBase.h ****       * of rows and/or of columns, you can use conservativeResize(NoChange_t, Index) or
 441:Eigen/src/Core/PlainObjectBase.h ****       * conservativeResize(Index, NoChange_t).
 442:Eigen/src/Core/PlainObjectBase.h ****       *
 443:Eigen/src/Core/PlainObjectBase.h ****       * Matrices are resized relative to the top-left element. In case values need to be 
 444:Eigen/src/Core/PlainObjectBase.h ****       * appended to the matrix they will copied from \c other.
 445:Eigen/src/Core/PlainObjectBase.h ****       */
 446:Eigen/src/Core/PlainObjectBase.h ****     template<typename OtherDerived>
 447:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 448:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void conservativeResizeLike(const DenseBase<OtherDerived>& other)
 449:Eigen/src/Core/PlainObjectBase.h ****     {
 450:Eigen/src/Core/PlainObjectBase.h ****       internal::conservative_resize_like_impl<Derived,OtherDerived>::run(*this, other);
 451:Eigen/src/Core/PlainObjectBase.h ****     }
 452:Eigen/src/Core/PlainObjectBase.h **** 
 453:Eigen/src/Core/PlainObjectBase.h ****     /** This is a special case of the templated operator=. Its purpose is to
 454:Eigen/src/Core/PlainObjectBase.h ****       * prevent a default operator= from hiding the templated operator=.
 455:Eigen/src/Core/PlainObjectBase.h ****       */
 456:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 457:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE Derived& operator=(const PlainObjectBase& other)
 458:Eigen/src/Core/PlainObjectBase.h ****     {
 459:Eigen/src/Core/PlainObjectBase.h ****       return _set(other);
 460:Eigen/src/Core/PlainObjectBase.h ****     }
 461:Eigen/src/Core/PlainObjectBase.h **** 
 462:Eigen/src/Core/PlainObjectBase.h ****     /** \sa MatrixBase::lazyAssign() */
 463:Eigen/src/Core/PlainObjectBase.h ****     template<typename OtherDerived>
 464:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 465:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE Derived& lazyAssign(const DenseBase<OtherDerived>& other)
 466:Eigen/src/Core/PlainObjectBase.h ****     {
 467:Eigen/src/Core/PlainObjectBase.h ****       _resize_to_match(other);
 468:Eigen/src/Core/PlainObjectBase.h ****       return Base::lazyAssign(other.derived());
 469:Eigen/src/Core/PlainObjectBase.h ****     }
 470:Eigen/src/Core/PlainObjectBase.h **** 
 471:Eigen/src/Core/PlainObjectBase.h ****     template<typename OtherDerived>
 472:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 473:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE Derived& operator=(const ReturnByValue<OtherDerived>& func)
 474:Eigen/src/Core/PlainObjectBase.h ****     {
 475:Eigen/src/Core/PlainObjectBase.h ****       resize(func.rows(), func.cols());
 476:Eigen/src/Core/PlainObjectBase.h ****       return Base::operator=(func);
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 85


 477:Eigen/src/Core/PlainObjectBase.h ****     }
 478:Eigen/src/Core/PlainObjectBase.h **** 
 479:Eigen/src/Core/PlainObjectBase.h ****     // Prevent user from trying to instantiate PlainObjectBase objects
 480:Eigen/src/Core/PlainObjectBase.h ****     // by making all its constructor protected. See bug 1074.
 481:Eigen/src/Core/PlainObjectBase.h ****   protected:
 482:Eigen/src/Core/PlainObjectBase.h **** 
 483:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 484:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 940              		.loc 9 484 25 view .LVU239
 941              	.LBB2637:
 942              	.LBB2638:
 943              	.LBI2638:
 944              		.loc 7 467 23 view .LVU240
 945              	.LBB2639:
 946              	.LBI2639:
 947              		.loc 8 591 23 view .LVU241
 948              		.loc 8 591 23 is_stmt 0 view .LVU242
 949              	.LBE2639:
 950              	.LBE2638:
 951              	.LBB2640:
 952              	.LBI2640:
 953              		.file 12 "Eigen/src/Core/DenseStorage.h"
   1:Eigen/src/Core/DenseStorage.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/DenseStorage.h **** // for linear algebra.
   3:Eigen/src/Core/DenseStorage.h **** //
   4:Eigen/src/Core/DenseStorage.h **** // Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:Eigen/src/Core/DenseStorage.h **** // Copyright (C) 2006-2009 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:Eigen/src/Core/DenseStorage.h **** // Copyright (C) 2010-2013 Hauke Heibel <hauke.heibel@gmail.com>
   7:Eigen/src/Core/DenseStorage.h **** //
   8:Eigen/src/Core/DenseStorage.h **** // This Source Code Form is subject to the terms of the Mozilla
   9:Eigen/src/Core/DenseStorage.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
  10:Eigen/src/Core/DenseStorage.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  11:Eigen/src/Core/DenseStorage.h **** 
  12:Eigen/src/Core/DenseStorage.h **** #ifndef EIGEN_MATRIXSTORAGE_H
  13:Eigen/src/Core/DenseStorage.h **** #define EIGEN_MATRIXSTORAGE_H
  14:Eigen/src/Core/DenseStorage.h **** 
  15:Eigen/src/Core/DenseStorage.h **** #ifdef EIGEN_DENSE_STORAGE_CTOR_PLUGIN
  16:Eigen/src/Core/DenseStorage.h ****   #define EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(X) X; EIGEN_DENSE_STORAGE_CTOR_PLUGIN;
  17:Eigen/src/Core/DenseStorage.h **** #else
  18:Eigen/src/Core/DenseStorage.h ****   #define EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(X)
  19:Eigen/src/Core/DenseStorage.h **** #endif
  20:Eigen/src/Core/DenseStorage.h **** 
  21:Eigen/src/Core/DenseStorage.h **** namespace Eigen {
  22:Eigen/src/Core/DenseStorage.h **** 
  23:Eigen/src/Core/DenseStorage.h **** namespace internal {
  24:Eigen/src/Core/DenseStorage.h **** 
  25:Eigen/src/Core/DenseStorage.h **** struct constructor_without_unaligned_array_assert {};
  26:Eigen/src/Core/DenseStorage.h **** 
  27:Eigen/src/Core/DenseStorage.h **** template<typename T, int Size>
  28:Eigen/src/Core/DenseStorage.h **** EIGEN_DEVICE_FUNC
  29:Eigen/src/Core/DenseStorage.h **** void check_static_allocation_size()
  30:Eigen/src/Core/DenseStorage.h **** {
  31:Eigen/src/Core/DenseStorage.h ****   // if EIGEN_STACK_ALLOCATION_LIMIT is defined to 0, then no limit
  32:Eigen/src/Core/DenseStorage.h ****   #if EIGEN_STACK_ALLOCATION_LIMIT
  33:Eigen/src/Core/DenseStorage.h ****   EIGEN_STATIC_ASSERT(Size * sizeof(T) <= EIGEN_STACK_ALLOCATION_LIMIT, OBJECT_ALLOCATED_ON_STACK_I
  34:Eigen/src/Core/DenseStorage.h ****   #endif
  35:Eigen/src/Core/DenseStorage.h **** }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 86


  36:Eigen/src/Core/DenseStorage.h **** 
  37:Eigen/src/Core/DenseStorage.h **** /** \internal
  38:Eigen/src/Core/DenseStorage.h ****   * Static array. If the MatrixOrArrayOptions require auto-alignment, the array will be automatical
  39:Eigen/src/Core/DenseStorage.h ****   * to 16 bytes boundary if the total size is a multiple of 16 bytes.
  40:Eigen/src/Core/DenseStorage.h ****   */
  41:Eigen/src/Core/DenseStorage.h **** template <typename T, int Size, int MatrixOrArrayOptions,
  42:Eigen/src/Core/DenseStorage.h ****           int Alignment = (MatrixOrArrayOptions&DontAlign) ? 0
  43:Eigen/src/Core/DenseStorage.h ****                         : compute_default_alignment<T,Size>::value >
  44:Eigen/src/Core/DenseStorage.h **** struct plain_array
  45:Eigen/src/Core/DenseStorage.h **** {
  46:Eigen/src/Core/DenseStorage.h ****   T array[Size];
  47:Eigen/src/Core/DenseStorage.h **** 
  48:Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC
  49:Eigen/src/Core/DenseStorage.h ****   plain_array()
  50:Eigen/src/Core/DenseStorage.h ****   { 
  51:Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T,Size>();
  52:Eigen/src/Core/DenseStorage.h ****   }
  53:Eigen/src/Core/DenseStorage.h **** 
  54:Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC
  55:Eigen/src/Core/DenseStorage.h ****   plain_array(constructor_without_unaligned_array_assert)
  56:Eigen/src/Core/DenseStorage.h ****   { 
  57:Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T,Size>();
  58:Eigen/src/Core/DenseStorage.h ****   }
  59:Eigen/src/Core/DenseStorage.h **** };
  60:Eigen/src/Core/DenseStorage.h **** 
  61:Eigen/src/Core/DenseStorage.h **** #if defined(EIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT)
  62:Eigen/src/Core/DenseStorage.h ****   #define EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(sizemask)
  63:Eigen/src/Core/DenseStorage.h **** #elif EIGEN_GNUC_AT_LEAST(4,7) 
  64:Eigen/src/Core/DenseStorage.h ****   // GCC 4.7 is too aggressive in its optimizations and remove the alignement test based on the fac
  65:Eigen/src/Core/DenseStorage.h ****   // See this bug report: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=53900
  66:Eigen/src/Core/DenseStorage.h ****   // Hiding the origin of the array pointer behind a function argument seems to do the trick even i
  67:Eigen/src/Core/DenseStorage.h ****   template<typename PtrType>
  68:Eigen/src/Core/DenseStorage.h ****   EIGEN_ALWAYS_INLINE PtrType eigen_unaligned_array_assert_workaround_gcc47(PtrType array) { return
  69:Eigen/src/Core/DenseStorage.h ****   #define EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(sizemask) \
  70:Eigen/src/Core/DenseStorage.h ****     eigen_assert((internal::UIntPtr(eigen_unaligned_array_assert_workaround_gcc47(array)) & (sizema
  71:Eigen/src/Core/DenseStorage.h ****               && "this assertion is explained here: " \
  72:Eigen/src/Core/DenseStorage.h ****               "http://eigen.tuxfamily.org/dox-devel/group__TopicUnalignedArrayAssert.html" \
  73:Eigen/src/Core/DenseStorage.h ****               " **** READ THIS WEB PAGE !!! ****");
  74:Eigen/src/Core/DenseStorage.h **** #else
  75:Eigen/src/Core/DenseStorage.h ****   #define EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(sizemask) \
  76:Eigen/src/Core/DenseStorage.h ****     eigen_assert((internal::UIntPtr(array) & (sizemask)) == 0 \
  77:Eigen/src/Core/DenseStorage.h ****               && "this assertion is explained here: " \
  78:Eigen/src/Core/DenseStorage.h ****               "http://eigen.tuxfamily.org/dox-devel/group__TopicUnalignedArrayAssert.html" \
  79:Eigen/src/Core/DenseStorage.h ****               " **** READ THIS WEB PAGE !!! ****");
  80:Eigen/src/Core/DenseStorage.h **** #endif
  81:Eigen/src/Core/DenseStorage.h **** 
  82:Eigen/src/Core/DenseStorage.h **** template <typename T, int Size, int MatrixOrArrayOptions>
  83:Eigen/src/Core/DenseStorage.h **** struct plain_array<T, Size, MatrixOrArrayOptions, 8>
  84:Eigen/src/Core/DenseStorage.h **** {
  85:Eigen/src/Core/DenseStorage.h ****   EIGEN_ALIGN_TO_BOUNDARY(8) T array[Size];
  86:Eigen/src/Core/DenseStorage.h **** 
  87:Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC
  88:Eigen/src/Core/DenseStorage.h ****   plain_array() 
  89:Eigen/src/Core/DenseStorage.h ****   {
  90:Eigen/src/Core/DenseStorage.h ****     EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(7);
  91:Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T,Size>();
  92:Eigen/src/Core/DenseStorage.h ****   }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 87


  93:Eigen/src/Core/DenseStorage.h **** 
  94:Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC
  95:Eigen/src/Core/DenseStorage.h ****   plain_array(constructor_without_unaligned_array_assert) 
  96:Eigen/src/Core/DenseStorage.h ****   { 
  97:Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T,Size>();
  98:Eigen/src/Core/DenseStorage.h ****   }
  99:Eigen/src/Core/DenseStorage.h **** };
 100:Eigen/src/Core/DenseStorage.h **** 
 101:Eigen/src/Core/DenseStorage.h **** template <typename T, int Size, int MatrixOrArrayOptions>
 102:Eigen/src/Core/DenseStorage.h **** struct plain_array<T, Size, MatrixOrArrayOptions, 16>
 103:Eigen/src/Core/DenseStorage.h **** {
 104:Eigen/src/Core/DenseStorage.h ****   EIGEN_ALIGN_TO_BOUNDARY(16) T array[Size];
 105:Eigen/src/Core/DenseStorage.h **** 
 106:Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC
 107:Eigen/src/Core/DenseStorage.h ****   plain_array() 
 108:Eigen/src/Core/DenseStorage.h ****   { 
 109:Eigen/src/Core/DenseStorage.h ****     EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(15);
 110:Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T,Size>();
 111:Eigen/src/Core/DenseStorage.h ****   }
 112:Eigen/src/Core/DenseStorage.h **** 
 113:Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC
 114:Eigen/src/Core/DenseStorage.h ****   plain_array(constructor_without_unaligned_array_assert) 
 115:Eigen/src/Core/DenseStorage.h ****   { 
 116:Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T,Size>();
 117:Eigen/src/Core/DenseStorage.h ****   }
 118:Eigen/src/Core/DenseStorage.h **** };
 119:Eigen/src/Core/DenseStorage.h **** 
 120:Eigen/src/Core/DenseStorage.h **** template <typename T, int Size, int MatrixOrArrayOptions>
 121:Eigen/src/Core/DenseStorage.h **** struct plain_array<T, Size, MatrixOrArrayOptions, 32>
 122:Eigen/src/Core/DenseStorage.h **** {
 123:Eigen/src/Core/DenseStorage.h ****   EIGEN_ALIGN_TO_BOUNDARY(32) T array[Size];
 124:Eigen/src/Core/DenseStorage.h **** 
 125:Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC
 126:Eigen/src/Core/DenseStorage.h ****   plain_array() 
 127:Eigen/src/Core/DenseStorage.h ****   {
 128:Eigen/src/Core/DenseStorage.h ****     EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(31);
 129:Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T,Size>();
 130:Eigen/src/Core/DenseStorage.h ****   }
 131:Eigen/src/Core/DenseStorage.h **** 
 132:Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC
 133:Eigen/src/Core/DenseStorage.h ****   plain_array(constructor_without_unaligned_array_assert) 
 134:Eigen/src/Core/DenseStorage.h ****   { 
 135:Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T,Size>();
 136:Eigen/src/Core/DenseStorage.h ****   }
 137:Eigen/src/Core/DenseStorage.h **** };
 138:Eigen/src/Core/DenseStorage.h **** 
 139:Eigen/src/Core/DenseStorage.h **** template <typename T, int Size, int MatrixOrArrayOptions>
 140:Eigen/src/Core/DenseStorage.h **** struct plain_array<T, Size, MatrixOrArrayOptions, 64>
 141:Eigen/src/Core/DenseStorage.h **** {
 142:Eigen/src/Core/DenseStorage.h ****   EIGEN_ALIGN_TO_BOUNDARY(64) T array[Size];
 143:Eigen/src/Core/DenseStorage.h **** 
 144:Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC
 145:Eigen/src/Core/DenseStorage.h ****   plain_array() 
 146:Eigen/src/Core/DenseStorage.h ****   { 
 147:Eigen/src/Core/DenseStorage.h ****     EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(63);
 148:Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T,Size>();
 149:Eigen/src/Core/DenseStorage.h ****   }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 88


 150:Eigen/src/Core/DenseStorage.h **** 
 151:Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC
 152:Eigen/src/Core/DenseStorage.h ****   plain_array(constructor_without_unaligned_array_assert) 
 153:Eigen/src/Core/DenseStorage.h ****   { 
 154:Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T,Size>();
 155:Eigen/src/Core/DenseStorage.h ****   }
 156:Eigen/src/Core/DenseStorage.h **** };
 157:Eigen/src/Core/DenseStorage.h **** 
 158:Eigen/src/Core/DenseStorage.h **** template <typename T, int MatrixOrArrayOptions, int Alignment>
 159:Eigen/src/Core/DenseStorage.h **** struct plain_array<T, 0, MatrixOrArrayOptions, Alignment>
 160:Eigen/src/Core/DenseStorage.h **** {
 161:Eigen/src/Core/DenseStorage.h ****   T array[1];
 162:Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC plain_array() {}
 163:Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC plain_array(constructor_without_unaligned_array_assert) {}
 164:Eigen/src/Core/DenseStorage.h **** };
 165:Eigen/src/Core/DenseStorage.h **** 
 166:Eigen/src/Core/DenseStorage.h **** } // end namespace internal
 167:Eigen/src/Core/DenseStorage.h **** 
 168:Eigen/src/Core/DenseStorage.h **** /** \internal
 169:Eigen/src/Core/DenseStorage.h ****   *
 170:Eigen/src/Core/DenseStorage.h ****   * \class DenseStorage
 171:Eigen/src/Core/DenseStorage.h ****   * \ingroup Core_Module
 172:Eigen/src/Core/DenseStorage.h ****   *
 173:Eigen/src/Core/DenseStorage.h ****   * \brief Stores the data of a matrix
 174:Eigen/src/Core/DenseStorage.h ****   *
 175:Eigen/src/Core/DenseStorage.h ****   * This class stores the data of fixed-size, dynamic-size or mixed matrices
 176:Eigen/src/Core/DenseStorage.h ****   * in a way as compact as possible.
 177:Eigen/src/Core/DenseStorage.h ****   *
 178:Eigen/src/Core/DenseStorage.h ****   * \sa Matrix
 179:Eigen/src/Core/DenseStorage.h ****   */
 180:Eigen/src/Core/DenseStorage.h **** template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage;
 181:Eigen/src/Core/DenseStorage.h **** 
 182:Eigen/src/Core/DenseStorage.h **** // purely fixed-size matrix
 183:Eigen/src/Core/DenseStorage.h **** template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage
 184:Eigen/src/Core/DenseStorage.h **** {
 185:Eigen/src/Core/DenseStorage.h ****     internal::plain_array<T,Size,_Options> m_data;
 186:Eigen/src/Core/DenseStorage.h ****   public:
 187:Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage() {
 954              		.loc 12 187 23 is_stmt 1 view .LVU243
 955              	.LBB2641:
 956              	.LBB2642:
 957              	.LBI2642:
  49:Eigen/src/Core/DenseStorage.h ****   { 
 958              		.loc 12 49 3 view .LVU244
  49:Eigen/src/Core/DenseStorage.h ****   { 
 959              		.loc 12 49 3 is_stmt 0 view .LVU245
 960              	.LBE2642:
 961              	.LBE2641:
 962              	.LBE2640:
 963              	.LBE2637:
 964              	.LBE2636:
 965              	.LBB2643:
 966              	.LBI2643:
 485:Eigen/src/Core/PlainObjectBase.h ****     {
 486:Eigen/src/Core/PlainObjectBase.h **** //       _check_template_params();
 487:Eigen/src/Core/PlainObjectBase.h **** //       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
 488:Eigen/src/Core/PlainObjectBase.h ****     }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 89


 489:Eigen/src/Core/PlainObjectBase.h **** 
 490:Eigen/src/Core/PlainObjectBase.h **** #ifndef EIGEN_PARSED_BY_DOXYGEN
 491:Eigen/src/Core/PlainObjectBase.h ****     // FIXME is it still needed ?
 492:Eigen/src/Core/PlainObjectBase.h ****     /** \internal */
 493:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 494:Eigen/src/Core/PlainObjectBase.h ****     explicit PlainObjectBase(internal::constructor_without_unaligned_array_assert)
 495:Eigen/src/Core/PlainObjectBase.h ****       : m_storage(internal::constructor_without_unaligned_array_assert())
 496:Eigen/src/Core/PlainObjectBase.h ****     {
 497:Eigen/src/Core/PlainObjectBase.h **** //       _check_template_params(); EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
 498:Eigen/src/Core/PlainObjectBase.h ****     }
 499:Eigen/src/Core/PlainObjectBase.h **** #endif
 500:Eigen/src/Core/PlainObjectBase.h **** 
 501:Eigen/src/Core/PlainObjectBase.h **** #if EIGEN_HAS_RVALUE_REFERENCES
 502:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 503:Eigen/src/Core/PlainObjectBase.h ****     PlainObjectBase(PlainObjectBase&& other) EIGEN_NOEXCEPT
 504:Eigen/src/Core/PlainObjectBase.h ****       : m_storage( std::move(other.m_storage) )
 505:Eigen/src/Core/PlainObjectBase.h ****     {
 506:Eigen/src/Core/PlainObjectBase.h ****     }
 507:Eigen/src/Core/PlainObjectBase.h **** 
 508:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 509:Eigen/src/Core/PlainObjectBase.h ****     PlainObjectBase& operator=(PlainObjectBase&& other) EIGEN_NOEXCEPT
 510:Eigen/src/Core/PlainObjectBase.h ****     {
 511:Eigen/src/Core/PlainObjectBase.h ****       using std::swap;
 512:Eigen/src/Core/PlainObjectBase.h ****       swap(m_storage, other.m_storage);
 513:Eigen/src/Core/PlainObjectBase.h ****       return *this;
 514:Eigen/src/Core/PlainObjectBase.h ****     }
 515:Eigen/src/Core/PlainObjectBase.h **** #endif
 516:Eigen/src/Core/PlainObjectBase.h **** 
 517:Eigen/src/Core/PlainObjectBase.h ****     /** Copy constructor */
 518:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 519:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE PlainObjectBase(const PlainObjectBase& other)
 520:Eigen/src/Core/PlainObjectBase.h ****       : Base(), m_storage(other.m_storage) { }
 521:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 522:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE PlainObjectBase(Index size, Index rows, Index cols)
 523:Eigen/src/Core/PlainObjectBase.h ****       : m_storage(size, rows, cols)
 524:Eigen/src/Core/PlainObjectBase.h ****     {
 525:Eigen/src/Core/PlainObjectBase.h **** //       _check_template_params();
 526:Eigen/src/Core/PlainObjectBase.h **** //       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
 527:Eigen/src/Core/PlainObjectBase.h ****     }
 528:Eigen/src/Core/PlainObjectBase.h **** 
 529:Eigen/src/Core/PlainObjectBase.h ****     /** \sa PlainObjectBase::operator=(const EigenBase<OtherDerived>&) */
 530:Eigen/src/Core/PlainObjectBase.h ****     template<typename OtherDerived>
 531:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 532:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE PlainObjectBase(const DenseBase<OtherDerived> &other)
 533:Eigen/src/Core/PlainObjectBase.h ****       : m_storage()
 534:Eigen/src/Core/PlainObjectBase.h ****     {
 535:Eigen/src/Core/PlainObjectBase.h ****       _check_template_params();
 536:Eigen/src/Core/PlainObjectBase.h ****       resizeLike(other);
 537:Eigen/src/Core/PlainObjectBase.h ****       _set_noalias(other);
 538:Eigen/src/Core/PlainObjectBase.h ****     }
 539:Eigen/src/Core/PlainObjectBase.h **** 
 540:Eigen/src/Core/PlainObjectBase.h ****     /** \sa PlainObjectBase::operator=(const EigenBase<OtherDerived>&) */
 541:Eigen/src/Core/PlainObjectBase.h ****     template<typename OtherDerived>
 542:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 543:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE PlainObjectBase(const EigenBase<OtherDerived> &other)
 544:Eigen/src/Core/PlainObjectBase.h ****       : m_storage()
 545:Eigen/src/Core/PlainObjectBase.h ****     {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 90


 546:Eigen/src/Core/PlainObjectBase.h ****       _check_template_params();
 547:Eigen/src/Core/PlainObjectBase.h ****       resizeLike(other);
 548:Eigen/src/Core/PlainObjectBase.h ****       *this = other.derived();
 549:Eigen/src/Core/PlainObjectBase.h ****     }
 550:Eigen/src/Core/PlainObjectBase.h ****     /** \brief Copy constructor with in-place evaluation */
 551:Eigen/src/Core/PlainObjectBase.h ****     template<typename OtherDerived>
 552:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 553:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE PlainObjectBase(const ReturnByValue<OtherDerived>& other)
 554:Eigen/src/Core/PlainObjectBase.h ****     {
 555:Eigen/src/Core/PlainObjectBase.h ****       _check_template_params();
 556:Eigen/src/Core/PlainObjectBase.h ****       // FIXME this does not automatically transpose vectors if necessary
 557:Eigen/src/Core/PlainObjectBase.h ****       resize(other.rows(), other.cols());
 558:Eigen/src/Core/PlainObjectBase.h ****       other.evalTo(this->derived());
 559:Eigen/src/Core/PlainObjectBase.h ****     }
 560:Eigen/src/Core/PlainObjectBase.h **** 
 561:Eigen/src/Core/PlainObjectBase.h ****   public:
 562:Eigen/src/Core/PlainObjectBase.h **** 
 563:Eigen/src/Core/PlainObjectBase.h ****     /** \brief Copies the generic expression \a other into *this.
 564:Eigen/src/Core/PlainObjectBase.h ****       * \copydetails DenseBase::operator=(const EigenBase<OtherDerived> &other)
 565:Eigen/src/Core/PlainObjectBase.h ****       */
 566:Eigen/src/Core/PlainObjectBase.h ****     template<typename OtherDerived>
 567:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC 
 568:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE Derived& operator=(const EigenBase<OtherDerived> &other)
 569:Eigen/src/Core/PlainObjectBase.h ****     {
 570:Eigen/src/Core/PlainObjectBase.h ****       _resize_to_match(other);
 571:Eigen/src/Core/PlainObjectBase.h ****       Base::operator=(other.derived());
 572:Eigen/src/Core/PlainObjectBase.h ****       return this->derived();
 573:Eigen/src/Core/PlainObjectBase.h ****     }
 574:Eigen/src/Core/PlainObjectBase.h **** 
 575:Eigen/src/Core/PlainObjectBase.h ****     /** \name Map
 576:Eigen/src/Core/PlainObjectBase.h ****       * These are convenience functions returning Map objects. The Map() static functions return un
 577:Eigen/src/Core/PlainObjectBase.h ****       * while the AlignedMap() functions return aligned Map objects and thus should be called only 
 578:Eigen/src/Core/PlainObjectBase.h ****       * \a data pointers.
 579:Eigen/src/Core/PlainObjectBase.h ****       *
 580:Eigen/src/Core/PlainObjectBase.h ****       * Here is an example using strides:
 581:Eigen/src/Core/PlainObjectBase.h ****       * \include Matrix_Map_stride.cpp
 582:Eigen/src/Core/PlainObjectBase.h ****       * Output: \verbinclude Matrix_Map_stride.out
 583:Eigen/src/Core/PlainObjectBase.h ****       *
 584:Eigen/src/Core/PlainObjectBase.h ****       * \see class Map
 585:Eigen/src/Core/PlainObjectBase.h ****       */
 586:Eigen/src/Core/PlainObjectBase.h ****     //@{
 587:Eigen/src/Core/PlainObjectBase.h ****     static inline ConstMapType Map(const Scalar* data)
 588:Eigen/src/Core/PlainObjectBase.h ****     { return ConstMapType(data); }
 589:Eigen/src/Core/PlainObjectBase.h ****     static inline MapType Map(Scalar* data)
 590:Eigen/src/Core/PlainObjectBase.h ****     { return MapType(data); }
 591:Eigen/src/Core/PlainObjectBase.h ****     static inline ConstMapType Map(const Scalar* data, Index size)
 592:Eigen/src/Core/PlainObjectBase.h ****     { return ConstMapType(data, size); }
 593:Eigen/src/Core/PlainObjectBase.h ****     static inline MapType Map(Scalar* data, Index size)
 594:Eigen/src/Core/PlainObjectBase.h ****     { return MapType(data, size); }
 595:Eigen/src/Core/PlainObjectBase.h ****     static inline ConstMapType Map(const Scalar* data, Index rows, Index cols)
 596:Eigen/src/Core/PlainObjectBase.h ****     { return ConstMapType(data, rows, cols); }
 597:Eigen/src/Core/PlainObjectBase.h ****     static inline MapType Map(Scalar* data, Index rows, Index cols)
 598:Eigen/src/Core/PlainObjectBase.h ****     { return MapType(data, rows, cols); }
 599:Eigen/src/Core/PlainObjectBase.h **** 
 600:Eigen/src/Core/PlainObjectBase.h ****     static inline ConstAlignedMapType MapAligned(const Scalar* data)
 601:Eigen/src/Core/PlainObjectBase.h ****     { return ConstAlignedMapType(data); }
 602:Eigen/src/Core/PlainObjectBase.h ****     static inline AlignedMapType MapAligned(Scalar* data)
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 91


 603:Eigen/src/Core/PlainObjectBase.h ****     { return AlignedMapType(data); }
 604:Eigen/src/Core/PlainObjectBase.h ****     static inline ConstAlignedMapType MapAligned(const Scalar* data, Index size)
 605:Eigen/src/Core/PlainObjectBase.h ****     { return ConstAlignedMapType(data, size); }
 606:Eigen/src/Core/PlainObjectBase.h ****     static inline AlignedMapType MapAligned(Scalar* data, Index size)
 607:Eigen/src/Core/PlainObjectBase.h ****     { return AlignedMapType(data, size); }
 608:Eigen/src/Core/PlainObjectBase.h ****     static inline ConstAlignedMapType MapAligned(const Scalar* data, Index rows, Index cols)
 609:Eigen/src/Core/PlainObjectBase.h ****     { return ConstAlignedMapType(data, rows, cols); }
 610:Eigen/src/Core/PlainObjectBase.h ****     static inline AlignedMapType MapAligned(Scalar* data, Index rows, Index cols)
 611:Eigen/src/Core/PlainObjectBase.h ****     { return AlignedMapType(data, rows, cols); }
 612:Eigen/src/Core/PlainObjectBase.h **** 
 613:Eigen/src/Core/PlainObjectBase.h ****     template<int Outer, int Inner>
 614:Eigen/src/Core/PlainObjectBase.h ****     static inline typename StridedConstMapType<Stride<Outer, Inner> >::type Map(const Scalar* data,
 615:Eigen/src/Core/PlainObjectBase.h ****     { return typename StridedConstMapType<Stride<Outer, Inner> >::type(data, stride); }
 616:Eigen/src/Core/PlainObjectBase.h ****     template<int Outer, int Inner>
 617:Eigen/src/Core/PlainObjectBase.h ****     static inline typename StridedMapType<Stride<Outer, Inner> >::type Map(Scalar* data, const Stri
 618:Eigen/src/Core/PlainObjectBase.h ****     { return typename StridedMapType<Stride<Outer, Inner> >::type(data, stride); }
 619:Eigen/src/Core/PlainObjectBase.h ****     template<int Outer, int Inner>
 620:Eigen/src/Core/PlainObjectBase.h ****     static inline typename StridedConstMapType<Stride<Outer, Inner> >::type Map(const Scalar* data,
 621:Eigen/src/Core/PlainObjectBase.h ****     { return typename StridedConstMapType<Stride<Outer, Inner> >::type(data, size, stride); }
 622:Eigen/src/Core/PlainObjectBase.h ****     template<int Outer, int Inner>
 623:Eigen/src/Core/PlainObjectBase.h ****     static inline typename StridedMapType<Stride<Outer, Inner> >::type Map(Scalar* data, Index size
 624:Eigen/src/Core/PlainObjectBase.h ****     { return typename StridedMapType<Stride<Outer, Inner> >::type(data, size, stride); }
 625:Eigen/src/Core/PlainObjectBase.h ****     template<int Outer, int Inner>
 626:Eigen/src/Core/PlainObjectBase.h ****     static inline typename StridedConstMapType<Stride<Outer, Inner> >::type Map(const Scalar* data,
 627:Eigen/src/Core/PlainObjectBase.h ****     { return typename StridedConstMapType<Stride<Outer, Inner> >::type(data, rows, cols, stride); }
 628:Eigen/src/Core/PlainObjectBase.h ****     template<int Outer, int Inner>
 629:Eigen/src/Core/PlainObjectBase.h ****     static inline typename StridedMapType<Stride<Outer, Inner> >::type Map(Scalar* data, Index rows
 630:Eigen/src/Core/PlainObjectBase.h ****     { return typename StridedMapType<Stride<Outer, Inner> >::type(data, rows, cols, stride); }
 631:Eigen/src/Core/PlainObjectBase.h **** 
 632:Eigen/src/Core/PlainObjectBase.h ****     template<int Outer, int Inner>
 633:Eigen/src/Core/PlainObjectBase.h ****     static inline typename StridedConstAlignedMapType<Stride<Outer, Inner> >::type MapAligned(const
 634:Eigen/src/Core/PlainObjectBase.h ****     { return typename StridedConstAlignedMapType<Stride<Outer, Inner> >::type(data, stride); }
 635:Eigen/src/Core/PlainObjectBase.h ****     template<int Outer, int Inner>
 636:Eigen/src/Core/PlainObjectBase.h ****     static inline typename StridedAlignedMapType<Stride<Outer, Inner> >::type MapAligned(Scalar* da
 637:Eigen/src/Core/PlainObjectBase.h ****     { return typename StridedAlignedMapType<Stride<Outer, Inner> >::type(data, stride); }
 638:Eigen/src/Core/PlainObjectBase.h ****     template<int Outer, int Inner>
 639:Eigen/src/Core/PlainObjectBase.h ****     static inline typename StridedConstAlignedMapType<Stride<Outer, Inner> >::type MapAligned(const
 640:Eigen/src/Core/PlainObjectBase.h ****     { return typename StridedConstAlignedMapType<Stride<Outer, Inner> >::type(data, size, stride); 
 641:Eigen/src/Core/PlainObjectBase.h ****     template<int Outer, int Inner>
 642:Eigen/src/Core/PlainObjectBase.h ****     static inline typename StridedAlignedMapType<Stride<Outer, Inner> >::type MapAligned(Scalar* da
 643:Eigen/src/Core/PlainObjectBase.h ****     { return typename StridedAlignedMapType<Stride<Outer, Inner> >::type(data, size, stride); }
 644:Eigen/src/Core/PlainObjectBase.h ****     template<int Outer, int Inner>
 645:Eigen/src/Core/PlainObjectBase.h ****     static inline typename StridedConstAlignedMapType<Stride<Outer, Inner> >::type MapAligned(const
 646:Eigen/src/Core/PlainObjectBase.h ****     { return typename StridedConstAlignedMapType<Stride<Outer, Inner> >::type(data, rows, cols, str
 647:Eigen/src/Core/PlainObjectBase.h ****     template<int Outer, int Inner>
 648:Eigen/src/Core/PlainObjectBase.h ****     static inline typename StridedAlignedMapType<Stride<Outer, Inner> >::type MapAligned(Scalar* da
 649:Eigen/src/Core/PlainObjectBase.h ****     { return typename StridedAlignedMapType<Stride<Outer, Inner> >::type(data, rows, cols, stride);
 650:Eigen/src/Core/PlainObjectBase.h ****     //@}
 651:Eigen/src/Core/PlainObjectBase.h **** 
 652:Eigen/src/Core/PlainObjectBase.h ****     using Base::setConstant;
 653:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC Derived& setConstant(Index size, const Scalar& val);
 654:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC Derived& setConstant(Index rows, Index cols, const Scalar& val);
 655:Eigen/src/Core/PlainObjectBase.h **** 
 656:Eigen/src/Core/PlainObjectBase.h ****     using Base::setZero;
 657:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC Derived& setZero(Index size);
 658:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC Derived& setZero(Index rows, Index cols);
 659:Eigen/src/Core/PlainObjectBase.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 92


 660:Eigen/src/Core/PlainObjectBase.h ****     using Base::setOnes;
 661:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC Derived& setOnes(Index size);
 662:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC Derived& setOnes(Index rows, Index cols);
 663:Eigen/src/Core/PlainObjectBase.h **** 
 664:Eigen/src/Core/PlainObjectBase.h ****     using Base::setRandom;
 665:Eigen/src/Core/PlainObjectBase.h ****     Derived& setRandom(Index size);
 666:Eigen/src/Core/PlainObjectBase.h ****     Derived& setRandom(Index rows, Index cols);
 667:Eigen/src/Core/PlainObjectBase.h **** 
 668:Eigen/src/Core/PlainObjectBase.h ****     #ifdef EIGEN_PLAINOBJECTBASE_PLUGIN
 669:Eigen/src/Core/PlainObjectBase.h ****     #include EIGEN_PLAINOBJECTBASE_PLUGIN
 670:Eigen/src/Core/PlainObjectBase.h ****     #endif
 671:Eigen/src/Core/PlainObjectBase.h **** 
 672:Eigen/src/Core/PlainObjectBase.h ****   protected:
 673:Eigen/src/Core/PlainObjectBase.h ****     /** \internal Resizes *this in preparation for assigning \a other to it.
 674:Eigen/src/Core/PlainObjectBase.h ****       * Takes care of doing all the checking that's needed.
 675:Eigen/src/Core/PlainObjectBase.h ****       *
 676:Eigen/src/Core/PlainObjectBase.h ****       * Note that copying a row-vector into a vector (and conversely) is allowed.
 677:Eigen/src/Core/PlainObjectBase.h ****       * The resizing, if any, is then done in the appropriate way so that row-vectors
 678:Eigen/src/Core/PlainObjectBase.h ****       * remain row-vectors and vectors remain vectors.
 679:Eigen/src/Core/PlainObjectBase.h ****       */
 680:Eigen/src/Core/PlainObjectBase.h ****     template<typename OtherDerived>
 681:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC 
 682:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _resize_to_match(const EigenBase<OtherDerived>& other)
 683:Eigen/src/Core/PlainObjectBase.h ****     {
 684:Eigen/src/Core/PlainObjectBase.h ****       #ifdef EIGEN_NO_AUTOMATIC_RESIZING
 685:Eigen/src/Core/PlainObjectBase.h ****       eigen_assert((this->size()==0 || (IsVectorAtCompileTime ? (this->size() == other.size())
 686:Eigen/src/Core/PlainObjectBase.h ****                  : (rows() == other.rows() && cols() == other.cols())))
 687:Eigen/src/Core/PlainObjectBase.h ****         && "Size mismatch. Automatic resizing is disabled because EIGEN_NO_AUTOMATIC_RESIZING is de
 688:Eigen/src/Core/PlainObjectBase.h ****       EIGEN_ONLY_USED_FOR_DEBUG(other);
 689:Eigen/src/Core/PlainObjectBase.h ****       #else
 690:Eigen/src/Core/PlainObjectBase.h ****       resizeLike(other);
 691:Eigen/src/Core/PlainObjectBase.h ****       #endif
 692:Eigen/src/Core/PlainObjectBase.h ****     }
 693:Eigen/src/Core/PlainObjectBase.h **** 
 694:Eigen/src/Core/PlainObjectBase.h ****     /**
 695:Eigen/src/Core/PlainObjectBase.h ****       * \brief Copies the value of the expression \a other into \c *this with automatic resizing.
 696:Eigen/src/Core/PlainObjectBase.h ****       *
 697:Eigen/src/Core/PlainObjectBase.h ****       * *this might be resized to match the dimensions of \a other. If *this was a null matrix (not
 698:Eigen/src/Core/PlainObjectBase.h ****       * it will be initialized.
 699:Eigen/src/Core/PlainObjectBase.h ****       *
 700:Eigen/src/Core/PlainObjectBase.h ****       * Note that copying a row-vector into a vector (and conversely) is allowed.
 701:Eigen/src/Core/PlainObjectBase.h ****       * The resizing, if any, is then done in the appropriate way so that row-vectors
 702:Eigen/src/Core/PlainObjectBase.h ****       * remain row-vectors and vectors remain vectors.
 703:Eigen/src/Core/PlainObjectBase.h ****       *
 704:Eigen/src/Core/PlainObjectBase.h ****       * \sa operator=(const MatrixBase<OtherDerived>&), _set_noalias()
 705:Eigen/src/Core/PlainObjectBase.h ****       *
 706:Eigen/src/Core/PlainObjectBase.h ****       * \internal
 707:Eigen/src/Core/PlainObjectBase.h ****       */
 708:Eigen/src/Core/PlainObjectBase.h ****     // aliasing is dealt once in internall::call_assignment
 709:Eigen/src/Core/PlainObjectBase.h ****     // so at this stage we have to assume aliasing... and resising has to be done later.
 710:Eigen/src/Core/PlainObjectBase.h ****     template<typename OtherDerived>
 711:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC 
 712:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 713:Eigen/src/Core/PlainObjectBase.h ****     {
 714:Eigen/src/Core/PlainObjectBase.h ****       internal::call_assignment(this->derived(), other.derived());
 715:Eigen/src/Core/PlainObjectBase.h ****       return this->derived();
 716:Eigen/src/Core/PlainObjectBase.h ****     }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 93


 717:Eigen/src/Core/PlainObjectBase.h **** 
 718:Eigen/src/Core/PlainObjectBase.h ****     /** \internal Like _set() but additionally makes the assumption that no aliasing effect can hap
 719:Eigen/src/Core/PlainObjectBase.h ****       * is the case when creating a new matrix) so one can enforce lazy evaluation.
 720:Eigen/src/Core/PlainObjectBase.h ****       *
 721:Eigen/src/Core/PlainObjectBase.h ****       * \sa operator=(const MatrixBase<OtherDerived>&), _set()
 722:Eigen/src/Core/PlainObjectBase.h ****       */
 723:Eigen/src/Core/PlainObjectBase.h ****     template<typename OtherDerived>
 724:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC 
 725:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 726:Eigen/src/Core/PlainObjectBase.h ****     {
 727:Eigen/src/Core/PlainObjectBase.h ****       // I don't think we need this resize call since the lazyAssign will anyways resize
 728:Eigen/src/Core/PlainObjectBase.h ****       // and lazyAssign will be called by the assign selector.
 729:Eigen/src/Core/PlainObjectBase.h ****       //_resize_to_match(other);
 730:Eigen/src/Core/PlainObjectBase.h ****       // the 'false' below means to enforce lazy evaluation. We don't use lazyAssign() because
 731:Eigen/src/Core/PlainObjectBase.h ****       // it wouldn't allow to copy a row-vector into a column-vector.
 732:Eigen/src/Core/PlainObjectBase.h ****       internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scal
 733:Eigen/src/Core/PlainObjectBase.h ****       return this->derived();
 734:Eigen/src/Core/PlainObjectBase.h ****     }
 735:Eigen/src/Core/PlainObjectBase.h **** 
 736:Eigen/src/Core/PlainObjectBase.h ****     template<typename T0, typename T1>
 737:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 738:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::Size
 739:Eigen/src/Core/PlainObjectBase.h ****     {
 740:Eigen/src/Core/PlainObjectBase.h ****       EIGEN_STATIC_ASSERT(bool(NumTraits<T0>::IsInteger) &&
 741:Eigen/src/Core/PlainObjectBase.h ****                           bool(NumTraits<T1>::IsInteger),
 742:Eigen/src/Core/PlainObjectBase.h ****                           FLOATING_POINT_ARGUMENT_PASSED__INTEGER_WAS_EXPECTED)
 743:Eigen/src/Core/PlainObjectBase.h ****       resize(rows,cols);
 744:Eigen/src/Core/PlainObjectBase.h ****     }
 745:Eigen/src/Core/PlainObjectBase.h ****     
 746:Eigen/src/Core/PlainObjectBase.h ****     template<typename T0, typename T1>
 747:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC 
 748:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _init2(const T0& val0, const T1& val1, typename internal::enable_if<Ba
 749:Eigen/src/Core/PlainObjectBase.h ****     {
 750:Eigen/src/Core/PlainObjectBase.h ****       EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(PlainObjectBase, 2)
 751:Eigen/src/Core/PlainObjectBase.h ****       m_storage.data()[0] = Scalar(val0);
 752:Eigen/src/Core/PlainObjectBase.h ****       m_storage.data()[1] = Scalar(val1);
 753:Eigen/src/Core/PlainObjectBase.h ****     }
 754:Eigen/src/Core/PlainObjectBase.h ****     
 755:Eigen/src/Core/PlainObjectBase.h ****     template<typename T0, typename T1>
 756:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC 
 757:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _init2(const Index& val0, const Index& val1,
 758:Eigen/src/Core/PlainObjectBase.h ****                                     typename internal::enable_if<    (!internal::is_same<Index,Scal
 759:Eigen/src/Core/PlainObjectBase.h ****                                                                   && (internal::is_same<T0,Index>::
 760:Eigen/src/Core/PlainObjectBase.h ****                                                                   && (internal::is_same<T1,Index>::
 761:Eigen/src/Core/PlainObjectBase.h ****                                                                   && Base::SizeAtCompileTime==2,T1>
 762:Eigen/src/Core/PlainObjectBase.h ****     {
 763:Eigen/src/Core/PlainObjectBase.h ****       EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(PlainObjectBase, 2)
 764:Eigen/src/Core/PlainObjectBase.h ****       m_storage.data()[0] = Scalar(val0);
 765:Eigen/src/Core/PlainObjectBase.h ****       m_storage.data()[1] = Scalar(val1);
 766:Eigen/src/Core/PlainObjectBase.h ****     }
 767:Eigen/src/Core/PlainObjectBase.h **** 
 768:Eigen/src/Core/PlainObjectBase.h ****     // The argument is convertible to the Index type and we either have a non 1x1 Matrix, or a dyna
 769:Eigen/src/Core/PlainObjectBase.h ****     // then the argument is meant to be the size of the object.
 770:Eigen/src/Core/PlainObjectBase.h ****     template<typename T>
 771:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 772:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _init1(Index size, typename internal::enable_if<    (Base::SizeAtCompi
 773:Eigen/src/Core/PlainObjectBase.h ****                                                                               && ((!internal::is_sa
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 94


 774:Eigen/src/Core/PlainObjectBase.h ****     {
 775:Eigen/src/Core/PlainObjectBase.h ****       // NOTE MSVC 2008 complains if we directly put bool(NumTraits<T>::IsInteger) as the EIGEN_STA
 776:Eigen/src/Core/PlainObjectBase.h ****       const bool is_integer = NumTraits<T>::IsInteger;
 777:Eigen/src/Core/PlainObjectBase.h ****       EIGEN_UNUSED_VARIABLE(is_integer);
 778:Eigen/src/Core/PlainObjectBase.h ****       EIGEN_STATIC_ASSERT(is_integer,
 779:Eigen/src/Core/PlainObjectBase.h ****                           FLOATING_POINT_ARGUMENT_PASSED__INTEGER_WAS_EXPECTED)
 780:Eigen/src/Core/PlainObjectBase.h ****       resize(size);
 781:Eigen/src/Core/PlainObjectBase.h ****     }
 782:Eigen/src/Core/PlainObjectBase.h ****     
 783:Eigen/src/Core/PlainObjectBase.h ****     // We have a 1x1 matrix/array => the argument is interpreted as the value of the unique coeffic
 784:Eigen/src/Core/PlainObjectBase.h ****     template<typename T>
 785:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 786:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _init1(const Scalar& val0, typename internal::enable_if<Base::SizeAtCo
 787:Eigen/src/Core/PlainObjectBase.h ****     {
 788:Eigen/src/Core/PlainObjectBase.h ****       EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(PlainObjectBase, 1)
 789:Eigen/src/Core/PlainObjectBase.h ****       m_storage.data()[0] = val0;
 790:Eigen/src/Core/PlainObjectBase.h ****     }
 791:Eigen/src/Core/PlainObjectBase.h ****     
 792:Eigen/src/Core/PlainObjectBase.h ****     // We have a 1x1 matrix/array => the argument is interpreted as the value of the unique coeffic
 793:Eigen/src/Core/PlainObjectBase.h ****     template<typename T>
 794:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 795:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _init1(const Index& val0,
 796:Eigen/src/Core/PlainObjectBase.h ****                                     typename internal::enable_if<    (!internal::is_same<Index,Scal
 797:Eigen/src/Core/PlainObjectBase.h ****                                                                   && (internal::is_same<Index,T>::v
 798:Eigen/src/Core/PlainObjectBase.h ****                                                                   && Base::SizeAtCompileTime==1
 799:Eigen/src/Core/PlainObjectBase.h ****                                                                   && internal::is_convertible<T, Sc
 800:Eigen/src/Core/PlainObjectBase.h ****     {
 801:Eigen/src/Core/PlainObjectBase.h ****       EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(PlainObjectBase, 1)
 802:Eigen/src/Core/PlainObjectBase.h ****       m_storage.data()[0] = Scalar(val0);
 803:Eigen/src/Core/PlainObjectBase.h ****     }
 804:Eigen/src/Core/PlainObjectBase.h **** 
 805:Eigen/src/Core/PlainObjectBase.h ****     // Initialize a fixed size matrix from a pointer to raw data
 806:Eigen/src/Core/PlainObjectBase.h ****     template<typename T>
 807:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 808:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _init1(const Scalar* data){
 809:Eigen/src/Core/PlainObjectBase.h ****       this->_set_noalias(ConstMapType(data));
 810:Eigen/src/Core/PlainObjectBase.h ****     }
 811:Eigen/src/Core/PlainObjectBase.h **** 
 812:Eigen/src/Core/PlainObjectBase.h ****     // Initialize an arbitrary matrix from a dense expression
 813:Eigen/src/Core/PlainObjectBase.h ****     template<typename T, typename OtherDerived>
 814:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 815:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 816:Eigen/src/Core/PlainObjectBase.h ****       this->_set_noalias(other);
 817:Eigen/src/Core/PlainObjectBase.h ****     }
 818:Eigen/src/Core/PlainObjectBase.h **** 
 819:Eigen/src/Core/PlainObjectBase.h ****     // Initialize an arbitrary matrix from an object convertible to the Derived type.
 820:Eigen/src/Core/PlainObjectBase.h ****     template<typename T>
 821:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 822:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _init1(const Derived& other){
 823:Eigen/src/Core/PlainObjectBase.h ****       this->_set_noalias(other);
 824:Eigen/src/Core/PlainObjectBase.h ****     }
 825:Eigen/src/Core/PlainObjectBase.h **** 
 826:Eigen/src/Core/PlainObjectBase.h ****     // Initialize an arbitrary matrix from a generic Eigen expression
 827:Eigen/src/Core/PlainObjectBase.h ****     template<typename T, typename OtherDerived>
 828:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 829:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _init1(const EigenBase<OtherDerived>& other){
 830:Eigen/src/Core/PlainObjectBase.h ****       this->derived() = other;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 95


 831:Eigen/src/Core/PlainObjectBase.h ****     }
 832:Eigen/src/Core/PlainObjectBase.h **** 
 833:Eigen/src/Core/PlainObjectBase.h ****     template<typename T, typename OtherDerived>
 834:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 835:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _init1(const ReturnByValue<OtherDerived>& other)
 836:Eigen/src/Core/PlainObjectBase.h ****     {
 837:Eigen/src/Core/PlainObjectBase.h ****       resize(other.rows(), other.cols());
 838:Eigen/src/Core/PlainObjectBase.h ****       other.evalTo(this->derived());
 839:Eigen/src/Core/PlainObjectBase.h ****     }
 840:Eigen/src/Core/PlainObjectBase.h **** 
 841:Eigen/src/Core/PlainObjectBase.h ****     template<typename T, typename OtherDerived, int ColsAtCompileTime>
 842:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 843:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _init1(const RotationBase<OtherDerived,ColsAtCompileTime>& r)
 844:Eigen/src/Core/PlainObjectBase.h ****     {
 845:Eigen/src/Core/PlainObjectBase.h ****       this->derived() = r;
 846:Eigen/src/Core/PlainObjectBase.h ****     }
 847:Eigen/src/Core/PlainObjectBase.h ****     
 848:Eigen/src/Core/PlainObjectBase.h ****     // For fixed-size Array<Scalar,...>
 849:Eigen/src/Core/PlainObjectBase.h ****     template<typename T>
 850:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 851:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _init1(const Scalar& val0,
 852:Eigen/src/Core/PlainObjectBase.h ****                                     typename internal::enable_if<    Base::SizeAtCompileTime!=Dynam
 853:Eigen/src/Core/PlainObjectBase.h ****                                                                   && Base::SizeAtCompileTime!=1
 854:Eigen/src/Core/PlainObjectBase.h ****                                                                   && internal::is_convertible<T, Sc
 855:Eigen/src/Core/PlainObjectBase.h ****                                                                   && internal::is_same<typename int
 856:Eigen/src/Core/PlainObjectBase.h ****     {
 857:Eigen/src/Core/PlainObjectBase.h ****       Base::setConstant(val0);
 858:Eigen/src/Core/PlainObjectBase.h ****     }
 859:Eigen/src/Core/PlainObjectBase.h ****     
 860:Eigen/src/Core/PlainObjectBase.h ****     // For fixed-size Array<Index,...>
 861:Eigen/src/Core/PlainObjectBase.h ****     template<typename T>
 862:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 863:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void _init1(const Index& val0,
 864:Eigen/src/Core/PlainObjectBase.h ****                                     typename internal::enable_if<    (!internal::is_same<Index,Scal
 865:Eigen/src/Core/PlainObjectBase.h ****                                                                   && (internal::is_same<Index,T>::v
 866:Eigen/src/Core/PlainObjectBase.h ****                                                                   && Base::SizeAtCompileTime!=Dynam
 867:Eigen/src/Core/PlainObjectBase.h ****                                                                   && Base::SizeAtCompileTime!=1
 868:Eigen/src/Core/PlainObjectBase.h ****                                                                   && internal::is_convertible<T, Sc
 869:Eigen/src/Core/PlainObjectBase.h ****                                                                   && internal::is_same<typename int
 870:Eigen/src/Core/PlainObjectBase.h ****     {
 871:Eigen/src/Core/PlainObjectBase.h ****       Base::setConstant(val0);
 872:Eigen/src/Core/PlainObjectBase.h ****     }
 873:Eigen/src/Core/PlainObjectBase.h ****     
 874:Eigen/src/Core/PlainObjectBase.h ****     template<typename MatrixTypeA, typename MatrixTypeB, bool SwapPointers>
 875:Eigen/src/Core/PlainObjectBase.h ****     friend struct internal::matrix_swap_impl;
 876:Eigen/src/Core/PlainObjectBase.h **** 
 877:Eigen/src/Core/PlainObjectBase.h ****   public:
 878:Eigen/src/Core/PlainObjectBase.h ****     
 879:Eigen/src/Core/PlainObjectBase.h **** #ifndef EIGEN_PARSED_BY_DOXYGEN
 880:Eigen/src/Core/PlainObjectBase.h ****     /** \internal
 881:Eigen/src/Core/PlainObjectBase.h ****       * \brief Override DenseBase::swap() since for dynamic-sized matrices
 882:Eigen/src/Core/PlainObjectBase.h ****       * of same type it is enough to swap the data pointers.
 883:Eigen/src/Core/PlainObjectBase.h ****       */
 884:Eigen/src/Core/PlainObjectBase.h ****     template<typename OtherDerived>
 885:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 886:Eigen/src/Core/PlainObjectBase.h ****     void swap(DenseBase<OtherDerived> & other)
 887:Eigen/src/Core/PlainObjectBase.h ****     {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 96


 888:Eigen/src/Core/PlainObjectBase.h ****       enum { SwapPointers = internal::is_same<Derived, OtherDerived>::value && Base::SizeAtCompileT
 889:Eigen/src/Core/PlainObjectBase.h ****       internal::matrix_swap_impl<Derived, OtherDerived, bool(SwapPointers)>::run(this->derived(), o
 890:Eigen/src/Core/PlainObjectBase.h ****     }
 891:Eigen/src/Core/PlainObjectBase.h ****     
 892:Eigen/src/Core/PlainObjectBase.h ****     /** \internal
 893:Eigen/src/Core/PlainObjectBase.h ****       * \brief const version forwarded to DenseBase::swap
 894:Eigen/src/Core/PlainObjectBase.h ****       */
 895:Eigen/src/Core/PlainObjectBase.h ****     template<typename OtherDerived>
 896:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 897:Eigen/src/Core/PlainObjectBase.h ****     void swap(DenseBase<OtherDerived> const & other)
 898:Eigen/src/Core/PlainObjectBase.h ****     { Base::swap(other.derived()); }
 899:Eigen/src/Core/PlainObjectBase.h ****     
 900:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC 
 901:Eigen/src/Core/PlainObjectBase.h ****     static EIGEN_STRONG_INLINE void _check_template_params()
 967              		.loc 9 901 37 is_stmt 1 view .LVU246
 968              		.loc 9 901 37 is_stmt 0 view .LVU247
 969              	.LBE2643:
 970              	.LBB2644:
 971              	.LBI2644:
 815:Eigen/src/Core/PlainObjectBase.h ****       this->_set_noalias(other);
 972              		.loc 9 815 30 is_stmt 1 view .LVU248
 973              	.LBB2645:
 974              	.LBI2645:
 725:Eigen/src/Core/PlainObjectBase.h ****     {
 975              		.loc 9 725 34 view .LVU249
 976              	.LBB2646:
 977              	.LBI2646:
 978              		.file 13 "Eigen/src/Core/functors/AssignmentFunctors.h"
   1:Eigen/src/Core/functors/AssignmentFunctors.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/functors/AssignmentFunctors.h **** // for linear algebra.
   3:Eigen/src/Core/functors/AssignmentFunctors.h **** //
   4:Eigen/src/Core/functors/AssignmentFunctors.h **** // Copyright (C) 2008-2010 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:Eigen/src/Core/functors/AssignmentFunctors.h **** //
   6:Eigen/src/Core/functors/AssignmentFunctors.h **** // This Source Code Form is subject to the terms of the Mozilla
   7:Eigen/src/Core/functors/AssignmentFunctors.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   8:Eigen/src/Core/functors/AssignmentFunctors.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
   9:Eigen/src/Core/functors/AssignmentFunctors.h **** 
  10:Eigen/src/Core/functors/AssignmentFunctors.h **** #ifndef EIGEN_ASSIGNMENT_FUNCTORS_H
  11:Eigen/src/Core/functors/AssignmentFunctors.h **** #define EIGEN_ASSIGNMENT_FUNCTORS_H
  12:Eigen/src/Core/functors/AssignmentFunctors.h **** 
  13:Eigen/src/Core/functors/AssignmentFunctors.h **** namespace Eigen {
  14:Eigen/src/Core/functors/AssignmentFunctors.h **** 
  15:Eigen/src/Core/functors/AssignmentFunctors.h **** namespace internal {
  16:Eigen/src/Core/functors/AssignmentFunctors.h ****   
  17:Eigen/src/Core/functors/AssignmentFunctors.h **** /** \internal
  18:Eigen/src/Core/functors/AssignmentFunctors.h ****   * \brief Template functor for scalar/packet assignment
  19:Eigen/src/Core/functors/AssignmentFunctors.h ****   *
  20:Eigen/src/Core/functors/AssignmentFunctors.h ****   */
  21:Eigen/src/Core/functors/AssignmentFunctors.h **** template<typename DstScalar,typename SrcScalar> struct assign_op {
  22:Eigen/src/Core/functors/AssignmentFunctors.h **** 
  23:Eigen/src/Core/functors/AssignmentFunctors.h ****   EIGEN_EMPTY_STRUCT_CTOR(assign_op)
 979              		.loc 13 23 3 view .LVU250
 980              		.loc 13 23 3 is_stmt 0 view .LVU251
 981              	.LBE2646:
 982              	.LBB2647:
 983              	.LBI2647:
 795:Eigen/src/Core/AssignEvaluator.h **** {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 97


 796:Eigen/src/Core/AssignEvaluator.h ****   typename plain_matrix_type<Src>::type tmp(src);
 797:Eigen/src/Core/AssignEvaluator.h ****   call_assignment_no_alias(dst, tmp, func);
 798:Eigen/src/Core/AssignEvaluator.h **** }
 799:Eigen/src/Core/AssignEvaluator.h **** 
 800:Eigen/src/Core/AssignEvaluator.h **** template<typename Dst, typename Src, typename Func>
 801:Eigen/src/Core/AssignEvaluator.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 802:Eigen/src/Core/AssignEvaluator.h **** void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if<!evaluator_assu
 803:Eigen/src/Core/AssignEvaluator.h **** {
 804:Eigen/src/Core/AssignEvaluator.h ****   call_assignment_no_alias(dst, src, func);
 805:Eigen/src/Core/AssignEvaluator.h **** }
 806:Eigen/src/Core/AssignEvaluator.h **** 
 807:Eigen/src/Core/AssignEvaluator.h **** // by-pass "assume-aliasing"
 808:Eigen/src/Core/AssignEvaluator.h **** // When there is no aliasing, we require that 'dst' has been properly resized
 809:Eigen/src/Core/AssignEvaluator.h **** template<typename Dst, template <typename> class StorageBase, typename Src, typename Func>
 810:Eigen/src/Core/AssignEvaluator.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 811:Eigen/src/Core/AssignEvaluator.h **** void call_assignment(NoAlias<Dst,StorageBase>& dst, const Src& src, const Func& func)
 812:Eigen/src/Core/AssignEvaluator.h **** {
 813:Eigen/src/Core/AssignEvaluator.h ****   call_assignment_no_alias(dst.expression(), src, func);
 814:Eigen/src/Core/AssignEvaluator.h **** }
 815:Eigen/src/Core/AssignEvaluator.h **** 
 816:Eigen/src/Core/AssignEvaluator.h **** 
 817:Eigen/src/Core/AssignEvaluator.h **** template<typename Dst, typename Src, typename Func>
 818:Eigen/src/Core/AssignEvaluator.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 819:Eigen/src/Core/AssignEvaluator.h **** void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 984              		.loc 10 819 6 is_stmt 1 view .LVU252
 985              	.LBB2648:
 986              	.LBB2649:
 987              	.LBI2649:
 988              		.file 14 "Eigen/src/Core/ProductEvaluators.h"
   1:Eigen/src/Core/ProductEvaluators.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/ProductEvaluators.h **** // for linear algebra.
   3:Eigen/src/Core/ProductEvaluators.h **** //
   4:Eigen/src/Core/ProductEvaluators.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:Eigen/src/Core/ProductEvaluators.h **** // Copyright (C) 2008-2010 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:Eigen/src/Core/ProductEvaluators.h **** // Copyright (C) 2011 Jitse Niesen <jitse@maths.leeds.ac.uk>
   7:Eigen/src/Core/ProductEvaluators.h **** //
   8:Eigen/src/Core/ProductEvaluators.h **** // This Source Code Form is subject to the terms of the Mozilla
   9:Eigen/src/Core/ProductEvaluators.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
  10:Eigen/src/Core/ProductEvaluators.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  11:Eigen/src/Core/ProductEvaluators.h **** 
  12:Eigen/src/Core/ProductEvaluators.h **** 
  13:Eigen/src/Core/ProductEvaluators.h **** #ifndef EIGEN_PRODUCTEVALUATORS_H
  14:Eigen/src/Core/ProductEvaluators.h **** #define EIGEN_PRODUCTEVALUATORS_H
  15:Eigen/src/Core/ProductEvaluators.h **** 
  16:Eigen/src/Core/ProductEvaluators.h **** namespace Eigen {
  17:Eigen/src/Core/ProductEvaluators.h ****   
  18:Eigen/src/Core/ProductEvaluators.h **** namespace internal {
  19:Eigen/src/Core/ProductEvaluators.h **** 
  20:Eigen/src/Core/ProductEvaluators.h **** /** \internal
  21:Eigen/src/Core/ProductEvaluators.h ****   * Evaluator of a product expression.
  22:Eigen/src/Core/ProductEvaluators.h ****   * Since products require special treatments to handle all possible cases,
  23:Eigen/src/Core/ProductEvaluators.h ****   * we simply deffer the evaluation logic to a product_evaluator class
  24:Eigen/src/Core/ProductEvaluators.h ****   * which offers more partial specialization possibilities.
  25:Eigen/src/Core/ProductEvaluators.h ****   * 
  26:Eigen/src/Core/ProductEvaluators.h ****   * \sa class product_evaluator
  27:Eigen/src/Core/ProductEvaluators.h ****   */
  28:Eigen/src/Core/ProductEvaluators.h **** template<typename Lhs, typename Rhs, int Options>
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 98


  29:Eigen/src/Core/ProductEvaluators.h **** struct evaluator<Product<Lhs, Rhs, Options> > 
  30:Eigen/src/Core/ProductEvaluators.h ****  : public product_evaluator<Product<Lhs, Rhs, Options> >
  31:Eigen/src/Core/ProductEvaluators.h **** {
  32:Eigen/src/Core/ProductEvaluators.h ****   typedef Product<Lhs, Rhs, Options> XprType;
  33:Eigen/src/Core/ProductEvaluators.h ****   typedef product_evaluator<XprType> Base;
  34:Eigen/src/Core/ProductEvaluators.h ****   
  35:Eigen/src/Core/ProductEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
  36:Eigen/src/Core/ProductEvaluators.h **** };
  37:Eigen/src/Core/ProductEvaluators.h ****  
  38:Eigen/src/Core/ProductEvaluators.h **** // Catch "scalar * ( A * B )" and transform it to "(A*scalar) * B"
  39:Eigen/src/Core/ProductEvaluators.h **** // TODO we should apply that rule only if that's really helpful
  40:Eigen/src/Core/ProductEvaluators.h **** template<typename Lhs, typename Rhs, typename Scalar1, typename Scalar2, typename Plain1>
  41:Eigen/src/Core/ProductEvaluators.h **** struct evaluator_assume_aliasing<CwiseBinaryOp<internal::scalar_product_op<Scalar1,Scalar2>,
  42:Eigen/src/Core/ProductEvaluators.h ****                                                const CwiseNullaryOp<internal::scalar_constant_op<Sc
  43:Eigen/src/Core/ProductEvaluators.h ****                                                const Product<Lhs, Rhs, DefaultProduct> > >
  44:Eigen/src/Core/ProductEvaluators.h **** {
  45:Eigen/src/Core/ProductEvaluators.h ****   static const bool value = true;
  46:Eigen/src/Core/ProductEvaluators.h **** };
  47:Eigen/src/Core/ProductEvaluators.h **** template<typename Lhs, typename Rhs, typename Scalar1, typename Scalar2, typename Plain1>
  48:Eigen/src/Core/ProductEvaluators.h **** struct evaluator<CwiseBinaryOp<internal::scalar_product_op<Scalar1,Scalar2>,
  49:Eigen/src/Core/ProductEvaluators.h ****                                const CwiseNullaryOp<internal::scalar_constant_op<Scalar1>, Plain1>,
  50:Eigen/src/Core/ProductEvaluators.h ****                                const Product<Lhs, Rhs, DefaultProduct> > >
  51:Eigen/src/Core/ProductEvaluators.h ****  : public evaluator<Product<EIGEN_SCALAR_BINARYOP_EXPR_RETURN_TYPE(Scalar1,Lhs,product), Rhs, Defau
  52:Eigen/src/Core/ProductEvaluators.h **** {
  53:Eigen/src/Core/ProductEvaluators.h ****   typedef CwiseBinaryOp<internal::scalar_product_op<Scalar1,Scalar2>,
  54:Eigen/src/Core/ProductEvaluators.h ****                                const CwiseNullaryOp<internal::scalar_constant_op<Scalar1>, Plain1>,
  55:Eigen/src/Core/ProductEvaluators.h ****                                const Product<Lhs, Rhs, DefaultProduct> > XprType;
  56:Eigen/src/Core/ProductEvaluators.h ****   typedef evaluator<Product<EIGEN_SCALAR_BINARYOP_EXPR_RETURN_TYPE(Scalar1,Lhs,product), Rhs, Defau
  57:Eigen/src/Core/ProductEvaluators.h **** 
  58:Eigen/src/Core/ProductEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr)
  59:Eigen/src/Core/ProductEvaluators.h ****     : Base(xpr.lhs().functor().m_other * xpr.rhs().lhs() * xpr.rhs().rhs())
  60:Eigen/src/Core/ProductEvaluators.h ****   {}
  61:Eigen/src/Core/ProductEvaluators.h **** };
  62:Eigen/src/Core/ProductEvaluators.h **** 
  63:Eigen/src/Core/ProductEvaluators.h **** 
  64:Eigen/src/Core/ProductEvaluators.h **** template<typename Lhs, typename Rhs, int DiagIndex>
  65:Eigen/src/Core/ProductEvaluators.h **** struct evaluator<Diagonal<const Product<Lhs, Rhs, DefaultProduct>, DiagIndex> > 
  66:Eigen/src/Core/ProductEvaluators.h ****  : public evaluator<Diagonal<const Product<Lhs, Rhs, LazyProduct>, DiagIndex> >
  67:Eigen/src/Core/ProductEvaluators.h **** {
  68:Eigen/src/Core/ProductEvaluators.h ****   typedef Diagonal<const Product<Lhs, Rhs, DefaultProduct>, DiagIndex> XprType;
  69:Eigen/src/Core/ProductEvaluators.h ****   typedef evaluator<Diagonal<const Product<Lhs, Rhs, LazyProduct>, DiagIndex> > Base;
  70:Eigen/src/Core/ProductEvaluators.h ****   
  71:Eigen/src/Core/ProductEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr)
  72:Eigen/src/Core/ProductEvaluators.h ****     : Base(Diagonal<const Product<Lhs, Rhs, LazyProduct>, DiagIndex>(
  73:Eigen/src/Core/ProductEvaluators.h ****         Product<Lhs, Rhs, LazyProduct>(xpr.nestedExpression().lhs(), xpr.nestedExpression().rhs()),
  74:Eigen/src/Core/ProductEvaluators.h ****         xpr.index() ))
  75:Eigen/src/Core/ProductEvaluators.h ****   {}
  76:Eigen/src/Core/ProductEvaluators.h **** };
  77:Eigen/src/Core/ProductEvaluators.h **** 
  78:Eigen/src/Core/ProductEvaluators.h **** 
  79:Eigen/src/Core/ProductEvaluators.h **** // Helper class to perform a matrix product with the destination at hand.
  80:Eigen/src/Core/ProductEvaluators.h **** // Depending on the sizes of the factors, there are different evaluation strategies
  81:Eigen/src/Core/ProductEvaluators.h **** // as controlled by internal::product_type.
  82:Eigen/src/Core/ProductEvaluators.h **** template< typename Lhs, typename Rhs,
  83:Eigen/src/Core/ProductEvaluators.h ****           typename LhsShape = typename evaluator_traits<Lhs>::Shape,
  84:Eigen/src/Core/ProductEvaluators.h ****           typename RhsShape = typename evaluator_traits<Rhs>::Shape,
  85:Eigen/src/Core/ProductEvaluators.h ****           int ProductType = internal::product_type<Lhs,Rhs>::value>
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 99


  86:Eigen/src/Core/ProductEvaluators.h **** struct generic_product_impl;
  87:Eigen/src/Core/ProductEvaluators.h **** 
  88:Eigen/src/Core/ProductEvaluators.h **** template<typename Lhs, typename Rhs>
  89:Eigen/src/Core/ProductEvaluators.h **** struct evaluator_assume_aliasing<Product<Lhs, Rhs, DefaultProduct> > {
  90:Eigen/src/Core/ProductEvaluators.h ****   static const bool value = true;
  91:Eigen/src/Core/ProductEvaluators.h **** };
  92:Eigen/src/Core/ProductEvaluators.h **** 
  93:Eigen/src/Core/ProductEvaluators.h **** // This is the default evaluator implementation for products:
  94:Eigen/src/Core/ProductEvaluators.h **** // It creates a temporary and call generic_product_impl
  95:Eigen/src/Core/ProductEvaluators.h **** template<typename Lhs, typename Rhs, int Options, int ProductTag, typename LhsShape, typename RhsSh
  96:Eigen/src/Core/ProductEvaluators.h **** struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
  97:Eigen/src/Core/ProductEvaluators.h ****   : public evaluator<typename Product<Lhs, Rhs, Options>::PlainObject>
  98:Eigen/src/Core/ProductEvaluators.h **** {
  99:Eigen/src/Core/ProductEvaluators.h ****   typedef Product<Lhs, Rhs, Options> XprType;
 100:Eigen/src/Core/ProductEvaluators.h ****   typedef typename XprType::PlainObject PlainObject;
 101:Eigen/src/Core/ProductEvaluators.h ****   typedef evaluator<PlainObject> Base;
 102:Eigen/src/Core/ProductEvaluators.h ****   enum {
 103:Eigen/src/Core/ProductEvaluators.h ****     Flags = Base::Flags | EvalBeforeNestingBit
 104:Eigen/src/Core/ProductEvaluators.h ****   };
 105:Eigen/src/Core/ProductEvaluators.h **** 
 106:Eigen/src/Core/ProductEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 107:Eigen/src/Core/ProductEvaluators.h ****   explicit product_evaluator(const XprType& xpr)
 108:Eigen/src/Core/ProductEvaluators.h ****     : m_result(xpr.rows(), xpr.cols())
 109:Eigen/src/Core/ProductEvaluators.h ****   {
 110:Eigen/src/Core/ProductEvaluators.h ****     ::new (static_cast<Base*>(this)) Base(m_result);
 111:Eigen/src/Core/ProductEvaluators.h ****     
 112:Eigen/src/Core/ProductEvaluators.h **** // FIXME shall we handle nested_eval here?,
 113:Eigen/src/Core/ProductEvaluators.h **** // if so, then we must take care at removing the call to nested_eval in the specializations (e.g., 
 114:Eigen/src/Core/ProductEvaluators.h **** //     typedef typename internal::nested_eval<Lhs,Rhs::ColsAtCompileTime>::type LhsNested;
 115:Eigen/src/Core/ProductEvaluators.h **** //     typedef typename internal::nested_eval<Rhs,Lhs::RowsAtCompileTime>::type RhsNested;
 116:Eigen/src/Core/ProductEvaluators.h **** //     typedef typename internal::remove_all<LhsNested>::type LhsNestedCleaned;
 117:Eigen/src/Core/ProductEvaluators.h **** //     typedef typename internal::remove_all<RhsNested>::type RhsNestedCleaned;
 118:Eigen/src/Core/ProductEvaluators.h **** //     
 119:Eigen/src/Core/ProductEvaluators.h **** //     const LhsNested lhs(xpr.lhs());
 120:Eigen/src/Core/ProductEvaluators.h **** //     const RhsNested rhs(xpr.rhs());
 121:Eigen/src/Core/ProductEvaluators.h **** //   
 122:Eigen/src/Core/ProductEvaluators.h **** //     generic_product_impl<LhsNestedCleaned, RhsNestedCleaned>::evalTo(m_result, lhs, rhs);
 123:Eigen/src/Core/ProductEvaluators.h **** 
 124:Eigen/src/Core/ProductEvaluators.h ****     generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr
 125:Eigen/src/Core/ProductEvaluators.h ****   }
 126:Eigen/src/Core/ProductEvaluators.h ****   
 127:Eigen/src/Core/ProductEvaluators.h **** protected:  
 128:Eigen/src/Core/ProductEvaluators.h ****   PlainObject m_result;
 129:Eigen/src/Core/ProductEvaluators.h **** };
 130:Eigen/src/Core/ProductEvaluators.h **** 
 131:Eigen/src/Core/ProductEvaluators.h **** // The following three shortcuts are enabled only if the scalar types match excatly.
 132:Eigen/src/Core/ProductEvaluators.h **** // TODO: we could enable them for different scalar types when the product is not vectorized.
 133:Eigen/src/Core/ProductEvaluators.h **** 
 134:Eigen/src/Core/ProductEvaluators.h **** // Dense = Product
 135:Eigen/src/Core/ProductEvaluators.h **** template< typename DstXprType, typename Lhs, typename Rhs, int Options, typename Scalar>
 136:Eigen/src/Core/ProductEvaluators.h **** struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::assign_op<Scalar,Scalar>, Dense2D
 137:Eigen/src/Core/ProductEvaluators.h ****   typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
 138:Eigen/src/Core/ProductEvaluators.h **** {
 139:Eigen/src/Core/ProductEvaluators.h ****   typedef Product<Lhs,Rhs,Options> SrcXprType;
 140:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE
 141:Eigen/src/Core/ProductEvaluators.h ****   void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 989              		.loc 14 141 8 view .LVU253
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 100


 990              	.LBB2650:
 991              	.LBB2651:
 992              	.LBI2651:
 103:Eigen/src/Core/Product.h ****     EIGEN_DEVICE_FUNC const RhsNestedCleaned& rhs() const { return m_rhs; }
 993              		.loc 6 103 47 view .LVU254
 103:Eigen/src/Core/Product.h ****     EIGEN_DEVICE_FUNC const RhsNestedCleaned& rhs() const { return m_rhs; }
 994              		.loc 6 103 47 is_stmt 0 view .LVU255
 995              	.LBE2651:
 996              	.LBB2652:
 997              	.LBI2652:
 104:Eigen/src/Core/Product.h **** 
 998              		.loc 6 104 47 is_stmt 1 view .LVU256
 104:Eigen/src/Core/Product.h **** 
 999              		.loc 6 104 47 is_stmt 0 view .LVU257
 1000              	.LBE2652:
 1001              	.LBB2653:
 1002              	.LBI2653:
 142:Eigen/src/Core/ProductEvaluators.h ****   {
 143:Eigen/src/Core/ProductEvaluators.h ****     Index dstRows = src.rows();
 144:Eigen/src/Core/ProductEvaluators.h ****     Index dstCols = src.cols();
 145:Eigen/src/Core/ProductEvaluators.h ****     if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 146:Eigen/src/Core/ProductEvaluators.h ****       dst.resize(dstRows, dstCols);
 147:Eigen/src/Core/ProductEvaluators.h ****     // FIXME shall we handle nested_eval here?
 148:Eigen/src/Core/ProductEvaluators.h ****     generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 149:Eigen/src/Core/ProductEvaluators.h ****   }
 150:Eigen/src/Core/ProductEvaluators.h **** };
 151:Eigen/src/Core/ProductEvaluators.h **** 
 152:Eigen/src/Core/ProductEvaluators.h **** // Dense += Product
 153:Eigen/src/Core/ProductEvaluators.h **** template< typename DstXprType, typename Lhs, typename Rhs, int Options, typename Scalar>
 154:Eigen/src/Core/ProductEvaluators.h **** struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::add_assign_op<Scalar,Scalar>, Den
 155:Eigen/src/Core/ProductEvaluators.h ****   typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
 156:Eigen/src/Core/ProductEvaluators.h **** {
 157:Eigen/src/Core/ProductEvaluators.h ****   typedef Product<Lhs,Rhs,Options> SrcXprType;
 158:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE
 159:Eigen/src/Core/ProductEvaluators.h ****   void run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<Scalar,Scalar> &)
 160:Eigen/src/Core/ProductEvaluators.h ****   {
 161:Eigen/src/Core/ProductEvaluators.h ****     eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 162:Eigen/src/Core/ProductEvaluators.h ****     // FIXME shall we handle nested_eval here?
 163:Eigen/src/Core/ProductEvaluators.h ****     generic_product_impl<Lhs, Rhs>::addTo(dst, src.lhs(), src.rhs());
 164:Eigen/src/Core/ProductEvaluators.h ****   }
 165:Eigen/src/Core/ProductEvaluators.h **** };
 166:Eigen/src/Core/ProductEvaluators.h **** 
 167:Eigen/src/Core/ProductEvaluators.h **** // Dense -= Product
 168:Eigen/src/Core/ProductEvaluators.h **** template< typename DstXprType, typename Lhs, typename Rhs, int Options, typename Scalar>
 169:Eigen/src/Core/ProductEvaluators.h **** struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::sub_assign_op<Scalar,Scalar>, Den
 170:Eigen/src/Core/ProductEvaluators.h ****   typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
 171:Eigen/src/Core/ProductEvaluators.h **** {
 172:Eigen/src/Core/ProductEvaluators.h ****   typedef Product<Lhs,Rhs,Options> SrcXprType;
 173:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE
 174:Eigen/src/Core/ProductEvaluators.h ****   void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 175:Eigen/src/Core/ProductEvaluators.h ****   {
 176:Eigen/src/Core/ProductEvaluators.h ****     eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 177:Eigen/src/Core/ProductEvaluators.h ****     // FIXME shall we handle nested_eval here?
 178:Eigen/src/Core/ProductEvaluators.h ****     generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 179:Eigen/src/Core/ProductEvaluators.h ****   }
 180:Eigen/src/Core/ProductEvaluators.h **** };
 181:Eigen/src/Core/ProductEvaluators.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 101


 182:Eigen/src/Core/ProductEvaluators.h **** 
 183:Eigen/src/Core/ProductEvaluators.h **** // Dense ?= scalar * Product
 184:Eigen/src/Core/ProductEvaluators.h **** // TODO we should apply that rule if that's really helpful
 185:Eigen/src/Core/ProductEvaluators.h **** // for instance, this is not good for inner products
 186:Eigen/src/Core/ProductEvaluators.h **** template< typename DstXprType, typename Lhs, typename Rhs, typename AssignFunc, typename Scalar, ty
 187:Eigen/src/Core/ProductEvaluators.h **** struct Assignment<DstXprType, CwiseBinaryOp<internal::scalar_product_op<ScalarBis,Scalar>, const Cw
 188:Eigen/src/Core/ProductEvaluators.h ****                                            const Product<Lhs,Rhs,DefaultProduct> >, AssignFunc, Den
 189:Eigen/src/Core/ProductEvaluators.h **** {
 190:Eigen/src/Core/ProductEvaluators.h ****   typedef CwiseBinaryOp<internal::scalar_product_op<ScalarBis,Scalar>,
 191:Eigen/src/Core/ProductEvaluators.h ****                         const CwiseNullaryOp<internal::scalar_constant_op<ScalarBis>,Plain>,
 192:Eigen/src/Core/ProductEvaluators.h ****                         const Product<Lhs,Rhs,DefaultProduct> > SrcXprType;
 193:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE
 194:Eigen/src/Core/ProductEvaluators.h ****   void run(DstXprType &dst, const SrcXprType &src, const AssignFunc& func)
 195:Eigen/src/Core/ProductEvaluators.h ****   {
 196:Eigen/src/Core/ProductEvaluators.h ****     call_assignment_no_alias(dst, (src.lhs().functor().m_other * src.rhs().lhs())*src.rhs().rhs(), 
 197:Eigen/src/Core/ProductEvaluators.h ****   }
 198:Eigen/src/Core/ProductEvaluators.h **** };
 199:Eigen/src/Core/ProductEvaluators.h **** 
 200:Eigen/src/Core/ProductEvaluators.h **** //----------------------------------------
 201:Eigen/src/Core/ProductEvaluators.h **** // Catch "Dense ?= xpr + Product<>" expression to save one temporary
 202:Eigen/src/Core/ProductEvaluators.h **** // FIXME we could probably enable these rules for any product, i.e., not only Dense and DefaultProd
 203:Eigen/src/Core/ProductEvaluators.h **** 
 204:Eigen/src/Core/ProductEvaluators.h **** template<typename OtherXpr, typename Lhs, typename Rhs>
 205:Eigen/src/Core/ProductEvaluators.h **** struct evaluator_assume_aliasing<CwiseBinaryOp<internal::scalar_sum_op<typename OtherXpr::Scalar,ty
 206:Eigen/src/Core/ProductEvaluators.h ****                                                const Product<Lhs,Rhs,DefaultProduct> >, DenseShape 
 207:Eigen/src/Core/ProductEvaluators.h ****   static const bool value = true;
 208:Eigen/src/Core/ProductEvaluators.h **** };
 209:Eigen/src/Core/ProductEvaluators.h **** 
 210:Eigen/src/Core/ProductEvaluators.h **** template<typename OtherXpr, typename Lhs, typename Rhs>
 211:Eigen/src/Core/ProductEvaluators.h **** struct evaluator_assume_aliasing<CwiseBinaryOp<internal::scalar_difference_op<typename OtherXpr::Sc
 212:Eigen/src/Core/ProductEvaluators.h ****                                                const Product<Lhs,Rhs,DefaultProduct> >, DenseShape 
 213:Eigen/src/Core/ProductEvaluators.h ****   static const bool value = true;
 214:Eigen/src/Core/ProductEvaluators.h **** };
 215:Eigen/src/Core/ProductEvaluators.h **** 
 216:Eigen/src/Core/ProductEvaluators.h **** template<typename DstXprType, typename OtherXpr, typename ProductType, typename Func1, typename Fun
 217:Eigen/src/Core/ProductEvaluators.h **** struct assignment_from_xpr_op_product
 218:Eigen/src/Core/ProductEvaluators.h **** {
 219:Eigen/src/Core/ProductEvaluators.h ****   template<typename SrcXprType, typename InitialFunc>
 220:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE
 221:Eigen/src/Core/ProductEvaluators.h ****   void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 222:Eigen/src/Core/ProductEvaluators.h ****   {
 223:Eigen/src/Core/ProductEvaluators.h ****     call_assignment_no_alias(dst, src.lhs(), Func1());
 224:Eigen/src/Core/ProductEvaluators.h ****     call_assignment_no_alias(dst, src.rhs(), Func2());
 225:Eigen/src/Core/ProductEvaluators.h ****   }
 226:Eigen/src/Core/ProductEvaluators.h **** };
 227:Eigen/src/Core/ProductEvaluators.h **** 
 228:Eigen/src/Core/ProductEvaluators.h **** #define EIGEN_CATCH_ASSIGN_XPR_OP_PRODUCT(ASSIGN_OP,BINOP,ASSIGN_OP2) \
 229:Eigen/src/Core/ProductEvaluators.h ****   template< typename DstXprType, typename OtherXpr, typename Lhs, typename Rhs, typename DstScalar,
 230:Eigen/src/Core/ProductEvaluators.h ****   struct Assignment<DstXprType, CwiseBinaryOp<internal::BINOP<OtherScalar,ProdScalar>, const OtherX
 231:Eigen/src/Core/ProductEvaluators.h ****                                             const Product<Lhs,Rhs,DefaultProduct> >, internal::ASSI
 232:Eigen/src/Core/ProductEvaluators.h ****     : assignment_from_xpr_op_product<DstXprType, OtherXpr, Product<Lhs,Rhs,DefaultProduct>, interna
 233:Eigen/src/Core/ProductEvaluators.h ****   {}
 234:Eigen/src/Core/ProductEvaluators.h **** 
 235:Eigen/src/Core/ProductEvaluators.h **** EIGEN_CATCH_ASSIGN_XPR_OP_PRODUCT(assign_op,    scalar_sum_op,add_assign_op);
 236:Eigen/src/Core/ProductEvaluators.h **** EIGEN_CATCH_ASSIGN_XPR_OP_PRODUCT(add_assign_op,scalar_sum_op,add_assign_op);
 237:Eigen/src/Core/ProductEvaluators.h **** EIGEN_CATCH_ASSIGN_XPR_OP_PRODUCT(sub_assign_op,scalar_sum_op,sub_assign_op);
 238:Eigen/src/Core/ProductEvaluators.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 102


 239:Eigen/src/Core/ProductEvaluators.h **** EIGEN_CATCH_ASSIGN_XPR_OP_PRODUCT(assign_op,    scalar_difference_op,sub_assign_op);
 240:Eigen/src/Core/ProductEvaluators.h **** EIGEN_CATCH_ASSIGN_XPR_OP_PRODUCT(add_assign_op,scalar_difference_op,sub_assign_op);
 241:Eigen/src/Core/ProductEvaluators.h **** EIGEN_CATCH_ASSIGN_XPR_OP_PRODUCT(sub_assign_op,scalar_difference_op,add_assign_op);
 242:Eigen/src/Core/ProductEvaluators.h **** 
 243:Eigen/src/Core/ProductEvaluators.h **** //----------------------------------------
 244:Eigen/src/Core/ProductEvaluators.h **** 
 245:Eigen/src/Core/ProductEvaluators.h **** template<typename Lhs, typename Rhs>
 246:Eigen/src/Core/ProductEvaluators.h **** struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,InnerProduct>
 247:Eigen/src/Core/ProductEvaluators.h **** {
 248:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dst>
 249:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 250:Eigen/src/Core/ProductEvaluators.h ****   {
 251:Eigen/src/Core/ProductEvaluators.h ****     dst.coeffRef(0,0) = (lhs.transpose().cwiseProduct(rhs)).sum();
 252:Eigen/src/Core/ProductEvaluators.h ****   }
 253:Eigen/src/Core/ProductEvaluators.h ****   
 254:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dst>
 255:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 256:Eigen/src/Core/ProductEvaluators.h ****   {
 257:Eigen/src/Core/ProductEvaluators.h ****     dst.coeffRef(0,0) += (lhs.transpose().cwiseProduct(rhs)).sum();
 258:Eigen/src/Core/ProductEvaluators.h ****   }
 259:Eigen/src/Core/ProductEvaluators.h ****   
 260:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dst>
 261:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 262:Eigen/src/Core/ProductEvaluators.h ****   { dst.coeffRef(0,0) -= (lhs.transpose().cwiseProduct(rhs)).sum(); }
 263:Eigen/src/Core/ProductEvaluators.h **** };
 264:Eigen/src/Core/ProductEvaluators.h **** 
 265:Eigen/src/Core/ProductEvaluators.h **** 
 266:Eigen/src/Core/ProductEvaluators.h **** /***********************************************************************
 267:Eigen/src/Core/ProductEvaluators.h **** *  Implementation of outer dense * dense vector product
 268:Eigen/src/Core/ProductEvaluators.h **** ***********************************************************************/
 269:Eigen/src/Core/ProductEvaluators.h **** 
 270:Eigen/src/Core/ProductEvaluators.h **** // Column major result
 271:Eigen/src/Core/ProductEvaluators.h **** template<typename Dst, typename Lhs, typename Rhs, typename Func>
 272:Eigen/src/Core/ProductEvaluators.h **** void outer_product_selector_run(Dst& dst, const Lhs &lhs, const Rhs &rhs, const Func& func, const f
 273:Eigen/src/Core/ProductEvaluators.h **** {
 274:Eigen/src/Core/ProductEvaluators.h ****   evaluator<Rhs> rhsEval(rhs);
 275:Eigen/src/Core/ProductEvaluators.h ****   typename nested_eval<Lhs,Rhs::SizeAtCompileTime>::type actual_lhs(lhs);
 276:Eigen/src/Core/ProductEvaluators.h ****   // FIXME if cols is large enough, then it might be useful to make sure that lhs is sequentially s
 277:Eigen/src/Core/ProductEvaluators.h ****   // FIXME not very good if rhs is real and lhs complex while alpha is real too
 278:Eigen/src/Core/ProductEvaluators.h ****   const Index cols = dst.cols();
 279:Eigen/src/Core/ProductEvaluators.h ****   for (Index j=0; j<cols; ++j)
 280:Eigen/src/Core/ProductEvaluators.h ****     func(dst.col(j), rhsEval.coeff(Index(0),j) * actual_lhs);
 281:Eigen/src/Core/ProductEvaluators.h **** }
 282:Eigen/src/Core/ProductEvaluators.h **** 
 283:Eigen/src/Core/ProductEvaluators.h **** // Row major result
 284:Eigen/src/Core/ProductEvaluators.h **** template<typename Dst, typename Lhs, typename Rhs, typename Func>
 285:Eigen/src/Core/ProductEvaluators.h **** void outer_product_selector_run(Dst& dst, const Lhs &lhs, const Rhs &rhs, const Func& func, const t
 286:Eigen/src/Core/ProductEvaluators.h **** {
 287:Eigen/src/Core/ProductEvaluators.h ****   evaluator<Lhs> lhsEval(lhs);
 288:Eigen/src/Core/ProductEvaluators.h ****   typename nested_eval<Rhs,Lhs::SizeAtCompileTime>::type actual_rhs(rhs);
 289:Eigen/src/Core/ProductEvaluators.h ****   // FIXME if rows is large enough, then it might be useful to make sure that rhs is sequentially s
 290:Eigen/src/Core/ProductEvaluators.h ****   // FIXME not very good if lhs is real and rhs complex while alpha is real too
 291:Eigen/src/Core/ProductEvaluators.h ****   const Index rows = dst.rows();
 292:Eigen/src/Core/ProductEvaluators.h ****   for (Index i=0; i<rows; ++i)
 293:Eigen/src/Core/ProductEvaluators.h ****     func(dst.row(i), lhsEval.coeff(i,Index(0)) * actual_rhs);
 294:Eigen/src/Core/ProductEvaluators.h **** }
 295:Eigen/src/Core/ProductEvaluators.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 103


 296:Eigen/src/Core/ProductEvaluators.h **** template<typename Lhs, typename Rhs>
 297:Eigen/src/Core/ProductEvaluators.h **** struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,OuterProduct>
 298:Eigen/src/Core/ProductEvaluators.h **** {
 299:Eigen/src/Core/ProductEvaluators.h ****   template<typename T> struct is_row_major : internal::conditional<(int(T::Flags)&RowMajorBit), int
 300:Eigen/src/Core/ProductEvaluators.h ****   typedef typename Product<Lhs,Rhs>::Scalar Scalar;
 301:Eigen/src/Core/ProductEvaluators.h ****   
 302:Eigen/src/Core/ProductEvaluators.h ****   // TODO it would be nice to be able to exploit our *_assign_op functors for that purpose
 303:Eigen/src/Core/ProductEvaluators.h ****   struct set  { template<typename Dst, typename Src> void operator()(const Dst& dst, const Src& src
 304:Eigen/src/Core/ProductEvaluators.h ****   struct add  { template<typename Dst, typename Src> void operator()(const Dst& dst, const Src& src
 305:Eigen/src/Core/ProductEvaluators.h ****   struct sub  { template<typename Dst, typename Src> void operator()(const Dst& dst, const Src& src
 306:Eigen/src/Core/ProductEvaluators.h ****   struct adds {
 307:Eigen/src/Core/ProductEvaluators.h ****     Scalar m_scale;
 308:Eigen/src/Core/ProductEvaluators.h ****     explicit adds(const Scalar& s) : m_scale(s) {}
 309:Eigen/src/Core/ProductEvaluators.h ****     template<typename Dst, typename Src> void operator()(const Dst& dst, const Src& src) const {
 310:Eigen/src/Core/ProductEvaluators.h ****       dst.const_cast_derived() += m_scale * src;
 311:Eigen/src/Core/ProductEvaluators.h ****     }
 312:Eigen/src/Core/ProductEvaluators.h ****   };
 313:Eigen/src/Core/ProductEvaluators.h ****   
 314:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dst>
 315:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 316:Eigen/src/Core/ProductEvaluators.h ****   {
 317:Eigen/src/Core/ProductEvaluators.h ****     internal::outer_product_selector_run(dst, lhs, rhs, set(), is_row_major<Dst>());
 318:Eigen/src/Core/ProductEvaluators.h ****   }
 319:Eigen/src/Core/ProductEvaluators.h ****   
 320:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dst>
 321:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 322:Eigen/src/Core/ProductEvaluators.h ****   {
 323:Eigen/src/Core/ProductEvaluators.h ****     internal::outer_product_selector_run(dst, lhs, rhs, add(), is_row_major<Dst>());
 324:Eigen/src/Core/ProductEvaluators.h ****   }
 325:Eigen/src/Core/ProductEvaluators.h ****   
 326:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dst>
 327:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 328:Eigen/src/Core/ProductEvaluators.h ****   {
 329:Eigen/src/Core/ProductEvaluators.h ****     internal::outer_product_selector_run(dst, lhs, rhs, sub(), is_row_major<Dst>());
 330:Eigen/src/Core/ProductEvaluators.h ****   }
 331:Eigen/src/Core/ProductEvaluators.h ****   
 332:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dst>
 333:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void scaleAndAddTo(Dst& dst, const Lhs& lhs, const Rhs& rhs, const Sca
 334:Eigen/src/Core/ProductEvaluators.h ****   {
 335:Eigen/src/Core/ProductEvaluators.h ****     internal::outer_product_selector_run(dst, lhs, rhs, adds(alpha), is_row_major<Dst>());
 336:Eigen/src/Core/ProductEvaluators.h ****   }
 337:Eigen/src/Core/ProductEvaluators.h ****   
 338:Eigen/src/Core/ProductEvaluators.h **** };
 339:Eigen/src/Core/ProductEvaluators.h **** 
 340:Eigen/src/Core/ProductEvaluators.h **** 
 341:Eigen/src/Core/ProductEvaluators.h **** // This base class provides default implementations for evalTo, addTo, subTo, in terms of scaleAndA
 342:Eigen/src/Core/ProductEvaluators.h **** template<typename Lhs, typename Rhs, typename Derived>
 343:Eigen/src/Core/ProductEvaluators.h **** struct generic_product_impl_base
 344:Eigen/src/Core/ProductEvaluators.h **** {
 345:Eigen/src/Core/ProductEvaluators.h ****   typedef typename Product<Lhs,Rhs>::Scalar Scalar;
 346:Eigen/src/Core/ProductEvaluators.h ****   
 347:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dst>
 348:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 349:Eigen/src/Core/ProductEvaluators.h ****   { dst.setZero(); scaleAndAddTo(dst, lhs, rhs, Scalar(1)); }
 350:Eigen/src/Core/ProductEvaluators.h **** 
 351:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dst>
 352:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 104


 353:Eigen/src/Core/ProductEvaluators.h ****   { scaleAndAddTo(dst,lhs, rhs, Scalar(1)); }
 354:Eigen/src/Core/ProductEvaluators.h **** 
 355:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dst>
 356:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 357:Eigen/src/Core/ProductEvaluators.h ****   { scaleAndAddTo(dst, lhs, rhs, Scalar(-1)); }
 358:Eigen/src/Core/ProductEvaluators.h ****   
 359:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dst>
 360:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void scaleAndAddTo(Dst& dst, const Lhs& lhs, const Rhs& rhs, const Sca
 361:Eigen/src/Core/ProductEvaluators.h ****   { Derived::scaleAndAddTo(dst,lhs,rhs,alpha); }
 362:Eigen/src/Core/ProductEvaluators.h **** 
 363:Eigen/src/Core/ProductEvaluators.h **** };
 364:Eigen/src/Core/ProductEvaluators.h **** 
 365:Eigen/src/Core/ProductEvaluators.h **** template<typename Lhs, typename Rhs>
 366:Eigen/src/Core/ProductEvaluators.h **** struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,GemvProduct>
 367:Eigen/src/Core/ProductEvaluators.h ****   : generic_product_impl_base<Lhs,Rhs,generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,GemvProduc
 368:Eigen/src/Core/ProductEvaluators.h **** {
 369:Eigen/src/Core/ProductEvaluators.h ****   typedef typename nested_eval<Lhs,1>::type LhsNested;
 370:Eigen/src/Core/ProductEvaluators.h ****   typedef typename nested_eval<Rhs,1>::type RhsNested;
 371:Eigen/src/Core/ProductEvaluators.h ****   typedef typename Product<Lhs,Rhs>::Scalar Scalar;
 372:Eigen/src/Core/ProductEvaluators.h ****   enum { Side = Lhs::IsVectorAtCompileTime ? OnTheLeft : OnTheRight };
 373:Eigen/src/Core/ProductEvaluators.h ****   typedef typename internal::remove_all<typename internal::conditional<int(Side)==OnTheRight,LhsNes
 374:Eigen/src/Core/ProductEvaluators.h **** 
 375:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dest>
 376:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void scaleAndAddTo(Dest& dst, const Lhs& lhs, const Rhs& rhs, const Sc
 377:Eigen/src/Core/ProductEvaluators.h ****   {
 378:Eigen/src/Core/ProductEvaluators.h ****     LhsNested actual_lhs(lhs);
 379:Eigen/src/Core/ProductEvaluators.h ****     RhsNested actual_rhs(rhs);
 380:Eigen/src/Core/ProductEvaluators.h ****     internal::gemv_dense_selector<Side,
 381:Eigen/src/Core/ProductEvaluators.h ****                             (int(MatrixType::Flags)&RowMajorBit) ? RowMajor : ColMajor,
 382:Eigen/src/Core/ProductEvaluators.h ****                             bool(internal::blas_traits<MatrixType>::HasUsableDirectAccess)
 383:Eigen/src/Core/ProductEvaluators.h ****                            >::run(actual_lhs, actual_rhs, dst, alpha);
 384:Eigen/src/Core/ProductEvaluators.h ****   }
 385:Eigen/src/Core/ProductEvaluators.h **** };
 386:Eigen/src/Core/ProductEvaluators.h **** 
 387:Eigen/src/Core/ProductEvaluators.h **** template<typename Lhs, typename Rhs>
 388:Eigen/src/Core/ProductEvaluators.h **** struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode> 
 389:Eigen/src/Core/ProductEvaluators.h **** {
 390:Eigen/src/Core/ProductEvaluators.h ****   typedef typename Product<Lhs,Rhs>::Scalar Scalar;
 391:Eigen/src/Core/ProductEvaluators.h ****   
 392:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dst>
 393:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 1003              		.loc 14 393 35 is_stmt 1 view .LVU258
 1004              	.LBB2654:
 394:Eigen/src/Core/ProductEvaluators.h ****   {
 395:Eigen/src/Core/ProductEvaluators.h ****     // Same as: dst.noalias() = lhs.lazyProduct(rhs);
 396:Eigen/src/Core/ProductEvaluators.h ****     // but easier on the compiler side
 397:Eigen/src/Core/ProductEvaluators.h ****     call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Sc
 1005              		.loc 14 397 50 is_stmt 0 view .LVU259
 1006 0008 4A68     		ldr	r2, [r1, #4]
 1007              	.LVL52:
 1008              		.loc 14 397 50 view .LVU260
 1009 000a 0968     		ldr	r1, [r1]
 1010              	.LVL53:
 1011              		.loc 14 397 50 view .LVU261
 1012 000c 24A8     		add	r0, sp, #144
 1013              	.LVL54:
 1014              		.loc 14 397 50 view .LVU262
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 105


 1015 000e FFF7FEFF 		bl	_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3EL
 1016              	.LVL55:
 1017              	.LBB2655:
 1018              	.LBI2655:
 1019              		.loc 13 23 3 is_stmt 1 view .LVU263
 1020              		.loc 13 23 3 is_stmt 0 view .LVU264
 1021              	.LBE2655:
 1022              	.LBB2656:
 1023              	.LBI2656:
 1024              		.loc 10 819 6 is_stmt 1 view .LVU265
 1025              	.LBB2657:
 1026              	.LBB2658:
 1027              	.LBI2658:
 820:Eigen/src/Core/AssignEvaluator.h **** {
 821:Eigen/src/Core/AssignEvaluator.h ****   enum {
 822:Eigen/src/Core/AssignEvaluator.h ****     NeedToTranspose = (    (int(Dst::RowsAtCompileTime) == 1 && int(Src::ColsAtCompileTime) == 1)
 823:Eigen/src/Core/AssignEvaluator.h ****                         || (int(Dst::ColsAtCompileTime) == 1 && int(Src::RowsAtCompileTime) == 1)
 824:Eigen/src/Core/AssignEvaluator.h ****                       ) && int(Dst::SizeAtCompileTime) != 1
 825:Eigen/src/Core/AssignEvaluator.h ****   };
 826:Eigen/src/Core/AssignEvaluator.h **** 
 827:Eigen/src/Core/AssignEvaluator.h ****   typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst>::type ActualDstTypeC
 828:Eigen/src/Core/AssignEvaluator.h ****   typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst&>::type ActualDstType
 829:Eigen/src/Core/AssignEvaluator.h ****   ActualDstType actualDst(dst);
 830:Eigen/src/Core/AssignEvaluator.h ****   
 831:Eigen/src/Core/AssignEvaluator.h ****   // TODO check whether this is the right place to perform these checks:
 832:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_STATIC_ASSERT_LVALUE(Dst)
 833:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ActualDstTypeCleaned,Src)
 834:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename ActualDstTypeCleaned::Scalar,typename Src::Scalar);
 835:Eigen/src/Core/AssignEvaluator.h ****   
 836:Eigen/src/Core/AssignEvaluator.h ****   Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 837:Eigen/src/Core/AssignEvaluator.h **** }
 838:Eigen/src/Core/AssignEvaluator.h **** template<typename Dst, typename Src>
 839:Eigen/src/Core/AssignEvaluator.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 840:Eigen/src/Core/AssignEvaluator.h **** void call_assignment_no_alias(Dst& dst, const Src& src)
 841:Eigen/src/Core/AssignEvaluator.h **** {
 842:Eigen/src/Core/AssignEvaluator.h ****   call_assignment_no_alias(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>
 843:Eigen/src/Core/AssignEvaluator.h **** }
 844:Eigen/src/Core/AssignEvaluator.h **** 
 845:Eigen/src/Core/AssignEvaluator.h **** template<typename Dst, typename Src, typename Func>
 846:Eigen/src/Core/AssignEvaluator.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 847:Eigen/src/Core/AssignEvaluator.h **** void call_assignment_no_alias_no_transpose(Dst& dst, const Src& src, const Func& func)
 848:Eigen/src/Core/AssignEvaluator.h **** {
 849:Eigen/src/Core/AssignEvaluator.h ****   // TODO check whether this is the right place to perform these checks:
 850:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_STATIC_ASSERT_LVALUE(Dst)
 851:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Dst,Src)
 852:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename Dst::Scalar,typename Src::Scalar);
 853:Eigen/src/Core/AssignEvaluator.h **** 
 854:Eigen/src/Core/AssignEvaluator.h ****   Assignment<Dst,Src,Func>::run(dst, src, func);
 855:Eigen/src/Core/AssignEvaluator.h **** }
 856:Eigen/src/Core/AssignEvaluator.h **** template<typename Dst, typename Src>
 857:Eigen/src/Core/AssignEvaluator.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 858:Eigen/src/Core/AssignEvaluator.h **** void call_assignment_no_alias_no_transpose(Dst& dst, const Src& src)
 859:Eigen/src/Core/AssignEvaluator.h **** {
 860:Eigen/src/Core/AssignEvaluator.h ****   call_assignment_no_alias_no_transpose(dst, src, internal::assign_op<typename Dst::Scalar,typename
 861:Eigen/src/Core/AssignEvaluator.h **** }
 862:Eigen/src/Core/AssignEvaluator.h **** 
 863:Eigen/src/Core/AssignEvaluator.h **** // forward declaration
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 106


 864:Eigen/src/Core/AssignEvaluator.h **** template<typename Dst, typename Src> void check_for_aliasing(const Dst &dst, const Src &src);
 865:Eigen/src/Core/AssignEvaluator.h **** 
 866:Eigen/src/Core/AssignEvaluator.h **** // Generic Dense to Dense assignment
 867:Eigen/src/Core/AssignEvaluator.h **** // Note that the last template argument "Weak" is needed to make it possible to perform
 868:Eigen/src/Core/AssignEvaluator.h **** // both partial specialization+SFINAE without ambiguous specialization
 869:Eigen/src/Core/AssignEvaluator.h **** template< typename DstXprType, typename SrcXprType, typename Functor, typename Weak>
 870:Eigen/src/Core/AssignEvaluator.h **** struct Assignment<DstXprType, SrcXprType, Functor, Dense2Dense, Weak>
 871:Eigen/src/Core/AssignEvaluator.h **** {
 872:Eigen/src/Core/AssignEvaluator.h ****   EIGEN_DEVICE_FUNC
 873:Eigen/src/Core/AssignEvaluator.h ****   static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 1028              		.loc 10 873 35 view .LVU266
 1029              	.LBB2659:
 1030              	.LBI2659:
 725:Eigen/src/Core/AssignEvaluator.h **** {
 1031              		.loc 10 725 44 view .LVU267
 1032              	.LBB2660:
 1033              	.LBB2661:
 1034              	.LBI2661:
  35:Eigen/src/Core/ProductEvaluators.h **** };
 1035              		.loc 14 35 50 view .LVU268
 1036              	.LBB2662:
 1037              	.LBB2663:
 1038              	.LBI2663:
 398:Eigen/src/Core/ProductEvaluators.h ****   }
 399:Eigen/src/Core/ProductEvaluators.h ****   
 400:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dst>
 401:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 402:Eigen/src/Core/ProductEvaluators.h ****   {
 403:Eigen/src/Core/ProductEvaluators.h ****     // dst.noalias() += lhs.lazyProduct(rhs);
 404:Eigen/src/Core/ProductEvaluators.h ****     call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::add_assign_op<typename Dst::Scala
 405:Eigen/src/Core/ProductEvaluators.h ****   }
 406:Eigen/src/Core/ProductEvaluators.h ****   
 407:Eigen/src/Core/ProductEvaluators.h ****   template<typename Dst>
 408:Eigen/src/Core/ProductEvaluators.h ****   static EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 409:Eigen/src/Core/ProductEvaluators.h ****   {
 410:Eigen/src/Core/ProductEvaluators.h ****     // dst.noalias() -= lhs.lazyProduct(rhs);
 411:Eigen/src/Core/ProductEvaluators.h ****     call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::sub_assign_op<typename Dst::Scala
 412:Eigen/src/Core/ProductEvaluators.h ****   }
 413:Eigen/src/Core/ProductEvaluators.h ****   
 414:Eigen/src/Core/ProductEvaluators.h **** //   template<typename Dst>
 415:Eigen/src/Core/ProductEvaluators.h **** //   static inline void scaleAndAddTo(Dst& dst, const Lhs& lhs, const Rhs& rhs, const Scalar& alpha
 416:Eigen/src/Core/ProductEvaluators.h **** //   { dst.noalias() += alpha * lhs.lazyProduct(rhs); }
 417:Eigen/src/Core/ProductEvaluators.h **** };
 418:Eigen/src/Core/ProductEvaluators.h **** 
 419:Eigen/src/Core/ProductEvaluators.h **** // This specialization enforces the use of a coefficient-based evaluation strategy
 420:Eigen/src/Core/ProductEvaluators.h **** template<typename Lhs, typename Rhs>
 421:Eigen/src/Core/ProductEvaluators.h **** struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,LazyCoeffBasedProductMode>
 422:Eigen/src/Core/ProductEvaluators.h ****   : generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode> {};
 423:Eigen/src/Core/ProductEvaluators.h **** 
 424:Eigen/src/Core/ProductEvaluators.h **** // Case 2: Evaluate coeff by coeff
 425:Eigen/src/Core/ProductEvaluators.h **** //
 426:Eigen/src/Core/ProductEvaluators.h **** // This is mostly taken from CoeffBasedProduct.h
 427:Eigen/src/Core/ProductEvaluators.h **** // The main difference is that we add an extra argument to the etor_product_*_impl::run() function
 428:Eigen/src/Core/ProductEvaluators.h **** // for the inner dimension of the product, because evaluator object do not know their size.
 429:Eigen/src/Core/ProductEvaluators.h **** 
 430:Eigen/src/Core/ProductEvaluators.h **** template<int Traversal, int UnrollingIndex, typename Lhs, typename Rhs, typename RetScalar>
 431:Eigen/src/Core/ProductEvaluators.h **** struct etor_product_coeff_impl;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 107


 432:Eigen/src/Core/ProductEvaluators.h **** 
 433:Eigen/src/Core/ProductEvaluators.h **** template<int StorageOrder, int UnrollingIndex, typename Lhs, typename Rhs, typename Packet, int Loa
 434:Eigen/src/Core/ProductEvaluators.h **** struct etor_product_packet_impl;
 435:Eigen/src/Core/ProductEvaluators.h **** 
 436:Eigen/src/Core/ProductEvaluators.h **** template<typename Lhs, typename Rhs, int ProductTag>
 437:Eigen/src/Core/ProductEvaluators.h **** struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 438:Eigen/src/Core/ProductEvaluators.h ****     : evaluator_base<Product<Lhs, Rhs, LazyProduct> >
 439:Eigen/src/Core/ProductEvaluators.h **** {
 440:Eigen/src/Core/ProductEvaluators.h ****   typedef Product<Lhs, Rhs, LazyProduct> XprType;
 441:Eigen/src/Core/ProductEvaluators.h ****   typedef typename XprType::Scalar Scalar;
 442:Eigen/src/Core/ProductEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
 443:Eigen/src/Core/ProductEvaluators.h **** 
 444:Eigen/src/Core/ProductEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 445:Eigen/src/Core/ProductEvaluators.h ****   explicit product_evaluator(const XprType& xpr)
 1039              		.loc 14 445 12 view .LVU269
 1040              	.LBB2664:
 1041              	.LBB2665:
 1042              	.LBB2666:
 1043              	.LBI2666:
 1044              		.file 15 "Eigen/src/Core/CoreEvaluators.h"
   1:Eigen/src/Core/CoreEvaluators.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/CoreEvaluators.h **** // for linear algebra.
   3:Eigen/src/Core/CoreEvaluators.h **** //
   4:Eigen/src/Core/CoreEvaluators.h **** // Copyright (C) 2011 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:Eigen/src/Core/CoreEvaluators.h **** // Copyright (C) 2011-2014 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:Eigen/src/Core/CoreEvaluators.h **** // Copyright (C) 2011-2012 Jitse Niesen <jitse@maths.leeds.ac.uk>
   7:Eigen/src/Core/CoreEvaluators.h **** //
   8:Eigen/src/Core/CoreEvaluators.h **** // This Source Code Form is subject to the terms of the Mozilla
   9:Eigen/src/Core/CoreEvaluators.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
  10:Eigen/src/Core/CoreEvaluators.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  11:Eigen/src/Core/CoreEvaluators.h **** 
  12:Eigen/src/Core/CoreEvaluators.h **** 
  13:Eigen/src/Core/CoreEvaluators.h **** #ifndef EIGEN_COREEVALUATORS_H
  14:Eigen/src/Core/CoreEvaluators.h **** #define EIGEN_COREEVALUATORS_H
  15:Eigen/src/Core/CoreEvaluators.h **** 
  16:Eigen/src/Core/CoreEvaluators.h **** namespace Eigen {
  17:Eigen/src/Core/CoreEvaluators.h ****   
  18:Eigen/src/Core/CoreEvaluators.h **** namespace internal {
  19:Eigen/src/Core/CoreEvaluators.h **** 
  20:Eigen/src/Core/CoreEvaluators.h **** // This class returns the evaluator kind from the expression storage kind.
  21:Eigen/src/Core/CoreEvaluators.h **** // Default assumes index based accessors
  22:Eigen/src/Core/CoreEvaluators.h **** template<typename StorageKind>
  23:Eigen/src/Core/CoreEvaluators.h **** struct storage_kind_to_evaluator_kind {
  24:Eigen/src/Core/CoreEvaluators.h ****   typedef IndexBased Kind;
  25:Eigen/src/Core/CoreEvaluators.h **** };
  26:Eigen/src/Core/CoreEvaluators.h **** 
  27:Eigen/src/Core/CoreEvaluators.h **** // This class returns the evaluator shape from the expression storage kind.
  28:Eigen/src/Core/CoreEvaluators.h **** // It can be Dense, Sparse, Triangular, Diagonal, SelfAdjoint, Band, etc.
  29:Eigen/src/Core/CoreEvaluators.h **** template<typename StorageKind> struct storage_kind_to_shape;
  30:Eigen/src/Core/CoreEvaluators.h **** 
  31:Eigen/src/Core/CoreEvaluators.h **** template<> struct storage_kind_to_shape<Dense>                  { typedef DenseShape Shape;        
  32:Eigen/src/Core/CoreEvaluators.h **** template<> struct storage_kind_to_shape<SolverStorage>          { typedef SolverShape Shape;       
  33:Eigen/src/Core/CoreEvaluators.h **** template<> struct storage_kind_to_shape<PermutationStorage>     { typedef PermutationShape Shape;  
  34:Eigen/src/Core/CoreEvaluators.h **** template<> struct storage_kind_to_shape<TranspositionsStorage>  { typedef TranspositionsShape Shape
  35:Eigen/src/Core/CoreEvaluators.h **** 
  36:Eigen/src/Core/CoreEvaluators.h **** // Evaluators have to be specialized with respect to various criteria such as:
  37:Eigen/src/Core/CoreEvaluators.h **** //  - storage/structure/shape
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 108


  38:Eigen/src/Core/CoreEvaluators.h **** //  - scalar type
  39:Eigen/src/Core/CoreEvaluators.h **** //  - etc.
  40:Eigen/src/Core/CoreEvaluators.h **** // Therefore, we need specialization of evaluator providing additional template arguments for each 
  41:Eigen/src/Core/CoreEvaluators.h **** // We currently distinguish the following kind of evaluators:
  42:Eigen/src/Core/CoreEvaluators.h **** // - unary_evaluator    for expressions taking only one arguments (CwiseUnaryOp, CwiseUnaryView, Tr
  43:Eigen/src/Core/CoreEvaluators.h **** // - binary_evaluator   for expression taking two arguments (CwiseBinaryOp)
  44:Eigen/src/Core/CoreEvaluators.h **** // - ternary_evaluator   for expression taking three arguments (CwiseTernaryOp)
  45:Eigen/src/Core/CoreEvaluators.h **** // - product_evaluator  for linear algebra products (Product); special case of binary_evaluator bec
  46:Eigen/src/Core/CoreEvaluators.h **** // - mapbase_evaluator  for Map, Block, Ref
  47:Eigen/src/Core/CoreEvaluators.h **** // - block_evaluator    for Block (special dispatching to a mapbase_evaluator or unary_evaluator)
  48:Eigen/src/Core/CoreEvaluators.h **** 
  49:Eigen/src/Core/CoreEvaluators.h **** template< typename T,
  50:Eigen/src/Core/CoreEvaluators.h ****           typename Arg1Kind   = typename evaluator_traits<typename T::Arg1>::Kind,
  51:Eigen/src/Core/CoreEvaluators.h ****           typename Arg2Kind   = typename evaluator_traits<typename T::Arg2>::Kind,
  52:Eigen/src/Core/CoreEvaluators.h ****           typename Arg3Kind   = typename evaluator_traits<typename T::Arg3>::Kind,
  53:Eigen/src/Core/CoreEvaluators.h ****           typename Arg1Scalar = typename traits<typename T::Arg1>::Scalar,
  54:Eigen/src/Core/CoreEvaluators.h ****           typename Arg2Scalar = typename traits<typename T::Arg2>::Scalar,
  55:Eigen/src/Core/CoreEvaluators.h ****           typename Arg3Scalar = typename traits<typename T::Arg3>::Scalar> struct ternary_evaluator
  56:Eigen/src/Core/CoreEvaluators.h **** 
  57:Eigen/src/Core/CoreEvaluators.h **** template< typename T,
  58:Eigen/src/Core/CoreEvaluators.h ****           typename LhsKind   = typename evaluator_traits<typename T::Lhs>::Kind,
  59:Eigen/src/Core/CoreEvaluators.h ****           typename RhsKind   = typename evaluator_traits<typename T::Rhs>::Kind,
  60:Eigen/src/Core/CoreEvaluators.h ****           typename LhsScalar = typename traits<typename T::Lhs>::Scalar,
  61:Eigen/src/Core/CoreEvaluators.h ****           typename RhsScalar = typename traits<typename T::Rhs>::Scalar> struct binary_evaluator;
  62:Eigen/src/Core/CoreEvaluators.h **** 
  63:Eigen/src/Core/CoreEvaluators.h **** template< typename T,
  64:Eigen/src/Core/CoreEvaluators.h ****           typename Kind   = typename evaluator_traits<typename T::NestedExpression>::Kind,
  65:Eigen/src/Core/CoreEvaluators.h ****           typename Scalar = typename T::Scalar> struct unary_evaluator;
  66:Eigen/src/Core/CoreEvaluators.h ****           
  67:Eigen/src/Core/CoreEvaluators.h **** // evaluator_traits<T> contains traits for evaluator<T> 
  68:Eigen/src/Core/CoreEvaluators.h **** 
  69:Eigen/src/Core/CoreEvaluators.h **** template<typename T>
  70:Eigen/src/Core/CoreEvaluators.h **** struct evaluator_traits_base
  71:Eigen/src/Core/CoreEvaluators.h **** {
  72:Eigen/src/Core/CoreEvaluators.h ****   // by default, get evaluator kind and shape from storage
  73:Eigen/src/Core/CoreEvaluators.h ****   typedef typename storage_kind_to_evaluator_kind<typename traits<T>::StorageKind>::Kind Kind;
  74:Eigen/src/Core/CoreEvaluators.h ****   typedef typename storage_kind_to_shape<typename traits<T>::StorageKind>::Shape Shape;
  75:Eigen/src/Core/CoreEvaluators.h **** };
  76:Eigen/src/Core/CoreEvaluators.h **** 
  77:Eigen/src/Core/CoreEvaluators.h **** // Default evaluator traits
  78:Eigen/src/Core/CoreEvaluators.h **** template<typename T>
  79:Eigen/src/Core/CoreEvaluators.h **** struct evaluator_traits : public evaluator_traits_base<T>
  80:Eigen/src/Core/CoreEvaluators.h **** {
  81:Eigen/src/Core/CoreEvaluators.h **** };
  82:Eigen/src/Core/CoreEvaluators.h **** 
  83:Eigen/src/Core/CoreEvaluators.h **** template<typename T, typename Shape = typename evaluator_traits<T>::Shape >
  84:Eigen/src/Core/CoreEvaluators.h **** struct evaluator_assume_aliasing {
  85:Eigen/src/Core/CoreEvaluators.h ****   static const bool value = false;
  86:Eigen/src/Core/CoreEvaluators.h **** };
  87:Eigen/src/Core/CoreEvaluators.h **** 
  88:Eigen/src/Core/CoreEvaluators.h **** // By default, we assume a unary expression:
  89:Eigen/src/Core/CoreEvaluators.h **** template<typename T>
  90:Eigen/src/Core/CoreEvaluators.h **** struct evaluator : public unary_evaluator<T>
  91:Eigen/src/Core/CoreEvaluators.h **** {
  92:Eigen/src/Core/CoreEvaluators.h ****   typedef unary_evaluator<T> Base;
  93:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit evaluator(const T& xpr) : Base(xpr) {}
  94:Eigen/src/Core/CoreEvaluators.h **** };
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 109


  95:Eigen/src/Core/CoreEvaluators.h **** 
  96:Eigen/src/Core/CoreEvaluators.h **** 
  97:Eigen/src/Core/CoreEvaluators.h **** // TODO: Think about const-correctness
  98:Eigen/src/Core/CoreEvaluators.h **** template<typename T>
  99:Eigen/src/Core/CoreEvaluators.h **** struct evaluator<const T>
 100:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<T>
 101:Eigen/src/Core/CoreEvaluators.h **** {
 102:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC
 103:Eigen/src/Core/CoreEvaluators.h ****   explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 104:Eigen/src/Core/CoreEvaluators.h **** };
 105:Eigen/src/Core/CoreEvaluators.h **** 
 106:Eigen/src/Core/CoreEvaluators.h **** // ---------- base class for all evaluators ----------
 107:Eigen/src/Core/CoreEvaluators.h **** 
 108:Eigen/src/Core/CoreEvaluators.h **** template<typename ExpressionType>
 109:Eigen/src/Core/CoreEvaluators.h **** struct evaluator_base : public noncopyable
 1045              		.loc 15 109 8 view .LVU270
 1046              	.LBB2667:
 1047              	.LBI2667:
 1048              		.file 16 "Eigen/src/Core/util/Meta.h"
   1:Eigen/src/Core/util/Meta.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/util/Meta.h **** // for linear algebra.
   3:Eigen/src/Core/util/Meta.h **** //
   4:Eigen/src/Core/util/Meta.h **** // Copyright (C) 2008-2015 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:Eigen/src/Core/util/Meta.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:Eigen/src/Core/util/Meta.h **** //
   7:Eigen/src/Core/util/Meta.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/util/Meta.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/util/Meta.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:Eigen/src/Core/util/Meta.h **** 
  11:Eigen/src/Core/util/Meta.h **** #ifndef EIGEN_META_H
  12:Eigen/src/Core/util/Meta.h **** #define EIGEN_META_H
  13:Eigen/src/Core/util/Meta.h **** 
  14:Eigen/src/Core/util/Meta.h **** #if defined(__CUDA_ARCH__)
  15:Eigen/src/Core/util/Meta.h **** #include <cfloat>
  16:Eigen/src/Core/util/Meta.h **** #include <math_constants.h>
  17:Eigen/src/Core/util/Meta.h **** #endif
  18:Eigen/src/Core/util/Meta.h **** 
  19:Eigen/src/Core/util/Meta.h **** #if EIGEN_COMP_ICC>=1600 &&  __cplusplus >= 201103L
  20:Eigen/src/Core/util/Meta.h **** #include <cstdint>
  21:Eigen/src/Core/util/Meta.h **** #endif
  22:Eigen/src/Core/util/Meta.h **** 
  23:Eigen/src/Core/util/Meta.h **** namespace Eigen {
  24:Eigen/src/Core/util/Meta.h **** 
  25:Eigen/src/Core/util/Meta.h **** typedef EIGEN_DEFAULT_DENSE_INDEX_TYPE DenseIndex;
  26:Eigen/src/Core/util/Meta.h **** 
  27:Eigen/src/Core/util/Meta.h **** /**
  28:Eigen/src/Core/util/Meta.h ****  * \brief The Index type as used for the API.
  29:Eigen/src/Core/util/Meta.h ****  * \details To change this, \c \#define the preprocessor symbol \c EIGEN_DEFAULT_DENSE_INDEX_TYPE.
  30:Eigen/src/Core/util/Meta.h ****  * \sa \blank \ref TopicPreprocessorDirectives, StorageIndex.
  31:Eigen/src/Core/util/Meta.h ****  */
  32:Eigen/src/Core/util/Meta.h **** 
  33:Eigen/src/Core/util/Meta.h **** typedef EIGEN_DEFAULT_DENSE_INDEX_TYPE Index;
  34:Eigen/src/Core/util/Meta.h **** 
  35:Eigen/src/Core/util/Meta.h **** namespace internal {
  36:Eigen/src/Core/util/Meta.h **** 
  37:Eigen/src/Core/util/Meta.h **** /** \internal
  38:Eigen/src/Core/util/Meta.h ****   * \file Meta.h
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 110


  39:Eigen/src/Core/util/Meta.h ****   * This file contains generic metaprogramming classes which are not specifically related to Eigen.
  40:Eigen/src/Core/util/Meta.h ****   * \note In case you wonder, yes we're aware that Boost already provides all these features,
  41:Eigen/src/Core/util/Meta.h ****   * we however don't want to add a dependency to Boost.
  42:Eigen/src/Core/util/Meta.h ****   */
  43:Eigen/src/Core/util/Meta.h **** 
  44:Eigen/src/Core/util/Meta.h **** // Only recent versions of ICC complain about using ptrdiff_t to hold pointers,
  45:Eigen/src/Core/util/Meta.h **** // and older versions do not provide *intptr_t types.
  46:Eigen/src/Core/util/Meta.h **** #if EIGEN_COMP_ICC>=1600 &&  __cplusplus >= 201103L
  47:Eigen/src/Core/util/Meta.h **** typedef std::intptr_t  IntPtr;
  48:Eigen/src/Core/util/Meta.h **** typedef std::uintptr_t UIntPtr;
  49:Eigen/src/Core/util/Meta.h **** #else
  50:Eigen/src/Core/util/Meta.h **** typedef std::ptrdiff_t IntPtr;
  51:Eigen/src/Core/util/Meta.h **** typedef std::size_t UIntPtr;
  52:Eigen/src/Core/util/Meta.h **** #endif
  53:Eigen/src/Core/util/Meta.h **** 
  54:Eigen/src/Core/util/Meta.h **** struct true_type {  enum { value = 1 }; };
  55:Eigen/src/Core/util/Meta.h **** struct false_type { enum { value = 0 }; };
  56:Eigen/src/Core/util/Meta.h **** 
  57:Eigen/src/Core/util/Meta.h **** template<bool Condition, typename Then, typename Else>
  58:Eigen/src/Core/util/Meta.h **** struct conditional { typedef Then type; };
  59:Eigen/src/Core/util/Meta.h **** 
  60:Eigen/src/Core/util/Meta.h **** template<typename Then, typename Else>
  61:Eigen/src/Core/util/Meta.h **** struct conditional <false, Then, Else> { typedef Else type; };
  62:Eigen/src/Core/util/Meta.h **** 
  63:Eigen/src/Core/util/Meta.h **** template<typename T, typename U> struct is_same { enum { value = 0 }; };
  64:Eigen/src/Core/util/Meta.h **** template<typename T> struct is_same<T,T> { enum { value = 1 }; };
  65:Eigen/src/Core/util/Meta.h **** 
  66:Eigen/src/Core/util/Meta.h **** template<typename T> struct remove_reference { typedef T type; };
  67:Eigen/src/Core/util/Meta.h **** template<typename T> struct remove_reference<T&> { typedef T type; };
  68:Eigen/src/Core/util/Meta.h **** 
  69:Eigen/src/Core/util/Meta.h **** template<typename T> struct remove_pointer { typedef T type; };
  70:Eigen/src/Core/util/Meta.h **** template<typename T> struct remove_pointer<T*> { typedef T type; };
  71:Eigen/src/Core/util/Meta.h **** template<typename T> struct remove_pointer<T*const> { typedef T type; };
  72:Eigen/src/Core/util/Meta.h **** 
  73:Eigen/src/Core/util/Meta.h **** template <class T> struct remove_const { typedef T type; };
  74:Eigen/src/Core/util/Meta.h **** template <class T> struct remove_const<const T> { typedef T type; };
  75:Eigen/src/Core/util/Meta.h **** template <class T> struct remove_const<const T[]> { typedef T type[]; };
  76:Eigen/src/Core/util/Meta.h **** template <class T, unsigned int Size> struct remove_const<const T[Size]> { typedef T type[Size]; };
  77:Eigen/src/Core/util/Meta.h **** 
  78:Eigen/src/Core/util/Meta.h **** template<typename T> struct remove_all { typedef T type; };
  79:Eigen/src/Core/util/Meta.h **** template<typename T> struct remove_all<const T>   { typedef typename remove_all<T>::type type; };
  80:Eigen/src/Core/util/Meta.h **** template<typename T> struct remove_all<T const&>  { typedef typename remove_all<T>::type type; };
  81:Eigen/src/Core/util/Meta.h **** template<typename T> struct remove_all<T&>        { typedef typename remove_all<T>::type type; };
  82:Eigen/src/Core/util/Meta.h **** template<typename T> struct remove_all<T const*>  { typedef typename remove_all<T>::type type; };
  83:Eigen/src/Core/util/Meta.h **** template<typename T> struct remove_all<T*>        { typedef typename remove_all<T>::type type; };
  84:Eigen/src/Core/util/Meta.h **** 
  85:Eigen/src/Core/util/Meta.h **** template<typename T> struct is_arithmetic      { enum { value = false }; };
  86:Eigen/src/Core/util/Meta.h **** template<> struct is_arithmetic<float>         { enum { value = true }; };
  87:Eigen/src/Core/util/Meta.h **** template<> struct is_arithmetic<double>        { enum { value = true }; };
  88:Eigen/src/Core/util/Meta.h **** template<> struct is_arithmetic<long double>   { enum { value = true }; };
  89:Eigen/src/Core/util/Meta.h **** template<> struct is_arithmetic<bool>          { enum { value = true }; };
  90:Eigen/src/Core/util/Meta.h **** template<> struct is_arithmetic<char>          { enum { value = true }; };
  91:Eigen/src/Core/util/Meta.h **** template<> struct is_arithmetic<signed char>   { enum { value = true }; };
  92:Eigen/src/Core/util/Meta.h **** template<> struct is_arithmetic<unsigned char> { enum { value = true }; };
  93:Eigen/src/Core/util/Meta.h **** template<> struct is_arithmetic<signed short>  { enum { value = true }; };
  94:Eigen/src/Core/util/Meta.h **** template<> struct is_arithmetic<unsigned short>{ enum { value = true }; };
  95:Eigen/src/Core/util/Meta.h **** template<> struct is_arithmetic<signed int>    { enum { value = true }; };
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 111


  96:Eigen/src/Core/util/Meta.h **** template<> struct is_arithmetic<unsigned int>  { enum { value = true }; };
  97:Eigen/src/Core/util/Meta.h **** template<> struct is_arithmetic<signed long>   { enum { value = true }; };
  98:Eigen/src/Core/util/Meta.h **** template<> struct is_arithmetic<unsigned long> { enum { value = true }; };
  99:Eigen/src/Core/util/Meta.h **** 
 100:Eigen/src/Core/util/Meta.h **** template<typename T> struct is_integral        { enum { value = false }; };
 101:Eigen/src/Core/util/Meta.h **** template<> struct is_integral<bool>            { enum { value = true }; };
 102:Eigen/src/Core/util/Meta.h **** template<> struct is_integral<char>            { enum { value = true }; };
 103:Eigen/src/Core/util/Meta.h **** template<> struct is_integral<signed char>     { enum { value = true }; };
 104:Eigen/src/Core/util/Meta.h **** template<> struct is_integral<unsigned char>   { enum { value = true }; };
 105:Eigen/src/Core/util/Meta.h **** template<> struct is_integral<signed short>    { enum { value = true }; };
 106:Eigen/src/Core/util/Meta.h **** template<> struct is_integral<unsigned short>  { enum { value = true }; };
 107:Eigen/src/Core/util/Meta.h **** template<> struct is_integral<signed int>      { enum { value = true }; };
 108:Eigen/src/Core/util/Meta.h **** template<> struct is_integral<unsigned int>    { enum { value = true }; };
 109:Eigen/src/Core/util/Meta.h **** template<> struct is_integral<signed long>     { enum { value = true }; };
 110:Eigen/src/Core/util/Meta.h **** template<> struct is_integral<unsigned long>   { enum { value = true }; };
 111:Eigen/src/Core/util/Meta.h **** 
 112:Eigen/src/Core/util/Meta.h **** #if EIGEN_HAS_CXX11
 113:Eigen/src/Core/util/Meta.h **** using std::make_unsigned;
 114:Eigen/src/Core/util/Meta.h **** #else
 115:Eigen/src/Core/util/Meta.h **** // TODO: Possibly improve this implementation of make_unsigned.
 116:Eigen/src/Core/util/Meta.h **** // It is currently used only by
 117:Eigen/src/Core/util/Meta.h **** // template<typename Scalar> struct random_default_impl<Scalar, false, true>.
 118:Eigen/src/Core/util/Meta.h **** template<typename> struct make_unsigned;
 119:Eigen/src/Core/util/Meta.h **** template<> struct make_unsigned<char>             { typedef unsigned char type; };
 120:Eigen/src/Core/util/Meta.h **** template<> struct make_unsigned<signed char>      { typedef unsigned char type; };
 121:Eigen/src/Core/util/Meta.h **** template<> struct make_unsigned<unsigned char>    { typedef unsigned char type; };
 122:Eigen/src/Core/util/Meta.h **** template<> struct make_unsigned<signed short>     { typedef unsigned short type; };
 123:Eigen/src/Core/util/Meta.h **** template<> struct make_unsigned<unsigned short>   { typedef unsigned short type; };
 124:Eigen/src/Core/util/Meta.h **** template<> struct make_unsigned<signed int>       { typedef unsigned int type; };
 125:Eigen/src/Core/util/Meta.h **** template<> struct make_unsigned<unsigned int>     { typedef unsigned int type; };
 126:Eigen/src/Core/util/Meta.h **** template<> struct make_unsigned<signed long>      { typedef unsigned long type; };
 127:Eigen/src/Core/util/Meta.h **** template<> struct make_unsigned<unsigned long>    { typedef unsigned long type; };
 128:Eigen/src/Core/util/Meta.h **** #if EIGEN_COMP_MSVC
 129:Eigen/src/Core/util/Meta.h **** template<> struct make_unsigned<signed __int64>   { typedef unsigned __int64 type; };
 130:Eigen/src/Core/util/Meta.h **** template<> struct make_unsigned<unsigned __int64> { typedef unsigned __int64 type; };
 131:Eigen/src/Core/util/Meta.h **** #endif
 132:Eigen/src/Core/util/Meta.h **** #endif
 133:Eigen/src/Core/util/Meta.h **** 
 134:Eigen/src/Core/util/Meta.h **** template <typename T> struct add_const { typedef const T type; };
 135:Eigen/src/Core/util/Meta.h **** template <typename T> struct add_const<T&> { typedef T& type; };
 136:Eigen/src/Core/util/Meta.h **** 
 137:Eigen/src/Core/util/Meta.h **** template <typename T> struct is_const { enum { value = 0 }; };
 138:Eigen/src/Core/util/Meta.h **** template <typename T> struct is_const<T const> { enum { value = 1 }; };
 139:Eigen/src/Core/util/Meta.h **** 
 140:Eigen/src/Core/util/Meta.h **** template<typename T> struct add_const_on_value_type            { typedef const T type;  };
 141:Eigen/src/Core/util/Meta.h **** template<typename T> struct add_const_on_value_type<T&>        { typedef T const& type; };
 142:Eigen/src/Core/util/Meta.h **** template<typename T> struct add_const_on_value_type<T*>        { typedef T const* type; };
 143:Eigen/src/Core/util/Meta.h **** template<typename T> struct add_const_on_value_type<T* const>  { typedef T const* const type; };
 144:Eigen/src/Core/util/Meta.h **** template<typename T> struct add_const_on_value_type<T const* const>  { typedef T const* const type;
 145:Eigen/src/Core/util/Meta.h **** 
 146:Eigen/src/Core/util/Meta.h **** 
 147:Eigen/src/Core/util/Meta.h **** template<typename From, typename To>
 148:Eigen/src/Core/util/Meta.h **** struct is_convertible_impl
 149:Eigen/src/Core/util/Meta.h **** {
 150:Eigen/src/Core/util/Meta.h **** private:
 151:Eigen/src/Core/util/Meta.h ****   struct any_conversion
 152:Eigen/src/Core/util/Meta.h ****   {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 112


 153:Eigen/src/Core/util/Meta.h ****     template <typename T> any_conversion(const volatile T&);
 154:Eigen/src/Core/util/Meta.h ****     template <typename T> any_conversion(T&);
 155:Eigen/src/Core/util/Meta.h ****   };
 156:Eigen/src/Core/util/Meta.h ****   struct yes {int a[1];};
 157:Eigen/src/Core/util/Meta.h ****   struct no  {int a[2];};
 158:Eigen/src/Core/util/Meta.h **** 
 159:Eigen/src/Core/util/Meta.h ****   static yes test(const To&, int);
 160:Eigen/src/Core/util/Meta.h ****   static no  test(any_conversion, ...);
 161:Eigen/src/Core/util/Meta.h **** 
 162:Eigen/src/Core/util/Meta.h **** public:
 163:Eigen/src/Core/util/Meta.h ****   static From ms_from;
 164:Eigen/src/Core/util/Meta.h **** #ifdef __INTEL_COMPILER
 165:Eigen/src/Core/util/Meta.h ****   #pragma warning push
 166:Eigen/src/Core/util/Meta.h ****   #pragma warning ( disable : 2259 )
 167:Eigen/src/Core/util/Meta.h **** #endif
 168:Eigen/src/Core/util/Meta.h ****   enum { value = sizeof(test(ms_from, 0))==sizeof(yes) };
 169:Eigen/src/Core/util/Meta.h **** #ifdef __INTEL_COMPILER
 170:Eigen/src/Core/util/Meta.h ****   #pragma warning pop
 171:Eigen/src/Core/util/Meta.h **** #endif
 172:Eigen/src/Core/util/Meta.h **** };
 173:Eigen/src/Core/util/Meta.h **** 
 174:Eigen/src/Core/util/Meta.h **** template<typename From, typename To>
 175:Eigen/src/Core/util/Meta.h **** struct is_convertible
 176:Eigen/src/Core/util/Meta.h **** {
 177:Eigen/src/Core/util/Meta.h ****   enum { value = is_convertible_impl<typename remove_all<From>::type,
 178:Eigen/src/Core/util/Meta.h ****                                      typename remove_all<To  >::type>::value };
 179:Eigen/src/Core/util/Meta.h **** };
 180:Eigen/src/Core/util/Meta.h **** 
 181:Eigen/src/Core/util/Meta.h **** /** \internal Allows to enable/disable an overload
 182:Eigen/src/Core/util/Meta.h ****   * according to a compile time condition.
 183:Eigen/src/Core/util/Meta.h ****   */
 184:Eigen/src/Core/util/Meta.h **** template<bool Condition, typename T=void> struct enable_if;
 185:Eigen/src/Core/util/Meta.h **** 
 186:Eigen/src/Core/util/Meta.h **** template<typename T> struct enable_if<true,T>
 187:Eigen/src/Core/util/Meta.h **** { typedef T type; };
 188:Eigen/src/Core/util/Meta.h **** 
 189:Eigen/src/Core/util/Meta.h **** #if defined(__CUDA_ARCH__)
 190:Eigen/src/Core/util/Meta.h **** #if !defined(__FLT_EPSILON__)
 191:Eigen/src/Core/util/Meta.h **** #define __FLT_EPSILON__ FLT_EPSILON
 192:Eigen/src/Core/util/Meta.h **** #define __DBL_EPSILON__ DBL_EPSILON
 193:Eigen/src/Core/util/Meta.h **** #endif
 194:Eigen/src/Core/util/Meta.h **** 
 195:Eigen/src/Core/util/Meta.h **** namespace device {
 196:Eigen/src/Core/util/Meta.h **** 
 197:Eigen/src/Core/util/Meta.h **** template<typename T> struct numeric_limits
 198:Eigen/src/Core/util/Meta.h **** {
 199:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 200:Eigen/src/Core/util/Meta.h ****   static T epsilon() { return 0; }
 201:Eigen/src/Core/util/Meta.h ****   static T (max)() { assert(false && "Highest not supported for this type"); }
 202:Eigen/src/Core/util/Meta.h ****   static T (min)() { assert(false && "Lowest not supported for this type"); }
 203:Eigen/src/Core/util/Meta.h ****   static T infinity() { assert(false && "Infinity not supported for this type"); }
 204:Eigen/src/Core/util/Meta.h ****   static T quiet_NaN() { assert(false && "quiet_NaN not supported for this type"); }
 205:Eigen/src/Core/util/Meta.h **** };
 206:Eigen/src/Core/util/Meta.h **** template<> struct numeric_limits<float>
 207:Eigen/src/Core/util/Meta.h **** {
 208:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 209:Eigen/src/Core/util/Meta.h ****   static float epsilon() { return __FLT_EPSILON__; }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 113


 210:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 211:Eigen/src/Core/util/Meta.h ****   static float (max)() { return CUDART_MAX_NORMAL_F; }
 212:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 213:Eigen/src/Core/util/Meta.h ****   static float (min)() { return FLT_MIN; }
 214:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 215:Eigen/src/Core/util/Meta.h ****   static float infinity() { return CUDART_INF_F; }
 216:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 217:Eigen/src/Core/util/Meta.h ****   static float quiet_NaN() { return CUDART_NAN_F; }
 218:Eigen/src/Core/util/Meta.h **** };
 219:Eigen/src/Core/util/Meta.h **** template<> struct numeric_limits<double>
 220:Eigen/src/Core/util/Meta.h **** {
 221:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 222:Eigen/src/Core/util/Meta.h ****   static double epsilon() { return __DBL_EPSILON__; }
 223:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 224:Eigen/src/Core/util/Meta.h ****   static double (max)() { return DBL_MAX; }
 225:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 226:Eigen/src/Core/util/Meta.h ****   static double (min)() { return DBL_MIN; }
 227:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 228:Eigen/src/Core/util/Meta.h ****   static double infinity() { return CUDART_INF; }
 229:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 230:Eigen/src/Core/util/Meta.h ****   static double quiet_NaN() { return CUDART_NAN; }
 231:Eigen/src/Core/util/Meta.h **** };
 232:Eigen/src/Core/util/Meta.h **** template<> struct numeric_limits<int>
 233:Eigen/src/Core/util/Meta.h **** {
 234:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 235:Eigen/src/Core/util/Meta.h ****   static int epsilon() { return 0; }
 236:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 237:Eigen/src/Core/util/Meta.h ****   static int (max)() { return INT_MAX; }
 238:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 239:Eigen/src/Core/util/Meta.h ****   static int (min)() { return INT_MIN; }
 240:Eigen/src/Core/util/Meta.h **** };
 241:Eigen/src/Core/util/Meta.h **** template<> struct numeric_limits<unsigned int>
 242:Eigen/src/Core/util/Meta.h **** {
 243:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 244:Eigen/src/Core/util/Meta.h ****   static unsigned int epsilon() { return 0; }
 245:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 246:Eigen/src/Core/util/Meta.h ****   static unsigned int (max)() { return UINT_MAX; }
 247:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 248:Eigen/src/Core/util/Meta.h ****   static unsigned int (min)() { return 0; }
 249:Eigen/src/Core/util/Meta.h **** };
 250:Eigen/src/Core/util/Meta.h **** template<> struct numeric_limits<long>
 251:Eigen/src/Core/util/Meta.h **** {
 252:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 253:Eigen/src/Core/util/Meta.h ****   static long epsilon() { return 0; }
 254:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 255:Eigen/src/Core/util/Meta.h ****   static long (max)() { return LONG_MAX; }
 256:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 257:Eigen/src/Core/util/Meta.h ****   static long (min)() { return LONG_MIN; }
 258:Eigen/src/Core/util/Meta.h **** };
 259:Eigen/src/Core/util/Meta.h **** template<> struct numeric_limits<unsigned long>
 260:Eigen/src/Core/util/Meta.h **** {
 261:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 262:Eigen/src/Core/util/Meta.h ****   static unsigned long epsilon() { return 0; }
 263:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 264:Eigen/src/Core/util/Meta.h ****   static unsigned long (max)() { return ULONG_MAX; }
 265:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 266:Eigen/src/Core/util/Meta.h ****   static unsigned long (min)() { return 0; }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 114


 267:Eigen/src/Core/util/Meta.h **** };
 268:Eigen/src/Core/util/Meta.h **** template<> struct numeric_limits<long long>
 269:Eigen/src/Core/util/Meta.h **** {
 270:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 271:Eigen/src/Core/util/Meta.h ****   static long long epsilon() { return 0; }
 272:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 273:Eigen/src/Core/util/Meta.h ****   static long long (max)() { return LLONG_MAX; }
 274:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 275:Eigen/src/Core/util/Meta.h ****   static long long (min)() { return LLONG_MIN; }
 276:Eigen/src/Core/util/Meta.h **** };
 277:Eigen/src/Core/util/Meta.h **** template<> struct numeric_limits<unsigned long long>
 278:Eigen/src/Core/util/Meta.h **** {
 279:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 280:Eigen/src/Core/util/Meta.h ****   static unsigned long long epsilon() { return 0; }
 281:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 282:Eigen/src/Core/util/Meta.h ****   static unsigned long long (max)() { return ULLONG_MAX; }
 283:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC
 284:Eigen/src/Core/util/Meta.h ****   static unsigned long long (min)() { return 0; }
 285:Eigen/src/Core/util/Meta.h **** };
 286:Eigen/src/Core/util/Meta.h **** 
 287:Eigen/src/Core/util/Meta.h **** }
 288:Eigen/src/Core/util/Meta.h **** 
 289:Eigen/src/Core/util/Meta.h **** #endif
 290:Eigen/src/Core/util/Meta.h **** 
 291:Eigen/src/Core/util/Meta.h **** /** \internal
 292:Eigen/src/Core/util/Meta.h ****   * A base class do disable default copy ctor and copy assignement operator.
 293:Eigen/src/Core/util/Meta.h ****   */
 294:Eigen/src/Core/util/Meta.h **** class noncopyable
 295:Eigen/src/Core/util/Meta.h **** {
 296:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC noncopyable(const noncopyable&);
 297:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC const noncopyable& operator=(const noncopyable&);
 298:Eigen/src/Core/util/Meta.h **** protected:
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC noncopyable() {}
 1049              		.loc 16 299 21 view .LVU271
 1050              		.loc 16 299 21 is_stmt 0 view .LVU272
 1051              	.LBE2667:
 1052              	.LBE2666:
 1053              	.LBB2668:
 1054              	.LBI2668:
 103:Eigen/src/Core/Product.h ****     EIGEN_DEVICE_FUNC const RhsNestedCleaned& rhs() const { return m_rhs; }
 1055              		.loc 6 103 47 is_stmt 1 view .LVU273
 1056              	.LBB2669:
 103:Eigen/src/Core/Product.h ****     EIGEN_DEVICE_FUNC const RhsNestedCleaned& rhs() const { return m_rhs; }
 1057              		.loc 6 103 68 is_stmt 0 view .LVU274
 1058 0012 249B     		ldr	r3, [sp, #144]
 1059              	.LVL56:
 103:Eigen/src/Core/Product.h ****     EIGEN_DEVICE_FUNC const RhsNestedCleaned& rhs() const { return m_rhs; }
 1060              		.loc 6 103 68 view .LVU275
 1061              	.LBE2669:
 1062              	.LBE2668:
 446:Eigen/src/Core/ProductEvaluators.h ****     : m_lhs(xpr.lhs()),
 447:Eigen/src/Core/ProductEvaluators.h ****       m_rhs(xpr.rhs()),
 448:Eigen/src/Core/ProductEvaluators.h ****       m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op
 449:Eigen/src/Core/ProductEvaluators.h ****       m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we coul
 450:Eigen/src/Core/ProductEvaluators.h ****                             //       or perhaps declare them on the fly on the packet method... We 
 451:Eigen/src/Core/ProductEvaluators.h ****       m_innerDim(xpr.lhs().cols())
 1063              		.loc 14 451 34 view .LVU276
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 115


 1064 0014 06A9     		add	r1, sp, #24
 1065              	.LVL57:
 1066              		.loc 14 451 34 view .LVU277
 1067 0016 0693     		str	r3, [sp, #24]
 1068              	.LVL58:
 1069              	.LBB2670:
 1070              	.LBI2670:
 104:Eigen/src/Core/Product.h **** 
 1071              		.loc 6 104 47 is_stmt 1 view .LVU278
 1072              	.LBB2671:
 104:Eigen/src/Core/Product.h **** 
 1073              		.loc 6 104 68 is_stmt 0 view .LVU279
 1074 0018 259C     		ldr	r4, [sp, #148]
 1075              	.LVL59:
 104:Eigen/src/Core/Product.h **** 
 1076              		.loc 6 104 68 view .LVU280
 1077              	.LBE2671:
 1078              	.LBE2670:
 1079              		.loc 14 451 34 view .LVU281
 1080 001a 0794     		str	r4, [sp, #28]
 1081              	.LVL60:
 1082              	.LBB2672:
 1083              	.LBI2672:
 110:Eigen/src/Core/CoreEvaluators.h **** {
 111:Eigen/src/Core/CoreEvaluators.h ****   // TODO that's not very nice to have to propagate all these traits. They are currently only neede
 112:Eigen/src/Core/CoreEvaluators.h ****   typedef traits<ExpressionType> ExpressionTraits;
 113:Eigen/src/Core/CoreEvaluators.h ****   
 114:Eigen/src/Core/CoreEvaluators.h ****   enum {
 115:Eigen/src/Core/CoreEvaluators.h ****     Alignment = 0
 116:Eigen/src/Core/CoreEvaluators.h ****   };
 117:Eigen/src/Core/CoreEvaluators.h **** };
 118:Eigen/src/Core/CoreEvaluators.h **** 
 119:Eigen/src/Core/CoreEvaluators.h **** // -------------------- Matrix and Array --------------------
 120:Eigen/src/Core/CoreEvaluators.h **** //
 121:Eigen/src/Core/CoreEvaluators.h **** // evaluator<PlainObjectBase> is a common base class for the
 122:Eigen/src/Core/CoreEvaluators.h **** // Matrix and Array evaluators.
 123:Eigen/src/Core/CoreEvaluators.h **** // Here we directly specialize evaluator. This is not really a unary expression, and it is, by defi
 124:Eigen/src/Core/CoreEvaluators.h **** // so no need for more sophisticated dispatching.
 125:Eigen/src/Core/CoreEvaluators.h **** 
 126:Eigen/src/Core/CoreEvaluators.h **** template<typename Derived>
 127:Eigen/src/Core/CoreEvaluators.h **** struct evaluator<PlainObjectBase<Derived> >
 128:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<Derived>
 129:Eigen/src/Core/CoreEvaluators.h **** {
 130:Eigen/src/Core/CoreEvaluators.h ****   typedef PlainObjectBase<Derived> PlainObjectType;
 131:Eigen/src/Core/CoreEvaluators.h ****   typedef typename PlainObjectType::Scalar Scalar;
 132:Eigen/src/Core/CoreEvaluators.h ****   typedef typename PlainObjectType::CoeffReturnType CoeffReturnType;
 133:Eigen/src/Core/CoreEvaluators.h **** 
 134:Eigen/src/Core/CoreEvaluators.h ****   enum {
 135:Eigen/src/Core/CoreEvaluators.h ****     IsRowMajor = PlainObjectType::IsRowMajor,
 136:Eigen/src/Core/CoreEvaluators.h ****     IsVectorAtCompileTime = PlainObjectType::IsVectorAtCompileTime,
 137:Eigen/src/Core/CoreEvaluators.h ****     RowsAtCompileTime = PlainObjectType::RowsAtCompileTime,
 138:Eigen/src/Core/CoreEvaluators.h ****     ColsAtCompileTime = PlainObjectType::ColsAtCompileTime,
 139:Eigen/src/Core/CoreEvaluators.h ****     
 140:Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = NumTraits<Scalar>::ReadCost,
 141:Eigen/src/Core/CoreEvaluators.h ****     Flags = traits<Derived>::EvaluatorFlags,
 142:Eigen/src/Core/CoreEvaluators.h ****     Alignment = traits<Derived>::Alignment
 143:Eigen/src/Core/CoreEvaluators.h ****   };
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 116


 144:Eigen/src/Core/CoreEvaluators.h ****   
 145:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC evaluator()
 146:Eigen/src/Core/CoreEvaluators.h ****     : m_data(0),
 147:Eigen/src/Core/CoreEvaluators.h ****       m_outerStride(IsVectorAtCompileTime  ? 0 
 148:Eigen/src/Core/CoreEvaluators.h ****                                            : int(IsRowMajor) ? ColsAtCompileTime 
 149:Eigen/src/Core/CoreEvaluators.h ****                                            : RowsAtCompileTime)
 150:Eigen/src/Core/CoreEvaluators.h ****   {
 151:Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 152:Eigen/src/Core/CoreEvaluators.h ****   }
 153:Eigen/src/Core/CoreEvaluators.h ****   
 154:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit evaluator(const PlainObjectType& m)
 155:Eigen/src/Core/CoreEvaluators.h ****     : m_data(m.data()), m_outerStride(IsVectorAtCompileTime ? 0 : m.outerStride()) 
 156:Eigen/src/Core/CoreEvaluators.h ****   {
 157:Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 158:Eigen/src/Core/CoreEvaluators.h ****   }
 159:Eigen/src/Core/CoreEvaluators.h **** 
 160:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 161:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
 162:Eigen/src/Core/CoreEvaluators.h ****   {
 163:Eigen/src/Core/CoreEvaluators.h ****     if (IsRowMajor)
 164:Eigen/src/Core/CoreEvaluators.h ****       return m_data[row * m_outerStride.value() + col];
 165:Eigen/src/Core/CoreEvaluators.h ****     else
 166:Eigen/src/Core/CoreEvaluators.h ****       return m_data[row + col * m_outerStride.value()];
 167:Eigen/src/Core/CoreEvaluators.h ****   }
 168:Eigen/src/Core/CoreEvaluators.h **** 
 169:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 170:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
 171:Eigen/src/Core/CoreEvaluators.h ****   {
 172:Eigen/src/Core/CoreEvaluators.h ****     return m_data[index];
 173:Eigen/src/Core/CoreEvaluators.h ****   }
 174:Eigen/src/Core/CoreEvaluators.h **** 
 175:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 176:Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index row, Index col)
 177:Eigen/src/Core/CoreEvaluators.h ****   {
 178:Eigen/src/Core/CoreEvaluators.h ****     if (IsRowMajor)
 179:Eigen/src/Core/CoreEvaluators.h ****       return const_cast<Scalar*>(m_data)[row * m_outerStride.value() + col];
 180:Eigen/src/Core/CoreEvaluators.h ****     else
 181:Eigen/src/Core/CoreEvaluators.h ****       return const_cast<Scalar*>(m_data)[row + col * m_outerStride.value()];
 182:Eigen/src/Core/CoreEvaluators.h ****   }
 183:Eigen/src/Core/CoreEvaluators.h **** 
 184:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 185:Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index index)
 186:Eigen/src/Core/CoreEvaluators.h ****   {
 187:Eigen/src/Core/CoreEvaluators.h ****     return const_cast<Scalar*>(m_data)[index];
 188:Eigen/src/Core/CoreEvaluators.h ****   }
 189:Eigen/src/Core/CoreEvaluators.h **** 
 190:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 191:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 192:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index row, Index col) const
 193:Eigen/src/Core/CoreEvaluators.h ****   {
 194:Eigen/src/Core/CoreEvaluators.h ****     if (IsRowMajor)
 195:Eigen/src/Core/CoreEvaluators.h ****       return ploadt<PacketType, LoadMode>(m_data + row * m_outerStride.value() + col);
 196:Eigen/src/Core/CoreEvaluators.h ****     else
 197:Eigen/src/Core/CoreEvaluators.h ****       return ploadt<PacketType, LoadMode>(m_data + row + col * m_outerStride.value());
 198:Eigen/src/Core/CoreEvaluators.h ****   }
 199:Eigen/src/Core/CoreEvaluators.h **** 
 200:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 117


 201:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 202:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index index) const
 203:Eigen/src/Core/CoreEvaluators.h ****   {
 204:Eigen/src/Core/CoreEvaluators.h ****     return ploadt<PacketType, LoadMode>(m_data + index);
 205:Eigen/src/Core/CoreEvaluators.h ****   }
 206:Eigen/src/Core/CoreEvaluators.h **** 
 207:Eigen/src/Core/CoreEvaluators.h ****   template<int StoreMode,typename PacketType>
 208:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 209:Eigen/src/Core/CoreEvaluators.h ****   void writePacket(Index row, Index col, const PacketType& x)
 210:Eigen/src/Core/CoreEvaluators.h ****   {
 211:Eigen/src/Core/CoreEvaluators.h ****     if (IsRowMajor)
 212:Eigen/src/Core/CoreEvaluators.h ****       return pstoret<Scalar, PacketType, StoreMode>
 213:Eigen/src/Core/CoreEvaluators.h **** 	            (const_cast<Scalar*>(m_data) + row * m_outerStride.value() + col, x);
 214:Eigen/src/Core/CoreEvaluators.h ****     else
 215:Eigen/src/Core/CoreEvaluators.h ****       return pstoret<Scalar, PacketType, StoreMode>
 216:Eigen/src/Core/CoreEvaluators.h ****                     (const_cast<Scalar*>(m_data) + row + col * m_outerStride.value(), x);
 217:Eigen/src/Core/CoreEvaluators.h ****   }
 218:Eigen/src/Core/CoreEvaluators.h **** 
 219:Eigen/src/Core/CoreEvaluators.h ****   template<int StoreMode, typename PacketType>
 220:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 221:Eigen/src/Core/CoreEvaluators.h ****   void writePacket(Index index, const PacketType& x)
 222:Eigen/src/Core/CoreEvaluators.h ****   {
 223:Eigen/src/Core/CoreEvaluators.h ****     return pstoret<Scalar, PacketType, StoreMode>(const_cast<Scalar*>(m_data) + index, x);
 224:Eigen/src/Core/CoreEvaluators.h ****   }
 225:Eigen/src/Core/CoreEvaluators.h **** 
 226:Eigen/src/Core/CoreEvaluators.h **** protected:
 227:Eigen/src/Core/CoreEvaluators.h ****   const Scalar *m_data;
 228:Eigen/src/Core/CoreEvaluators.h **** 
 229:Eigen/src/Core/CoreEvaluators.h ****   // We do not need to know the outer stride for vectors
 230:Eigen/src/Core/CoreEvaluators.h ****   variable_if_dynamic<Index, IsVectorAtCompileTime  ? 0 
 231:Eigen/src/Core/CoreEvaluators.h ****                                                     : int(IsRowMajor) ? ColsAtCompileTime 
 232:Eigen/src/Core/CoreEvaluators.h ****                                                     : RowsAtCompileTime> m_outerStride;
 233:Eigen/src/Core/CoreEvaluators.h **** };
 234:Eigen/src/Core/CoreEvaluators.h **** 
 235:Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
 236:Eigen/src/Core/CoreEvaluators.h **** struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 237:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<PlainObjectBase<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> > >
 238:Eigen/src/Core/CoreEvaluators.h **** {
 239:Eigen/src/Core/CoreEvaluators.h ****   typedef Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> XprType;
 240:Eigen/src/Core/CoreEvaluators.h ****   
 241:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC evaluator() {}
 242:Eigen/src/Core/CoreEvaluators.h **** 
 243:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit evaluator(const XprType& m)
 1084              		.loc 15 243 30 is_stmt 1 view .LVU282
 1085              	.LBB2673:
 1086              	.LBB2674:
 1087              	.LBI2674:
 154:Eigen/src/Core/CoreEvaluators.h ****     : m_data(m.data()), m_outerStride(IsVectorAtCompileTime ? 0 : m.outerStride()) 
 1088              		.loc 15 154 30 view .LVU283
 1089              	.LBB2675:
 1090              	.LBB2676:
 1091              	.LBB2677:
 1092              	.LBI2677:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 1093              		.loc 15 109 8 view .LVU284
 1094              	.LBB2678:
 1095              	.LBI2678:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 118


 1096              		.loc 16 299 21 view .LVU285
 1097              		.loc 16 299 21 is_stmt 0 view .LVU286
 1098              	.LBE2678:
 1099              	.LBE2677:
 1100              	.LBB2679:
 1101              	.LBI2679:
 255:Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 1102              		.loc 9 255 57 is_stmt 1 view .LVU287
 1103              	.LBB2680:
 1104              	.LBI2680:
 188:Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
 189:Eigen/src/Core/DenseStorage.h ****     }
 190:Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC
 191:Eigen/src/Core/DenseStorage.h ****     explicit DenseStorage(internal::constructor_without_unaligned_array_assert)
 192:Eigen/src/Core/DenseStorage.h ****       : m_data(internal::constructor_without_unaligned_array_assert()) {}
 193:Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC 
 194:Eigen/src/Core/DenseStorage.h ****     DenseStorage(const DenseStorage& other) : m_data(other.m_data) {
 195:Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
 196:Eigen/src/Core/DenseStorage.h ****     }
 197:Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC 
 198:Eigen/src/Core/DenseStorage.h ****     DenseStorage& operator=(const DenseStorage& other)
 199:Eigen/src/Core/DenseStorage.h ****     { 
 200:Eigen/src/Core/DenseStorage.h ****       if (this != &other) m_data = other.m_data;
 201:Eigen/src/Core/DenseStorage.h ****       return *this; 
 202:Eigen/src/Core/DenseStorage.h ****     }
 203:Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage(Index size, Index rows, Index cols) {
 204:Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
 205:Eigen/src/Core/DenseStorage.h ****       eigen_internal_assert(size==rows*cols && rows==_Rows && cols==_Cols);
 206:Eigen/src/Core/DenseStorage.h ****       EIGEN_UNUSED_VARIABLE(size);
 207:Eigen/src/Core/DenseStorage.h ****       EIGEN_UNUSED_VARIABLE(rows);
 208:Eigen/src/Core/DenseStorage.h ****       EIGEN_UNUSED_VARIABLE(cols);
 209:Eigen/src/Core/DenseStorage.h ****     }
 210:Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void swap(DenseStorage& other) { std::swap(m_data,other.m_data); }
 211:Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC static Index rows(void) {return _Rows;}
 212:Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC static Index cols(void) {return _Cols;}
 213:Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
 214:Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 215:Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 1105              		.loc 12 215 32 view .LVU288
 1106              		.loc 12 215 32 is_stmt 0 view .LVU289
 1107              	.LBE2680:
 1108              	.LBE2679:
 155:Eigen/src/Core/CoreEvaluators.h ****   {
 1109              		.loc 15 155 82 view .LVU290
 1110 001c 0893     		str	r3, [sp, #32]
 1111              	.LVL61:
 1112              	.LBB2681:
 1113              	.LBI2681:
 1114              		.file 17 "Eigen/src/Core/DenseCoeffsBase.h"
   1:Eigen/src/Core/DenseCoeffsBase.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/DenseCoeffsBase.h **** // for linear algebra.
   3:Eigen/src/Core/DenseCoeffsBase.h **** //
   4:Eigen/src/Core/DenseCoeffsBase.h **** // Copyright (C) 2006-2010 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:Eigen/src/Core/DenseCoeffsBase.h **** //
   6:Eigen/src/Core/DenseCoeffsBase.h **** // This Source Code Form is subject to the terms of the Mozilla
   7:Eigen/src/Core/DenseCoeffsBase.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   8:Eigen/src/Core/DenseCoeffsBase.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 119


   9:Eigen/src/Core/DenseCoeffsBase.h **** 
  10:Eigen/src/Core/DenseCoeffsBase.h **** #ifndef EIGEN_DENSECOEFFSBASE_H
  11:Eigen/src/Core/DenseCoeffsBase.h **** #define EIGEN_DENSECOEFFSBASE_H
  12:Eigen/src/Core/DenseCoeffsBase.h **** 
  13:Eigen/src/Core/DenseCoeffsBase.h **** namespace Eigen {
  14:Eigen/src/Core/DenseCoeffsBase.h **** 
  15:Eigen/src/Core/DenseCoeffsBase.h **** namespace internal {
  16:Eigen/src/Core/DenseCoeffsBase.h **** template<typename T> struct add_const_on_value_type_if_arithmetic
  17:Eigen/src/Core/DenseCoeffsBase.h **** {
  18:Eigen/src/Core/DenseCoeffsBase.h ****   typedef typename conditional<is_arithmetic<T>::value, T, typename add_const_on_value_type<T>::typ
  19:Eigen/src/Core/DenseCoeffsBase.h **** };
  20:Eigen/src/Core/DenseCoeffsBase.h **** }
  21:Eigen/src/Core/DenseCoeffsBase.h **** 
  22:Eigen/src/Core/DenseCoeffsBase.h **** /** \brief Base class providing read-only coefficient access to matrices and arrays.
  23:Eigen/src/Core/DenseCoeffsBase.h ****   * \ingroup Core_Module
  24:Eigen/src/Core/DenseCoeffsBase.h ****   * \tparam Derived Type of the derived class
  25:Eigen/src/Core/DenseCoeffsBase.h ****   * \tparam #ReadOnlyAccessors Constant indicating read-only access
  26:Eigen/src/Core/DenseCoeffsBase.h ****   *
  27:Eigen/src/Core/DenseCoeffsBase.h ****   * This class defines the \c operator() \c const function and friends, which can be used to read s
  28:Eigen/src/Core/DenseCoeffsBase.h ****   * entries of a matrix or array.
  29:Eigen/src/Core/DenseCoeffsBase.h ****   * 
  30:Eigen/src/Core/DenseCoeffsBase.h ****   * \sa DenseCoeffsBase<Derived, WriteAccessors>, DenseCoeffsBase<Derived, DirectAccessors>,
  31:Eigen/src/Core/DenseCoeffsBase.h ****   *     \ref TopicClassHierarchy
  32:Eigen/src/Core/DenseCoeffsBase.h ****   */
  33:Eigen/src/Core/DenseCoeffsBase.h **** template<typename Derived>
  34:Eigen/src/Core/DenseCoeffsBase.h **** class DenseCoeffsBase<Derived,ReadOnlyAccessors> : public EigenBase<Derived>
  35:Eigen/src/Core/DenseCoeffsBase.h **** {
  36:Eigen/src/Core/DenseCoeffsBase.h ****   public:
  37:Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::traits<Derived>::StorageKind StorageKind;
  38:Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::traits<Derived>::Scalar Scalar;
  39:Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::packet_traits<Scalar>::type PacketScalar;
  40:Eigen/src/Core/DenseCoeffsBase.h **** 
  41:Eigen/src/Core/DenseCoeffsBase.h ****     // Explanation for this CoeffReturnType typedef.
  42:Eigen/src/Core/DenseCoeffsBase.h ****     // - This is the return type of the coeff() method.
  43:Eigen/src/Core/DenseCoeffsBase.h ****     // - The LvalueBit means exactly that we can offer a coeffRef() method, which means exactly tha
  44:Eigen/src/Core/DenseCoeffsBase.h ****     // to coeffs, which means exactly that we can have coeff() return a const reference (as opposed
  45:Eigen/src/Core/DenseCoeffsBase.h ****     // - The is_artihmetic check is required since "const int", "const double", etc. will cause war
  46:Eigen/src/Core/DenseCoeffsBase.h ****     // while the declaration of "const T", where T is a non arithmetic type does not. Always return
  47:Eigen/src/Core/DenseCoeffsBase.h ****     // not possible, since the underlying expressions might not offer a valid address the reference
  48:Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::conditional<bool(internal::traits<Derived>::Flags&LvalueBit),
  49:Eigen/src/Core/DenseCoeffsBase.h ****                          const Scalar&,
  50:Eigen/src/Core/DenseCoeffsBase.h ****                          typename internal::conditional<internal::is_arithmetic<Scalar>::value, Sca
  51:Eigen/src/Core/DenseCoeffsBase.h ****                      >::type CoeffReturnType;
  52:Eigen/src/Core/DenseCoeffsBase.h **** 
  53:Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::add_const_on_value_type_if_arithmetic<
  54:Eigen/src/Core/DenseCoeffsBase.h ****                          typename internal::packet_traits<Scalar>::type
  55:Eigen/src/Core/DenseCoeffsBase.h ****                      >::type PacketReturnType;
  56:Eigen/src/Core/DenseCoeffsBase.h **** 
  57:Eigen/src/Core/DenseCoeffsBase.h ****     typedef EigenBase<Derived> Base;
  58:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::rows;
  59:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::cols;
  60:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::size;
  61:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::derived;
  62:Eigen/src/Core/DenseCoeffsBase.h **** 
  63:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
  64:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner) const
  65:Eigen/src/Core/DenseCoeffsBase.h ****     {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 120


  66:Eigen/src/Core/DenseCoeffsBase.h ****       return int(Derived::RowsAtCompileTime) == 1 ? 0
  67:Eigen/src/Core/DenseCoeffsBase.h ****           : int(Derived::ColsAtCompileTime) == 1 ? inner
  68:Eigen/src/Core/DenseCoeffsBase.h ****           : int(Derived::Flags)&RowMajorBit ? outer
  69:Eigen/src/Core/DenseCoeffsBase.h ****           : inner;
  70:Eigen/src/Core/DenseCoeffsBase.h ****     }
  71:Eigen/src/Core/DenseCoeffsBase.h **** 
  72:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
  73:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner) const
  74:Eigen/src/Core/DenseCoeffsBase.h ****     {
  75:Eigen/src/Core/DenseCoeffsBase.h ****       return int(Derived::ColsAtCompileTime) == 1 ? 0
  76:Eigen/src/Core/DenseCoeffsBase.h ****           : int(Derived::RowsAtCompileTime) == 1 ? inner
  77:Eigen/src/Core/DenseCoeffsBase.h ****           : int(Derived::Flags)&RowMajorBit ? inner
  78:Eigen/src/Core/DenseCoeffsBase.h ****           : outer;
  79:Eigen/src/Core/DenseCoeffsBase.h ****     }
  80:Eigen/src/Core/DenseCoeffsBase.h **** 
  81:Eigen/src/Core/DenseCoeffsBase.h ****     /** Short version: don't use this function, use
  82:Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator()(Index,Index) const \endlink instead.
  83:Eigen/src/Core/DenseCoeffsBase.h ****       *
  84:Eigen/src/Core/DenseCoeffsBase.h ****       * Long version: this function is similar to
  85:Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator()(Index,Index) const \endlink, but without the assertion.
  86:Eigen/src/Core/DenseCoeffsBase.h ****       * Use this for limiting the performance cost of debugging code when doing
  87:Eigen/src/Core/DenseCoeffsBase.h ****       * repeated coefficient access. Only use this when it is guaranteed that the
  88:Eigen/src/Core/DenseCoeffsBase.h ****       * parameters \a row and \a col are in range.
  89:Eigen/src/Core/DenseCoeffsBase.h ****       *
  90:Eigen/src/Core/DenseCoeffsBase.h ****       * If EIGEN_INTERNAL_DEBUGGING is defined, an assertion will be made, making this
  91:Eigen/src/Core/DenseCoeffsBase.h ****       * function equivalent to \link operator()(Index,Index) const \endlink.
  92:Eigen/src/Core/DenseCoeffsBase.h ****       *
  93:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator()(Index,Index) const, coeffRef(Index,Index), coeff(Index) const
  94:Eigen/src/Core/DenseCoeffsBase.h ****       */
  95:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
  96:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType coeff(Index row, Index col) const
  97:Eigen/src/Core/DenseCoeffsBase.h ****     {
  98:Eigen/src/Core/DenseCoeffsBase.h ****       eigen_internal_assert(row >= 0 && row < rows()
  99:Eigen/src/Core/DenseCoeffsBase.h ****                          && col >= 0 && col < cols());
 100:Eigen/src/Core/DenseCoeffsBase.h ****       return internal::evaluator<Derived>(derived()).coeff(row,col);
 101:Eigen/src/Core/DenseCoeffsBase.h ****     }
 102:Eigen/src/Core/DenseCoeffsBase.h **** 
 103:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 104:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 105:Eigen/src/Core/DenseCoeffsBase.h ****     {
 106:Eigen/src/Core/DenseCoeffsBase.h ****       return coeff(rowIndexByOuterInner(outer, inner),
 107:Eigen/src/Core/DenseCoeffsBase.h ****                    colIndexByOuterInner(outer, inner));
 108:Eigen/src/Core/DenseCoeffsBase.h ****     }
 109:Eigen/src/Core/DenseCoeffsBase.h **** 
 110:Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns the coefficient at given the given row and column.
 111:Eigen/src/Core/DenseCoeffsBase.h ****       *
 112:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator()(Index,Index), operator[](Index)
 113:Eigen/src/Core/DenseCoeffsBase.h ****       */
 114:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 115:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType operator()(Index row, Index col) const
 116:Eigen/src/Core/DenseCoeffsBase.h ****     {
 117:Eigen/src/Core/DenseCoeffsBase.h ****       eigen_assert(row >= 0 && row < rows()
 118:Eigen/src/Core/DenseCoeffsBase.h ****           && col >= 0 && col < cols());
 119:Eigen/src/Core/DenseCoeffsBase.h ****       return coeff(row, col);
 120:Eigen/src/Core/DenseCoeffsBase.h ****     }
 121:Eigen/src/Core/DenseCoeffsBase.h **** 
 122:Eigen/src/Core/DenseCoeffsBase.h ****     /** Short version: don't use this function, use
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 121


 123:Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator[](Index) const \endlink instead.
 124:Eigen/src/Core/DenseCoeffsBase.h ****       *
 125:Eigen/src/Core/DenseCoeffsBase.h ****       * Long version: this function is similar to
 126:Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator[](Index) const \endlink, but without the assertion.
 127:Eigen/src/Core/DenseCoeffsBase.h ****       * Use this for limiting the performance cost of debugging code when doing
 128:Eigen/src/Core/DenseCoeffsBase.h ****       * repeated coefficient access. Only use this when it is guaranteed that the
 129:Eigen/src/Core/DenseCoeffsBase.h ****       * parameter \a index is in range.
 130:Eigen/src/Core/DenseCoeffsBase.h ****       *
 131:Eigen/src/Core/DenseCoeffsBase.h ****       * If EIGEN_INTERNAL_DEBUGGING is defined, an assertion will be made, making this
 132:Eigen/src/Core/DenseCoeffsBase.h ****       * function equivalent to \link operator[](Index) const \endlink.
 133:Eigen/src/Core/DenseCoeffsBase.h ****       *
 134:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator[](Index) const, coeffRef(Index), coeff(Index,Index) const
 135:Eigen/src/Core/DenseCoeffsBase.h ****       */
 136:Eigen/src/Core/DenseCoeffsBase.h **** 
 137:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 138:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType
 139:Eigen/src/Core/DenseCoeffsBase.h ****     coeff(Index index) const
 140:Eigen/src/Core/DenseCoeffsBase.h ****     {
 141:Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(internal::evaluator<Derived>::Flags & LinearAccessBit,
 142:Eigen/src/Core/DenseCoeffsBase.h ****                           THIS_COEFFICIENT_ACCESSOR_TAKING_ONE_ACCESS_IS_ONLY_FOR_EXPRESSIONS_ALLOW
 143:Eigen/src/Core/DenseCoeffsBase.h ****       eigen_internal_assert(index >= 0 && index < size());
 144:Eigen/src/Core/DenseCoeffsBase.h ****       return internal::evaluator<Derived>(derived()).coeff(index);
 145:Eigen/src/Core/DenseCoeffsBase.h ****     }
 146:Eigen/src/Core/DenseCoeffsBase.h **** 
 147:Eigen/src/Core/DenseCoeffsBase.h **** 
 148:Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns the coefficient at given index.
 149:Eigen/src/Core/DenseCoeffsBase.h ****       *
 150:Eigen/src/Core/DenseCoeffsBase.h ****       * This method is allowed only for vector expressions, and for matrix expressions having the L
 151:Eigen/src/Core/DenseCoeffsBase.h ****       *
 152:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator[](Index), operator()(Index,Index) const, x() const, y() const,
 153:Eigen/src/Core/DenseCoeffsBase.h ****       * z() const, w() const
 154:Eigen/src/Core/DenseCoeffsBase.h ****       */
 155:Eigen/src/Core/DenseCoeffsBase.h **** 
 156:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 157:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType
 158:Eigen/src/Core/DenseCoeffsBase.h ****     operator[](Index index) const
 159:Eigen/src/Core/DenseCoeffsBase.h ****     {
 160:Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(Derived::IsVectorAtCompileTime,
 161:Eigen/src/Core/DenseCoeffsBase.h ****                           THE_BRACKET_OPERATOR_IS_ONLY_FOR_VECTORS__USE_THE_PARENTHESIS_OPERATOR_IN
 162:Eigen/src/Core/DenseCoeffsBase.h ****       eigen_assert(index >= 0 && index < size());
 163:Eigen/src/Core/DenseCoeffsBase.h ****       return coeff(index);
 164:Eigen/src/Core/DenseCoeffsBase.h ****     }
 165:Eigen/src/Core/DenseCoeffsBase.h **** 
 166:Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns the coefficient at given index.
 167:Eigen/src/Core/DenseCoeffsBase.h ****       *
 168:Eigen/src/Core/DenseCoeffsBase.h ****       * This is synonymous to operator[](Index) const.
 169:Eigen/src/Core/DenseCoeffsBase.h ****       *
 170:Eigen/src/Core/DenseCoeffsBase.h ****       * This method is allowed only for vector expressions, and for matrix expressions having the L
 171:Eigen/src/Core/DenseCoeffsBase.h ****       *
 172:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator[](Index), operator()(Index,Index) const, x() const, y() const,
 173:Eigen/src/Core/DenseCoeffsBase.h ****       * z() const, w() const
 174:Eigen/src/Core/DenseCoeffsBase.h ****       */
 175:Eigen/src/Core/DenseCoeffsBase.h **** 
 176:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 177:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType
 178:Eigen/src/Core/DenseCoeffsBase.h ****     operator()(Index index) const
 179:Eigen/src/Core/DenseCoeffsBase.h ****     {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 122


 180:Eigen/src/Core/DenseCoeffsBase.h ****       eigen_assert(index >= 0 && index < size());
 181:Eigen/src/Core/DenseCoeffsBase.h ****       return coeff(index);
 182:Eigen/src/Core/DenseCoeffsBase.h ****     }
 183:Eigen/src/Core/DenseCoeffsBase.h **** 
 184:Eigen/src/Core/DenseCoeffsBase.h ****     /** equivalent to operator[](0).  */
 185:Eigen/src/Core/DenseCoeffsBase.h **** 
 186:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 187:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType
 188:Eigen/src/Core/DenseCoeffsBase.h ****     x() const { return (*this)[0]; }
 189:Eigen/src/Core/DenseCoeffsBase.h **** 
 190:Eigen/src/Core/DenseCoeffsBase.h ****     /** equivalent to operator[](1).  */
 191:Eigen/src/Core/DenseCoeffsBase.h **** 
 192:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 193:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType
 194:Eigen/src/Core/DenseCoeffsBase.h ****     y() const
 195:Eigen/src/Core/DenseCoeffsBase.h ****     {
 196:Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(Derived::SizeAtCompileTime==-1 || Derived::SizeAtCompileTime>=2, OUT_OF_R
 197:Eigen/src/Core/DenseCoeffsBase.h ****       return (*this)[1];
 198:Eigen/src/Core/DenseCoeffsBase.h ****     }
 199:Eigen/src/Core/DenseCoeffsBase.h **** 
 200:Eigen/src/Core/DenseCoeffsBase.h ****     /** equivalent to operator[](2).  */
 201:Eigen/src/Core/DenseCoeffsBase.h **** 
 202:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 203:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType
 204:Eigen/src/Core/DenseCoeffsBase.h ****     z() const
 205:Eigen/src/Core/DenseCoeffsBase.h ****     {
 206:Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(Derived::SizeAtCompileTime==-1 || Derived::SizeAtCompileTime>=3, OUT_OF_R
 207:Eigen/src/Core/DenseCoeffsBase.h ****       return (*this)[2];
 208:Eigen/src/Core/DenseCoeffsBase.h ****     }
 209:Eigen/src/Core/DenseCoeffsBase.h **** 
 210:Eigen/src/Core/DenseCoeffsBase.h ****     /** equivalent to operator[](3).  */
 211:Eigen/src/Core/DenseCoeffsBase.h **** 
 212:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 213:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType
 214:Eigen/src/Core/DenseCoeffsBase.h ****     w() const
 215:Eigen/src/Core/DenseCoeffsBase.h ****     {
 216:Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(Derived::SizeAtCompileTime==-1 || Derived::SizeAtCompileTime>=4, OUT_OF_R
 217:Eigen/src/Core/DenseCoeffsBase.h ****       return (*this)[3];
 218:Eigen/src/Core/DenseCoeffsBase.h ****     }
 219:Eigen/src/Core/DenseCoeffsBase.h **** 
 220:Eigen/src/Core/DenseCoeffsBase.h ****     /** \internal
 221:Eigen/src/Core/DenseCoeffsBase.h ****       * \returns the packet of coefficients starting at the given row and column. It is your respon
 222:Eigen/src/Core/DenseCoeffsBase.h ****       * to ensure that a packet really starts there. This method is only available on expressions h
 223:Eigen/src/Core/DenseCoeffsBase.h ****       * PacketAccessBit.
 224:Eigen/src/Core/DenseCoeffsBase.h ****       *
 225:Eigen/src/Core/DenseCoeffsBase.h ****       * The \a LoadMode parameter may have the value \a #Aligned or \a #Unaligned. Its effect is to
 226:Eigen/src/Core/DenseCoeffsBase.h ****       * the appropriate vectorization instruction. Aligned access is faster, but is only possible f
 227:Eigen/src/Core/DenseCoeffsBase.h ****       * starting at an address which is a multiple of the packet size.
 228:Eigen/src/Core/DenseCoeffsBase.h ****       */
 229:Eigen/src/Core/DenseCoeffsBase.h **** 
 230:Eigen/src/Core/DenseCoeffsBase.h ****     template<int LoadMode>
 231:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE PacketReturnType packet(Index row, Index col) const
 232:Eigen/src/Core/DenseCoeffsBase.h ****     {
 233:Eigen/src/Core/DenseCoeffsBase.h ****       typedef typename internal::packet_traits<Scalar>::type DefaultPacketType;
 234:Eigen/src/Core/DenseCoeffsBase.h ****       eigen_internal_assert(row >= 0 && row < rows() && col >= 0 && col < cols());
 235:Eigen/src/Core/DenseCoeffsBase.h ****       return internal::evaluator<Derived>(derived()).template packet<LoadMode,DefaultPacketType>(ro
 236:Eigen/src/Core/DenseCoeffsBase.h ****     }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 123


 237:Eigen/src/Core/DenseCoeffsBase.h **** 
 238:Eigen/src/Core/DenseCoeffsBase.h **** 
 239:Eigen/src/Core/DenseCoeffsBase.h ****     /** \internal */
 240:Eigen/src/Core/DenseCoeffsBase.h ****     template<int LoadMode>
 241:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE PacketReturnType packetByOuterInner(Index outer, Index inner) const
 242:Eigen/src/Core/DenseCoeffsBase.h ****     {
 243:Eigen/src/Core/DenseCoeffsBase.h ****       return packet<LoadMode>(rowIndexByOuterInner(outer, inner),
 244:Eigen/src/Core/DenseCoeffsBase.h ****                               colIndexByOuterInner(outer, inner));
 245:Eigen/src/Core/DenseCoeffsBase.h ****     }
 246:Eigen/src/Core/DenseCoeffsBase.h **** 
 247:Eigen/src/Core/DenseCoeffsBase.h ****     /** \internal
 248:Eigen/src/Core/DenseCoeffsBase.h ****       * \returns the packet of coefficients starting at the given index. It is your responsibility
 249:Eigen/src/Core/DenseCoeffsBase.h ****       * to ensure that a packet really starts there. This method is only available on expressions h
 250:Eigen/src/Core/DenseCoeffsBase.h ****       * PacketAccessBit and the LinearAccessBit.
 251:Eigen/src/Core/DenseCoeffsBase.h ****       *
 252:Eigen/src/Core/DenseCoeffsBase.h ****       * The \a LoadMode parameter may have the value \a #Aligned or \a #Unaligned. Its effect is to
 253:Eigen/src/Core/DenseCoeffsBase.h ****       * the appropriate vectorization instruction. Aligned access is faster, but is only possible f
 254:Eigen/src/Core/DenseCoeffsBase.h ****       * starting at an address which is a multiple of the packet size.
 255:Eigen/src/Core/DenseCoeffsBase.h ****       */
 256:Eigen/src/Core/DenseCoeffsBase.h **** 
 257:Eigen/src/Core/DenseCoeffsBase.h ****     template<int LoadMode>
 258:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE PacketReturnType packet(Index index) const
 259:Eigen/src/Core/DenseCoeffsBase.h ****     {
 260:Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(internal::evaluator<Derived>::Flags & LinearAccessBit,
 261:Eigen/src/Core/DenseCoeffsBase.h ****                           THIS_COEFFICIENT_ACCESSOR_TAKING_ONE_ACCESS_IS_ONLY_FOR_EXPRESSIONS_ALLOW
 262:Eigen/src/Core/DenseCoeffsBase.h ****       typedef typename internal::packet_traits<Scalar>::type DefaultPacketType;
 263:Eigen/src/Core/DenseCoeffsBase.h ****       eigen_internal_assert(index >= 0 && index < size());
 264:Eigen/src/Core/DenseCoeffsBase.h ****       return internal::evaluator<Derived>(derived()).template packet<LoadMode,DefaultPacketType>(in
 265:Eigen/src/Core/DenseCoeffsBase.h ****     }
 266:Eigen/src/Core/DenseCoeffsBase.h **** 
 267:Eigen/src/Core/DenseCoeffsBase.h ****   protected:
 268:Eigen/src/Core/DenseCoeffsBase.h ****     // explanation: DenseBase is doing "using ..." on the methods from DenseCoeffsBase.
 269:Eigen/src/Core/DenseCoeffsBase.h ****     // But some methods are only available in the DirectAccess case.
 270:Eigen/src/Core/DenseCoeffsBase.h ****     // So we add dummy methods here with these names, so that "using... " doesn't fail.
 271:Eigen/src/Core/DenseCoeffsBase.h ****     // It's not private so that the child class DenseBase can access them, and it's not public
 272:Eigen/src/Core/DenseCoeffsBase.h ****     // either since it's an implementation detail, so has to be protected.
 273:Eigen/src/Core/DenseCoeffsBase.h ****     void coeffRef();
 274:Eigen/src/Core/DenseCoeffsBase.h ****     void coeffRefByOuterInner();
 275:Eigen/src/Core/DenseCoeffsBase.h ****     void writePacket();
 276:Eigen/src/Core/DenseCoeffsBase.h ****     void writePacketByOuterInner();
 277:Eigen/src/Core/DenseCoeffsBase.h ****     void copyCoeff();
 278:Eigen/src/Core/DenseCoeffsBase.h ****     void copyCoeffByOuterInner();
 279:Eigen/src/Core/DenseCoeffsBase.h ****     void copyPacket();
 280:Eigen/src/Core/DenseCoeffsBase.h ****     void copyPacketByOuterInner();
 281:Eigen/src/Core/DenseCoeffsBase.h ****     void stride();
 282:Eigen/src/Core/DenseCoeffsBase.h ****     void innerStride();
 283:Eigen/src/Core/DenseCoeffsBase.h ****     void outerStride();
 284:Eigen/src/Core/DenseCoeffsBase.h ****     void rowStride();
 285:Eigen/src/Core/DenseCoeffsBase.h ****     void colStride();
 286:Eigen/src/Core/DenseCoeffsBase.h **** };
 287:Eigen/src/Core/DenseCoeffsBase.h **** 
 288:Eigen/src/Core/DenseCoeffsBase.h **** /** \brief Base class providing read/write coefficient access to matrices and arrays.
 289:Eigen/src/Core/DenseCoeffsBase.h ****   * \ingroup Core_Module
 290:Eigen/src/Core/DenseCoeffsBase.h ****   * \tparam Derived Type of the derived class
 291:Eigen/src/Core/DenseCoeffsBase.h ****   * \tparam #WriteAccessors Constant indicating read/write access
 292:Eigen/src/Core/DenseCoeffsBase.h ****   *
 293:Eigen/src/Core/DenseCoeffsBase.h ****   * This class defines the non-const \c operator() function and friends, which can be used to write
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 124


 294:Eigen/src/Core/DenseCoeffsBase.h ****   * entries of a matrix or array. This class inherits DenseCoeffsBase<Derived, ReadOnlyAccessors> w
 295:Eigen/src/Core/DenseCoeffsBase.h ****   * defines the const variant for reading specific entries.
 296:Eigen/src/Core/DenseCoeffsBase.h ****   * 
 297:Eigen/src/Core/DenseCoeffsBase.h ****   * \sa DenseCoeffsBase<Derived, DirectAccessors>, \ref TopicClassHierarchy
 298:Eigen/src/Core/DenseCoeffsBase.h ****   */
 299:Eigen/src/Core/DenseCoeffsBase.h **** template<typename Derived>
 300:Eigen/src/Core/DenseCoeffsBase.h **** class DenseCoeffsBase<Derived, WriteAccessors> : public DenseCoeffsBase<Derived, ReadOnlyAccessors>
 301:Eigen/src/Core/DenseCoeffsBase.h **** {
 302:Eigen/src/Core/DenseCoeffsBase.h ****   public:
 303:Eigen/src/Core/DenseCoeffsBase.h **** 
 304:Eigen/src/Core/DenseCoeffsBase.h ****     typedef DenseCoeffsBase<Derived, ReadOnlyAccessors> Base;
 305:Eigen/src/Core/DenseCoeffsBase.h **** 
 306:Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::traits<Derived>::StorageKind StorageKind;
 307:Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::traits<Derived>::Scalar Scalar;
 308:Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::packet_traits<Scalar>::type PacketScalar;
 309:Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename NumTraits<Scalar>::Real RealScalar;
 310:Eigen/src/Core/DenseCoeffsBase.h **** 
 311:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::coeff;
 312:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::rows;
 313:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::cols;
 314:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::size;
 315:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::derived;
 316:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::rowIndexByOuterInner;
 317:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::colIndexByOuterInner;
 318:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::operator[];
 319:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::operator();
 320:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::x;
 321:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::y;
 322:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::z;
 323:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::w;
 324:Eigen/src/Core/DenseCoeffsBase.h **** 
 325:Eigen/src/Core/DenseCoeffsBase.h ****     /** Short version: don't use this function, use
 326:Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator()(Index,Index) \endlink instead.
 327:Eigen/src/Core/DenseCoeffsBase.h ****       *
 328:Eigen/src/Core/DenseCoeffsBase.h ****       * Long version: this function is similar to
 329:Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator()(Index,Index) \endlink, but without the assertion.
 330:Eigen/src/Core/DenseCoeffsBase.h ****       * Use this for limiting the performance cost of debugging code when doing
 331:Eigen/src/Core/DenseCoeffsBase.h ****       * repeated coefficient access. Only use this when it is guaranteed that the
 332:Eigen/src/Core/DenseCoeffsBase.h ****       * parameters \a row and \a col are in range.
 333:Eigen/src/Core/DenseCoeffsBase.h ****       *
 334:Eigen/src/Core/DenseCoeffsBase.h ****       * If EIGEN_INTERNAL_DEBUGGING is defined, an assertion will be made, making this
 335:Eigen/src/Core/DenseCoeffsBase.h ****       * function equivalent to \link operator()(Index,Index) \endlink.
 336:Eigen/src/Core/DenseCoeffsBase.h ****       *
 337:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator()(Index,Index), coeff(Index, Index) const, coeffRef(Index)
 338:Eigen/src/Core/DenseCoeffsBase.h ****       */
 339:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 340:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)
 341:Eigen/src/Core/DenseCoeffsBase.h ****     {
 342:Eigen/src/Core/DenseCoeffsBase.h ****       eigen_internal_assert(row >= 0 && row < rows()
 343:Eigen/src/Core/DenseCoeffsBase.h ****                          && col >= 0 && col < cols());
 344:Eigen/src/Core/DenseCoeffsBase.h ****       return internal::evaluator<Derived>(derived()).coeffRef(row,col);
 345:Eigen/src/Core/DenseCoeffsBase.h ****     }
 346:Eigen/src/Core/DenseCoeffsBase.h **** 
 347:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 348:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar&
 349:Eigen/src/Core/DenseCoeffsBase.h ****     coeffRefByOuterInner(Index outer, Index inner)
 350:Eigen/src/Core/DenseCoeffsBase.h ****     {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 125


 351:Eigen/src/Core/DenseCoeffsBase.h ****       return coeffRef(rowIndexByOuterInner(outer, inner),
 352:Eigen/src/Core/DenseCoeffsBase.h ****                       colIndexByOuterInner(outer, inner));
 353:Eigen/src/Core/DenseCoeffsBase.h ****     }
 354:Eigen/src/Core/DenseCoeffsBase.h **** 
 355:Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns a reference to the coefficient at given the given row and column.
 356:Eigen/src/Core/DenseCoeffsBase.h ****       *
 357:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator[](Index)
 358:Eigen/src/Core/DenseCoeffsBase.h ****       */
 359:Eigen/src/Core/DenseCoeffsBase.h **** 
 360:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 361:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar&
 362:Eigen/src/Core/DenseCoeffsBase.h ****     operator()(Index row, Index col)
 363:Eigen/src/Core/DenseCoeffsBase.h ****     {
 364:Eigen/src/Core/DenseCoeffsBase.h ****       eigen_assert(row >= 0 && row < rows()
 365:Eigen/src/Core/DenseCoeffsBase.h ****           && col >= 0 && col < cols());
 366:Eigen/src/Core/DenseCoeffsBase.h ****       return coeffRef(row, col);
 367:Eigen/src/Core/DenseCoeffsBase.h ****     }
 368:Eigen/src/Core/DenseCoeffsBase.h **** 
 369:Eigen/src/Core/DenseCoeffsBase.h **** 
 370:Eigen/src/Core/DenseCoeffsBase.h ****     /** Short version: don't use this function, use
 371:Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator[](Index) \endlink instead.
 372:Eigen/src/Core/DenseCoeffsBase.h ****       *
 373:Eigen/src/Core/DenseCoeffsBase.h ****       * Long version: this function is similar to
 374:Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator[](Index) \endlink, but without the assertion.
 375:Eigen/src/Core/DenseCoeffsBase.h ****       * Use this for limiting the performance cost of debugging code when doing
 376:Eigen/src/Core/DenseCoeffsBase.h ****       * repeated coefficient access. Only use this when it is guaranteed that the
 377:Eigen/src/Core/DenseCoeffsBase.h ****       * parameters \a row and \a col are in range.
 378:Eigen/src/Core/DenseCoeffsBase.h ****       *
 379:Eigen/src/Core/DenseCoeffsBase.h ****       * If EIGEN_INTERNAL_DEBUGGING is defined, an assertion will be made, making this
 380:Eigen/src/Core/DenseCoeffsBase.h ****       * function equivalent to \link operator[](Index) \endlink.
 381:Eigen/src/Core/DenseCoeffsBase.h ****       *
 382:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator[](Index), coeff(Index) const, coeffRef(Index,Index)
 383:Eigen/src/Core/DenseCoeffsBase.h ****       */
 384:Eigen/src/Core/DenseCoeffsBase.h **** 
 385:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 386:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar&
 387:Eigen/src/Core/DenseCoeffsBase.h ****     coeffRef(Index index)
 388:Eigen/src/Core/DenseCoeffsBase.h ****     {
 389:Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(internal::evaluator<Derived>::Flags & LinearAccessBit,
 390:Eigen/src/Core/DenseCoeffsBase.h ****                           THIS_COEFFICIENT_ACCESSOR_TAKING_ONE_ACCESS_IS_ONLY_FOR_EXPRESSIONS_ALLOW
 391:Eigen/src/Core/DenseCoeffsBase.h ****       eigen_internal_assert(index >= 0 && index < size());
 392:Eigen/src/Core/DenseCoeffsBase.h ****       return internal::evaluator<Derived>(derived()).coeffRef(index);
 393:Eigen/src/Core/DenseCoeffsBase.h ****     }
 394:Eigen/src/Core/DenseCoeffsBase.h **** 
 395:Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns a reference to the coefficient at given index.
 396:Eigen/src/Core/DenseCoeffsBase.h ****       *
 397:Eigen/src/Core/DenseCoeffsBase.h ****       * This method is allowed only for vector expressions, and for matrix expressions having the L
 398:Eigen/src/Core/DenseCoeffsBase.h ****       *
 399:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator[](Index) const, operator()(Index,Index), x(), y(), z(), w()
 400:Eigen/src/Core/DenseCoeffsBase.h ****       */
 401:Eigen/src/Core/DenseCoeffsBase.h **** 
 402:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 403:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar&
 404:Eigen/src/Core/DenseCoeffsBase.h ****     operator[](Index index)
 405:Eigen/src/Core/DenseCoeffsBase.h ****     {
 406:Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(Derived::IsVectorAtCompileTime,
 407:Eigen/src/Core/DenseCoeffsBase.h ****                           THE_BRACKET_OPERATOR_IS_ONLY_FOR_VECTORS__USE_THE_PARENTHESIS_OPERATOR_IN
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 126


 408:Eigen/src/Core/DenseCoeffsBase.h ****       eigen_assert(index >= 0 && index < size());
 409:Eigen/src/Core/DenseCoeffsBase.h ****       return coeffRef(index);
 410:Eigen/src/Core/DenseCoeffsBase.h ****     }
 411:Eigen/src/Core/DenseCoeffsBase.h **** 
 412:Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns a reference to the coefficient at given index.
 413:Eigen/src/Core/DenseCoeffsBase.h ****       *
 414:Eigen/src/Core/DenseCoeffsBase.h ****       * This is synonymous to operator[](Index).
 415:Eigen/src/Core/DenseCoeffsBase.h ****       *
 416:Eigen/src/Core/DenseCoeffsBase.h ****       * This method is allowed only for vector expressions, and for matrix expressions having the L
 417:Eigen/src/Core/DenseCoeffsBase.h ****       *
 418:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator[](Index) const, operator()(Index,Index), x(), y(), z(), w()
 419:Eigen/src/Core/DenseCoeffsBase.h ****       */
 420:Eigen/src/Core/DenseCoeffsBase.h **** 
 421:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 422:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar&
 423:Eigen/src/Core/DenseCoeffsBase.h ****     operator()(Index index)
 424:Eigen/src/Core/DenseCoeffsBase.h ****     {
 425:Eigen/src/Core/DenseCoeffsBase.h ****       eigen_assert(index >= 0 && index < size());
 426:Eigen/src/Core/DenseCoeffsBase.h ****       return coeffRef(index);
 427:Eigen/src/Core/DenseCoeffsBase.h ****     }
 428:Eigen/src/Core/DenseCoeffsBase.h **** 
 429:Eigen/src/Core/DenseCoeffsBase.h ****     /** equivalent to operator[](0).  */
 430:Eigen/src/Core/DenseCoeffsBase.h **** 
 431:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 432:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar&
 433:Eigen/src/Core/DenseCoeffsBase.h ****     x() { return (*this)[0]; }
 434:Eigen/src/Core/DenseCoeffsBase.h **** 
 435:Eigen/src/Core/DenseCoeffsBase.h ****     /** equivalent to operator[](1).  */
 436:Eigen/src/Core/DenseCoeffsBase.h **** 
 437:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 438:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar&
 439:Eigen/src/Core/DenseCoeffsBase.h ****     y()
 440:Eigen/src/Core/DenseCoeffsBase.h ****     {
 441:Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(Derived::SizeAtCompileTime==-1 || Derived::SizeAtCompileTime>=2, OUT_OF_R
 442:Eigen/src/Core/DenseCoeffsBase.h ****       return (*this)[1];
 443:Eigen/src/Core/DenseCoeffsBase.h ****     }
 444:Eigen/src/Core/DenseCoeffsBase.h **** 
 445:Eigen/src/Core/DenseCoeffsBase.h ****     /** equivalent to operator[](2).  */
 446:Eigen/src/Core/DenseCoeffsBase.h **** 
 447:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 448:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar&
 449:Eigen/src/Core/DenseCoeffsBase.h ****     z()
 450:Eigen/src/Core/DenseCoeffsBase.h ****     {
 451:Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(Derived::SizeAtCompileTime==-1 || Derived::SizeAtCompileTime>=3, OUT_OF_R
 452:Eigen/src/Core/DenseCoeffsBase.h ****       return (*this)[2];
 453:Eigen/src/Core/DenseCoeffsBase.h ****     }
 454:Eigen/src/Core/DenseCoeffsBase.h **** 
 455:Eigen/src/Core/DenseCoeffsBase.h ****     /** equivalent to operator[](3).  */
 456:Eigen/src/Core/DenseCoeffsBase.h **** 
 457:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 458:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar&
 459:Eigen/src/Core/DenseCoeffsBase.h ****     w()
 460:Eigen/src/Core/DenseCoeffsBase.h ****     {
 461:Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(Derived::SizeAtCompileTime==-1 || Derived::SizeAtCompileTime>=4, OUT_OF_R
 462:Eigen/src/Core/DenseCoeffsBase.h ****       return (*this)[3];
 463:Eigen/src/Core/DenseCoeffsBase.h ****     }
 464:Eigen/src/Core/DenseCoeffsBase.h **** };
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 127


 465:Eigen/src/Core/DenseCoeffsBase.h **** 
 466:Eigen/src/Core/DenseCoeffsBase.h **** /** \brief Base class providing direct read-only coefficient access to matrices and arrays.
 467:Eigen/src/Core/DenseCoeffsBase.h ****   * \ingroup Core_Module
 468:Eigen/src/Core/DenseCoeffsBase.h ****   * \tparam Derived Type of the derived class
 469:Eigen/src/Core/DenseCoeffsBase.h ****   * \tparam #DirectAccessors Constant indicating direct access
 470:Eigen/src/Core/DenseCoeffsBase.h ****   *
 471:Eigen/src/Core/DenseCoeffsBase.h ****   * This class defines functions to work with strides which can be used to access entries directly.
 472:Eigen/src/Core/DenseCoeffsBase.h ****   * inherits DenseCoeffsBase<Derived, ReadOnlyAccessors> which defines functions to access entries 
 473:Eigen/src/Core/DenseCoeffsBase.h ****   * \c operator() .
 474:Eigen/src/Core/DenseCoeffsBase.h ****   *
 475:Eigen/src/Core/DenseCoeffsBase.h ****   * \sa \blank \ref TopicClassHierarchy
 476:Eigen/src/Core/DenseCoeffsBase.h ****   */
 477:Eigen/src/Core/DenseCoeffsBase.h **** template<typename Derived>
 478:Eigen/src/Core/DenseCoeffsBase.h **** class DenseCoeffsBase<Derived, DirectAccessors> : public DenseCoeffsBase<Derived, ReadOnlyAccessors
 479:Eigen/src/Core/DenseCoeffsBase.h **** {
 480:Eigen/src/Core/DenseCoeffsBase.h ****   public:
 481:Eigen/src/Core/DenseCoeffsBase.h **** 
 482:Eigen/src/Core/DenseCoeffsBase.h ****     typedef DenseCoeffsBase<Derived, ReadOnlyAccessors> Base;
 483:Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::traits<Derived>::Scalar Scalar;
 484:Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename NumTraits<Scalar>::Real RealScalar;
 485:Eigen/src/Core/DenseCoeffsBase.h **** 
 486:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::rows;
 487:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::cols;
 488:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::size;
 489:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::derived;
 490:Eigen/src/Core/DenseCoeffsBase.h **** 
 491:Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns the pointer increment between two consecutive elements within a slice in the inner
 492:Eigen/src/Core/DenseCoeffsBase.h ****       *
 493:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa outerStride(), rowStride(), colStride()
 494:Eigen/src/Core/DenseCoeffsBase.h ****       */
 495:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 496:Eigen/src/Core/DenseCoeffsBase.h ****     inline Index innerStride() const
 497:Eigen/src/Core/DenseCoeffsBase.h ****     {
 498:Eigen/src/Core/DenseCoeffsBase.h ****       return derived().innerStride();
 499:Eigen/src/Core/DenseCoeffsBase.h ****     }
 500:Eigen/src/Core/DenseCoeffsBase.h **** 
 501:Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns the pointer increment between two consecutive inner slices (for example, between t
 502:Eigen/src/Core/DenseCoeffsBase.h ****       *          in a column-major matrix).
 503:Eigen/src/Core/DenseCoeffsBase.h ****       *
 504:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa innerStride(), rowStride(), colStride()
 505:Eigen/src/Core/DenseCoeffsBase.h ****       */
 506:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 507:Eigen/src/Core/DenseCoeffsBase.h ****     inline Index outerStride() const
 508:Eigen/src/Core/DenseCoeffsBase.h ****     {
 509:Eigen/src/Core/DenseCoeffsBase.h ****       return derived().outerStride();
 510:Eigen/src/Core/DenseCoeffsBase.h ****     }
 511:Eigen/src/Core/DenseCoeffsBase.h **** 
 512:Eigen/src/Core/DenseCoeffsBase.h ****     // FIXME shall we remove it ?
 513:Eigen/src/Core/DenseCoeffsBase.h ****     inline Index stride() const
 514:Eigen/src/Core/DenseCoeffsBase.h ****     {
 515:Eigen/src/Core/DenseCoeffsBase.h ****       return Derived::IsVectorAtCompileTime ? innerStride() : outerStride();
 516:Eigen/src/Core/DenseCoeffsBase.h ****     }
 517:Eigen/src/Core/DenseCoeffsBase.h **** 
 518:Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns the pointer increment between two consecutive rows.
 519:Eigen/src/Core/DenseCoeffsBase.h ****       *
 520:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa innerStride(), outerStride(), colStride()
 521:Eigen/src/Core/DenseCoeffsBase.h ****       */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 128


 522:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 523:Eigen/src/Core/DenseCoeffsBase.h ****     inline Index rowStride() const
 524:Eigen/src/Core/DenseCoeffsBase.h ****     {
 525:Eigen/src/Core/DenseCoeffsBase.h ****       return Derived::IsRowMajor ? outerStride() : innerStride();
 526:Eigen/src/Core/DenseCoeffsBase.h ****     }
 527:Eigen/src/Core/DenseCoeffsBase.h **** 
 528:Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns the pointer increment between two consecutive columns.
 529:Eigen/src/Core/DenseCoeffsBase.h ****       *
 530:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa innerStride(), outerStride(), rowStride()
 531:Eigen/src/Core/DenseCoeffsBase.h ****       */
 532:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 533:Eigen/src/Core/DenseCoeffsBase.h ****     inline Index colStride() const
 534:Eigen/src/Core/DenseCoeffsBase.h ****     {
 535:Eigen/src/Core/DenseCoeffsBase.h ****       return Derived::IsRowMajor ? innerStride() : outerStride();
 536:Eigen/src/Core/DenseCoeffsBase.h ****     }
 537:Eigen/src/Core/DenseCoeffsBase.h **** };
 538:Eigen/src/Core/DenseCoeffsBase.h **** 
 539:Eigen/src/Core/DenseCoeffsBase.h **** /** \brief Base class providing direct read/write coefficient access to matrices and arrays.
 540:Eigen/src/Core/DenseCoeffsBase.h ****   * \ingroup Core_Module
 541:Eigen/src/Core/DenseCoeffsBase.h ****   * \tparam Derived Type of the derived class
 542:Eigen/src/Core/DenseCoeffsBase.h ****   * \tparam #DirectWriteAccessors Constant indicating direct access
 543:Eigen/src/Core/DenseCoeffsBase.h ****   *
 544:Eigen/src/Core/DenseCoeffsBase.h ****   * This class defines functions to work with strides which can be used to access entries directly.
 545:Eigen/src/Core/DenseCoeffsBase.h ****   * inherits DenseCoeffsBase<Derived, WriteAccessors> which defines functions to access entries rea
 546:Eigen/src/Core/DenseCoeffsBase.h ****   * \c operator().
 547:Eigen/src/Core/DenseCoeffsBase.h ****   *
 548:Eigen/src/Core/DenseCoeffsBase.h ****   * \sa \blank \ref TopicClassHierarchy
 549:Eigen/src/Core/DenseCoeffsBase.h ****   */
 550:Eigen/src/Core/DenseCoeffsBase.h **** template<typename Derived>
 551:Eigen/src/Core/DenseCoeffsBase.h **** class DenseCoeffsBase<Derived, DirectWriteAccessors>
 552:Eigen/src/Core/DenseCoeffsBase.h ****   : public DenseCoeffsBase<Derived, WriteAccessors>
 553:Eigen/src/Core/DenseCoeffsBase.h **** {
 554:Eigen/src/Core/DenseCoeffsBase.h ****   public:
 555:Eigen/src/Core/DenseCoeffsBase.h **** 
 556:Eigen/src/Core/DenseCoeffsBase.h ****     typedef DenseCoeffsBase<Derived, WriteAccessors> Base;
 557:Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::traits<Derived>::Scalar Scalar;
 558:Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename NumTraits<Scalar>::Real RealScalar;
 559:Eigen/src/Core/DenseCoeffsBase.h **** 
 560:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::rows;
 561:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::cols;
 562:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::size;
 563:Eigen/src/Core/DenseCoeffsBase.h ****     using Base::derived;
 564:Eigen/src/Core/DenseCoeffsBase.h **** 
 565:Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns the pointer increment between two consecutive elements within a slice in the inner
 566:Eigen/src/Core/DenseCoeffsBase.h ****       *
 567:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa outerStride(), rowStride(), colStride()
 568:Eigen/src/Core/DenseCoeffsBase.h ****       */
 569:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 570:Eigen/src/Core/DenseCoeffsBase.h ****     inline Index innerStride() const
 571:Eigen/src/Core/DenseCoeffsBase.h ****     {
 572:Eigen/src/Core/DenseCoeffsBase.h ****       return derived().innerStride();
 573:Eigen/src/Core/DenseCoeffsBase.h ****     }
 574:Eigen/src/Core/DenseCoeffsBase.h **** 
 575:Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns the pointer increment between two consecutive inner slices (for example, between t
 576:Eigen/src/Core/DenseCoeffsBase.h ****       *          in a column-major matrix).
 577:Eigen/src/Core/DenseCoeffsBase.h ****       *
 578:Eigen/src/Core/DenseCoeffsBase.h ****       * \sa innerStride(), rowStride(), colStride()
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 129


 579:Eigen/src/Core/DenseCoeffsBase.h ****       */
 580:Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 581:Eigen/src/Core/DenseCoeffsBase.h ****     inline Index outerStride() const
 1115              		.loc 17 581 18 is_stmt 1 view .LVU291
 1116              		.loc 17 581 18 is_stmt 0 view .LVU292
 1117              	.LBE2681:
 1118              	.LBB2682:
 1119              	.LBI2682:
 1120              		.file 18 "Eigen/src/Core/util/XprHelper.h"
   1:Eigen/src/Core/util/XprHelper.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/util/XprHelper.h **** // for linear algebra.
   3:Eigen/src/Core/util/XprHelper.h **** //
   4:Eigen/src/Core/util/XprHelper.h **** // Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:Eigen/src/Core/util/XprHelper.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:Eigen/src/Core/util/XprHelper.h **** //
   7:Eigen/src/Core/util/XprHelper.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/util/XprHelper.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/util/XprHelper.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:Eigen/src/Core/util/XprHelper.h **** 
  11:Eigen/src/Core/util/XprHelper.h **** #ifndef EIGEN_XPRHELPER_H
  12:Eigen/src/Core/util/XprHelper.h **** #define EIGEN_XPRHELPER_H
  13:Eigen/src/Core/util/XprHelper.h **** 
  14:Eigen/src/Core/util/XprHelper.h **** // just a workaround because GCC seems to not really like empty structs
  15:Eigen/src/Core/util/XprHelper.h **** // FIXME: gcc 4.3 generates bad code when strict-aliasing is enabled
  16:Eigen/src/Core/util/XprHelper.h **** // so currently we simply disable this optimization for gcc 4.3
  17:Eigen/src/Core/util/XprHelper.h **** #if EIGEN_COMP_GNUC && !EIGEN_GNUC_AT(4,3)
  18:Eigen/src/Core/util/XprHelper.h ****   #define EIGEN_EMPTY_STRUCT_CTOR(X) \
  19:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE X() {} \
  20:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE X(const X& ) {}
  21:Eigen/src/Core/util/XprHelper.h **** #else
  22:Eigen/src/Core/util/XprHelper.h ****   #define EIGEN_EMPTY_STRUCT_CTOR(X)
  23:Eigen/src/Core/util/XprHelper.h **** #endif
  24:Eigen/src/Core/util/XprHelper.h **** 
  25:Eigen/src/Core/util/XprHelper.h **** namespace Eigen {
  26:Eigen/src/Core/util/XprHelper.h **** 
  27:Eigen/src/Core/util/XprHelper.h **** namespace internal {
  28:Eigen/src/Core/util/XprHelper.h **** 
  29:Eigen/src/Core/util/XprHelper.h **** template<typename IndexDest, typename IndexSrc>
  30:Eigen/src/Core/util/XprHelper.h **** EIGEN_DEVICE_FUNC
  31:Eigen/src/Core/util/XprHelper.h **** inline IndexDest convert_index(const IndexSrc& idx) {
  32:Eigen/src/Core/util/XprHelper.h ****   // for sizeof(IndexDest)>=sizeof(IndexSrc) compilers should be able to optimize this away:
  33:Eigen/src/Core/util/XprHelper.h ****   eigen_internal_assert(idx <= NumTraits<IndexDest>::highest() && "Index value to big for target ty
  34:Eigen/src/Core/util/XprHelper.h ****   return IndexDest(idx);
  35:Eigen/src/Core/util/XprHelper.h **** }
  36:Eigen/src/Core/util/XprHelper.h **** 
  37:Eigen/src/Core/util/XprHelper.h **** 
  38:Eigen/src/Core/util/XprHelper.h **** // promote_scalar_arg is an helper used in operation between an expression and a scalar, like:
  39:Eigen/src/Core/util/XprHelper.h **** //    expression * scalar
  40:Eigen/src/Core/util/XprHelper.h **** // Its role is to determine how the type T of the scalar operand should be promoted given the scala
  41:Eigen/src/Core/util/XprHelper.h **** // The IsSupported template parameter must be provided by the caller as: internal::has_ReturnType<S
  42:Eigen/src/Core/util/XprHelper.h **** // Then the logic is as follows:
  43:Eigen/src/Core/util/XprHelper.h **** //  - if the operation is natively supported as defined by IsSupported, then the scalar type is not
  44:Eigen/src/Core/util/XprHelper.h **** //  - otherwise, NumTraits<ExprScalar>::Literal is returned if T is implicitly convertible to NumTr
  45:Eigen/src/Core/util/XprHelper.h **** //  - otherwise, ExprScalar is returned if T is implicitly convertible to ExprScalar AND that this 
  46:Eigen/src/Core/util/XprHelper.h **** //  - In all other cases, the promoted type is not defined, and the respective operation is thus in
  47:Eigen/src/Core/util/XprHelper.h **** template<typename ExprScalar,typename T, bool IsSupported>
  48:Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 130


  49:Eigen/src/Core/util/XprHelper.h **** 
  50:Eigen/src/Core/util/XprHelper.h **** template<typename S,typename T>
  51:Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg<S,T,true>
  52:Eigen/src/Core/util/XprHelper.h **** {
  53:Eigen/src/Core/util/XprHelper.h ****   typedef T type;
  54:Eigen/src/Core/util/XprHelper.h **** };
  55:Eigen/src/Core/util/XprHelper.h **** 
  56:Eigen/src/Core/util/XprHelper.h **** // Recursively check safe conversion to PromotedType, and then ExprScalar if they are different.
  57:Eigen/src/Core/util/XprHelper.h **** template<typename ExprScalar,typename T,typename PromotedType,
  58:Eigen/src/Core/util/XprHelper.h ****   bool ConvertibleToLiteral = internal::is_convertible<T,PromotedType>::value,
  59:Eigen/src/Core/util/XprHelper.h ****   bool IsSafe = NumTraits<T>::IsInteger || !NumTraits<PromotedType>::IsInteger>
  60:Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg_unsupported;
  61:Eigen/src/Core/util/XprHelper.h **** 
  62:Eigen/src/Core/util/XprHelper.h **** // Start recursion with NumTraits<ExprScalar>::Literal
  63:Eigen/src/Core/util/XprHelper.h **** template<typename S,typename T>
  64:Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg<S,T,false> : promote_scalar_arg_unsupported<S,T,typename NumTraits<S>::Li
  65:Eigen/src/Core/util/XprHelper.h **** 
  66:Eigen/src/Core/util/XprHelper.h **** // We found a match!
  67:Eigen/src/Core/util/XprHelper.h **** template<typename S,typename T, typename PromotedType>
  68:Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg_unsupported<S,T,PromotedType,true,true>
  69:Eigen/src/Core/util/XprHelper.h **** {
  70:Eigen/src/Core/util/XprHelper.h ****   typedef PromotedType type;
  71:Eigen/src/Core/util/XprHelper.h **** };
  72:Eigen/src/Core/util/XprHelper.h **** 
  73:Eigen/src/Core/util/XprHelper.h **** // No match, but no real-to-integer issues, and ExprScalar and current PromotedType are different,
  74:Eigen/src/Core/util/XprHelper.h **** // so let's try to promote to ExprScalar
  75:Eigen/src/Core/util/XprHelper.h **** template<typename ExprScalar,typename T, typename PromotedType>
  76:Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg_unsupported<ExprScalar,T,PromotedType,false,true>
  77:Eigen/src/Core/util/XprHelper.h ****    : promote_scalar_arg_unsupported<ExprScalar,T,ExprScalar>
  78:Eigen/src/Core/util/XprHelper.h **** {};
  79:Eigen/src/Core/util/XprHelper.h **** 
  80:Eigen/src/Core/util/XprHelper.h **** // Unsafe real-to-integer, let's stop.
  81:Eigen/src/Core/util/XprHelper.h **** template<typename S,typename T, typename PromotedType, bool ConvertibleToLiteral>
  82:Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg_unsupported<S,T,PromotedType,ConvertibleToLiteral,false> {};
  83:Eigen/src/Core/util/XprHelper.h **** 
  84:Eigen/src/Core/util/XprHelper.h **** // T is not even convertible to ExprScalar, let's stop.
  85:Eigen/src/Core/util/XprHelper.h **** template<typename S,typename T>
  86:Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg_unsupported<S,T,S,false,true> {};
  87:Eigen/src/Core/util/XprHelper.h **** 
  88:Eigen/src/Core/util/XprHelper.h **** //classes inheriting no_assignment_operator don't generate a default operator=.
  89:Eigen/src/Core/util/XprHelper.h **** class no_assignment_operator
  90:Eigen/src/Core/util/XprHelper.h **** {
  91:Eigen/src/Core/util/XprHelper.h ****   private:
  92:Eigen/src/Core/util/XprHelper.h ****     no_assignment_operator& operator=(const no_assignment_operator&);
  93:Eigen/src/Core/util/XprHelper.h **** };
  94:Eigen/src/Core/util/XprHelper.h **** 
  95:Eigen/src/Core/util/XprHelper.h **** /** \internal return the index type with the largest number of bits */
  96:Eigen/src/Core/util/XprHelper.h **** template<typename I1, typename I2>
  97:Eigen/src/Core/util/XprHelper.h **** struct promote_index_type
  98:Eigen/src/Core/util/XprHelper.h **** {
  99:Eigen/src/Core/util/XprHelper.h ****   typedef typename conditional<(sizeof(I1)<sizeof(I2)), I2, I1>::type type;
 100:Eigen/src/Core/util/XprHelper.h **** };
 101:Eigen/src/Core/util/XprHelper.h **** 
 102:Eigen/src/Core/util/XprHelper.h **** /** \internal If the template parameter Value is Dynamic, this class is just a wrapper around a T v
 103:Eigen/src/Core/util/XprHelper.h ****   * can be accessed using value() and setValue().
 104:Eigen/src/Core/util/XprHelper.h ****   * Otherwise, this class is an empty structure and value() just returns the template parameter Val
 105:Eigen/src/Core/util/XprHelper.h ****   */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 131


 106:Eigen/src/Core/util/XprHelper.h **** template<typename T, int Value> class variable_if_dynamic
 107:Eigen/src/Core/util/XprHelper.h **** {
 108:Eigen/src/Core/util/XprHelper.h ****   public:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_EMPTY_STRUCT_CTOR(variable_if_dynamic)
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1121              		.loc 18 110 52 is_stmt 1 view .LVU293
 1122              		.loc 18 110 52 is_stmt 0 view .LVU294
 1123              	.LBE2682:
 1124              	.LBE2676:
 1125              	.LBE2675:
 1126              	.LBE2674:
 1127              	.LBE2673:
 1128              	.LBE2672:
 1129              	.LBB2683:
 1130              	.LBI2683:
 1131              		.loc 15 243 30 is_stmt 1 view .LVU295
 1132              	.LBB2684:
 1133              	.LBB2685:
 1134              	.LBI2685:
 154:Eigen/src/Core/CoreEvaluators.h ****     : m_data(m.data()), m_outerStride(IsVectorAtCompileTime ? 0 : m.outerStride()) 
 1135              		.loc 15 154 30 view .LVU296
 1136              	.LBB2686:
 1137              	.LBB2687:
 1138              	.LBB2688:
 1139              	.LBI2688:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 1140              		.loc 15 109 8 view .LVU297
 1141              	.LBB2689:
 1142              	.LBI2689:
 1143              		.loc 16 299 21 view .LVU298
 1144              		.loc 16 299 21 is_stmt 0 view .LVU299
 1145              	.LBE2689:
 1146              	.LBE2688:
 1147              	.LBB2690:
 1148              	.LBI2690:
 255:Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 1149              		.loc 9 255 57 is_stmt 1 view .LVU300
 1150              	.LBB2691:
 1151              	.LBI2691:
 1152              		.loc 12 215 32 view .LVU301
 1153              		.loc 12 215 32 is_stmt 0 view .LVU302
 1154              	.LBE2691:
 1155              	.LBE2690:
 155:Eigen/src/Core/CoreEvaluators.h ****   {
 1156              		.loc 15 155 82 view .LVU303
 1157 001e 0A94     		str	r4, [sp, #40]
 1158              	.LVL62:
 1159              	.LBB2692:
 1160              	.LBI2692:
 1161              		.loc 18 110 52 is_stmt 1 view .LVU304
 1162              		.loc 18 110 52 is_stmt 0 view .LVU305
 1163              	.LBE2692:
 1164              	.LBE2687:
 1165              	.LBE2686:
 1166              	.LBE2685:
 1167              	.LBE2684:
 1168              	.LBE2683:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 132


 1169              	.LBB2693:
 1170              	.LBI2693:
 103:Eigen/src/Core/Product.h ****     EIGEN_DEVICE_FUNC const RhsNestedCleaned& rhs() const { return m_rhs; }
 1171              		.loc 6 103 47 is_stmt 1 view .LVU306
 103:Eigen/src/Core/Product.h ****     EIGEN_DEVICE_FUNC const RhsNestedCleaned& rhs() const { return m_rhs; }
 1172              		.loc 6 103 47 is_stmt 0 view .LVU307
 1173              	.LBE2693:
 1174              	.LBB2694:
 1175              	.LBI2694:
 153:Eigen/src/Core/PlainObjectBase.h **** 
 1176              		.loc 9 153 31 is_stmt 1 view .LVU308
 153:Eigen/src/Core/PlainObjectBase.h **** 
 1177              		.loc 9 153 31 is_stmt 0 view .LVU309
 1178              	.LBE2694:
 1179              		.loc 14 451 34 view .LVU310
 1180 0020 0322     		movs	r2, #3
 1181 0022 0C92     		str	r2, [sp, #48]
 1182              	.LVL63:
 1183              		.loc 14 451 34 view .LVU311
 1184              	.LBE2665:
 1185              	.LBE2664:
 1186              	.LBE2663:
 1187              	.LBE2662:
 1188              	.LBE2661:
 1189              	.LBB2695:
 1190              	.LBI2695:
 1191              		.loc 15 243 30 is_stmt 1 view .LVU312
 1192              	.LBB2696:
 1193              	.LBB2697:
 1194              	.LBI2697:
 154:Eigen/src/Core/CoreEvaluators.h ****     : m_data(m.data()), m_outerStride(IsVectorAtCompileTime ? 0 : m.outerStride()) 
 1195              		.loc 15 154 30 view .LVU313
 1196              	.LBB2698:
 1197              	.LBB2699:
 1198              	.LBB2700:
 1199              	.LBI2700:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 1200              		.loc 15 109 8 view .LVU314
 1201              	.LBB2701:
 1202              	.LBI2701:
 1203              		.loc 16 299 21 view .LVU315
 1204              		.loc 16 299 21 is_stmt 0 view .LVU316
 1205              	.LBE2701:
 1206              	.LBE2700:
 1207              	.LBB2702:
 1208              	.LBI2702:
 255:Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 1209              		.loc 9 255 57 is_stmt 1 view .LVU317
 1210              	.LBB2703:
 1211              	.LBI2703:
 1212              		.loc 12 215 32 view .LVU318
 1213              		.loc 12 215 32 is_stmt 0 view .LVU319
 1214              	.LBE2703:
 1215              	.LBE2702:
 155:Eigen/src/Core/CoreEvaluators.h ****   {
 1216              		.loc 15 155 82 view .LVU320
 1217 0024 21A8     		add	r0, sp, #132
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 133


 1218              	.LVL64:
 155:Eigen/src/Core/CoreEvaluators.h ****   {
 1219              		.loc 15 155 82 view .LVU321
 1220 0026 0090     		str	r0, [sp]
 1221              	.LVL65:
 1222              	.LBB2704:
 1223              	.LBI2704:
 1224              		.loc 18 110 52 is_stmt 1 view .LVU322
 1225              		.loc 18 110 52 is_stmt 0 view .LVU323
 1226              	.LBE2704:
 1227              	.LBE2699:
 1228              	.LBE2698:
 1229              	.LBE2697:
 1230              	.LBE2696:
 1231              	.LBE2695:
 1232              	.LBB2705:
 1233              	.LBI2705:
 610:Eigen/src/Core/AssignEvaluator.h ****     : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 1234              		.loc 10 610 21 is_stmt 1 view .LVU324
 1235              	.LBB2706:
 1236              	.LBB2707:
 611:Eigen/src/Core/AssignEvaluator.h ****   {
 1237              		.loc 10 611 65 is_stmt 0 view .LVU325
 1238 0028 CDF808D0 		str	sp, [sp, #8]
 1239 002c 0391     		str	r1, [sp, #12]
 1240 002e 23A9     		add	r1, sp, #140
 1241              	.LVL66:
 611:Eigen/src/Core/AssignEvaluator.h ****   {
 1242              		.loc 10 611 65 view .LVU326
 1243 0030 0491     		str	r1, [sp, #16]
 1244 0032 0590     		str	r0, [sp, #20]
 1245              	.LVL67:
 611:Eigen/src/Core/AssignEvaluator.h ****   {
 1246              		.loc 10 611 65 view .LVU327
 1247              	.LBE2707:
 1248              	.LBE2706:
 1249              	.LBE2705:
 1250              	.LBB2708:
 1251              	.LBI2708:
 504:Eigen/src/Core/AssignEvaluator.h ****   {
 1252              		.loc 10 504 53 is_stmt 1 view .LVU328
 1253              	.LBB2709:
 1254              	.LBB2710:
 1255              	.LBI2710:
 240:Eigen/src/Core/AssignEvaluator.h ****   {
 1256              		.loc 10 240 53 view .LVU329
 1257              	.LBB2711:
 1258              	.LBI2711:
 635:Eigen/src/Core/AssignEvaluator.h ****   {
 1259              		.loc 10 635 46 view .LVU330
 1260              	.LBB2712:
 1261              	.LBB2713:
 1262              	.LBI2713:
 185:Eigen/src/Core/CoreEvaluators.h ****   {
 1263              		.loc 15 185 11 view .LVU331
 185:Eigen/src/Core/CoreEvaluators.h ****   {
 1264              		.loc 15 185 11 is_stmt 0 view .LVU332
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 134


 1265              	.LBE2713:
 1266              	.LBB2714:
 1267              	.LBI2714:
 452:Eigen/src/Core/ProductEvaluators.h ****   {
 453:Eigen/src/Core/ProductEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(NumTraits<Scalar>::MulCost);
 454:Eigen/src/Core/ProductEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(NumTraits<Scalar>::AddCost);
 455:Eigen/src/Core/ProductEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 456:Eigen/src/Core/ProductEvaluators.h **** #if 0
 457:Eigen/src/Core/ProductEvaluators.h ****     std::cerr << "LhsOuterStrideBytes=  " << LhsOuterStrideBytes << "\n";
 458:Eigen/src/Core/ProductEvaluators.h ****     std::cerr << "RhsOuterStrideBytes=  " << RhsOuterStrideBytes << "\n";
 459:Eigen/src/Core/ProductEvaluators.h ****     std::cerr << "LhsAlignment=         " << LhsAlignment << "\n";
 460:Eigen/src/Core/ProductEvaluators.h ****     std::cerr << "RhsAlignment=         " << RhsAlignment << "\n";
 461:Eigen/src/Core/ProductEvaluators.h ****     std::cerr << "CanVectorizeLhs=      " << CanVectorizeLhs << "\n";
 462:Eigen/src/Core/ProductEvaluators.h ****     std::cerr << "CanVectorizeRhs=      " << CanVectorizeRhs << "\n";
 463:Eigen/src/Core/ProductEvaluators.h ****     std::cerr << "CanVectorizeInner=    " << CanVectorizeInner << "\n";
 464:Eigen/src/Core/ProductEvaluators.h ****     std::cerr << "EvalToRowMajor=       " << EvalToRowMajor << "\n";
 465:Eigen/src/Core/ProductEvaluators.h ****     std::cerr << "Alignment=            " << Alignment << "\n";
 466:Eigen/src/Core/ProductEvaluators.h ****     std::cerr << "Flags=                " << Flags << "\n";
 467:Eigen/src/Core/ProductEvaluators.h **** #endif
 468:Eigen/src/Core/ProductEvaluators.h ****   }
 469:Eigen/src/Core/ProductEvaluators.h **** 
 470:Eigen/src/Core/ProductEvaluators.h ****   // Everything below here is taken from CoeffBasedProduct.h
 471:Eigen/src/Core/ProductEvaluators.h **** 
 472:Eigen/src/Core/ProductEvaluators.h ****   typedef typename internal::nested_eval<Lhs,Rhs::ColsAtCompileTime>::type LhsNested;
 473:Eigen/src/Core/ProductEvaluators.h ****   typedef typename internal::nested_eval<Rhs,Lhs::RowsAtCompileTime>::type RhsNested;
 474:Eigen/src/Core/ProductEvaluators.h ****   
 475:Eigen/src/Core/ProductEvaluators.h ****   typedef typename internal::remove_all<LhsNested>::type LhsNestedCleaned;
 476:Eigen/src/Core/ProductEvaluators.h ****   typedef typename internal::remove_all<RhsNested>::type RhsNestedCleaned;
 477:Eigen/src/Core/ProductEvaluators.h **** 
 478:Eigen/src/Core/ProductEvaluators.h ****   typedef evaluator<LhsNestedCleaned> LhsEtorType;
 479:Eigen/src/Core/ProductEvaluators.h ****   typedef evaluator<RhsNestedCleaned> RhsEtorType;
 480:Eigen/src/Core/ProductEvaluators.h **** 
 481:Eigen/src/Core/ProductEvaluators.h ****   enum {
 482:Eigen/src/Core/ProductEvaluators.h ****     RowsAtCompileTime = LhsNestedCleaned::RowsAtCompileTime,
 483:Eigen/src/Core/ProductEvaluators.h ****     ColsAtCompileTime = RhsNestedCleaned::ColsAtCompileTime,
 484:Eigen/src/Core/ProductEvaluators.h ****     InnerSize = EIGEN_SIZE_MIN_PREFER_FIXED(LhsNestedCleaned::ColsAtCompileTime, RhsNestedCleaned::
 485:Eigen/src/Core/ProductEvaluators.h ****     MaxRowsAtCompileTime = LhsNestedCleaned::MaxRowsAtCompileTime,
 486:Eigen/src/Core/ProductEvaluators.h ****     MaxColsAtCompileTime = RhsNestedCleaned::MaxColsAtCompileTime
 487:Eigen/src/Core/ProductEvaluators.h ****   };
 488:Eigen/src/Core/ProductEvaluators.h **** 
 489:Eigen/src/Core/ProductEvaluators.h ****   typedef typename find_best_packet<Scalar,RowsAtCompileTime>::type LhsVecPacketType;
 490:Eigen/src/Core/ProductEvaluators.h ****   typedef typename find_best_packet<Scalar,ColsAtCompileTime>::type RhsVecPacketType;
 491:Eigen/src/Core/ProductEvaluators.h **** 
 492:Eigen/src/Core/ProductEvaluators.h ****   enum {
 493:Eigen/src/Core/ProductEvaluators.h ****       
 494:Eigen/src/Core/ProductEvaluators.h ****     LhsCoeffReadCost = LhsEtorType::CoeffReadCost,
 495:Eigen/src/Core/ProductEvaluators.h ****     RhsCoeffReadCost = RhsEtorType::CoeffReadCost,
 496:Eigen/src/Core/ProductEvaluators.h ****     CoeffReadCost = InnerSize==0 ? NumTraits<Scalar>::ReadCost
 497:Eigen/src/Core/ProductEvaluators.h ****                   : InnerSize == Dynamic ? HugeCost
 498:Eigen/src/Core/ProductEvaluators.h ****                   : InnerSize * (NumTraits<Scalar>::MulCost + LhsCoeffReadCost + RhsCoeffReadCost)
 499:Eigen/src/Core/ProductEvaluators.h ****                     + (InnerSize - 1) * NumTraits<Scalar>::AddCost,
 500:Eigen/src/Core/ProductEvaluators.h **** 
 501:Eigen/src/Core/ProductEvaluators.h ****     Unroll = CoeffReadCost <= EIGEN_UNROLLING_LIMIT,
 502:Eigen/src/Core/ProductEvaluators.h ****     
 503:Eigen/src/Core/ProductEvaluators.h ****     LhsFlags = LhsEtorType::Flags,
 504:Eigen/src/Core/ProductEvaluators.h ****     RhsFlags = RhsEtorType::Flags,
 505:Eigen/src/Core/ProductEvaluators.h ****     
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 135


 506:Eigen/src/Core/ProductEvaluators.h ****     LhsRowMajor = LhsFlags & RowMajorBit,
 507:Eigen/src/Core/ProductEvaluators.h ****     RhsRowMajor = RhsFlags & RowMajorBit,
 508:Eigen/src/Core/ProductEvaluators.h **** 
 509:Eigen/src/Core/ProductEvaluators.h ****     LhsVecPacketSize = unpacket_traits<LhsVecPacketType>::size,
 510:Eigen/src/Core/ProductEvaluators.h ****     RhsVecPacketSize = unpacket_traits<RhsVecPacketType>::size,
 511:Eigen/src/Core/ProductEvaluators.h **** 
 512:Eigen/src/Core/ProductEvaluators.h ****     // Here, we don't care about alignment larger than the usable packet size.
 513:Eigen/src/Core/ProductEvaluators.h ****     LhsAlignment = EIGEN_PLAIN_ENUM_MIN(LhsEtorType::Alignment,LhsVecPacketSize*int(sizeof(typename
 514:Eigen/src/Core/ProductEvaluators.h ****     RhsAlignment = EIGEN_PLAIN_ENUM_MIN(RhsEtorType::Alignment,RhsVecPacketSize*int(sizeof(typename
 515:Eigen/src/Core/ProductEvaluators.h ****       
 516:Eigen/src/Core/ProductEvaluators.h ****     SameType = is_same<typename LhsNestedCleaned::Scalar,typename RhsNestedCleaned::Scalar>::value,
 517:Eigen/src/Core/ProductEvaluators.h **** 
 518:Eigen/src/Core/ProductEvaluators.h ****     CanVectorizeRhs = bool(RhsRowMajor) && (RhsFlags & PacketAccessBit) && (ColsAtCompileTime!=1),
 519:Eigen/src/Core/ProductEvaluators.h ****     CanVectorizeLhs = (!LhsRowMajor) && (LhsFlags & PacketAccessBit) && (RowsAtCompileTime!=1),
 520:Eigen/src/Core/ProductEvaluators.h **** 
 521:Eigen/src/Core/ProductEvaluators.h ****     EvalToRowMajor = (MaxRowsAtCompileTime==1&&MaxColsAtCompileTime!=1) ? 1
 522:Eigen/src/Core/ProductEvaluators.h ****                     : (MaxColsAtCompileTime==1&&MaxRowsAtCompileTime!=1) ? 0
 523:Eigen/src/Core/ProductEvaluators.h ****                     : (bool(RhsRowMajor) && !CanVectorizeLhs),
 524:Eigen/src/Core/ProductEvaluators.h **** 
 525:Eigen/src/Core/ProductEvaluators.h ****     Flags = ((unsigned int)(LhsFlags | RhsFlags) & HereditaryBits & ~RowMajorBit)
 526:Eigen/src/Core/ProductEvaluators.h ****           | (EvalToRowMajor ? RowMajorBit : 0)
 527:Eigen/src/Core/ProductEvaluators.h ****           // TODO enable vectorization for mixed types
 528:Eigen/src/Core/ProductEvaluators.h ****           | (SameType && (CanVectorizeLhs || CanVectorizeRhs) ? PacketAccessBit : 0)
 529:Eigen/src/Core/ProductEvaluators.h ****           | (XprType::IsVectorAtCompileTime ? LinearAccessBit : 0),
 530:Eigen/src/Core/ProductEvaluators.h ****           
 531:Eigen/src/Core/ProductEvaluators.h ****     LhsOuterStrideBytes = int(LhsNestedCleaned::OuterStrideAtCompileTime) * int(sizeof(typename Lhs
 532:Eigen/src/Core/ProductEvaluators.h ****     RhsOuterStrideBytes = int(RhsNestedCleaned::OuterStrideAtCompileTime) * int(sizeof(typename Rhs
 533:Eigen/src/Core/ProductEvaluators.h **** 
 534:Eigen/src/Core/ProductEvaluators.h ****     Alignment = bool(CanVectorizeLhs) ? (LhsOuterStrideBytes<=0 || (int(LhsOuterStrideBytes) % EIGE
 535:Eigen/src/Core/ProductEvaluators.h ****               : bool(CanVectorizeRhs) ? (RhsOuterStrideBytes<=0 || (int(RhsOuterStrideBytes) % EIGE
 536:Eigen/src/Core/ProductEvaluators.h ****               : 0,
 537:Eigen/src/Core/ProductEvaluators.h **** 
 538:Eigen/src/Core/ProductEvaluators.h ****     /* CanVectorizeInner deserves special explanation. It does not affect the product flags. It is 
 539:Eigen/src/Core/ProductEvaluators.h ****      * of Product. If the Product itself is not a packet-access expression, there is still a chance
 540:Eigen/src/Core/ProductEvaluators.h ****      * loop of the product might be vectorized. This is the meaning of CanVectorizeInner. Since it 
 541:Eigen/src/Core/ProductEvaluators.h ****      * the Flags, it is safe to make this value depend on ActualPacketAccessBit, that doesn't affec
 542:Eigen/src/Core/ProductEvaluators.h ****      */
 543:Eigen/src/Core/ProductEvaluators.h ****     CanVectorizeInner =    SameType
 544:Eigen/src/Core/ProductEvaluators.h ****                         && LhsRowMajor
 545:Eigen/src/Core/ProductEvaluators.h ****                         && (!RhsRowMajor)
 546:Eigen/src/Core/ProductEvaluators.h ****                         && (LhsFlags & RhsFlags & ActualPacketAccessBit)
 547:Eigen/src/Core/ProductEvaluators.h ****                         && (InnerSize % packet_traits<Scalar>::size == 0)
 548:Eigen/src/Core/ProductEvaluators.h ****   };
 549:Eigen/src/Core/ProductEvaluators.h ****   
 550:Eigen/src/Core/ProductEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 551:Eigen/src/Core/ProductEvaluators.h ****   {
 552:Eigen/src/Core/ProductEvaluators.h ****     return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 553:Eigen/src/Core/ProductEvaluators.h ****   }
 554:Eigen/src/Core/ProductEvaluators.h **** 
 555:Eigen/src/Core/ProductEvaluators.h ****   /* Allow index-based non-packet access. It is impossible though to allow index-based packed acces
 556:Eigen/src/Core/ProductEvaluators.h ****    * which is why we don't set the LinearAccessBit.
 557:Eigen/src/Core/ProductEvaluators.h ****    * TODO: this seems possible when the result is a vector
 558:Eigen/src/Core/ProductEvaluators.h ****    */
 559:Eigen/src/Core/ProductEvaluators.h ****   EIGEN_DEVICE_FUNC const CoeffReturnType coeff(Index index) const
 1268              		.loc 14 559 43 is_stmt 1 view .LVU333
 1269              	.LBB2715:
 1270              	.LBB2716:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 136


 1271              	.LBI2716:
 1272              		.file 19 "Eigen/src/Core/../plugins/BlockMethods.h"
   1:Eigen/src/Core/../plugins/BlockMethods.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/../plugins/BlockMethods.h **** // for linear algebra.
   3:Eigen/src/Core/../plugins/BlockMethods.h **** //
   4:Eigen/src/Core/../plugins/BlockMethods.h **** // Copyright (C) 2008-2010 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:Eigen/src/Core/../plugins/BlockMethods.h **** // Copyright (C) 2006-2010 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:Eigen/src/Core/../plugins/BlockMethods.h **** //
   7:Eigen/src/Core/../plugins/BlockMethods.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/../plugins/BlockMethods.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/../plugins/BlockMethods.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:Eigen/src/Core/../plugins/BlockMethods.h **** 
  11:Eigen/src/Core/../plugins/BlockMethods.h **** #ifndef EIGEN_PARSED_BY_DOXYGEN
  12:Eigen/src/Core/../plugins/BlockMethods.h **** 
  13:Eigen/src/Core/../plugins/BlockMethods.h **** /// \internal expression type of a column */
  14:Eigen/src/Core/../plugins/BlockMethods.h **** typedef Block<Derived, internal::traits<Derived>::RowsAtCompileTime, 1, !IsRowMajor> ColXpr;
  15:Eigen/src/Core/../plugins/BlockMethods.h **** typedef const Block<const Derived, internal::traits<Derived>::RowsAtCompileTime, 1, !IsRowMajor> Co
  16:Eigen/src/Core/../plugins/BlockMethods.h **** /// \internal expression type of a row */
  17:Eigen/src/Core/../plugins/BlockMethods.h **** typedef Block<Derived, 1, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> RowXpr;
  18:Eigen/src/Core/../plugins/BlockMethods.h **** typedef const Block<const Derived, 1, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> Con
  19:Eigen/src/Core/../plugins/BlockMethods.h **** /// \internal expression type of a block of whole columns */
  20:Eigen/src/Core/../plugins/BlockMethods.h **** typedef Block<Derived, internal::traits<Derived>::RowsAtCompileTime, Dynamic, !IsRowMajor> ColsBloc
  21:Eigen/src/Core/../plugins/BlockMethods.h **** typedef const Block<const Derived, internal::traits<Derived>::RowsAtCompileTime, Dynamic, !IsRowMaj
  22:Eigen/src/Core/../plugins/BlockMethods.h **** /// \internal expression type of a block of whole rows */
  23:Eigen/src/Core/../plugins/BlockMethods.h **** typedef Block<Derived, Dynamic, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> RowsBlock
  24:Eigen/src/Core/../plugins/BlockMethods.h **** typedef const Block<const Derived, Dynamic, internal::traits<Derived>::ColsAtCompileTime, IsRowMajo
  25:Eigen/src/Core/../plugins/BlockMethods.h **** /// \internal expression type of a block of whole columns */
  26:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N> struct NColsBlockXpr { typedef Block<Derived, internal::traits<Derived>::RowsAtComp
  27:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N> struct ConstNColsBlockXpr { typedef const Block<const Derived, internal::traits<Der
  28:Eigen/src/Core/../plugins/BlockMethods.h **** /// \internal expression type of a block of whole rows */
  29:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N> struct NRowsBlockXpr { typedef Block<Derived, N, internal::traits<Derived>::ColsAtC
  30:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N> struct ConstNRowsBlockXpr { typedef const Block<const Derived, N, internal::traits<
  31:Eigen/src/Core/../plugins/BlockMethods.h **** /// \internal expression of a block */
  32:Eigen/src/Core/../plugins/BlockMethods.h **** typedef Block<Derived> BlockXpr;
  33:Eigen/src/Core/../plugins/BlockMethods.h **** typedef const Block<const Derived> ConstBlockXpr;
  34:Eigen/src/Core/../plugins/BlockMethods.h **** /// \internal expression of a block of fixed sizes */
  35:Eigen/src/Core/../plugins/BlockMethods.h **** template<int Rows, int Cols> struct FixedBlockXpr { typedef Block<Derived,Rows,Cols> Type; };
  36:Eigen/src/Core/../plugins/BlockMethods.h **** template<int Rows, int Cols> struct ConstFixedBlockXpr { typedef Block<const Derived,Rows,Cols> Typ
  37:Eigen/src/Core/../plugins/BlockMethods.h **** 
  38:Eigen/src/Core/../plugins/BlockMethods.h **** typedef VectorBlock<Derived> SegmentReturnType;
  39:Eigen/src/Core/../plugins/BlockMethods.h **** typedef const VectorBlock<const Derived> ConstSegmentReturnType;
  40:Eigen/src/Core/../plugins/BlockMethods.h **** template<int Size> struct FixedSegmentReturnType { typedef VectorBlock<Derived, Size> Type; };
  41:Eigen/src/Core/../plugins/BlockMethods.h **** template<int Size> struct ConstFixedSegmentReturnType { typedef const VectorBlock<const Derived, Si
  42:Eigen/src/Core/../plugins/BlockMethods.h **** 
  43:Eigen/src/Core/../plugins/BlockMethods.h **** #endif // not EIGEN_PARSED_BY_DOXYGEN
  44:Eigen/src/Core/../plugins/BlockMethods.h **** 
  45:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a dynamic-size expression of a block in *this.
  46:Eigen/src/Core/../plugins/BlockMethods.h **** ///
  47:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param startRow the first row in the block
  48:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param startCol the first column in the block
  49:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param blockRows the number of rows in the block
  50:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param blockCols the number of columns in the block
  51:Eigen/src/Core/../plugins/BlockMethods.h **** ///
  52:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_block_int_int_int_int.cpp
  53:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_block_int_int_int_int.out
  54:Eigen/src/Core/../plugins/BlockMethods.h **** ///
  55:Eigen/src/Core/../plugins/BlockMethods.h **** /// \note Even though the returned expression has dynamic size, in the case
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 137


  56:Eigen/src/Core/../plugins/BlockMethods.h **** /// when it is applied to a fixed-size matrix, it inherits a fixed maximal size,
  57:Eigen/src/Core/../plugins/BlockMethods.h **** /// which means that evaluating it does not cause a dynamic memory allocation.
  58:Eigen/src/Core/../plugins/BlockMethods.h **** ///
  59:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
  60:Eigen/src/Core/../plugins/BlockMethods.h **** ///
  61:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index)
  62:Eigen/src/Core/../plugins/BlockMethods.h **** ///
  63:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
  64:Eigen/src/Core/../plugins/BlockMethods.h **** inline BlockXpr block(Index startRow, Index startCol, Index blockRows, Index blockCols)
  65:Eigen/src/Core/../plugins/BlockMethods.h **** {
  66:Eigen/src/Core/../plugins/BlockMethods.h ****   return BlockXpr(derived(), startRow, startCol, blockRows, blockCols);
  67:Eigen/src/Core/../plugins/BlockMethods.h **** }
  68:Eigen/src/Core/../plugins/BlockMethods.h **** 
  69:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of block(Index,Index,Index,Index). */
  70:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
  71:Eigen/src/Core/../plugins/BlockMethods.h **** inline const ConstBlockXpr block(Index startRow, Index startCol, Index blockRows, Index blockCols) 
  72:Eigen/src/Core/../plugins/BlockMethods.h **** {
  73:Eigen/src/Core/../plugins/BlockMethods.h ****   return ConstBlockXpr(derived(), startRow, startCol, blockRows, blockCols);
  74:Eigen/src/Core/../plugins/BlockMethods.h **** }
  75:Eigen/src/Core/../plugins/BlockMethods.h **** 
  76:Eigen/src/Core/../plugins/BlockMethods.h **** 
  77:Eigen/src/Core/../plugins/BlockMethods.h **** 
  78:Eigen/src/Core/../plugins/BlockMethods.h **** 
  79:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a dynamic-size expression of a top-right corner of *this.
  80:Eigen/src/Core/../plugins/BlockMethods.h **** ///
  81:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param cRows the number of rows in the corner
  82:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param cCols the number of columns in the corner
  83:Eigen/src/Core/../plugins/BlockMethods.h **** ///
  84:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_topRightCorner_int_int.cpp
  85:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_topRightCorner_int_int.out
  86:Eigen/src/Core/../plugins/BlockMethods.h **** ///
  87:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
  88:Eigen/src/Core/../plugins/BlockMethods.h **** ///
  89:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
  90:Eigen/src/Core/../plugins/BlockMethods.h **** ///
  91:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
  92:Eigen/src/Core/../plugins/BlockMethods.h **** inline BlockXpr topRightCorner(Index cRows, Index cCols)
  93:Eigen/src/Core/../plugins/BlockMethods.h **** {
  94:Eigen/src/Core/../plugins/BlockMethods.h ****   return BlockXpr(derived(), 0, cols() - cCols, cRows, cCols);
  95:Eigen/src/Core/../plugins/BlockMethods.h **** }
  96:Eigen/src/Core/../plugins/BlockMethods.h **** 
  97:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of topRightCorner(Index, Index).
  98:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
  99:Eigen/src/Core/../plugins/BlockMethods.h **** inline const ConstBlockXpr topRightCorner(Index cRows, Index cCols) const
 100:Eigen/src/Core/../plugins/BlockMethods.h **** {
 101:Eigen/src/Core/../plugins/BlockMethods.h ****   return ConstBlockXpr(derived(), 0, cols() - cCols, cRows, cCols);
 102:Eigen/src/Core/../plugins/BlockMethods.h **** }
 103:Eigen/src/Core/../plugins/BlockMethods.h **** 
 104:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns an expression of a fixed-size top-right corner of *this.
 105:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 106:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam CRows the number of rows in the corner
 107:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam CCols the number of columns in the corner
 108:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 109:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_template_int_int_topRightCorner.cpp
 110:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_template_int_int_topRightCorner.out
 111:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 112:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 138


 113:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 114:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block<int,int>(Index,Index)
 115:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 116:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 117:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 118:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename FixedBlockXpr<CRows,CCols>::Type topRightCorner()
 119:Eigen/src/Core/../plugins/BlockMethods.h **** {
 120:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename FixedBlockXpr<CRows,CCols>::Type(derived(), 0, cols() - CCols);
 121:Eigen/src/Core/../plugins/BlockMethods.h **** }
 122:Eigen/src/Core/../plugins/BlockMethods.h **** 
 123:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of topRightCorner<int, int>().
 124:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 125:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 126:Eigen/src/Core/../plugins/BlockMethods.h **** inline const typename ConstFixedBlockXpr<CRows,CCols>::Type topRightCorner() const
 127:Eigen/src/Core/../plugins/BlockMethods.h **** {
 128:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), 0, cols() - CCols);
 129:Eigen/src/Core/../plugins/BlockMethods.h **** }
 130:Eigen/src/Core/../plugins/BlockMethods.h **** 
 131:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns an expression of a top-right corner of *this.
 132:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 133:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam CRows number of rows in corner as specified at compile-time
 134:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam CCols number of columns in corner as specified at compile-time
 135:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param  cRows number of rows in corner as specified at run-time
 136:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param  cCols number of columns in corner as specified at run-time
 137:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 138:Eigen/src/Core/../plugins/BlockMethods.h **** /// This function is mainly useful for corners where the number of rows is specified at compile-tim
 139:Eigen/src/Core/../plugins/BlockMethods.h **** /// and the number of columns is specified at run-time, or vice versa. The compile-time and run-tim
 140:Eigen/src/Core/../plugins/BlockMethods.h **** /// information should not contradict. In other words, \a cRows should equal \a CRows unless
 141:Eigen/src/Core/../plugins/BlockMethods.h **** /// \a CRows is \a Dynamic, and the same for the number of columns.
 142:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 143:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_template_int_int_topRightCorner_int_int.cpp
 144:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_template_int_int_topRightCorner_int_int.out
 145:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 146:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 147:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 148:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block
 149:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 150:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 151:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename FixedBlockXpr<CRows,CCols>::Type topRightCorner(Index cRows, Index cCols)
 152:Eigen/src/Core/../plugins/BlockMethods.h **** {
 153:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename FixedBlockXpr<CRows,CCols>::Type(derived(), 0, cols() - cCols, cRows, cCols);
 154:Eigen/src/Core/../plugins/BlockMethods.h **** }
 155:Eigen/src/Core/../plugins/BlockMethods.h **** 
 156:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of topRightCorner<int, int>(Index, Index).
 157:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 158:Eigen/src/Core/../plugins/BlockMethods.h **** inline const typename ConstFixedBlockXpr<CRows,CCols>::Type topRightCorner(Index cRows, Index cCols
 159:Eigen/src/Core/../plugins/BlockMethods.h **** {
 160:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), 0, cols() - cCols, cRows, cCols)
 161:Eigen/src/Core/../plugins/BlockMethods.h **** }
 162:Eigen/src/Core/../plugins/BlockMethods.h **** 
 163:Eigen/src/Core/../plugins/BlockMethods.h **** 
 164:Eigen/src/Core/../plugins/BlockMethods.h **** 
 165:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a dynamic-size expression of a top-left corner of *this.
 166:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 167:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param cRows the number of rows in the corner
 168:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param cCols the number of columns in the corner
 169:Eigen/src/Core/../plugins/BlockMethods.h **** ///
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 139


 170:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_topLeftCorner_int_int.cpp
 171:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_topLeftCorner_int_int.out
 172:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 173:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 174:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 175:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 176:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 177:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 178:Eigen/src/Core/../plugins/BlockMethods.h **** inline BlockXpr topLeftCorner(Index cRows, Index cCols)
 179:Eigen/src/Core/../plugins/BlockMethods.h **** {
 180:Eigen/src/Core/../plugins/BlockMethods.h ****   return BlockXpr(derived(), 0, 0, cRows, cCols);
 181:Eigen/src/Core/../plugins/BlockMethods.h **** }
 182:Eigen/src/Core/../plugins/BlockMethods.h **** 
 183:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of topLeftCorner(Index, Index).
 184:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 185:Eigen/src/Core/../plugins/BlockMethods.h **** inline const ConstBlockXpr topLeftCorner(Index cRows, Index cCols) const
 186:Eigen/src/Core/../plugins/BlockMethods.h **** {
 187:Eigen/src/Core/../plugins/BlockMethods.h ****   return ConstBlockXpr(derived(), 0, 0, cRows, cCols);
 188:Eigen/src/Core/../plugins/BlockMethods.h **** }
 189:Eigen/src/Core/../plugins/BlockMethods.h **** 
 190:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns an expression of a fixed-size top-left corner of *this.
 191:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 192:Eigen/src/Core/../plugins/BlockMethods.h **** /// The template parameters CRows and CCols are the number of rows and columns in the corner.
 193:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 194:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_template_int_int_topLeftCorner.cpp
 195:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_template_int_int_topLeftCorner.out
 196:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 197:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 198:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 199:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 200:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 201:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 202:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 203:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename FixedBlockXpr<CRows,CCols>::Type topLeftCorner()
 204:Eigen/src/Core/../plugins/BlockMethods.h **** {
 205:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename FixedBlockXpr<CRows,CCols>::Type(derived(), 0, 0);
 206:Eigen/src/Core/../plugins/BlockMethods.h **** }
 207:Eigen/src/Core/../plugins/BlockMethods.h **** 
 208:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of topLeftCorner<int, int>().
 209:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 210:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 211:Eigen/src/Core/../plugins/BlockMethods.h **** inline const typename ConstFixedBlockXpr<CRows,CCols>::Type topLeftCorner() const
 212:Eigen/src/Core/../plugins/BlockMethods.h **** {
 213:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), 0, 0);
 214:Eigen/src/Core/../plugins/BlockMethods.h **** }
 215:Eigen/src/Core/../plugins/BlockMethods.h **** 
 216:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns an expression of a top-left corner of *this.
 217:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 218:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam CRows number of rows in corner as specified at compile-time
 219:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam CCols number of columns in corner as specified at compile-time
 220:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param  cRows number of rows in corner as specified at run-time
 221:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param  cCols number of columns in corner as specified at run-time
 222:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 223:Eigen/src/Core/../plugins/BlockMethods.h **** /// This function is mainly useful for corners where the number of rows is specified at compile-tim
 224:Eigen/src/Core/../plugins/BlockMethods.h **** /// and the number of columns is specified at run-time, or vice versa. The compile-time and run-tim
 225:Eigen/src/Core/../plugins/BlockMethods.h **** /// information should not contradict. In other words, \a cRows should equal \a CRows unless
 226:Eigen/src/Core/../plugins/BlockMethods.h **** /// \a CRows is \a Dynamic, and the same for the number of columns.
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 140


 227:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 228:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_template_int_int_topLeftCorner_int_int.cpp
 229:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_template_int_int_topLeftCorner_int_int.out
 230:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 231:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 232:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 233:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block
 234:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 235:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 236:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename FixedBlockXpr<CRows,CCols>::Type topLeftCorner(Index cRows, Index cCols)
 237:Eigen/src/Core/../plugins/BlockMethods.h **** {
 238:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename FixedBlockXpr<CRows,CCols>::Type(derived(), 0, 0, cRows, cCols);
 239:Eigen/src/Core/../plugins/BlockMethods.h **** }
 240:Eigen/src/Core/../plugins/BlockMethods.h **** 
 241:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of topLeftCorner<int, int>(Index, Index).
 242:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 243:Eigen/src/Core/../plugins/BlockMethods.h **** inline const typename ConstFixedBlockXpr<CRows,CCols>::Type topLeftCorner(Index cRows, Index cCols)
 244:Eigen/src/Core/../plugins/BlockMethods.h **** {
 245:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), 0, 0, cRows, cCols);
 246:Eigen/src/Core/../plugins/BlockMethods.h **** }
 247:Eigen/src/Core/../plugins/BlockMethods.h **** 
 248:Eigen/src/Core/../plugins/BlockMethods.h **** 
 249:Eigen/src/Core/../plugins/BlockMethods.h **** 
 250:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a dynamic-size expression of a bottom-right corner of *this.
 251:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 252:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param cRows the number of rows in the corner
 253:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param cCols the number of columns in the corner
 254:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 255:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_bottomRightCorner_int_int.cpp
 256:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_bottomRightCorner_int_int.out
 257:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 258:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 259:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 260:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 261:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 262:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 263:Eigen/src/Core/../plugins/BlockMethods.h **** inline BlockXpr bottomRightCorner(Index cRows, Index cCols)
 264:Eigen/src/Core/../plugins/BlockMethods.h **** {
 265:Eigen/src/Core/../plugins/BlockMethods.h ****   return BlockXpr(derived(), rows() - cRows, cols() - cCols, cRows, cCols);
 266:Eigen/src/Core/../plugins/BlockMethods.h **** }
 267:Eigen/src/Core/../plugins/BlockMethods.h **** 
 268:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of bottomRightCorner(Index, Index).
 269:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 270:Eigen/src/Core/../plugins/BlockMethods.h **** inline const ConstBlockXpr bottomRightCorner(Index cRows, Index cCols) const
 271:Eigen/src/Core/../plugins/BlockMethods.h **** {
 272:Eigen/src/Core/../plugins/BlockMethods.h ****   return ConstBlockXpr(derived(), rows() - cRows, cols() - cCols, cRows, cCols);
 273:Eigen/src/Core/../plugins/BlockMethods.h **** }
 274:Eigen/src/Core/../plugins/BlockMethods.h **** 
 275:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns an expression of a fixed-size bottom-right corner of *this.
 276:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 277:Eigen/src/Core/../plugins/BlockMethods.h **** /// The template parameters CRows and CCols are the number of rows and columns in the corner.
 278:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 279:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_template_int_int_bottomRightCorner.cpp
 280:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_template_int_int_bottomRightCorner.out
 281:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 282:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 283:Eigen/src/Core/../plugins/BlockMethods.h **** ///
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 141


 284:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 285:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 286:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 287:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 288:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename FixedBlockXpr<CRows,CCols>::Type bottomRightCorner()
 289:Eigen/src/Core/../plugins/BlockMethods.h **** {
 290:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename FixedBlockXpr<CRows,CCols>::Type(derived(), rows() - CRows, cols() - CCols);
 291:Eigen/src/Core/../plugins/BlockMethods.h **** }
 292:Eigen/src/Core/../plugins/BlockMethods.h **** 
 293:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of bottomRightCorner<int, int>().
 294:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 295:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 296:Eigen/src/Core/../plugins/BlockMethods.h **** inline const typename ConstFixedBlockXpr<CRows,CCols>::Type bottomRightCorner() const
 297:Eigen/src/Core/../plugins/BlockMethods.h **** {
 298:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), rows() - CRows, cols() - CCols);
 299:Eigen/src/Core/../plugins/BlockMethods.h **** }
 300:Eigen/src/Core/../plugins/BlockMethods.h **** 
 301:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns an expression of a bottom-right corner of *this.
 302:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 303:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam CRows number of rows in corner as specified at compile-time
 304:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam CCols number of columns in corner as specified at compile-time
 305:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param  cRows number of rows in corner as specified at run-time
 306:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param  cCols number of columns in corner as specified at run-time
 307:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 308:Eigen/src/Core/../plugins/BlockMethods.h **** /// This function is mainly useful for corners where the number of rows is specified at compile-tim
 309:Eigen/src/Core/../plugins/BlockMethods.h **** /// and the number of columns is specified at run-time, or vice versa. The compile-time and run-tim
 310:Eigen/src/Core/../plugins/BlockMethods.h **** /// information should not contradict. In other words, \a cRows should equal \a CRows unless
 311:Eigen/src/Core/../plugins/BlockMethods.h **** /// \a CRows is \a Dynamic, and the same for the number of columns.
 312:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 313:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_template_int_int_bottomRightCorner_int_int.cpp
 314:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_template_int_int_bottomRightCorner_int_int.out
 315:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 316:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 317:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 318:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block
 319:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 320:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 321:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename FixedBlockXpr<CRows,CCols>::Type bottomRightCorner(Index cRows, Index cCols)
 322:Eigen/src/Core/../plugins/BlockMethods.h **** {
 323:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename FixedBlockXpr<CRows,CCols>::Type(derived(), rows() - cRows, cols() - cCols, cRows
 324:Eigen/src/Core/../plugins/BlockMethods.h **** }
 325:Eigen/src/Core/../plugins/BlockMethods.h **** 
 326:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of bottomRightCorner<int, int>(Index, Index).
 327:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 328:Eigen/src/Core/../plugins/BlockMethods.h **** inline const typename ConstFixedBlockXpr<CRows,CCols>::Type bottomRightCorner(Index cRows, Index cC
 329:Eigen/src/Core/../plugins/BlockMethods.h **** {
 330:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), rows() - cRows, cols() - cCols, 
 331:Eigen/src/Core/../plugins/BlockMethods.h **** }
 332:Eigen/src/Core/../plugins/BlockMethods.h **** 
 333:Eigen/src/Core/../plugins/BlockMethods.h **** 
 334:Eigen/src/Core/../plugins/BlockMethods.h **** 
 335:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a dynamic-size expression of a bottom-left corner of *this.
 336:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 337:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param cRows the number of rows in the corner
 338:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param cCols the number of columns in the corner
 339:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 340:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_bottomLeftCorner_int_int.cpp
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 142


 341:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_bottomLeftCorner_int_int.out
 342:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 343:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 344:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 345:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 346:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 347:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 348:Eigen/src/Core/../plugins/BlockMethods.h **** inline BlockXpr bottomLeftCorner(Index cRows, Index cCols)
 349:Eigen/src/Core/../plugins/BlockMethods.h **** {
 350:Eigen/src/Core/../plugins/BlockMethods.h ****   return BlockXpr(derived(), rows() - cRows, 0, cRows, cCols);
 351:Eigen/src/Core/../plugins/BlockMethods.h **** }
 352:Eigen/src/Core/../plugins/BlockMethods.h **** 
 353:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of bottomLeftCorner(Index, Index).
 354:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 355:Eigen/src/Core/../plugins/BlockMethods.h **** inline const ConstBlockXpr bottomLeftCorner(Index cRows, Index cCols) const
 356:Eigen/src/Core/../plugins/BlockMethods.h **** {
 357:Eigen/src/Core/../plugins/BlockMethods.h ****   return ConstBlockXpr(derived(), rows() - cRows, 0, cRows, cCols);
 358:Eigen/src/Core/../plugins/BlockMethods.h **** }
 359:Eigen/src/Core/../plugins/BlockMethods.h **** 
 360:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns an expression of a fixed-size bottom-left corner of *this.
 361:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 362:Eigen/src/Core/../plugins/BlockMethods.h **** /// The template parameters CRows and CCols are the number of rows and columns in the corner.
 363:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 364:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_template_int_int_bottomLeftCorner.cpp
 365:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_template_int_int_bottomLeftCorner.out
 366:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 367:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 368:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 369:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 370:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 371:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 372:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 373:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename FixedBlockXpr<CRows,CCols>::Type bottomLeftCorner()
 374:Eigen/src/Core/../plugins/BlockMethods.h **** {
 375:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename FixedBlockXpr<CRows,CCols>::Type(derived(), rows() - CRows, 0);
 376:Eigen/src/Core/../plugins/BlockMethods.h **** }
 377:Eigen/src/Core/../plugins/BlockMethods.h **** 
 378:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of bottomLeftCorner<int, int>().
 379:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 380:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 381:Eigen/src/Core/../plugins/BlockMethods.h **** inline const typename ConstFixedBlockXpr<CRows,CCols>::Type bottomLeftCorner() const
 382:Eigen/src/Core/../plugins/BlockMethods.h **** {
 383:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), rows() - CRows, 0);
 384:Eigen/src/Core/../plugins/BlockMethods.h **** }
 385:Eigen/src/Core/../plugins/BlockMethods.h **** 
 386:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns an expression of a bottom-left corner of *this.
 387:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 388:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam CRows number of rows in corner as specified at compile-time
 389:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam CCols number of columns in corner as specified at compile-time
 390:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param  cRows number of rows in corner as specified at run-time
 391:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param  cCols number of columns in corner as specified at run-time
 392:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 393:Eigen/src/Core/../plugins/BlockMethods.h **** /// This function is mainly useful for corners where the number of rows is specified at compile-tim
 394:Eigen/src/Core/../plugins/BlockMethods.h **** /// and the number of columns is specified at run-time, or vice versa. The compile-time and run-tim
 395:Eigen/src/Core/../plugins/BlockMethods.h **** /// information should not contradict. In other words, \a cRows should equal \a CRows unless
 396:Eigen/src/Core/../plugins/BlockMethods.h **** /// \a CRows is \a Dynamic, and the same for the number of columns.
 397:Eigen/src/Core/../plugins/BlockMethods.h **** ///
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 143


 398:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_template_int_int_bottomLeftCorner_int_int.cpp
 399:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_template_int_int_bottomLeftCorner_int_int.out
 400:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 401:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 402:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 403:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block
 404:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 405:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 406:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename FixedBlockXpr<CRows,CCols>::Type bottomLeftCorner(Index cRows, Index cCols)
 407:Eigen/src/Core/../plugins/BlockMethods.h **** {
 408:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename FixedBlockXpr<CRows,CCols>::Type(derived(), rows() - cRows, 0, cRows, cCols);
 409:Eigen/src/Core/../plugins/BlockMethods.h **** }
 410:Eigen/src/Core/../plugins/BlockMethods.h **** 
 411:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of bottomLeftCorner<int, int>(Index, Index).
 412:Eigen/src/Core/../plugins/BlockMethods.h **** template<int CRows, int CCols>
 413:Eigen/src/Core/../plugins/BlockMethods.h **** inline const typename ConstFixedBlockXpr<CRows,CCols>::Type bottomLeftCorner(Index cRows, Index cCo
 414:Eigen/src/Core/../plugins/BlockMethods.h **** {
 415:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), rows() - cRows, 0, cRows, cCols)
 416:Eigen/src/Core/../plugins/BlockMethods.h **** }
 417:Eigen/src/Core/../plugins/BlockMethods.h **** 
 418:Eigen/src/Core/../plugins/BlockMethods.h **** 
 419:Eigen/src/Core/../plugins/BlockMethods.h **** 
 420:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a block consisting of the top rows of *this.
 421:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 422:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param n the number of rows in the block
 423:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 424:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_topRows_int.cpp
 425:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_topRows_int.out
 426:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 427:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)
 428:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 429:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 430:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 431:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 432:Eigen/src/Core/../plugins/BlockMethods.h **** inline RowsBlockXpr topRows(Index n)
 433:Eigen/src/Core/../plugins/BlockMethods.h **** {
 434:Eigen/src/Core/../plugins/BlockMethods.h ****   return RowsBlockXpr(derived(), 0, 0, n, cols());
 435:Eigen/src/Core/../plugins/BlockMethods.h **** }
 436:Eigen/src/Core/../plugins/BlockMethods.h **** 
 437:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of topRows(Index).
 438:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 439:Eigen/src/Core/../plugins/BlockMethods.h **** inline ConstRowsBlockXpr topRows(Index n) const
 440:Eigen/src/Core/../plugins/BlockMethods.h **** {
 441:Eigen/src/Core/../plugins/BlockMethods.h ****   return ConstRowsBlockXpr(derived(), 0, 0, n, cols());
 442:Eigen/src/Core/../plugins/BlockMethods.h **** }
 443:Eigen/src/Core/../plugins/BlockMethods.h **** 
 444:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a block consisting of the top rows of *this.
 445:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 446:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam N the number of rows in the block as specified at compile-time
 447:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param n the number of rows in the block as specified at run-time
 448:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 449:Eigen/src/Core/../plugins/BlockMethods.h **** /// The compile-time and run-time information should not contradict. In other words,
 450:Eigen/src/Core/../plugins/BlockMethods.h **** /// \a n should equal \a N unless \a N is \a Dynamic.
 451:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 452:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_template_int_topRows.cpp
 453:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_template_int_topRows.out
 454:Eigen/src/Core/../plugins/BlockMethods.h **** ///
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 144


 455:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)
 456:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 457:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 458:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 459:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N>
 460:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 461:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename NRowsBlockXpr<N>::Type topRows(Index n = N)
 462:Eigen/src/Core/../plugins/BlockMethods.h **** {
 463:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename NRowsBlockXpr<N>::Type(derived(), 0, 0, n, cols());
 464:Eigen/src/Core/../plugins/BlockMethods.h **** }
 465:Eigen/src/Core/../plugins/BlockMethods.h **** 
 466:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of topRows<int>().
 467:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N>
 468:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 469:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename ConstNRowsBlockXpr<N>::Type topRows(Index n = N) const
 470:Eigen/src/Core/../plugins/BlockMethods.h **** {
 471:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstNRowsBlockXpr<N>::Type(derived(), 0, 0, n, cols());
 472:Eigen/src/Core/../plugins/BlockMethods.h **** }
 473:Eigen/src/Core/../plugins/BlockMethods.h **** 
 474:Eigen/src/Core/../plugins/BlockMethods.h **** 
 475:Eigen/src/Core/../plugins/BlockMethods.h **** 
 476:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a block consisting of the bottom rows of *this.
 477:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 478:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param n the number of rows in the block
 479:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 480:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_bottomRows_int.cpp
 481:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_bottomRows_int.out
 482:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 483:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)
 484:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 485:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 486:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 487:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 488:Eigen/src/Core/../plugins/BlockMethods.h **** inline RowsBlockXpr bottomRows(Index n)
 489:Eigen/src/Core/../plugins/BlockMethods.h **** {
 490:Eigen/src/Core/../plugins/BlockMethods.h ****   return RowsBlockXpr(derived(), rows() - n, 0, n, cols());
 491:Eigen/src/Core/../plugins/BlockMethods.h **** }
 492:Eigen/src/Core/../plugins/BlockMethods.h **** 
 493:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of bottomRows(Index).
 494:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 495:Eigen/src/Core/../plugins/BlockMethods.h **** inline ConstRowsBlockXpr bottomRows(Index n) const
 496:Eigen/src/Core/../plugins/BlockMethods.h **** {
 497:Eigen/src/Core/../plugins/BlockMethods.h ****   return ConstRowsBlockXpr(derived(), rows() - n, 0, n, cols());
 498:Eigen/src/Core/../plugins/BlockMethods.h **** }
 499:Eigen/src/Core/../plugins/BlockMethods.h **** 
 500:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a block consisting of the bottom rows of *this.
 501:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 502:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam N the number of rows in the block as specified at compile-time
 503:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param n the number of rows in the block as specified at run-time
 504:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 505:Eigen/src/Core/../plugins/BlockMethods.h **** /// The compile-time and run-time information should not contradict. In other words,
 506:Eigen/src/Core/../plugins/BlockMethods.h **** /// \a n should equal \a N unless \a N is \a Dynamic.
 507:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 508:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_template_int_bottomRows.cpp
 509:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_template_int_bottomRows.out
 510:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 511:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 145


 512:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 513:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 514:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 515:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N>
 516:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 517:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename NRowsBlockXpr<N>::Type bottomRows(Index n = N)
 518:Eigen/src/Core/../plugins/BlockMethods.h **** {
 519:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename NRowsBlockXpr<N>::Type(derived(), rows() - n, 0, n, cols());
 520:Eigen/src/Core/../plugins/BlockMethods.h **** }
 521:Eigen/src/Core/../plugins/BlockMethods.h **** 
 522:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of bottomRows<int>().
 523:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N>
 524:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 525:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename ConstNRowsBlockXpr<N>::Type bottomRows(Index n = N) const
 526:Eigen/src/Core/../plugins/BlockMethods.h **** {
 527:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstNRowsBlockXpr<N>::Type(derived(), rows() - n, 0, n, cols());
 528:Eigen/src/Core/../plugins/BlockMethods.h **** }
 529:Eigen/src/Core/../plugins/BlockMethods.h **** 
 530:Eigen/src/Core/../plugins/BlockMethods.h **** 
 531:Eigen/src/Core/../plugins/BlockMethods.h **** 
 532:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a block consisting of a range of rows of *this.
 533:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 534:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param startRow the index of the first row in the block
 535:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param n the number of rows in the block
 536:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 537:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include DenseBase_middleRows_int.cpp
 538:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude DenseBase_middleRows_int.out
 539:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 540:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)
 541:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 542:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 543:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 544:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 545:Eigen/src/Core/../plugins/BlockMethods.h **** inline RowsBlockXpr middleRows(Index startRow, Index n)
 546:Eigen/src/Core/../plugins/BlockMethods.h **** {
 547:Eigen/src/Core/../plugins/BlockMethods.h ****   return RowsBlockXpr(derived(), startRow, 0, n, cols());
 548:Eigen/src/Core/../plugins/BlockMethods.h **** }
 549:Eigen/src/Core/../plugins/BlockMethods.h **** 
 550:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of middleRows(Index,Index).
 551:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 552:Eigen/src/Core/../plugins/BlockMethods.h **** inline ConstRowsBlockXpr middleRows(Index startRow, Index n) const
 553:Eigen/src/Core/../plugins/BlockMethods.h **** {
 554:Eigen/src/Core/../plugins/BlockMethods.h ****   return ConstRowsBlockXpr(derived(), startRow, 0, n, cols());
 555:Eigen/src/Core/../plugins/BlockMethods.h **** }
 556:Eigen/src/Core/../plugins/BlockMethods.h **** 
 557:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a block consisting of a range of rows of *this.
 558:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 559:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam N the number of rows in the block as specified at compile-time
 560:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param startRow the index of the first row in the block
 561:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param n the number of rows in the block as specified at run-time
 562:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 563:Eigen/src/Core/../plugins/BlockMethods.h **** /// The compile-time and run-time information should not contradict. In other words,
 564:Eigen/src/Core/../plugins/BlockMethods.h **** /// \a n should equal \a N unless \a N is \a Dynamic.
 565:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 566:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include DenseBase_template_int_middleRows.cpp
 567:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude DenseBase_template_int_middleRows.out
 568:Eigen/src/Core/../plugins/BlockMethods.h **** ///
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 146


 569:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)
 570:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 571:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 572:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 573:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N>
 574:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 575:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename NRowsBlockXpr<N>::Type middleRows(Index startRow, Index n = N)
 576:Eigen/src/Core/../plugins/BlockMethods.h **** {
 577:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename NRowsBlockXpr<N>::Type(derived(), startRow, 0, n, cols());
 578:Eigen/src/Core/../plugins/BlockMethods.h **** }
 579:Eigen/src/Core/../plugins/BlockMethods.h **** 
 580:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of middleRows<int>().
 581:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N>
 582:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 583:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename ConstNRowsBlockXpr<N>::Type middleRows(Index startRow, Index n = N) const
 584:Eigen/src/Core/../plugins/BlockMethods.h **** {
 585:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstNRowsBlockXpr<N>::Type(derived(), startRow, 0, n, cols());
 586:Eigen/src/Core/../plugins/BlockMethods.h **** }
 587:Eigen/src/Core/../plugins/BlockMethods.h **** 
 588:Eigen/src/Core/../plugins/BlockMethods.h **** 
 589:Eigen/src/Core/../plugins/BlockMethods.h **** 
 590:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a block consisting of the left columns of *this.
 591:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 592:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param n the number of columns in the block
 593:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 594:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_leftCols_int.cpp
 595:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_leftCols_int.out
 596:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 597:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(column-major)
 598:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 599:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 600:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 601:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 602:Eigen/src/Core/../plugins/BlockMethods.h **** inline ColsBlockXpr leftCols(Index n)
 603:Eigen/src/Core/../plugins/BlockMethods.h **** {
 604:Eigen/src/Core/../plugins/BlockMethods.h ****   return ColsBlockXpr(derived(), 0, 0, rows(), n);
 605:Eigen/src/Core/../plugins/BlockMethods.h **** }
 606:Eigen/src/Core/../plugins/BlockMethods.h **** 
 607:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of leftCols(Index).
 608:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 609:Eigen/src/Core/../plugins/BlockMethods.h **** inline ConstColsBlockXpr leftCols(Index n) const
 610:Eigen/src/Core/../plugins/BlockMethods.h **** {
 611:Eigen/src/Core/../plugins/BlockMethods.h ****   return ConstColsBlockXpr(derived(), 0, 0, rows(), n);
 612:Eigen/src/Core/../plugins/BlockMethods.h **** }
 613:Eigen/src/Core/../plugins/BlockMethods.h **** 
 614:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a block consisting of the left columns of *this.
 615:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 616:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam N the number of columns in the block as specified at compile-time
 617:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param n the number of columns in the block as specified at run-time
 618:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 619:Eigen/src/Core/../plugins/BlockMethods.h **** /// The compile-time and run-time information should not contradict. In other words,
 620:Eigen/src/Core/../plugins/BlockMethods.h **** /// \a n should equal \a N unless \a N is \a Dynamic.
 621:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 622:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_template_int_leftCols.cpp
 623:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_template_int_leftCols.out
 624:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 625:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(column-major)
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 147


 626:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 627:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 628:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 629:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N>
 630:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 631:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename NColsBlockXpr<N>::Type leftCols(Index n = N)
 632:Eigen/src/Core/../plugins/BlockMethods.h **** {
 633:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename NColsBlockXpr<N>::Type(derived(), 0, 0, rows(), n);
 634:Eigen/src/Core/../plugins/BlockMethods.h **** }
 635:Eigen/src/Core/../plugins/BlockMethods.h **** 
 636:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of leftCols<int>().
 637:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N>
 638:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 639:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename ConstNColsBlockXpr<N>::Type leftCols(Index n = N) const
 640:Eigen/src/Core/../plugins/BlockMethods.h **** {
 641:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstNColsBlockXpr<N>::Type(derived(), 0, 0, rows(), n);
 642:Eigen/src/Core/../plugins/BlockMethods.h **** }
 643:Eigen/src/Core/../plugins/BlockMethods.h **** 
 644:Eigen/src/Core/../plugins/BlockMethods.h **** 
 645:Eigen/src/Core/../plugins/BlockMethods.h **** 
 646:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a block consisting of the right columns of *this.
 647:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 648:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param n the number of columns in the block
 649:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 650:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_rightCols_int.cpp
 651:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_rightCols_int.out
 652:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 653:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(column-major)
 654:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 655:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 656:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 657:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 658:Eigen/src/Core/../plugins/BlockMethods.h **** inline ColsBlockXpr rightCols(Index n)
 659:Eigen/src/Core/../plugins/BlockMethods.h **** {
 660:Eigen/src/Core/../plugins/BlockMethods.h ****   return ColsBlockXpr(derived(), 0, cols() - n, rows(), n);
 661:Eigen/src/Core/../plugins/BlockMethods.h **** }
 662:Eigen/src/Core/../plugins/BlockMethods.h **** 
 663:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of rightCols(Index).
 664:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 665:Eigen/src/Core/../plugins/BlockMethods.h **** inline ConstColsBlockXpr rightCols(Index n) const
 666:Eigen/src/Core/../plugins/BlockMethods.h **** {
 667:Eigen/src/Core/../plugins/BlockMethods.h ****   return ConstColsBlockXpr(derived(), 0, cols() - n, rows(), n);
 668:Eigen/src/Core/../plugins/BlockMethods.h **** }
 669:Eigen/src/Core/../plugins/BlockMethods.h **** 
 670:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a block consisting of the right columns of *this.
 671:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 672:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam N the number of columns in the block as specified at compile-time
 673:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param n the number of columns in the block as specified at run-time
 674:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 675:Eigen/src/Core/../plugins/BlockMethods.h **** /// The compile-time and run-time information should not contradict. In other words,
 676:Eigen/src/Core/../plugins/BlockMethods.h **** /// \a n should equal \a N unless \a N is \a Dynamic.
 677:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 678:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_template_int_rightCols.cpp
 679:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_template_int_rightCols.out
 680:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 681:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(column-major)
 682:Eigen/src/Core/../plugins/BlockMethods.h **** ///
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 148


 683:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 684:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 685:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N>
 686:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 687:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename NColsBlockXpr<N>::Type rightCols(Index n = N)
 688:Eigen/src/Core/../plugins/BlockMethods.h **** {
 689:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename NColsBlockXpr<N>::Type(derived(), 0, cols() - n, rows(), n);
 690:Eigen/src/Core/../plugins/BlockMethods.h **** }
 691:Eigen/src/Core/../plugins/BlockMethods.h **** 
 692:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of rightCols<int>().
 693:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N>
 694:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 695:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename ConstNColsBlockXpr<N>::Type rightCols(Index n = N) const
 696:Eigen/src/Core/../plugins/BlockMethods.h **** {
 697:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstNColsBlockXpr<N>::Type(derived(), 0, cols() - n, rows(), n);
 698:Eigen/src/Core/../plugins/BlockMethods.h **** }
 699:Eigen/src/Core/../plugins/BlockMethods.h **** 
 700:Eigen/src/Core/../plugins/BlockMethods.h **** 
 701:Eigen/src/Core/../plugins/BlockMethods.h **** 
 702:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a block consisting of a range of columns of *this.
 703:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 704:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param startCol the index of the first column in the block
 705:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param numCols the number of columns in the block
 706:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 707:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include DenseBase_middleCols_int.cpp
 708:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude DenseBase_middleCols_int.out
 709:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 710:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(column-major)
 711:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 712:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 713:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 714:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 715:Eigen/src/Core/../plugins/BlockMethods.h **** inline ColsBlockXpr middleCols(Index startCol, Index numCols)
 716:Eigen/src/Core/../plugins/BlockMethods.h **** {
 717:Eigen/src/Core/../plugins/BlockMethods.h ****   return ColsBlockXpr(derived(), 0, startCol, rows(), numCols);
 718:Eigen/src/Core/../plugins/BlockMethods.h **** }
 719:Eigen/src/Core/../plugins/BlockMethods.h **** 
 720:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of middleCols(Index,Index).
 721:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 722:Eigen/src/Core/../plugins/BlockMethods.h **** inline ConstColsBlockXpr middleCols(Index startCol, Index numCols) const
 723:Eigen/src/Core/../plugins/BlockMethods.h **** {
 724:Eigen/src/Core/../plugins/BlockMethods.h ****   return ConstColsBlockXpr(derived(), 0, startCol, rows(), numCols);
 725:Eigen/src/Core/../plugins/BlockMethods.h **** }
 726:Eigen/src/Core/../plugins/BlockMethods.h **** 
 727:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a block consisting of a range of columns of *this.
 728:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 729:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam N the number of columns in the block as specified at compile-time
 730:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param startCol the index of the first column in the block
 731:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param n the number of columns in the block as specified at run-time
 732:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 733:Eigen/src/Core/../plugins/BlockMethods.h **** /// The compile-time and run-time information should not contradict. In other words,
 734:Eigen/src/Core/../plugins/BlockMethods.h **** /// \a n should equal \a N unless \a N is \a Dynamic.
 735:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 736:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include DenseBase_template_int_middleCols.cpp
 737:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude DenseBase_template_int_middleCols.out
 738:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 739:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(column-major)
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 149


 740:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 741:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 742:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 743:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N>
 744:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 745:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename NColsBlockXpr<N>::Type middleCols(Index startCol, Index n = N)
 746:Eigen/src/Core/../plugins/BlockMethods.h **** {
 747:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename NColsBlockXpr<N>::Type(derived(), 0, startCol, rows(), n);
 748:Eigen/src/Core/../plugins/BlockMethods.h **** }
 749:Eigen/src/Core/../plugins/BlockMethods.h **** 
 750:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of middleCols<int>().
 751:Eigen/src/Core/../plugins/BlockMethods.h **** template<int N>
 752:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 753:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename ConstNColsBlockXpr<N>::Type middleCols(Index startCol, Index n = N) const
 754:Eigen/src/Core/../plugins/BlockMethods.h **** {
 755:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstNColsBlockXpr<N>::Type(derived(), 0, startCol, rows(), n);
 756:Eigen/src/Core/../plugins/BlockMethods.h **** }
 757:Eigen/src/Core/../plugins/BlockMethods.h **** 
 758:Eigen/src/Core/../plugins/BlockMethods.h **** 
 759:Eigen/src/Core/../plugins/BlockMethods.h **** 
 760:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns a fixed-size expression of a block in *this.
 761:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 762:Eigen/src/Core/../plugins/BlockMethods.h **** /// The template parameters \a NRows and \a NCols are the number of
 763:Eigen/src/Core/../plugins/BlockMethods.h **** /// rows and columns in the block.
 764:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 765:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param startRow the first row in the block
 766:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param startCol the first column in the block
 767:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 768:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_block_int_int.cpp
 769:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_block_int_int.out
 770:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 771:Eigen/src/Core/../plugins/BlockMethods.h **** /// \note since block is a templated member, the keyword template has to be used
 772:Eigen/src/Core/../plugins/BlockMethods.h **** /// if the matrix type is also a template parameter: \code m.template block<3,3>(1,1); \endcode
 773:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 774:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 775:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 776:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 777:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 778:Eigen/src/Core/../plugins/BlockMethods.h **** template<int NRows, int NCols>
 779:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 780:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename FixedBlockXpr<NRows,NCols>::Type block(Index startRow, Index startCol)
 781:Eigen/src/Core/../plugins/BlockMethods.h **** {
 782:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename FixedBlockXpr<NRows,NCols>::Type(derived(), startRow, startCol);
 783:Eigen/src/Core/../plugins/BlockMethods.h **** }
 784:Eigen/src/Core/../plugins/BlockMethods.h **** 
 785:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of block<>(Index, Index). */
 786:Eigen/src/Core/../plugins/BlockMethods.h **** template<int NRows, int NCols>
 787:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 788:Eigen/src/Core/../plugins/BlockMethods.h **** inline const typename ConstFixedBlockXpr<NRows,NCols>::Type block(Index startRow, Index startCol) c
 789:Eigen/src/Core/../plugins/BlockMethods.h **** {
 790:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstFixedBlockXpr<NRows,NCols>::Type(derived(), startRow, startCol);
 791:Eigen/src/Core/../plugins/BlockMethods.h **** }
 792:Eigen/src/Core/../plugins/BlockMethods.h **** 
 793:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns an expression of a block in *this.
 794:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 795:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam NRows number of rows in block as specified at compile-time
 796:Eigen/src/Core/../plugins/BlockMethods.h **** /// \tparam NCols number of columns in block as specified at compile-time
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 150


 797:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param  startRow  the first row in the block
 798:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param  startCol  the first column in the block
 799:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param  blockRows number of rows in block as specified at run-time
 800:Eigen/src/Core/../plugins/BlockMethods.h **** /// \param  blockCols number of columns in block as specified at run-time
 801:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 802:Eigen/src/Core/../plugins/BlockMethods.h **** /// This function is mainly useful for blocks where the number of rows is specified at compile-time
 803:Eigen/src/Core/../plugins/BlockMethods.h **** /// and the number of columns is specified at run-time, or vice versa. The compile-time and run-tim
 804:Eigen/src/Core/../plugins/BlockMethods.h **** /// information should not contradict. In other words, \a blockRows should equal \a NRows unless
 805:Eigen/src/Core/../plugins/BlockMethods.h **** /// \a NRows is \a Dynamic, and the same for the number of columns.
 806:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 807:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_template_int_int_block_int_int_int_int.cpp
 808:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_template_int_int_block_int_int_int_int.cpp
 809:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 810:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 811:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 812:Eigen/src/Core/../plugins/BlockMethods.h **** /// \sa class Block, block(Index,Index,Index,Index)
 813:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 814:Eigen/src/Core/../plugins/BlockMethods.h **** template<int NRows, int NCols>
 815:Eigen/src/Core/../plugins/BlockMethods.h **** inline typename FixedBlockXpr<NRows,NCols>::Type block(Index startRow, Index startCol,
 816:Eigen/src/Core/../plugins/BlockMethods.h ****                                                   Index blockRows, Index blockCols)
 817:Eigen/src/Core/../plugins/BlockMethods.h **** {
 818:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename FixedBlockXpr<NRows,NCols>::Type(derived(), startRow, startCol, blockRows, blockC
 819:Eigen/src/Core/../plugins/BlockMethods.h **** }
 820:Eigen/src/Core/../plugins/BlockMethods.h **** 
 821:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of block<>(Index, Index, Index, Index).
 822:Eigen/src/Core/../plugins/BlockMethods.h **** template<int NRows, int NCols>
 823:Eigen/src/Core/../plugins/BlockMethods.h **** inline const typename ConstFixedBlockXpr<NRows,NCols>::Type block(Index startRow, Index startCol,
 824:Eigen/src/Core/../plugins/BlockMethods.h ****                                                               Index blockRows, Index blockCols) con
 825:Eigen/src/Core/../plugins/BlockMethods.h **** {
 826:Eigen/src/Core/../plugins/BlockMethods.h ****   return typename ConstFixedBlockXpr<NRows,NCols>::Type(derived(), startRow, startCol, blockRows, b
 827:Eigen/src/Core/../plugins/BlockMethods.h **** }
 828:Eigen/src/Core/../plugins/BlockMethods.h **** 
 829:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns an expression of the \a i-th column of *this. Note that the numbering starts at 0.
 830:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 831:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_col.cpp
 832:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_col.out
 833:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 834:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(column-major)
 835:Eigen/src/Core/../plugins/BlockMethods.h **** /**
 836:Eigen/src/Core/../plugins/BlockMethods.h ****   * \sa row(), class Block */
 837:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 838:Eigen/src/Core/../plugins/BlockMethods.h **** inline ColXpr col(Index i)
 839:Eigen/src/Core/../plugins/BlockMethods.h **** {
 840:Eigen/src/Core/../plugins/BlockMethods.h ****   return ColXpr(derived(), i);
 841:Eigen/src/Core/../plugins/BlockMethods.h **** }
 842:Eigen/src/Core/../plugins/BlockMethods.h **** 
 843:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of col().
 844:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 845:Eigen/src/Core/../plugins/BlockMethods.h **** inline ConstColXpr col(Index i) const
 846:Eigen/src/Core/../plugins/BlockMethods.h **** {
 847:Eigen/src/Core/../plugins/BlockMethods.h ****   return ConstColXpr(derived(), i);
 848:Eigen/src/Core/../plugins/BlockMethods.h **** }
 849:Eigen/src/Core/../plugins/BlockMethods.h **** 
 850:Eigen/src/Core/../plugins/BlockMethods.h **** /// \returns an expression of the \a i-th row of *this. Note that the numbering starts at 0.
 851:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 852:Eigen/src/Core/../plugins/BlockMethods.h **** /// Example: \include MatrixBase_row.cpp
 853:Eigen/src/Core/../plugins/BlockMethods.h **** /// Output: \verbinclude MatrixBase_row.out
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 151


 854:Eigen/src/Core/../plugins/BlockMethods.h **** ///
 855:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)
 856:Eigen/src/Core/../plugins/BlockMethods.h **** /**
 857:Eigen/src/Core/../plugins/BlockMethods.h ****   * \sa col(), class Block */
 858:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 859:Eigen/src/Core/../plugins/BlockMethods.h **** inline RowXpr row(Index i)
 860:Eigen/src/Core/../plugins/BlockMethods.h **** {
 861:Eigen/src/Core/../plugins/BlockMethods.h ****   return RowXpr(derived(), i);
 862:Eigen/src/Core/../plugins/BlockMethods.h **** }
 863:Eigen/src/Core/../plugins/BlockMethods.h **** 
 864:Eigen/src/Core/../plugins/BlockMethods.h **** /// This is the const version of row(). */
 865:Eigen/src/Core/../plugins/BlockMethods.h **** EIGEN_DEVICE_FUNC
 866:Eigen/src/Core/../plugins/BlockMethods.h **** inline ConstRowXpr row(Index i) const
 1273              		.loc 19 866 20 view .LVU334
 1274              	.LBB2717:
 1275              	.LBI2717:
 1276              		.file 20 "Eigen/src/Core/Block.h"
   1:Eigen/src/Core/Block.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/Block.h **** // for linear algebra.
   3:Eigen/src/Core/Block.h **** //
   4:Eigen/src/Core/Block.h **** // Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:Eigen/src/Core/Block.h **** // Copyright (C) 2006-2010 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:Eigen/src/Core/Block.h **** //
   7:Eigen/src/Core/Block.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/Block.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/Block.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:Eigen/src/Core/Block.h **** 
  11:Eigen/src/Core/Block.h **** #ifndef EIGEN_BLOCK_H
  12:Eigen/src/Core/Block.h **** #define EIGEN_BLOCK_H
  13:Eigen/src/Core/Block.h **** 
  14:Eigen/src/Core/Block.h **** namespace Eigen { 
  15:Eigen/src/Core/Block.h **** 
  16:Eigen/src/Core/Block.h **** namespace internal {
  17:Eigen/src/Core/Block.h **** template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel>
  18:Eigen/src/Core/Block.h **** struct traits<Block<XprType, BlockRows, BlockCols, InnerPanel> > : traits<XprType>
  19:Eigen/src/Core/Block.h **** {
  20:Eigen/src/Core/Block.h ****   typedef typename traits<XprType>::Scalar Scalar;
  21:Eigen/src/Core/Block.h ****   typedef typename traits<XprType>::StorageKind StorageKind;
  22:Eigen/src/Core/Block.h ****   typedef typename traits<XprType>::XprKind XprKind;
  23:Eigen/src/Core/Block.h ****   typedef typename ref_selector<XprType>::type XprTypeNested;
  24:Eigen/src/Core/Block.h ****   typedef typename remove_reference<XprTypeNested>::type _XprTypeNested;
  25:Eigen/src/Core/Block.h ****   enum{
  26:Eigen/src/Core/Block.h ****     MatrixRows = traits<XprType>::RowsAtCompileTime,
  27:Eigen/src/Core/Block.h ****     MatrixCols = traits<XprType>::ColsAtCompileTime,
  28:Eigen/src/Core/Block.h ****     RowsAtCompileTime = MatrixRows == 0 ? 0 : BlockRows,
  29:Eigen/src/Core/Block.h ****     ColsAtCompileTime = MatrixCols == 0 ? 0 : BlockCols,
  30:Eigen/src/Core/Block.h ****     MaxRowsAtCompileTime = BlockRows==0 ? 0
  31:Eigen/src/Core/Block.h ****                          : RowsAtCompileTime != Dynamic ? int(RowsAtCompileTime)
  32:Eigen/src/Core/Block.h ****                          : int(traits<XprType>::MaxRowsAtCompileTime),
  33:Eigen/src/Core/Block.h ****     MaxColsAtCompileTime = BlockCols==0 ? 0
  34:Eigen/src/Core/Block.h ****                          : ColsAtCompileTime != Dynamic ? int(ColsAtCompileTime)
  35:Eigen/src/Core/Block.h ****                          : int(traits<XprType>::MaxColsAtCompileTime),
  36:Eigen/src/Core/Block.h **** 
  37:Eigen/src/Core/Block.h ****     XprTypeIsRowMajor = (int(traits<XprType>::Flags)&RowMajorBit) != 0,
  38:Eigen/src/Core/Block.h ****     IsRowMajor = (MaxRowsAtCompileTime==1&&MaxColsAtCompileTime!=1) ? 1
  39:Eigen/src/Core/Block.h ****                : (MaxColsAtCompileTime==1&&MaxRowsAtCompileTime!=1) ? 0
  40:Eigen/src/Core/Block.h ****                : XprTypeIsRowMajor,
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 152


  41:Eigen/src/Core/Block.h ****     HasSameStorageOrderAsXprType = (IsRowMajor == XprTypeIsRowMajor),
  42:Eigen/src/Core/Block.h ****     InnerSize = IsRowMajor ? int(ColsAtCompileTime) : int(RowsAtCompileTime),
  43:Eigen/src/Core/Block.h ****     InnerStrideAtCompileTime = HasSameStorageOrderAsXprType
  44:Eigen/src/Core/Block.h ****                              ? int(inner_stride_at_compile_time<XprType>::ret)
  45:Eigen/src/Core/Block.h ****                              : int(outer_stride_at_compile_time<XprType>::ret),
  46:Eigen/src/Core/Block.h ****     OuterStrideAtCompileTime = HasSameStorageOrderAsXprType
  47:Eigen/src/Core/Block.h ****                              ? int(outer_stride_at_compile_time<XprType>::ret)
  48:Eigen/src/Core/Block.h ****                              : int(inner_stride_at_compile_time<XprType>::ret),
  49:Eigen/src/Core/Block.h **** 
  50:Eigen/src/Core/Block.h ****     // FIXME, this traits is rather specialized for dense object and it needs to be cleaned further
  51:Eigen/src/Core/Block.h ****     FlagsLvalueBit = is_lvalue<XprType>::value ? LvalueBit : 0,
  52:Eigen/src/Core/Block.h ****     FlagsRowMajorBit = IsRowMajor ? RowMajorBit : 0,
  53:Eigen/src/Core/Block.h ****     Flags = (traits<XprType>::Flags & (DirectAccessBit | (InnerPanel?CompressedAccessBit:0))) | Fla
  54:Eigen/src/Core/Block.h ****     // FIXME DirectAccessBit should not be handled by expressions
  55:Eigen/src/Core/Block.h ****     // 
  56:Eigen/src/Core/Block.h ****     // Alignment is needed by MapBase's assertions
  57:Eigen/src/Core/Block.h ****     // We can sefely set it to false here. Internal alignment errors will be detected by an eigen_i
  58:Eigen/src/Core/Block.h ****     Alignment = 0
  59:Eigen/src/Core/Block.h ****   };
  60:Eigen/src/Core/Block.h **** };
  61:Eigen/src/Core/Block.h **** 
  62:Eigen/src/Core/Block.h **** template<typename XprType, int BlockRows=Dynamic, int BlockCols=Dynamic, bool InnerPanel = false,
  63:Eigen/src/Core/Block.h ****          bool HasDirectAccess = internal::has_direct_access<XprType>::ret> class BlockImpl_dense;
  64:Eigen/src/Core/Block.h ****          
  65:Eigen/src/Core/Block.h **** } // end namespace internal
  66:Eigen/src/Core/Block.h **** 
  67:Eigen/src/Core/Block.h **** template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel, typename StorageKind> cla
  68:Eigen/src/Core/Block.h **** 
  69:Eigen/src/Core/Block.h **** /** \class Block
  70:Eigen/src/Core/Block.h ****   * \ingroup Core_Module
  71:Eigen/src/Core/Block.h ****   *
  72:Eigen/src/Core/Block.h ****   * \brief Expression of a fixed-size or dynamic-size block
  73:Eigen/src/Core/Block.h ****   *
  74:Eigen/src/Core/Block.h ****   * \tparam XprType the type of the expression in which we are taking a block
  75:Eigen/src/Core/Block.h ****   * \tparam BlockRows the number of rows of the block we are taking at compile time (optional)
  76:Eigen/src/Core/Block.h ****   * \tparam BlockCols the number of columns of the block we are taking at compile time (optional)
  77:Eigen/src/Core/Block.h ****   * \tparam InnerPanel is true, if the block maps to a set of rows of a row major matrix or
  78:Eigen/src/Core/Block.h ****   *         to set of columns of a column major matrix (optional). The parameter allows to determin
  79:Eigen/src/Core/Block.h ****   *         at compile time whether aligned access is possible on the block expression.
  80:Eigen/src/Core/Block.h ****   *
  81:Eigen/src/Core/Block.h ****   * This class represents an expression of either a fixed-size or dynamic-size block. It is the ret
  82:Eigen/src/Core/Block.h ****   * type of DenseBase::block(Index,Index,Index,Index) and DenseBase::block<int,int>(Index,Index) an
  83:Eigen/src/Core/Block.h ****   * most of the time this is the only way it is used.
  84:Eigen/src/Core/Block.h ****   *
  85:Eigen/src/Core/Block.h ****   * However, if you want to directly maniputate block expressions,
  86:Eigen/src/Core/Block.h ****   * for instance if you want to write a function returning such an expression, you
  87:Eigen/src/Core/Block.h ****   * will need to use this class.
  88:Eigen/src/Core/Block.h ****   *
  89:Eigen/src/Core/Block.h ****   * Here is an example illustrating the dynamic case:
  90:Eigen/src/Core/Block.h ****   * \include class_Block.cpp
  91:Eigen/src/Core/Block.h ****   * Output: \verbinclude class_Block.out
  92:Eigen/src/Core/Block.h ****   *
  93:Eigen/src/Core/Block.h ****   * \note Even though this expression has dynamic size, in the case where \a XprType
  94:Eigen/src/Core/Block.h ****   * has fixed size, this expression inherits a fixed maximal size which means that evaluating
  95:Eigen/src/Core/Block.h ****   * it does not cause a dynamic memory allocation.
  96:Eigen/src/Core/Block.h ****   *
  97:Eigen/src/Core/Block.h ****   * Here is an example illustrating the fixed-size case:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 153


  98:Eigen/src/Core/Block.h ****   * \include class_FixedBlock.cpp
  99:Eigen/src/Core/Block.h ****   * Output: \verbinclude class_FixedBlock.out
 100:Eigen/src/Core/Block.h ****   *
 101:Eigen/src/Core/Block.h ****   * \sa DenseBase::block(Index,Index,Index,Index), DenseBase::block(Index,Index), class VectorBlock
 102:Eigen/src/Core/Block.h ****   */
 103:Eigen/src/Core/Block.h **** template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel> class Block
 104:Eigen/src/Core/Block.h ****   : public BlockImpl<XprType, BlockRows, BlockCols, InnerPanel, typename internal::traits<XprType>:
 105:Eigen/src/Core/Block.h **** {
 106:Eigen/src/Core/Block.h ****     typedef BlockImpl<XprType, BlockRows, BlockCols, InnerPanel, typename internal::traits<XprType>
 107:Eigen/src/Core/Block.h ****   public:
 108:Eigen/src/Core/Block.h ****     //typedef typename Impl::Base Base;
 109:Eigen/src/Core/Block.h ****     typedef Impl Base;
 110:Eigen/src/Core/Block.h ****     EIGEN_GENERIC_PUBLIC_INTERFACE(Block)
 111:Eigen/src/Core/Block.h ****     EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Block)
 112:Eigen/src/Core/Block.h ****     
 113:Eigen/src/Core/Block.h ****     typedef typename internal::remove_all<XprType>::type NestedExpression;
 114:Eigen/src/Core/Block.h ****   
 115:Eigen/src/Core/Block.h ****     /** Column or Row constructor
 116:Eigen/src/Core/Block.h ****       */
 117:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 118:Eigen/src/Core/Block.h ****     inline Block(XprType& xpr, Index i) : Impl(xpr,i)
 1277              		.loc 20 118 12 view .LVU335
 1278              	.LBB2718:
 1279              	.LBB2719:
 1280              	.LBB2720:
 1281              	.LBI2720:
 119:Eigen/src/Core/Block.h ****     {
 120:Eigen/src/Core/Block.h ****       eigen_assert( (i>=0) && (
 121:Eigen/src/Core/Block.h ****           ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
 122:Eigen/src/Core/Block.h ****         ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
 123:Eigen/src/Core/Block.h ****     }
 124:Eigen/src/Core/Block.h **** 
 125:Eigen/src/Core/Block.h ****     /** Fixed-size constructor
 126:Eigen/src/Core/Block.h ****       */
 127:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 128:Eigen/src/Core/Block.h ****     inline Block(XprType& xpr, Index startRow, Index startCol)
 129:Eigen/src/Core/Block.h ****       : Impl(xpr, startRow, startCol)
 130:Eigen/src/Core/Block.h ****     {
 131:Eigen/src/Core/Block.h ****       EIGEN_STATIC_ASSERT(RowsAtCompileTime!=Dynamic && ColsAtCompileTime!=Dynamic,THIS_METHOD_IS_O
 132:Eigen/src/Core/Block.h ****       eigen_assert(startRow >= 0 && BlockRows >= 0 && startRow + BlockRows <= xpr.rows()
 133:Eigen/src/Core/Block.h ****              && startCol >= 0 && BlockCols >= 0 && startCol + BlockCols <= xpr.cols());
 134:Eigen/src/Core/Block.h ****     }
 135:Eigen/src/Core/Block.h **** 
 136:Eigen/src/Core/Block.h ****     /** Dynamic-size constructor
 137:Eigen/src/Core/Block.h ****       */
 138:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 139:Eigen/src/Core/Block.h ****     inline Block(XprType& xpr,
 140:Eigen/src/Core/Block.h ****           Index startRow, Index startCol,
 141:Eigen/src/Core/Block.h ****           Index blockRows, Index blockCols)
 142:Eigen/src/Core/Block.h ****       : Impl(xpr, startRow, startCol, blockRows, blockCols)
 143:Eigen/src/Core/Block.h ****     {
 144:Eigen/src/Core/Block.h ****       eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
 145:Eigen/src/Core/Block.h ****           && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
 146:Eigen/src/Core/Block.h ****       eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
 147:Eigen/src/Core/Block.h ****           && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
 148:Eigen/src/Core/Block.h ****     }
 149:Eigen/src/Core/Block.h **** };
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 154


 150:Eigen/src/Core/Block.h ****          
 151:Eigen/src/Core/Block.h **** // The generic default implementation for dense block simplu forward to the internal::BlockImpl_den
 152:Eigen/src/Core/Block.h **** // that must be specialized for direct and non-direct access...
 153:Eigen/src/Core/Block.h **** template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel>
 154:Eigen/src/Core/Block.h **** class BlockImpl<XprType, BlockRows, BlockCols, InnerPanel, Dense>
 155:Eigen/src/Core/Block.h ****   : public internal::BlockImpl_dense<XprType, BlockRows, BlockCols, InnerPanel>
 156:Eigen/src/Core/Block.h **** {
 157:Eigen/src/Core/Block.h ****     typedef internal::BlockImpl_dense<XprType, BlockRows, BlockCols, InnerPanel> Impl;
 158:Eigen/src/Core/Block.h ****     typedef typename XprType::StorageIndex StorageIndex;
 159:Eigen/src/Core/Block.h ****   public:
 160:Eigen/src/Core/Block.h ****     typedef Impl Base;
 161:Eigen/src/Core/Block.h ****     EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl)
 162:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC inline BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 1282              		.loc 20 162 30 view .LVU336
 1283              	.LBB2721:
 1284              	.LBB2722:
 1285              	.LBI2722:
 163:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC inline BlockImpl(XprType& xpr, Index startRow, Index startCol) : Impl(xpr, st
 164:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 165:Eigen/src/Core/Block.h ****     inline BlockImpl(XprType& xpr, Index startRow, Index startCol, Index blockRows, Index blockCols
 166:Eigen/src/Core/Block.h ****       : Impl(xpr, startRow, startCol, blockRows, blockCols) {}
 167:Eigen/src/Core/Block.h **** };
 168:Eigen/src/Core/Block.h **** 
 169:Eigen/src/Core/Block.h **** namespace internal {
 170:Eigen/src/Core/Block.h **** 
 171:Eigen/src/Core/Block.h **** /** \internal Internal implementation of dense Blocks in the general case. */
 172:Eigen/src/Core/Block.h **** template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel, bool HasDirectAccess> cla
 173:Eigen/src/Core/Block.h ****   : public internal::dense_xpr_base<Block<XprType, BlockRows, BlockCols, InnerPanel> >::type
 174:Eigen/src/Core/Block.h **** {
 175:Eigen/src/Core/Block.h ****     typedef Block<XprType, BlockRows, BlockCols, InnerPanel> BlockType;
 176:Eigen/src/Core/Block.h ****     typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
 177:Eigen/src/Core/Block.h ****   public:
 178:Eigen/src/Core/Block.h **** 
 179:Eigen/src/Core/Block.h ****     typedef typename internal::dense_xpr_base<BlockType>::type Base;
 180:Eigen/src/Core/Block.h ****     EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
 181:Eigen/src/Core/Block.h ****     EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
 182:Eigen/src/Core/Block.h **** 
 183:Eigen/src/Core/Block.h ****     // class InnerIterator; // FIXME apparently never used
 184:Eigen/src/Core/Block.h **** 
 185:Eigen/src/Core/Block.h ****     /** Column or Row constructor
 186:Eigen/src/Core/Block.h ****       */
 187:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 188:Eigen/src/Core/Block.h ****     inline BlockImpl_dense(XprType& xpr, Index i)
 189:Eigen/src/Core/Block.h ****       : m_xpr(xpr),
 190:Eigen/src/Core/Block.h ****         // It is a row if and only if BlockRows==1 and BlockCols==XprType::ColsAtCompileTime,
 191:Eigen/src/Core/Block.h ****         // and it is a column if and only if BlockRows==XprType::RowsAtCompileTime and BlockCols==1
 192:Eigen/src/Core/Block.h ****         // all other cases are invalid.
 193:Eigen/src/Core/Block.h ****         // The case a 1x1 matrix seems ambiguous, but the result is the same anyway.
 194:Eigen/src/Core/Block.h ****         m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
 195:Eigen/src/Core/Block.h ****         m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0),
 196:Eigen/src/Core/Block.h ****         m_blockRows(BlockRows==1 ? 1 : xpr.rows()),
 197:Eigen/src/Core/Block.h ****         m_blockCols(BlockCols==1 ? 1 : xpr.cols())
 198:Eigen/src/Core/Block.h ****     {}
 199:Eigen/src/Core/Block.h **** 
 200:Eigen/src/Core/Block.h ****     /** Fixed-size constructor
 201:Eigen/src/Core/Block.h ****       */
 202:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 155


 203:Eigen/src/Core/Block.h ****     inline BlockImpl_dense(XprType& xpr, Index startRow, Index startCol)
 204:Eigen/src/Core/Block.h ****       : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
 205:Eigen/src/Core/Block.h ****                     m_blockRows(BlockRows), m_blockCols(BlockCols)
 206:Eigen/src/Core/Block.h ****     {}
 207:Eigen/src/Core/Block.h **** 
 208:Eigen/src/Core/Block.h ****     /** Dynamic-size constructor
 209:Eigen/src/Core/Block.h ****       */
 210:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 211:Eigen/src/Core/Block.h ****     inline BlockImpl_dense(XprType& xpr,
 212:Eigen/src/Core/Block.h ****           Index startRow, Index startCol,
 213:Eigen/src/Core/Block.h ****           Index blockRows, Index blockCols)
 214:Eigen/src/Core/Block.h ****       : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
 215:Eigen/src/Core/Block.h ****                     m_blockRows(blockRows), m_blockCols(blockCols)
 216:Eigen/src/Core/Block.h ****     {}
 217:Eigen/src/Core/Block.h **** 
 218:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
 219:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC inline Index cols() const { return m_blockCols.value(); }
 220:Eigen/src/Core/Block.h **** 
 221:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 222:Eigen/src/Core/Block.h ****     inline Scalar& coeffRef(Index rowId, Index colId)
 223:Eigen/src/Core/Block.h ****     {
 224:Eigen/src/Core/Block.h ****       EIGEN_STATIC_ASSERT_LVALUE(XprType)
 225:Eigen/src/Core/Block.h ****       return m_xpr.coeffRef(rowId + m_startRow.value(), colId + m_startCol.value());
 226:Eigen/src/Core/Block.h ****     }
 227:Eigen/src/Core/Block.h **** 
 228:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 229:Eigen/src/Core/Block.h ****     inline const Scalar& coeffRef(Index rowId, Index colId) const
 230:Eigen/src/Core/Block.h ****     {
 231:Eigen/src/Core/Block.h ****       return m_xpr.derived().coeffRef(rowId + m_startRow.value(), colId + m_startCol.value());
 232:Eigen/src/Core/Block.h ****     }
 233:Eigen/src/Core/Block.h **** 
 234:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 235:Eigen/src/Core/Block.h ****     EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index rowId, Index colId) const
 236:Eigen/src/Core/Block.h ****     {
 237:Eigen/src/Core/Block.h ****       return m_xpr.coeff(rowId + m_startRow.value(), colId + m_startCol.value());
 238:Eigen/src/Core/Block.h ****     }
 239:Eigen/src/Core/Block.h **** 
 240:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 241:Eigen/src/Core/Block.h ****     inline Scalar& coeffRef(Index index)
 242:Eigen/src/Core/Block.h ****     {
 243:Eigen/src/Core/Block.h ****       EIGEN_STATIC_ASSERT_LVALUE(XprType)
 244:Eigen/src/Core/Block.h ****       return m_xpr.coeffRef(m_startRow.value() + (RowsAtCompileTime == 1 ? 0 : index),
 245:Eigen/src/Core/Block.h ****                             m_startCol.value() + (RowsAtCompileTime == 1 ? index : 0));
 246:Eigen/src/Core/Block.h ****     }
 247:Eigen/src/Core/Block.h **** 
 248:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 249:Eigen/src/Core/Block.h ****     inline const Scalar& coeffRef(Index index) const
 250:Eigen/src/Core/Block.h ****     {
 251:Eigen/src/Core/Block.h ****       return m_xpr.coeffRef(m_startRow.value() + (RowsAtCompileTime == 1 ? 0 : index),
 252:Eigen/src/Core/Block.h ****                             m_startCol.value() + (RowsAtCompileTime == 1 ? index : 0));
 253:Eigen/src/Core/Block.h ****     }
 254:Eigen/src/Core/Block.h **** 
 255:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 256:Eigen/src/Core/Block.h ****     inline const CoeffReturnType coeff(Index index) const
 257:Eigen/src/Core/Block.h ****     {
 258:Eigen/src/Core/Block.h ****       return m_xpr.coeff(m_startRow.value() + (RowsAtCompileTime == 1 ? 0 : index),
 259:Eigen/src/Core/Block.h ****                          m_startCol.value() + (RowsAtCompileTime == 1 ? index : 0));
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 156


 260:Eigen/src/Core/Block.h ****     }
 261:Eigen/src/Core/Block.h **** 
 262:Eigen/src/Core/Block.h ****     template<int LoadMode>
 263:Eigen/src/Core/Block.h ****     inline PacketScalar packet(Index rowId, Index colId) const
 264:Eigen/src/Core/Block.h ****     {
 265:Eigen/src/Core/Block.h ****       return m_xpr.template packet<Unaligned>(rowId + m_startRow.value(), colId + m_startCol.value(
 266:Eigen/src/Core/Block.h ****     }
 267:Eigen/src/Core/Block.h **** 
 268:Eigen/src/Core/Block.h ****     template<int LoadMode>
 269:Eigen/src/Core/Block.h ****     inline void writePacket(Index rowId, Index colId, const PacketScalar& val)
 270:Eigen/src/Core/Block.h ****     {
 271:Eigen/src/Core/Block.h ****       m_xpr.template writePacket<Unaligned>(rowId + m_startRow.value(), colId + m_startCol.value(),
 272:Eigen/src/Core/Block.h ****     }
 273:Eigen/src/Core/Block.h **** 
 274:Eigen/src/Core/Block.h ****     template<int LoadMode>
 275:Eigen/src/Core/Block.h ****     inline PacketScalar packet(Index index) const
 276:Eigen/src/Core/Block.h ****     {
 277:Eigen/src/Core/Block.h ****       return m_xpr.template packet<Unaligned>
 278:Eigen/src/Core/Block.h ****               (m_startRow.value() + (RowsAtCompileTime == 1 ? 0 : index),
 279:Eigen/src/Core/Block.h ****                m_startCol.value() + (RowsAtCompileTime == 1 ? index : 0));
 280:Eigen/src/Core/Block.h ****     }
 281:Eigen/src/Core/Block.h **** 
 282:Eigen/src/Core/Block.h ****     template<int LoadMode>
 283:Eigen/src/Core/Block.h ****     inline void writePacket(Index index, const PacketScalar& val)
 284:Eigen/src/Core/Block.h ****     {
 285:Eigen/src/Core/Block.h ****       m_xpr.template writePacket<Unaligned>
 286:Eigen/src/Core/Block.h ****          (m_startRow.value() + (RowsAtCompileTime == 1 ? 0 : index),
 287:Eigen/src/Core/Block.h ****           m_startCol.value() + (RowsAtCompileTime == 1 ? index : 0), val);
 288:Eigen/src/Core/Block.h ****     }
 289:Eigen/src/Core/Block.h **** 
 290:Eigen/src/Core/Block.h ****     #ifdef EIGEN_PARSED_BY_DOXYGEN
 291:Eigen/src/Core/Block.h ****     /** \sa MapBase::data() */
 292:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC inline const Scalar* data() const;
 293:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC inline Index innerStride() const;
 294:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC inline Index outerStride() const;
 295:Eigen/src/Core/Block.h ****     #endif
 296:Eigen/src/Core/Block.h **** 
 297:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 298:Eigen/src/Core/Block.h ****     const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
 299:Eigen/src/Core/Block.h ****     { 
 300:Eigen/src/Core/Block.h ****       return m_xpr; 
 301:Eigen/src/Core/Block.h ****     }
 302:Eigen/src/Core/Block.h **** 
 303:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 304:Eigen/src/Core/Block.h ****     XprType& nestedExpression() { return m_xpr; }
 305:Eigen/src/Core/Block.h ****       
 306:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 307:Eigen/src/Core/Block.h ****     StorageIndex startRow() const
 308:Eigen/src/Core/Block.h ****     { 
 309:Eigen/src/Core/Block.h ****       return m_startRow.value(); 
 310:Eigen/src/Core/Block.h ****     }
 311:Eigen/src/Core/Block.h ****       
 312:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 313:Eigen/src/Core/Block.h ****     StorageIndex startCol() const
 314:Eigen/src/Core/Block.h ****     { 
 315:Eigen/src/Core/Block.h ****       return m_startCol.value(); 
 316:Eigen/src/Core/Block.h ****     }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 157


 317:Eigen/src/Core/Block.h **** 
 318:Eigen/src/Core/Block.h ****   protected:
 319:Eigen/src/Core/Block.h **** 
 320:Eigen/src/Core/Block.h ****     XprTypeNested m_xpr;
 321:Eigen/src/Core/Block.h ****     const internal::variable_if_dynamic<StorageIndex, (XprType::RowsAtCompileTime == 1 && BlockRows
 322:Eigen/src/Core/Block.h ****     const internal::variable_if_dynamic<StorageIndex, (XprType::ColsAtCompileTime == 1 && BlockCols
 323:Eigen/src/Core/Block.h ****     const internal::variable_if_dynamic<StorageIndex, RowsAtCompileTime> m_blockRows;
 324:Eigen/src/Core/Block.h ****     const internal::variable_if_dynamic<StorageIndex, ColsAtCompileTime> m_blockCols;
 325:Eigen/src/Core/Block.h **** };
 326:Eigen/src/Core/Block.h **** 
 327:Eigen/src/Core/Block.h **** /** \internal Internal implementation of dense Blocks in the direct access case.*/
 328:Eigen/src/Core/Block.h **** template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel>
 329:Eigen/src/Core/Block.h **** class BlockImpl_dense<XprType,BlockRows,BlockCols, InnerPanel,true>
 330:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 331:Eigen/src/Core/Block.h **** {
 332:Eigen/src/Core/Block.h ****     typedef Block<XprType, BlockRows, BlockCols, InnerPanel> BlockType;
 333:Eigen/src/Core/Block.h ****     typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
 334:Eigen/src/Core/Block.h ****     enum {
 335:Eigen/src/Core/Block.h ****       XprTypeIsRowMajor = (int(traits<XprType>::Flags)&RowMajorBit) != 0
 336:Eigen/src/Core/Block.h ****     };
 337:Eigen/src/Core/Block.h ****   public:
 338:Eigen/src/Core/Block.h **** 
 339:Eigen/src/Core/Block.h ****     typedef MapBase<BlockType> Base;
 340:Eigen/src/Core/Block.h ****     EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
 341:Eigen/src/Core/Block.h ****     EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
 342:Eigen/src/Core/Block.h **** 
 343:Eigen/src/Core/Block.h ****     /** Column or Row constructor
 344:Eigen/src/Core/Block.h ****       */
 345:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 346:Eigen/src/Core/Block.h ****     inline BlockImpl_dense(XprType& xpr, Index i)
 1286              		.loc 20 346 12 view .LVU337
 1287              	.LBB2723:
 1288              	.LBB2724:
 1289              	.LBB2725:
 1290              	.LBI2725:
 255:Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 1291              		.loc 9 255 57 view .LVU338
 1292              	.LBB2726:
 1293              	.LBI2726:
 1294              		.loc 12 215 32 view .LVU339
 1295              		.loc 12 215 32 is_stmt 0 view .LVU340
 1296              	.LBE2726:
 1297              	.LBE2725:
 1298              	.LBB2727:
 1299              	.LBI2727:
 292:Eigen/src/Core/Matrix.h ****     {
 293:Eigen/src/Core/Matrix.h ****       Base::_check_template_params();
 294:Eigen/src/Core/Matrix.h ****       Base::template _init1<T>(x);
 295:Eigen/src/Core/Matrix.h ****     }
 296:Eigen/src/Core/Matrix.h **** 
 297:Eigen/src/Core/Matrix.h ****     template<typename T0, typename T1>
 298:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 299:Eigen/src/Core/Matrix.h ****     EIGEN_STRONG_INLINE Matrix(const T0& x, const T1& y)
 300:Eigen/src/Core/Matrix.h ****     {
 301:Eigen/src/Core/Matrix.h ****       Base::_check_template_params();
 302:Eigen/src/Core/Matrix.h ****       Base::template _init2<T0,T1>(x, y);
 303:Eigen/src/Core/Matrix.h ****     }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 158


 304:Eigen/src/Core/Matrix.h ****     #else
 305:Eigen/src/Core/Matrix.h ****     /** \brief Constructs a fixed-sized matrix initialized with coefficients starting at \a data */
 306:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 307:Eigen/src/Core/Matrix.h ****     explicit Matrix(const Scalar *data);
 308:Eigen/src/Core/Matrix.h **** 
 309:Eigen/src/Core/Matrix.h ****     /** \brief Constructs a vector or row-vector with given dimension. \only_for_vectors
 310:Eigen/src/Core/Matrix.h ****       *
 311:Eigen/src/Core/Matrix.h ****       * This is useful for dynamic-size vectors. For fixed-size vectors,
 312:Eigen/src/Core/Matrix.h ****       * it is redundant to pass these parameters, so one should use the default constructor
 313:Eigen/src/Core/Matrix.h ****       * Matrix() instead.
 314:Eigen/src/Core/Matrix.h ****       * 
 315:Eigen/src/Core/Matrix.h ****       * \warning This constructor is disabled for fixed-size \c 1x1 matrices. For instance,
 316:Eigen/src/Core/Matrix.h ****       * calling Matrix<double,1,1>(1) will call the initialization constructor: Matrix(const Scalar
 317:Eigen/src/Core/Matrix.h ****       * For fixed-size \c 1x1 matrices it is therefore recommended to use the default
 318:Eigen/src/Core/Matrix.h ****       * constructor Matrix() instead, especially when using one of the non standard
 319:Eigen/src/Core/Matrix.h ****       * \c EIGEN_INITIALIZE_MATRICES_BY_{ZERO,\c NAN} macros (see \ref TopicPreprocessorDirectives)
 320:Eigen/src/Core/Matrix.h ****       */
 321:Eigen/src/Core/Matrix.h ****     EIGEN_STRONG_INLINE explicit Matrix(Index dim);
 322:Eigen/src/Core/Matrix.h ****     /** \brief Constructs an initialized 1x1 matrix with the given coefficient */
 323:Eigen/src/Core/Matrix.h ****     Matrix(const Scalar& x);
 324:Eigen/src/Core/Matrix.h ****     /** \brief Constructs an uninitialized matrix with \a rows rows and \a cols columns.
 325:Eigen/src/Core/Matrix.h ****       *
 326:Eigen/src/Core/Matrix.h ****       * This is useful for dynamic-size matrices. For fixed-size matrices,
 327:Eigen/src/Core/Matrix.h ****       * it is redundant to pass these parameters, so one should use the default constructor
 328:Eigen/src/Core/Matrix.h ****       * Matrix() instead.
 329:Eigen/src/Core/Matrix.h ****       * 
 330:Eigen/src/Core/Matrix.h ****       * \warning This constructor is disabled for fixed-size \c 1x2 and \c 2x1 vectors. For instanc
 331:Eigen/src/Core/Matrix.h ****       * calling Matrix2f(2,1) will call the initialization constructor: Matrix(const Scalar& x, con
 332:Eigen/src/Core/Matrix.h ****       * For fixed-size \c 1x2 or \c 2x1 vectors it is therefore recommended to use the default
 333:Eigen/src/Core/Matrix.h ****       * constructor Matrix() instead, especially when using one of the non standard
 334:Eigen/src/Core/Matrix.h ****       * \c EIGEN_INITIALIZE_MATRICES_BY_{ZERO,\c NAN} macros (see \ref TopicPreprocessorDirectives)
 335:Eigen/src/Core/Matrix.h ****       */
 336:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 337:Eigen/src/Core/Matrix.h ****     Matrix(Index rows, Index cols);
 338:Eigen/src/Core/Matrix.h ****     
 339:Eigen/src/Core/Matrix.h ****     /** \brief Constructs an initialized 2D vector with given coefficients */
 340:Eigen/src/Core/Matrix.h ****     Matrix(const Scalar& x, const Scalar& y);
 341:Eigen/src/Core/Matrix.h ****     #endif
 342:Eigen/src/Core/Matrix.h **** 
 343:Eigen/src/Core/Matrix.h ****     /** \brief Constructs an initialized 3D vector with given coefficients */
 344:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 345:Eigen/src/Core/Matrix.h ****     EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
 346:Eigen/src/Core/Matrix.h ****     {
 347:Eigen/src/Core/Matrix.h ****       Base::_check_template_params();
 348:Eigen/src/Core/Matrix.h ****       EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
 349:Eigen/src/Core/Matrix.h ****       m_storage.data()[0] = x;
 350:Eigen/src/Core/Matrix.h ****       m_storage.data()[1] = y;
 351:Eigen/src/Core/Matrix.h ****       m_storage.data()[2] = z;
 352:Eigen/src/Core/Matrix.h ****     }
 353:Eigen/src/Core/Matrix.h ****     /** \brief Constructs an initialized 4D vector with given coefficients */
 354:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 355:Eigen/src/Core/Matrix.h ****     EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
 356:Eigen/src/Core/Matrix.h ****     {
 357:Eigen/src/Core/Matrix.h ****       Base::_check_template_params();
 358:Eigen/src/Core/Matrix.h ****       EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
 359:Eigen/src/Core/Matrix.h ****       m_storage.data()[0] = x;
 360:Eigen/src/Core/Matrix.h ****       m_storage.data()[1] = y;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 159


 361:Eigen/src/Core/Matrix.h ****       m_storage.data()[2] = z;
 362:Eigen/src/Core/Matrix.h ****       m_storage.data()[3] = w;
 363:Eigen/src/Core/Matrix.h ****     }
 364:Eigen/src/Core/Matrix.h **** 
 365:Eigen/src/Core/Matrix.h **** 
 366:Eigen/src/Core/Matrix.h ****     /** \brief Copy constructor */
 367:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 368:Eigen/src/Core/Matrix.h ****     EIGEN_STRONG_INLINE Matrix(const Matrix& other) : Base(other)
 369:Eigen/src/Core/Matrix.h ****     { }
 370:Eigen/src/Core/Matrix.h **** 
 371:Eigen/src/Core/Matrix.h ****     /** \brief Copy constructor for generic expressions.
 372:Eigen/src/Core/Matrix.h ****       * \sa MatrixBase::operator=(const EigenBase<OtherDerived>&)
 373:Eigen/src/Core/Matrix.h ****       */
 374:Eigen/src/Core/Matrix.h ****     template<typename OtherDerived>
 375:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC
 376:Eigen/src/Core/Matrix.h ****     EIGEN_STRONG_INLINE Matrix(const EigenBase<OtherDerived> &other)
 377:Eigen/src/Core/Matrix.h ****       : Base(other.derived())
 378:Eigen/src/Core/Matrix.h ****     { }
 379:Eigen/src/Core/Matrix.h **** 
 380:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC inline Index innerStride() const { return 1; }
 1300              		.loc 11 380 36 is_stmt 1 view .LVU341
 1301              		.loc 11 380 36 is_stmt 0 view .LVU342
 1302              	.LBE2727:
 1303              	.LBB2728:
 1304              	.LBI2728:
 153:Eigen/src/Core/PlainObjectBase.h **** 
 1305              		.loc 9 153 31 is_stmt 1 view .LVU343
 153:Eigen/src/Core/PlainObjectBase.h **** 
 1306              		.loc 9 153 31 is_stmt 0 view .LVU344
 1307              	.LBE2728:
 1308              	.LBB2729:
 1309              	.LBI2729:
 1310              		.file 21 "Eigen/src/Core/MapBase.h"
   1:Eigen/src/Core/MapBase.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/MapBase.h **** // for linear algebra.
   3:Eigen/src/Core/MapBase.h **** //
   4:Eigen/src/Core/MapBase.h **** // Copyright (C) 2007-2010 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:Eigen/src/Core/MapBase.h **** // Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:Eigen/src/Core/MapBase.h **** //
   7:Eigen/src/Core/MapBase.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/MapBase.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/MapBase.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:Eigen/src/Core/MapBase.h **** 
  11:Eigen/src/Core/MapBase.h **** #ifndef EIGEN_MAPBASE_H
  12:Eigen/src/Core/MapBase.h **** #define EIGEN_MAPBASE_H
  13:Eigen/src/Core/MapBase.h **** 
  14:Eigen/src/Core/MapBase.h **** #define EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived) \
  15:Eigen/src/Core/MapBase.h ****       EIGEN_STATIC_ASSERT((int(internal::evaluator<Derived>::Flags) & LinearAccessBit) || Derived::
  16:Eigen/src/Core/MapBase.h ****                           YOU_ARE_TRYING_TO_USE_AN_INDEX_BASED_ACCESSOR_ON_AN_EXPRESSION_THAT_DOES_
  17:Eigen/src/Core/MapBase.h **** 
  18:Eigen/src/Core/MapBase.h **** namespace Eigen { 
  19:Eigen/src/Core/MapBase.h **** 
  20:Eigen/src/Core/MapBase.h **** /** \ingroup Core_Module
  21:Eigen/src/Core/MapBase.h ****   *
  22:Eigen/src/Core/MapBase.h ****   * \brief Base class for dense Map and Block expression with direct access
  23:Eigen/src/Core/MapBase.h ****   *
  24:Eigen/src/Core/MapBase.h ****   * This base class provides the const low-level accessors (e.g. coeff, coeffRef) of dense
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 160


  25:Eigen/src/Core/MapBase.h ****   * Map and Block objects with direct access.
  26:Eigen/src/Core/MapBase.h ****   * Typical users do not have to directly deal with this class.
  27:Eigen/src/Core/MapBase.h ****   *
  28:Eigen/src/Core/MapBase.h ****   * This class can be extended by through the macro plugin \c EIGEN_MAPBASE_PLUGIN.
  29:Eigen/src/Core/MapBase.h ****   * See \link TopicCustomizing_Plugins customizing Eigen \endlink for details.
  30:Eigen/src/Core/MapBase.h ****   *
  31:Eigen/src/Core/MapBase.h ****   * The \c Derived class has to provide the following two methods describing the memory layout:
  32:Eigen/src/Core/MapBase.h ****   *  \code Index innerStride() const; \endcode
  33:Eigen/src/Core/MapBase.h ****   *  \code Index outerStride() const; \endcode
  34:Eigen/src/Core/MapBase.h ****   *
  35:Eigen/src/Core/MapBase.h ****   * \sa class Map, class Block
  36:Eigen/src/Core/MapBase.h ****   */
  37:Eigen/src/Core/MapBase.h **** template<typename Derived> class MapBase<Derived, ReadOnlyAccessors>
  38:Eigen/src/Core/MapBase.h ****   : public internal::dense_xpr_base<Derived>::type
  39:Eigen/src/Core/MapBase.h **** {
  40:Eigen/src/Core/MapBase.h ****   public:
  41:Eigen/src/Core/MapBase.h **** 
  42:Eigen/src/Core/MapBase.h ****     typedef typename internal::dense_xpr_base<Derived>::type Base;
  43:Eigen/src/Core/MapBase.h ****     enum {
  44:Eigen/src/Core/MapBase.h ****       RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,
  45:Eigen/src/Core/MapBase.h ****       ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,
  46:Eigen/src/Core/MapBase.h ****       InnerStrideAtCompileTime = internal::traits<Derived>::InnerStrideAtCompileTime,
  47:Eigen/src/Core/MapBase.h ****       SizeAtCompileTime = Base::SizeAtCompileTime
  48:Eigen/src/Core/MapBase.h ****     };
  49:Eigen/src/Core/MapBase.h **** 
  50:Eigen/src/Core/MapBase.h ****     typedef typename internal::traits<Derived>::StorageKind StorageKind;
  51:Eigen/src/Core/MapBase.h ****     typedef typename internal::traits<Derived>::Scalar Scalar;
  52:Eigen/src/Core/MapBase.h ****     typedef typename internal::packet_traits<Scalar>::type PacketScalar;
  53:Eigen/src/Core/MapBase.h ****     typedef typename NumTraits<Scalar>::Real RealScalar;
  54:Eigen/src/Core/MapBase.h ****     typedef typename internal::conditional<
  55:Eigen/src/Core/MapBase.h ****                          bool(internal::is_lvalue<Derived>::value),
  56:Eigen/src/Core/MapBase.h ****                          Scalar *,
  57:Eigen/src/Core/MapBase.h ****                          const Scalar *>::type
  58:Eigen/src/Core/MapBase.h ****                      PointerType;
  59:Eigen/src/Core/MapBase.h **** 
  60:Eigen/src/Core/MapBase.h ****     using Base::derived;
  61:Eigen/src/Core/MapBase.h **** //    using Base::RowsAtCompileTime;
  62:Eigen/src/Core/MapBase.h **** //    using Base::ColsAtCompileTime;
  63:Eigen/src/Core/MapBase.h **** //    using Base::SizeAtCompileTime;
  64:Eigen/src/Core/MapBase.h ****     using Base::MaxRowsAtCompileTime;
  65:Eigen/src/Core/MapBase.h ****     using Base::MaxColsAtCompileTime;
  66:Eigen/src/Core/MapBase.h ****     using Base::MaxSizeAtCompileTime;
  67:Eigen/src/Core/MapBase.h ****     using Base::IsVectorAtCompileTime;
  68:Eigen/src/Core/MapBase.h ****     using Base::Flags;
  69:Eigen/src/Core/MapBase.h ****     using Base::IsRowMajor;
  70:Eigen/src/Core/MapBase.h **** 
  71:Eigen/src/Core/MapBase.h ****     using Base::rows;
  72:Eigen/src/Core/MapBase.h ****     using Base::cols;
  73:Eigen/src/Core/MapBase.h ****     using Base::size;
  74:Eigen/src/Core/MapBase.h ****     using Base::coeff;
  75:Eigen/src/Core/MapBase.h ****     using Base::coeffRef;
  76:Eigen/src/Core/MapBase.h ****     using Base::lazyAssign;
  77:Eigen/src/Core/MapBase.h ****     using Base::eval;
  78:Eigen/src/Core/MapBase.h **** 
  79:Eigen/src/Core/MapBase.h ****     using Base::innerStride;
  80:Eigen/src/Core/MapBase.h ****     using Base::outerStride;
  81:Eigen/src/Core/MapBase.h ****     using Base::rowStride;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 161


  82:Eigen/src/Core/MapBase.h ****     using Base::colStride;
  83:Eigen/src/Core/MapBase.h **** 
  84:Eigen/src/Core/MapBase.h ****     // bug 217 - compile error on ICC 11.1
  85:Eigen/src/Core/MapBase.h ****     using Base::operator=;
  86:Eigen/src/Core/MapBase.h **** 
  87:Eigen/src/Core/MapBase.h ****     typedef typename Base::CoeffReturnType CoeffReturnType;
  88:Eigen/src/Core/MapBase.h **** 
  89:Eigen/src/Core/MapBase.h ****     /** \copydoc DenseBase::rows() */
  90:Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC inline Index rows() const { return m_rows.value(); }
  91:Eigen/src/Core/MapBase.h ****     /** \copydoc DenseBase::cols() */
  92:Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC inline Index cols() const { return m_cols.value(); }
  93:Eigen/src/Core/MapBase.h **** 
  94:Eigen/src/Core/MapBase.h ****     /** Returns a pointer to the first coefficient of the matrix or vector.
  95:Eigen/src/Core/MapBase.h ****       *
  96:Eigen/src/Core/MapBase.h ****       * \note When addressing this data, make sure to honor the strides returned by innerStride() a
  97:Eigen/src/Core/MapBase.h ****       *
  98:Eigen/src/Core/MapBase.h ****       * \sa innerStride(), outerStride()
  99:Eigen/src/Core/MapBase.h ****       */
 100:Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 101:Eigen/src/Core/MapBase.h **** 
 102:Eigen/src/Core/MapBase.h ****     /** \copydoc PlainObjectBase::coeff(Index,Index) const */
 103:Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 104:Eigen/src/Core/MapBase.h ****     inline const Scalar& coeff(Index rowId, Index colId) const
 105:Eigen/src/Core/MapBase.h ****     {
 106:Eigen/src/Core/MapBase.h ****       return m_data[colId * colStride() + rowId * rowStride()];
 107:Eigen/src/Core/MapBase.h ****     }
 108:Eigen/src/Core/MapBase.h **** 
 109:Eigen/src/Core/MapBase.h ****     /** \copydoc PlainObjectBase::coeff(Index) const */
 110:Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 111:Eigen/src/Core/MapBase.h ****     inline const Scalar& coeff(Index index) const
 112:Eigen/src/Core/MapBase.h ****     {
 113:Eigen/src/Core/MapBase.h ****       EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived)
 114:Eigen/src/Core/MapBase.h ****       return m_data[index * innerStride()];
 115:Eigen/src/Core/MapBase.h ****     }
 116:Eigen/src/Core/MapBase.h **** 
 117:Eigen/src/Core/MapBase.h ****     /** \copydoc PlainObjectBase::coeffRef(Index,Index) const */
 118:Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 119:Eigen/src/Core/MapBase.h ****     inline const Scalar& coeffRef(Index rowId, Index colId) const
 120:Eigen/src/Core/MapBase.h ****     {
 121:Eigen/src/Core/MapBase.h ****       return this->m_data[colId * colStride() + rowId * rowStride()];
 122:Eigen/src/Core/MapBase.h ****     }
 123:Eigen/src/Core/MapBase.h **** 
 124:Eigen/src/Core/MapBase.h ****     /** \copydoc PlainObjectBase::coeffRef(Index) const */
 125:Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 126:Eigen/src/Core/MapBase.h ****     inline const Scalar& coeffRef(Index index) const
 127:Eigen/src/Core/MapBase.h ****     {
 128:Eigen/src/Core/MapBase.h ****       EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived)
 129:Eigen/src/Core/MapBase.h ****       return this->m_data[index * innerStride()];
 130:Eigen/src/Core/MapBase.h ****     }
 131:Eigen/src/Core/MapBase.h **** 
 132:Eigen/src/Core/MapBase.h ****     /** \internal */
 133:Eigen/src/Core/MapBase.h ****     template<int LoadMode>
 134:Eigen/src/Core/MapBase.h ****     inline PacketScalar packet(Index rowId, Index colId) const
 135:Eigen/src/Core/MapBase.h ****     {
 136:Eigen/src/Core/MapBase.h ****       return internal::ploadt<PacketScalar, LoadMode>
 137:Eigen/src/Core/MapBase.h ****                (m_data + (colId * colStride() + rowId * rowStride()));
 138:Eigen/src/Core/MapBase.h ****     }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 162


 139:Eigen/src/Core/MapBase.h **** 
 140:Eigen/src/Core/MapBase.h ****     /** \internal */
 141:Eigen/src/Core/MapBase.h ****     template<int LoadMode>
 142:Eigen/src/Core/MapBase.h ****     inline PacketScalar packet(Index index) const
 143:Eigen/src/Core/MapBase.h ****     {
 144:Eigen/src/Core/MapBase.h ****       EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived)
 145:Eigen/src/Core/MapBase.h ****       return internal::ploadt<PacketScalar, LoadMode>(m_data + index * innerStride());
 146:Eigen/src/Core/MapBase.h ****     }
 147:Eigen/src/Core/MapBase.h **** 
 148:Eigen/src/Core/MapBase.h ****     /** \internal Constructor for fixed size matrices or vectors */
 149:Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 150:Eigen/src/Core/MapBase.h ****     explicit inline MapBase(PointerType dataPtr) : m_data(dataPtr), m_rows(RowsAtCompileTime), m_co
 151:Eigen/src/Core/MapBase.h ****     {
 152:Eigen/src/Core/MapBase.h ****       EIGEN_STATIC_ASSERT_FIXED_SIZE(Derived)
 153:Eigen/src/Core/MapBase.h ****       checkSanity<Derived>();
 154:Eigen/src/Core/MapBase.h ****     }
 155:Eigen/src/Core/MapBase.h **** 
 156:Eigen/src/Core/MapBase.h ****     /** \internal Constructor for dynamically sized vectors */
 157:Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 158:Eigen/src/Core/MapBase.h ****     inline MapBase(PointerType dataPtr, Index vecSize)
 159:Eigen/src/Core/MapBase.h ****             : m_data(dataPtr),
 160:Eigen/src/Core/MapBase.h ****               m_rows(RowsAtCompileTime == Dynamic ? vecSize : Index(RowsAtCompileTime)),
 161:Eigen/src/Core/MapBase.h ****               m_cols(ColsAtCompileTime == Dynamic ? vecSize : Index(ColsAtCompileTime))
 162:Eigen/src/Core/MapBase.h ****     {
 163:Eigen/src/Core/MapBase.h ****       EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)
 164:Eigen/src/Core/MapBase.h ****       eigen_assert(vecSize >= 0);
 165:Eigen/src/Core/MapBase.h ****       eigen_assert(dataPtr == 0 || SizeAtCompileTime == Dynamic || SizeAtCompileTime == vecSize);
 166:Eigen/src/Core/MapBase.h ****       checkSanity<Derived>();
 167:Eigen/src/Core/MapBase.h ****     }
 168:Eigen/src/Core/MapBase.h **** 
 169:Eigen/src/Core/MapBase.h ****     /** \internal Constructor for dynamically sized matrices */
 170:Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 171:Eigen/src/Core/MapBase.h ****     inline MapBase(PointerType dataPtr, Index rows, Index cols)
 1311              		.loc 21 171 12 is_stmt 1 view .LVU345
 1312              	.LBB2730:
 1313              	.LBB2731:
 1314              	.LBI2731:
 1315              		.loc 7 467 23 view .LVU346
 1316              	.LBB2732:
 1317              	.LBI2732:
 1318              		.loc 8 591 23 view .LVU347
 1319              		.loc 8 591 23 is_stmt 0 view .LVU348
 1320              	.LBE2732:
 1321              	.LBE2731:
 172:Eigen/src/Core/MapBase.h ****             : m_data(dataPtr), m_rows(rows), m_cols(cols)
 1322              		.loc 21 172 57 view .LVU349
 1323 0034 2C93     		str	r3, [sp, #176]
 1324              	.LVL68:
 1325              	.LBB2733:
 1326              	.LBI2733:
 1327              		.loc 18 110 52 is_stmt 1 view .LVU350
 1328              		.loc 18 110 52 is_stmt 0 view .LVU351
 1329              	.LBE2733:
 1330              	.LBB2734:
 1331              	.LBI2734:
 1332              		.loc 18 110 52 is_stmt 1 view .LVU352
 1333              		.loc 18 110 52 is_stmt 0 view .LVU353
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 163


 1334              	.LBE2734:
 1335              	.LBB2735:
 1336              	.LBI2735:
 173:Eigen/src/Core/MapBase.h ****     {
 174:Eigen/src/Core/MapBase.h ****       eigen_assert( (dataPtr == 0)
 175:Eigen/src/Core/MapBase.h ****               || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
 176:Eigen/src/Core/MapBase.h ****                   && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));
 177:Eigen/src/Core/MapBase.h ****       checkSanity<Derived>();
 178:Eigen/src/Core/MapBase.h ****     }
 179:Eigen/src/Core/MapBase.h **** 
 180:Eigen/src/Core/MapBase.h ****     #ifdef EIGEN_MAPBASE_PLUGIN
 181:Eigen/src/Core/MapBase.h ****     #include EIGEN_MAPBASE_PLUGIN
 182:Eigen/src/Core/MapBase.h ****     #endif
 183:Eigen/src/Core/MapBase.h **** 
 184:Eigen/src/Core/MapBase.h ****   protected:
 185:Eigen/src/Core/MapBase.h **** 
 186:Eigen/src/Core/MapBase.h ****     template<typename T>
 187:Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 188:Eigen/src/Core/MapBase.h ****     void checkSanity(typename internal::enable_if<(internal::traits<T>::Alignment>0),void*>::type =
 189:Eigen/src/Core/MapBase.h ****     {
 190:Eigen/src/Core/MapBase.h **** #if EIGEN_MAX_ALIGN_BYTES>0
 191:Eigen/src/Core/MapBase.h ****       // innerStride() is not set yet when this function is called, so we optimistically assume the
 192:Eigen/src/Core/MapBase.h ****       const Index minInnerStride = InnerStrideAtCompileTime == Dynamic ? 1 : Index(InnerStrideAtCom
 193:Eigen/src/Core/MapBase.h ****       EIGEN_ONLY_USED_FOR_DEBUG(minInnerStride);
 194:Eigen/src/Core/MapBase.h ****       eigen_assert((   ((internal::UIntPtr(m_data) % internal::traits<Derived>::Alignment) == 0)
 195:Eigen/src/Core/MapBase.h ****                     || (cols() * rows() * minInnerStride * sizeof(Scalar)) < internal::traits<Deriv
 196:Eigen/src/Core/MapBase.h **** #endif
 197:Eigen/src/Core/MapBase.h ****     }
 198:Eigen/src/Core/MapBase.h **** 
 199:Eigen/src/Core/MapBase.h ****     template<typename T>
 200:Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 201:Eigen/src/Core/MapBase.h ****     void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 
 1337              		.loc 21 201 10 is_stmt 1 view .LVU354
 1338              		.loc 21 201 10 is_stmt 0 view .LVU355
 1339              	.LBE2735:
 1340              	.LBE2730:
 1341              	.LBE2729:
 347:Eigen/src/Core/Block.h ****       : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!
 348:Eigen/src/Core/Block.h ****                                 || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( 
 349:Eigen/src/Core/Block.h ****              BlockRows==1 ? 1 : xpr.rows(),
 350:Eigen/src/Core/Block.h ****              BlockCols==1 ? 1 : xpr.cols()),
 351:Eigen/src/Core/Block.h ****         m_xpr(xpr),
 352:Eigen/src/Core/Block.h ****         m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
 353:Eigen/src/Core/Block.h ****         m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 1342              		.loc 20 353 86 view .LVU356
 1343 0036 2E93     		str	r3, [sp, #184]
 1344              	.LVL69:
 1345              	.LBB2736:
 1346              	.LBI2736:
 111:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 112:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void setValue(T) {}
 113:Eigen/src/Core/util/XprHelper.h **** };
 114:Eigen/src/Core/util/XprHelper.h **** 
 115:Eigen/src/Core/util/XprHelper.h **** template<typename T> class variable_if_dynamic<T, Dynamic>
 116:Eigen/src/Core/util/XprHelper.h **** {
 117:Eigen/src/Core/util/XprHelper.h ****     T m_value;
 118:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC variable_if_dynamic() { eigen_assert(false); }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 164


 119:Eigen/src/Core/util/XprHelper.h ****   public:
 120:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value) : m_value(value) {}
 1347              		.loc 18 120 52 is_stmt 1 view .LVU357
 1348              	.LBB2737:
 1349              	.LBB2738:
 1350              		.loc 18 120 96 is_stmt 0 view .LVU358
 1351 0038 0021     		movs	r1, #0
 1352              	.LVL70:
 1353              		.loc 18 120 96 view .LVU359
 1354 003a 2F91     		str	r1, [sp, #188]
 1355              	.LVL71:
 1356              		.loc 18 120 96 view .LVU360
 1357              	.LBE2738:
 1358              	.LBE2737:
 1359              	.LBE2736:
 1360              	.LBB2739:
 1361              	.LBI2739:
 1362              		.loc 18 120 52 is_stmt 1 view .LVU361
 1363              	.LBB2740:
 1364              	.LBB2741:
 1365              		.loc 18 120 96 is_stmt 0 view .LVU362
 1366 003c 3091     		str	r1, [sp, #192]
 1367              	.LVL72:
 1368              		.loc 18 120 96 view .LVU363
 1369              	.LBE2741:
 1370              	.LBE2740:
 1371              	.LBE2739:
 1372              	.LBB2742:
 1373              	.LBI2742:
 354:Eigen/src/Core/Block.h ****     {
 355:Eigen/src/Core/Block.h ****       init();
 356:Eigen/src/Core/Block.h ****     }
 357:Eigen/src/Core/Block.h **** 
 358:Eigen/src/Core/Block.h ****     /** Fixed-size constructor
 359:Eigen/src/Core/Block.h ****       */
 360:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 361:Eigen/src/Core/Block.h ****     inline BlockImpl_dense(XprType& xpr, Index startRow, Index startCol)
 362:Eigen/src/Core/Block.h ****       : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()
 363:Eigen/src/Core/Block.h ****         m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
 364:Eigen/src/Core/Block.h ****     {
 365:Eigen/src/Core/Block.h ****       init();
 366:Eigen/src/Core/Block.h ****     }
 367:Eigen/src/Core/Block.h **** 
 368:Eigen/src/Core/Block.h ****     /** Dynamic-size constructor
 369:Eigen/src/Core/Block.h ****       */
 370:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 371:Eigen/src/Core/Block.h ****     inline BlockImpl_dense(XprType& xpr,
 372:Eigen/src/Core/Block.h ****           Index startRow, Index startCol,
 373:Eigen/src/Core/Block.h ****           Index blockRows, Index blockCols)
 374:Eigen/src/Core/Block.h ****       : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()
 375:Eigen/src/Core/Block.h ****         m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
 376:Eigen/src/Core/Block.h ****     {
 377:Eigen/src/Core/Block.h ****       init();
 378:Eigen/src/Core/Block.h ****     }
 379:Eigen/src/Core/Block.h **** 
 380:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 381:Eigen/src/Core/Block.h ****     const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 165


 382:Eigen/src/Core/Block.h ****     { 
 383:Eigen/src/Core/Block.h ****       return m_xpr; 
 384:Eigen/src/Core/Block.h ****     }
 385:Eigen/src/Core/Block.h **** 
 386:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 387:Eigen/src/Core/Block.h ****     XprType& nestedExpression() { return m_xpr; }
 388:Eigen/src/Core/Block.h ****       
 389:Eigen/src/Core/Block.h ****     /** \sa MapBase::innerStride() */
 390:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 391:Eigen/src/Core/Block.h ****     inline Index innerStride() const
 392:Eigen/src/Core/Block.h ****     {
 393:Eigen/src/Core/Block.h ****       return internal::traits<BlockType>::HasSameStorageOrderAsXprType
 394:Eigen/src/Core/Block.h ****              ? m_xpr.innerStride()
 395:Eigen/src/Core/Block.h ****              : m_xpr.outerStride();
 396:Eigen/src/Core/Block.h ****     }
 397:Eigen/src/Core/Block.h **** 
 398:Eigen/src/Core/Block.h ****     /** \sa MapBase::outerStride() */
 399:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 400:Eigen/src/Core/Block.h ****     inline Index outerStride() const
 401:Eigen/src/Core/Block.h ****     {
 402:Eigen/src/Core/Block.h ****       return m_outerStride;
 403:Eigen/src/Core/Block.h ****     }
 404:Eigen/src/Core/Block.h **** 
 405:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 406:Eigen/src/Core/Block.h ****     StorageIndex startRow() const
 407:Eigen/src/Core/Block.h ****     {
 408:Eigen/src/Core/Block.h ****       return m_startRow.value();
 409:Eigen/src/Core/Block.h ****     }
 410:Eigen/src/Core/Block.h **** 
 411:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 412:Eigen/src/Core/Block.h ****     StorageIndex startCol() const
 413:Eigen/src/Core/Block.h ****     {
 414:Eigen/src/Core/Block.h ****       return m_startCol.value();
 415:Eigen/src/Core/Block.h ****     }
 416:Eigen/src/Core/Block.h **** 
 417:Eigen/src/Core/Block.h ****   #ifndef __SUNPRO_CC
 418:Eigen/src/Core/Block.h ****   // FIXME sunstudio is not friendly with the above friend...
 419:Eigen/src/Core/Block.h ****   // META-FIXME there is no 'friend' keyword around here. Is this obsolete?
 420:Eigen/src/Core/Block.h ****   protected:
 421:Eigen/src/Core/Block.h ****   #endif
 422:Eigen/src/Core/Block.h **** 
 423:Eigen/src/Core/Block.h ****     #ifndef EIGEN_PARSED_BY_DOXYGEN
 424:Eigen/src/Core/Block.h ****     /** \internal used by allowAligned() */
 425:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 426:Eigen/src/Core/Block.h ****     inline BlockImpl_dense(XprType& xpr, const Scalar* data, Index blockRows, Index blockCols)
 427:Eigen/src/Core/Block.h ****       : Base(data, blockRows, blockCols), m_xpr(xpr)
 428:Eigen/src/Core/Block.h ****     {
 429:Eigen/src/Core/Block.h ****       init();
 430:Eigen/src/Core/Block.h ****     }
 431:Eigen/src/Core/Block.h ****     #endif
 432:Eigen/src/Core/Block.h **** 
 433:Eigen/src/Core/Block.h ****   protected:
 434:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC
 435:Eigen/src/Core/Block.h ****     void init()
 1374              		.loc 20 435 10 is_stmt 1 view .LVU364
 1375              	.LBB2743:
 436:Eigen/src/Core/Block.h ****     {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 166


 437:Eigen/src/Core/Block.h ****       m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 1376              		.loc 20 437 21 is_stmt 0 view .LVU365
 1377 003e 0120     		movs	r0, #1
 1378              	.LVL73:
 1379              		.loc 20 437 21 view .LVU366
 1380 0040 3190     		str	r0, [sp, #196]
 1381              	.LVL74:
 1382              		.loc 20 437 21 view .LVU367
 1383              	.LBE2743:
 1384              	.LBE2742:
 1385              	.LBE2724:
 1386              	.LBE2723:
 1387              	.LBE2722:
 1388              	.LBE2721:
 1389              	.LBE2720:
 1390              	.LBB2744:
 1391              	.LBI2744:
 151:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 1392              		.loc 9 151 31 is_stmt 1 view .LVU368
 151:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 1393              		.loc 9 151 31 is_stmt 0 view .LVU369
 1394              	.LBE2744:
 1395              	.LBE2719:
 1396              	.LBE2718:
 1397              	.LBE2717:
 1398              	.LBE2716:
 1399              	.LBB2745:
 1400              	.LBI2745:
 1401              		.file 22 "Eigen/src/Core/Transpose.h"
   1:Eigen/src/Core/Transpose.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/Transpose.h **** // for linear algebra.
   3:Eigen/src/Core/Transpose.h **** //
   4:Eigen/src/Core/Transpose.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:Eigen/src/Core/Transpose.h **** // Copyright (C) 2009-2014 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:Eigen/src/Core/Transpose.h **** //
   7:Eigen/src/Core/Transpose.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/Transpose.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/Transpose.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:Eigen/src/Core/Transpose.h **** 
  11:Eigen/src/Core/Transpose.h **** #ifndef EIGEN_TRANSPOSE_H
  12:Eigen/src/Core/Transpose.h **** #define EIGEN_TRANSPOSE_H
  13:Eigen/src/Core/Transpose.h **** 
  14:Eigen/src/Core/Transpose.h **** namespace Eigen { 
  15:Eigen/src/Core/Transpose.h **** 
  16:Eigen/src/Core/Transpose.h **** namespace internal {
  17:Eigen/src/Core/Transpose.h **** template<typename MatrixType>
  18:Eigen/src/Core/Transpose.h **** struct traits<Transpose<MatrixType> > : public traits<MatrixType>
  19:Eigen/src/Core/Transpose.h **** {
  20:Eigen/src/Core/Transpose.h ****   typedef typename ref_selector<MatrixType>::type MatrixTypeNested;
  21:Eigen/src/Core/Transpose.h ****   typedef typename remove_reference<MatrixTypeNested>::type MatrixTypeNestedPlain;
  22:Eigen/src/Core/Transpose.h ****   enum {
  23:Eigen/src/Core/Transpose.h ****     RowsAtCompileTime = MatrixType::ColsAtCompileTime,
  24:Eigen/src/Core/Transpose.h ****     ColsAtCompileTime = MatrixType::RowsAtCompileTime,
  25:Eigen/src/Core/Transpose.h ****     MaxRowsAtCompileTime = MatrixType::MaxColsAtCompileTime,
  26:Eigen/src/Core/Transpose.h ****     MaxColsAtCompileTime = MatrixType::MaxRowsAtCompileTime,
  27:Eigen/src/Core/Transpose.h ****     FlagsLvalueBit = is_lvalue<MatrixType>::value ? LvalueBit : 0,
  28:Eigen/src/Core/Transpose.h ****     Flags0 = traits<MatrixTypeNestedPlain>::Flags & ~(LvalueBit | NestByRefBit),
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 167


  29:Eigen/src/Core/Transpose.h ****     Flags1 = Flags0 | FlagsLvalueBit,
  30:Eigen/src/Core/Transpose.h ****     Flags = Flags1 ^ RowMajorBit,
  31:Eigen/src/Core/Transpose.h ****     InnerStrideAtCompileTime = inner_stride_at_compile_time<MatrixType>::ret,
  32:Eigen/src/Core/Transpose.h ****     OuterStrideAtCompileTime = outer_stride_at_compile_time<MatrixType>::ret
  33:Eigen/src/Core/Transpose.h ****   };
  34:Eigen/src/Core/Transpose.h **** };
  35:Eigen/src/Core/Transpose.h **** }
  36:Eigen/src/Core/Transpose.h **** 
  37:Eigen/src/Core/Transpose.h **** template<typename MatrixType, typename StorageKind> class TransposeImpl;
  38:Eigen/src/Core/Transpose.h **** 
  39:Eigen/src/Core/Transpose.h **** /** \class Transpose
  40:Eigen/src/Core/Transpose.h ****   * \ingroup Core_Module
  41:Eigen/src/Core/Transpose.h ****   *
  42:Eigen/src/Core/Transpose.h ****   * \brief Expression of the transpose of a matrix
  43:Eigen/src/Core/Transpose.h ****   *
  44:Eigen/src/Core/Transpose.h ****   * \tparam MatrixType the type of the object of which we are taking the transpose
  45:Eigen/src/Core/Transpose.h ****   *
  46:Eigen/src/Core/Transpose.h ****   * This class represents an expression of the transpose of a matrix.
  47:Eigen/src/Core/Transpose.h ****   * It is the return type of MatrixBase::transpose() and MatrixBase::adjoint()
  48:Eigen/src/Core/Transpose.h ****   * and most of the time this is the only way it is used.
  49:Eigen/src/Core/Transpose.h ****   *
  50:Eigen/src/Core/Transpose.h ****   * \sa MatrixBase::transpose(), MatrixBase::adjoint()
  51:Eigen/src/Core/Transpose.h ****   */
  52:Eigen/src/Core/Transpose.h **** template<typename MatrixType> class Transpose
  53:Eigen/src/Core/Transpose.h ****   : public TransposeImpl<MatrixType,typename internal::traits<MatrixType>::StorageKind>
  54:Eigen/src/Core/Transpose.h **** {
  55:Eigen/src/Core/Transpose.h ****   public:
  56:Eigen/src/Core/Transpose.h **** 
  57:Eigen/src/Core/Transpose.h ****     typedef typename internal::ref_selector<MatrixType>::non_const_type MatrixTypeNested;
  58:Eigen/src/Core/Transpose.h **** 
  59:Eigen/src/Core/Transpose.h ****     typedef typename TransposeImpl<MatrixType,typename internal::traits<MatrixType>::StorageKind>::
  60:Eigen/src/Core/Transpose.h ****     EIGEN_GENERIC_PUBLIC_INTERFACE(Transpose)
  61:Eigen/src/Core/Transpose.h ****     typedef typename internal::remove_all<MatrixType>::type NestedExpression;
  62:Eigen/src/Core/Transpose.h **** 
  63:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC
  64:Eigen/src/Core/Transpose.h ****     explicit inline Transpose(MatrixType& matrix) : m_matrix(matrix) {}
  65:Eigen/src/Core/Transpose.h **** 
  66:Eigen/src/Core/Transpose.h ****     EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Transpose)
  67:Eigen/src/Core/Transpose.h **** 
  68:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC inline Index rows() const { return m_matrix.cols(); }
  69:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC inline Index cols() const { return m_matrix.rows(); }
  70:Eigen/src/Core/Transpose.h **** 
  71:Eigen/src/Core/Transpose.h ****     /** \returns the nested expression */
  72:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC
  73:Eigen/src/Core/Transpose.h ****     const typename internal::remove_all<MatrixTypeNested>::type&
  74:Eigen/src/Core/Transpose.h ****     nestedExpression() const { return m_matrix; }
  75:Eigen/src/Core/Transpose.h **** 
  76:Eigen/src/Core/Transpose.h ****     /** \returns the nested expression */
  77:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC
  78:Eigen/src/Core/Transpose.h ****     typename internal::remove_reference<MatrixTypeNested>::type&
  79:Eigen/src/Core/Transpose.h ****     nestedExpression() { return m_matrix; }
  80:Eigen/src/Core/Transpose.h **** 
  81:Eigen/src/Core/Transpose.h ****     /** \internal */
  82:Eigen/src/Core/Transpose.h ****     void resize(Index nrows, Index ncols) {
  83:Eigen/src/Core/Transpose.h ****       m_matrix.resize(ncols,nrows);
  84:Eigen/src/Core/Transpose.h ****     }
  85:Eigen/src/Core/Transpose.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 168


  86:Eigen/src/Core/Transpose.h ****   protected:
  87:Eigen/src/Core/Transpose.h ****     typename internal::ref_selector<MatrixType>::non_const_type m_matrix;
  88:Eigen/src/Core/Transpose.h **** };
  89:Eigen/src/Core/Transpose.h **** 
  90:Eigen/src/Core/Transpose.h **** namespace internal {
  91:Eigen/src/Core/Transpose.h **** 
  92:Eigen/src/Core/Transpose.h **** template<typename MatrixType, bool HasDirectAccess = has_direct_access<MatrixType>::ret>
  93:Eigen/src/Core/Transpose.h **** struct TransposeImpl_base
  94:Eigen/src/Core/Transpose.h **** {
  95:Eigen/src/Core/Transpose.h ****   typedef typename dense_xpr_base<Transpose<MatrixType> >::type type;
  96:Eigen/src/Core/Transpose.h **** };
  97:Eigen/src/Core/Transpose.h **** 
  98:Eigen/src/Core/Transpose.h **** template<typename MatrixType>
  99:Eigen/src/Core/Transpose.h **** struct TransposeImpl_base<MatrixType, false>
 100:Eigen/src/Core/Transpose.h **** {
 101:Eigen/src/Core/Transpose.h ****   typedef typename dense_xpr_base<Transpose<MatrixType> >::type type;
 102:Eigen/src/Core/Transpose.h **** };
 103:Eigen/src/Core/Transpose.h **** 
 104:Eigen/src/Core/Transpose.h **** } // end namespace internal
 105:Eigen/src/Core/Transpose.h **** 
 106:Eigen/src/Core/Transpose.h **** // Generic API dispatcher
 107:Eigen/src/Core/Transpose.h **** template<typename XprType, typename StorageKind>
 108:Eigen/src/Core/Transpose.h **** class TransposeImpl
 109:Eigen/src/Core/Transpose.h ****   : public internal::generic_xpr_base<Transpose<XprType> >::type
 110:Eigen/src/Core/Transpose.h **** {
 111:Eigen/src/Core/Transpose.h **** public:
 112:Eigen/src/Core/Transpose.h ****   typedef typename internal::generic_xpr_base<Transpose<XprType> >::type Base;
 113:Eigen/src/Core/Transpose.h **** };
 114:Eigen/src/Core/Transpose.h **** 
 115:Eigen/src/Core/Transpose.h **** template<typename MatrixType> class TransposeImpl<MatrixType,Dense>
 116:Eigen/src/Core/Transpose.h ****   : public internal::TransposeImpl_base<MatrixType>::type
 117:Eigen/src/Core/Transpose.h **** {
 118:Eigen/src/Core/Transpose.h ****   public:
 119:Eigen/src/Core/Transpose.h **** 
 120:Eigen/src/Core/Transpose.h ****     typedef typename internal::TransposeImpl_base<MatrixType>::type Base;
 121:Eigen/src/Core/Transpose.h ****     using Base::coeffRef;
 122:Eigen/src/Core/Transpose.h ****     EIGEN_DENSE_PUBLIC_INTERFACE(Transpose<MatrixType>)
 123:Eigen/src/Core/Transpose.h ****     EIGEN_INHERIT_ASSIGNMENT_OPERATORS(TransposeImpl)
 124:Eigen/src/Core/Transpose.h **** 
 125:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC inline Index innerStride() const { return derived().nestedExpression().innerS
 126:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC inline Index outerStride() const { return derived().nestedExpression().outerS
 127:Eigen/src/Core/Transpose.h **** 
 128:Eigen/src/Core/Transpose.h ****     typedef typename internal::conditional<
 129:Eigen/src/Core/Transpose.h ****                        internal::is_lvalue<MatrixType>::value,
 130:Eigen/src/Core/Transpose.h ****                        Scalar,
 131:Eigen/src/Core/Transpose.h ****                        const Scalar
 132:Eigen/src/Core/Transpose.h ****                      >::type ScalarWithConstIfNotLvalue;
 133:Eigen/src/Core/Transpose.h **** 
 134:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC inline ScalarWithConstIfNotLvalue* data() { return derived().nestedExpression
 135:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC inline const Scalar* data() const { return derived().nestedExpression().data(
 136:Eigen/src/Core/Transpose.h **** 
 137:Eigen/src/Core/Transpose.h ****     // FIXME: shall we keep the const version of coeffRef?
 138:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC
 139:Eigen/src/Core/Transpose.h ****     inline const Scalar& coeffRef(Index rowId, Index colId) const
 140:Eigen/src/Core/Transpose.h ****     {
 141:Eigen/src/Core/Transpose.h ****       return derived().nestedExpression().coeffRef(colId, rowId);
 142:Eigen/src/Core/Transpose.h ****     }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 169


 143:Eigen/src/Core/Transpose.h **** 
 144:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC
 145:Eigen/src/Core/Transpose.h ****     inline const Scalar& coeffRef(Index index) const
 146:Eigen/src/Core/Transpose.h ****     {
 147:Eigen/src/Core/Transpose.h ****       return derived().nestedExpression().coeffRef(index);
 148:Eigen/src/Core/Transpose.h ****     }
 149:Eigen/src/Core/Transpose.h **** };
 150:Eigen/src/Core/Transpose.h **** 
 151:Eigen/src/Core/Transpose.h **** /** \returns an expression of the transpose of *this.
 152:Eigen/src/Core/Transpose.h ****   *
 153:Eigen/src/Core/Transpose.h ****   * Example: \include MatrixBase_transpose.cpp
 154:Eigen/src/Core/Transpose.h ****   * Output: \verbinclude MatrixBase_transpose.out
 155:Eigen/src/Core/Transpose.h ****   *
 156:Eigen/src/Core/Transpose.h ****   * \warning If you want to replace a matrix by its own transpose, do \b NOT do this:
 157:Eigen/src/Core/Transpose.h ****   * \code
 158:Eigen/src/Core/Transpose.h ****   * m = m.transpose(); // bug!!! caused by aliasing effect
 159:Eigen/src/Core/Transpose.h ****   * \endcode
 160:Eigen/src/Core/Transpose.h ****   * Instead, use the transposeInPlace() method:
 161:Eigen/src/Core/Transpose.h ****   * \code
 162:Eigen/src/Core/Transpose.h ****   * m.transposeInPlace();
 163:Eigen/src/Core/Transpose.h ****   * \endcode
 164:Eigen/src/Core/Transpose.h ****   * which gives Eigen good opportunities for optimization, or alternatively you can also do:
 165:Eigen/src/Core/Transpose.h ****   * \code
 166:Eigen/src/Core/Transpose.h ****   * m = m.transpose().eval();
 167:Eigen/src/Core/Transpose.h ****   * \endcode
 168:Eigen/src/Core/Transpose.h ****   *
 169:Eigen/src/Core/Transpose.h ****   * \sa transposeInPlace(), adjoint() */
 170:Eigen/src/Core/Transpose.h **** template<typename Derived>
 171:Eigen/src/Core/Transpose.h **** inline Transpose<Derived>
 172:Eigen/src/Core/Transpose.h **** DenseBase<Derived>::transpose()
 173:Eigen/src/Core/Transpose.h **** {
 174:Eigen/src/Core/Transpose.h ****   return TransposeReturnType(derived());
 175:Eigen/src/Core/Transpose.h **** }
 176:Eigen/src/Core/Transpose.h **** 
 177:Eigen/src/Core/Transpose.h **** /** This is the const version of transpose().
 178:Eigen/src/Core/Transpose.h ****   *
 179:Eigen/src/Core/Transpose.h ****   * Make sure you read the warning for transpose() !
 180:Eigen/src/Core/Transpose.h ****   *
 181:Eigen/src/Core/Transpose.h ****   * \sa transposeInPlace(), adjoint() */
 182:Eigen/src/Core/Transpose.h **** template<typename Derived>
 183:Eigen/src/Core/Transpose.h **** inline typename DenseBase<Derived>::ConstTransposeReturnType
 184:Eigen/src/Core/Transpose.h **** DenseBase<Derived>::transpose() const
 1402              		.loc 22 184 1 is_stmt 1 view .LVU370
 1403              	.LBB2746:
 1404              	.LBI2746:
  64:Eigen/src/Core/Transpose.h **** 
 1405              		.loc 22 64 21 view .LVU371
 1406              	.LBB2747:
 1407              	.LBI2747:
 115:Eigen/src/Core/Transpose.h ****   : public internal::TransposeImpl_base<MatrixType>::type
 1408              		.loc 22 115 37 view .LVU372
 1409              	.LBB2748:
 1410              	.LBI2748:
 1411              		.loc 7 467 23 view .LVU373
 1412              	.LBB2749:
 1413              	.LBI2749:
 1414              		.loc 8 591 23 view .LVU374
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 170


 1415              		.loc 8 591 23 is_stmt 0 view .LVU375
 1416              	.LBE2749:
 1417              	.LBE2748:
 1418              	.LBE2747:
 1419              	.LBB2750:
 1420              	.LBI2750:
 103:Eigen/src/Core/Block.h ****   : public BlockImpl<XprType, BlockRows, BlockCols, InnerPanel, typename internal::traits<XprType>:
 1421              		.loc 20 103 81 is_stmt 1 view .LVU376
 1422              	.LBB2751:
 1423              	.LBI2751:
 154:Eigen/src/Core/Block.h ****   : public internal::BlockImpl_dense<XprType, BlockRows, BlockCols, InnerPanel>
 1424              		.loc 20 154 7 view .LVU377
 1425              	.LBB2752:
 1426              	.LBI2752:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 1427              		.loc 20 329 7 view .LVU378
 1428              	.LBB2753:
 1429              	.LBB2754:
 1430              	.LBI2754:
  37:Eigen/src/Core/MapBase.h ****   : public internal::dense_xpr_base<Derived>::type
 1431              		.loc 21 37 34 view .LVU379
 1432              	.LBB2755:
 1433 0042 3293     		str	r3, [sp, #200]
 1434              	.LVL75:
 1435              	.LBB2756:
 1436              	.LBI2756:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1437              		.loc 18 109 5 view .LVU380
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1438              		.loc 18 109 5 is_stmt 0 view .LVU381
 1439              	.LBE2756:
 1440              	.LBB2757:
 1441              	.LBI2757:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1442              		.loc 18 109 5 is_stmt 1 view .LVU382
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1443              		.loc 18 109 5 is_stmt 0 view .LVU383
 1444              	.LBE2757:
 1445              	.LBE2755:
 1446              	.LBE2754:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 1447              		.loc 20 329 7 view .LVU384
 1448 0044 3493     		str	r3, [sp, #208]
 1449 0046 3591     		str	r1, [sp, #212]
 1450 0048 3691     		str	r1, [sp, #216]
 1451 004a 3790     		str	r0, [sp, #220]
 1452              	.LVL76:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 1453              		.loc 20 329 7 view .LVU385
 1454              	.LBE2753:
 1455              	.LBE2752:
 1456              	.LBE2751:
 1457              	.LBE2750:
 1458              	.LBE2746:
 1459              	.LBE2745:
 1460              	.LBB2758:
 1461              	.LBI2758:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 171


 845:Eigen/src/Core/../plugins/BlockMethods.h **** {
 1462              		.loc 19 845 20 is_stmt 1 view .LVU386
 1463              	.LBB2759:
 1464              	.LBI2759:
 118:Eigen/src/Core/Block.h ****     {
 1465              		.loc 20 118 12 view .LVU387
 1466              	.LBB2760:
 1467              	.LBB2761:
 1468              	.LBB2762:
 1469              	.LBI2762:
 162:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC inline BlockImpl(XprType& xpr, Index startRow, Index startCol) : Impl(xpr, st
 1470              		.loc 20 162 30 view .LVU388
 1471              	.LBB2763:
 1472              	.LBB2764:
 1473              	.LBI2764:
 346:Eigen/src/Core/Block.h ****       : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!
 1474              		.loc 20 346 12 view .LVU389
 1475              	.LBB2765:
 1476              	.LBB2766:
 1477              	.LBB2767:
 1478              	.LBI2767:
 255:Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 1479              		.loc 9 255 57 view .LVU390
 1480              	.LBB2768:
 1481              	.LBI2768:
 1482              		.loc 12 215 32 view .LVU391
 1483              		.loc 12 215 32 is_stmt 0 view .LVU392
 1484              	.LBE2768:
 1485              	.LBE2767:
 1486              	.LBB2769:
 1487              	.LBI2769:
 381:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC inline Index outerStride() const { return this->innerSize(); }
 1488              		.loc 11 381 36 is_stmt 1 view .LVU393
 1489              		.loc 11 381 36 is_stmt 0 view .LVU394
 1490              	.LBE2769:
 1491              	.LBB2770:
 1492              	.LBI2770:
 151:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 1493              		.loc 9 151 31 is_stmt 1 view .LVU395
 151:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 1494              		.loc 9 151 31 is_stmt 0 view .LVU396
 1495              	.LBE2770:
 1496              	.LBB2771:
 1497              	.LBI2771:
 171:Eigen/src/Core/MapBase.h ****             : m_data(dataPtr), m_rows(rows), m_cols(cols)
 1498              		.loc 21 171 12 is_stmt 1 view .LVU397
 1499              	.LBB2772:
 1500              	.LBB2773:
 1501              	.LBI2773:
 1502              		.loc 7 467 23 view .LVU398
 1503              	.LBB2774:
 1504              	.LBI2774:
 1505              		.loc 8 591 23 view .LVU399
 1506              		.loc 8 591 23 is_stmt 0 view .LVU400
 1507              	.LBE2774:
 1508              	.LBE2773:
 172:Eigen/src/Core/MapBase.h ****     {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 172


 1509              		.loc 21 172 57 view .LVU401
 1510 004c 2694     		str	r4, [sp, #152]
 1511              	.LVL77:
 1512              	.LBB2775:
 1513              	.LBI2775:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1514              		.loc 18 110 52 is_stmt 1 view .LVU402
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1515              		.loc 18 110 52 is_stmt 0 view .LVU403
 1516              	.LBE2775:
 1517              	.LBB2776:
 1518              	.LBI2776:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1519              		.loc 18 110 52 is_stmt 1 view .LVU404
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1520              		.loc 18 110 52 is_stmt 0 view .LVU405
 1521              	.LBE2776:
 1522              	.LBB2777:
 1523              	.LBI2777:
 1524              		.loc 21 201 10 is_stmt 1 view .LVU406
 1525              		.loc 21 201 10 is_stmt 0 view .LVU407
 1526              	.LBE2777:
 1527              	.LBE2772:
 1528              	.LBE2771:
 353:Eigen/src/Core/Block.h ****     {
 1529              		.loc 20 353 86 view .LVU408
 1530 004e 2894     		str	r4, [sp, #160]
 1531              	.LVL78:
 1532              	.LBB2778:
 1533              	.LBI2778:
 1534              		.loc 18 120 52 is_stmt 1 view .LVU409
 1535              	.LBB2779:
 1536              	.LBB2780:
 1537              		.loc 18 120 96 is_stmt 0 view .LVU410
 1538 0050 2991     		str	r1, [sp, #164]
 1539              	.LVL79:
 1540              		.loc 18 120 96 view .LVU411
 1541              	.LBE2780:
 1542              	.LBE2779:
 1543              	.LBE2778:
 1544              	.LBB2781:
 1545              	.LBI2781:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1546              		.loc 18 110 52 is_stmt 1 view .LVU412
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1547              		.loc 18 110 52 is_stmt 0 view .LVU413
 1548              	.LBE2781:
 1549              	.LBB2782:
 1550              	.LBI2782:
 435:Eigen/src/Core/Block.h ****     {
 1551              		.loc 20 435 10 is_stmt 1 view .LVU414
 1552              	.LBB2783:
 1553              		.loc 20 437 21 is_stmt 0 view .LVU415
 1554 0052 2B92     		str	r2, [sp, #172]
 1555              	.LVL80:
 1556              		.loc 20 437 21 view .LVU416
 1557              	.LBE2783:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 173


 1558              	.LBE2782:
 1559              	.LBE2766:
 1560              	.LBE2765:
 1561              	.LBE2764:
 1562              	.LBE2763:
 1563              	.LBE2762:
 1564              	.LBB2784:
 1565              	.LBI2784:
 153:Eigen/src/Core/PlainObjectBase.h **** 
 1566              		.loc 9 153 31 is_stmt 1 view .LVU417
 153:Eigen/src/Core/PlainObjectBase.h **** 
 1567              		.loc 9 153 31 is_stmt 0 view .LVU418
 1568              	.LBE2784:
 1569              	.LBE2761:
 1570              	.LBE2760:
 1571              	.LBE2759:
 1572              	.LBE2758:
 1573              	.LBB2785:
 1574              	.LBI2785:
 1575              		.file 23 "Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h"
   1:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** // for linear algebra.
   3:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** //
   4:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** // Copyright (C) 2008-2009 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** //
   7:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** 
  11:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** // This file is a base class plugin containing matrix specifics coefficient wise functions.
  12:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** 
  13:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** /** \returns an expression of the Schur product (coefficient wise product) of *this and \a other
  14:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h ****   *
  15:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h ****   * Example: \include MatrixBase_cwiseProduct.cpp
  16:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h ****   * Output: \verbinclude MatrixBase_cwiseProduct.out
  17:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h ****   *
  18:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h ****   * \sa class CwiseBinaryOp, cwiseAbs2
  19:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h ****   */
  20:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** template<typename OtherDerived>
  21:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** EIGEN_DEVICE_FUNC
  22:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** EIGEN_STRONG_INLINE const EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)
  23:Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h **** cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 1576              		.loc 23 23 1 is_stmt 1 view .LVU419
 1577              	.LBB2786:
 1578              	.LBI2786:
 1579              		.file 24 "Eigen/src/Core/functors/BinaryFunctors.h"
   1:Eigen/src/Core/functors/BinaryFunctors.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/functors/BinaryFunctors.h **** // for linear algebra.
   3:Eigen/src/Core/functors/BinaryFunctors.h **** //
   4:Eigen/src/Core/functors/BinaryFunctors.h **** // Copyright (C) 2008-2010 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:Eigen/src/Core/functors/BinaryFunctors.h **** //
   6:Eigen/src/Core/functors/BinaryFunctors.h **** // This Source Code Form is subject to the terms of the Mozilla
   7:Eigen/src/Core/functors/BinaryFunctors.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   8:Eigen/src/Core/functors/BinaryFunctors.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
   9:Eigen/src/Core/functors/BinaryFunctors.h **** 
  10:Eigen/src/Core/functors/BinaryFunctors.h **** #ifndef EIGEN_BINARY_FUNCTORS_H
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 174


  11:Eigen/src/Core/functors/BinaryFunctors.h **** #define EIGEN_BINARY_FUNCTORS_H
  12:Eigen/src/Core/functors/BinaryFunctors.h **** 
  13:Eigen/src/Core/functors/BinaryFunctors.h **** namespace Eigen {
  14:Eigen/src/Core/functors/BinaryFunctors.h **** 
  15:Eigen/src/Core/functors/BinaryFunctors.h **** namespace internal {
  16:Eigen/src/Core/functors/BinaryFunctors.h **** 
  17:Eigen/src/Core/functors/BinaryFunctors.h **** //---------- associative binary functors ----------
  18:Eigen/src/Core/functors/BinaryFunctors.h **** 
  19:Eigen/src/Core/functors/BinaryFunctors.h **** template<typename Arg1, typename Arg2>
  20:Eigen/src/Core/functors/BinaryFunctors.h **** struct binary_op_base
  21:Eigen/src/Core/functors/BinaryFunctors.h **** {
  22:Eigen/src/Core/functors/BinaryFunctors.h ****   typedef Arg1 first_argument_type;
  23:Eigen/src/Core/functors/BinaryFunctors.h ****   typedef Arg2 second_argument_type;
  24:Eigen/src/Core/functors/BinaryFunctors.h **** };
  25:Eigen/src/Core/functors/BinaryFunctors.h **** 
  26:Eigen/src/Core/functors/BinaryFunctors.h **** /** \internal
  27:Eigen/src/Core/functors/BinaryFunctors.h ****   * \brief Template functor to compute the sum of two scalars
  28:Eigen/src/Core/functors/BinaryFunctors.h ****   *
  29:Eigen/src/Core/functors/BinaryFunctors.h ****   * \sa class CwiseBinaryOp, MatrixBase::operator+, class VectorwiseOp, DenseBase::sum()
  30:Eigen/src/Core/functors/BinaryFunctors.h ****   */
  31:Eigen/src/Core/functors/BinaryFunctors.h **** template<typename LhsScalar,typename RhsScalar>
  32:Eigen/src/Core/functors/BinaryFunctors.h **** struct scalar_sum_op : binary_op_base<LhsScalar,RhsScalar>
  33:Eigen/src/Core/functors/BinaryFunctors.h **** {
  34:Eigen/src/Core/functors/BinaryFunctors.h ****   typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_sum_op>::ReturnType result_type;
  35:Eigen/src/Core/functors/BinaryFunctors.h **** #ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  36:Eigen/src/Core/functors/BinaryFunctors.h ****   EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op)
  37:Eigen/src/Core/functors/BinaryFunctors.h **** #else
  38:Eigen/src/Core/functors/BinaryFunctors.h ****   scalar_sum_op() {
  39:Eigen/src/Core/functors/BinaryFunctors.h ****     EIGEN_SCALAR_BINARY_OP_PLUGIN
  40:Eigen/src/Core/functors/BinaryFunctors.h ****   }
  41:Eigen/src/Core/functors/BinaryFunctors.h **** #endif
  42:Eigen/src/Core/functors/BinaryFunctors.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const Rhs
  43:Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
  44:Eigen/src/Core/functors/BinaryFunctors.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) con
  45:Eigen/src/Core/functors/BinaryFunctors.h ****   { return internal::padd(a,b); }
  46:Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
  47:Eigen/src/Core/functors/BinaryFunctors.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type predux(const Packet& a) const
  48:Eigen/src/Core/functors/BinaryFunctors.h ****   { return internal::predux(a); }
  49:Eigen/src/Core/functors/BinaryFunctors.h **** };
  50:Eigen/src/Core/functors/BinaryFunctors.h **** template<typename LhsScalar,typename RhsScalar>
  51:Eigen/src/Core/functors/BinaryFunctors.h **** struct functor_traits<scalar_sum_op<LhsScalar,RhsScalar> > {
  52:Eigen/src/Core/functors/BinaryFunctors.h ****   enum {
  53:Eigen/src/Core/functors/BinaryFunctors.h ****     Cost = (NumTraits<LhsScalar>::AddCost+NumTraits<RhsScalar>::AddCost)/2, // rough estimate!
  54:Eigen/src/Core/functors/BinaryFunctors.h ****     PacketAccess = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasAdd && packe
  55:Eigen/src/Core/functors/BinaryFunctors.h ****     // TODO vectorize mixed sum
  56:Eigen/src/Core/functors/BinaryFunctors.h ****   };
  57:Eigen/src/Core/functors/BinaryFunctors.h **** };
  58:Eigen/src/Core/functors/BinaryFunctors.h **** 
  59:Eigen/src/Core/functors/BinaryFunctors.h **** /** \internal
  60:Eigen/src/Core/functors/BinaryFunctors.h ****   * \brief Template specialization to deprecate the summation of boolean expressions.
  61:Eigen/src/Core/functors/BinaryFunctors.h ****   * This is required to solve Bug 426.
  62:Eigen/src/Core/functors/BinaryFunctors.h ****   * \sa DenseBase::count(), DenseBase::any(), ArrayBase::cast(), MatrixBase::cast()
  63:Eigen/src/Core/functors/BinaryFunctors.h ****   */
  64:Eigen/src/Core/functors/BinaryFunctors.h **** template<> struct scalar_sum_op<bool,bool> : scalar_sum_op<int,int> {
  65:Eigen/src/Core/functors/BinaryFunctors.h ****   EIGEN_DEPRECATED
  66:Eigen/src/Core/functors/BinaryFunctors.h ****   scalar_sum_op() {}
  67:Eigen/src/Core/functors/BinaryFunctors.h **** };
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 175


  68:Eigen/src/Core/functors/BinaryFunctors.h **** 
  69:Eigen/src/Core/functors/BinaryFunctors.h **** 
  70:Eigen/src/Core/functors/BinaryFunctors.h **** /** \internal
  71:Eigen/src/Core/functors/BinaryFunctors.h ****   * \brief Template functor to compute the product of two scalars
  72:Eigen/src/Core/functors/BinaryFunctors.h ****   *
  73:Eigen/src/Core/functors/BinaryFunctors.h ****   * \sa class CwiseBinaryOp, Cwise::operator*(), class VectorwiseOp, MatrixBase::redux()
  74:Eigen/src/Core/functors/BinaryFunctors.h ****   */
  75:Eigen/src/Core/functors/BinaryFunctors.h **** template<typename LhsScalar,typename RhsScalar>
  76:Eigen/src/Core/functors/BinaryFunctors.h **** struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>
  77:Eigen/src/Core/functors/BinaryFunctors.h **** {
  78:Eigen/src/Core/functors/BinaryFunctors.h ****   typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_t
  79:Eigen/src/Core/functors/BinaryFunctors.h **** #ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  80:Eigen/src/Core/functors/BinaryFunctors.h ****   EIGEN_EMPTY_STRUCT_CTOR(scalar_product_op)
 1580              		.loc 24 80 3 view .LVU420
 1581              		.loc 24 80 3 is_stmt 0 view .LVU421
 1582              	.LBE2786:
 1583              	.LBB2787:
 1584              	.LBI2787:
 1585              		.file 25 "Eigen/src/Core/CwiseBinaryOp.h"
   1:Eigen/src/Core/CwiseBinaryOp.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/CwiseBinaryOp.h **** // for linear algebra.
   3:Eigen/src/Core/CwiseBinaryOp.h **** //
   4:Eigen/src/Core/CwiseBinaryOp.h **** // Copyright (C) 2008-2014 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:Eigen/src/Core/CwiseBinaryOp.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:Eigen/src/Core/CwiseBinaryOp.h **** //
   7:Eigen/src/Core/CwiseBinaryOp.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/CwiseBinaryOp.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/CwiseBinaryOp.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:Eigen/src/Core/CwiseBinaryOp.h **** 
  11:Eigen/src/Core/CwiseBinaryOp.h **** #ifndef EIGEN_CWISE_BINARY_OP_H
  12:Eigen/src/Core/CwiseBinaryOp.h **** #define EIGEN_CWISE_BINARY_OP_H
  13:Eigen/src/Core/CwiseBinaryOp.h **** 
  14:Eigen/src/Core/CwiseBinaryOp.h **** namespace Eigen {
  15:Eigen/src/Core/CwiseBinaryOp.h **** 
  16:Eigen/src/Core/CwiseBinaryOp.h **** namespace internal {
  17:Eigen/src/Core/CwiseBinaryOp.h **** template<typename BinaryOp, typename Lhs, typename Rhs>
  18:Eigen/src/Core/CwiseBinaryOp.h **** struct traits<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
  19:Eigen/src/Core/CwiseBinaryOp.h **** {
  20:Eigen/src/Core/CwiseBinaryOp.h ****   // we must not inherit from traits<Lhs> since it has
  21:Eigen/src/Core/CwiseBinaryOp.h ****   // the potential to cause problems with MSVC
  22:Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename remove_all<Lhs>::type Ancestor;
  23:Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename traits<Ancestor>::XprKind XprKind;
  24:Eigen/src/Core/CwiseBinaryOp.h ****   enum {
  25:Eigen/src/Core/CwiseBinaryOp.h ****     RowsAtCompileTime = traits<Ancestor>::RowsAtCompileTime,
  26:Eigen/src/Core/CwiseBinaryOp.h ****     ColsAtCompileTime = traits<Ancestor>::ColsAtCompileTime,
  27:Eigen/src/Core/CwiseBinaryOp.h ****     MaxRowsAtCompileTime = traits<Ancestor>::MaxRowsAtCompileTime,
  28:Eigen/src/Core/CwiseBinaryOp.h ****     MaxColsAtCompileTime = traits<Ancestor>::MaxColsAtCompileTime
  29:Eigen/src/Core/CwiseBinaryOp.h ****   };
  30:Eigen/src/Core/CwiseBinaryOp.h **** 
  31:Eigen/src/Core/CwiseBinaryOp.h ****   // even though we require Lhs and Rhs to have the same scalar type (see CwiseBinaryOp constructor
  32:Eigen/src/Core/CwiseBinaryOp.h ****   // we still want to handle the case when the result type is different.
  33:Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename result_of<
  34:Eigen/src/Core/CwiseBinaryOp.h ****                      BinaryOp(
  35:Eigen/src/Core/CwiseBinaryOp.h ****                        const typename Lhs::Scalar&,
  36:Eigen/src/Core/CwiseBinaryOp.h ****                        const typename Rhs::Scalar&
  37:Eigen/src/Core/CwiseBinaryOp.h ****                      )
  38:Eigen/src/Core/CwiseBinaryOp.h ****                    >::type Scalar;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 176


  39:Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename cwise_promote_storage_type<typename traits<Lhs>::StorageKind,
  40:Eigen/src/Core/CwiseBinaryOp.h ****                                               typename traits<Rhs>::StorageKind,
  41:Eigen/src/Core/CwiseBinaryOp.h ****                                               BinaryOp>::ret StorageKind;
  42:Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename promote_index_type<typename traits<Lhs>::StorageIndex,
  43:Eigen/src/Core/CwiseBinaryOp.h ****                                       typename traits<Rhs>::StorageIndex>::type StorageIndex;
  44:Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename Lhs::Nested LhsNested;
  45:Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename Rhs::Nested RhsNested;
  46:Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename remove_reference<LhsNested>::type _LhsNested;
  47:Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename remove_reference<RhsNested>::type _RhsNested;
  48:Eigen/src/Core/CwiseBinaryOp.h ****   enum {
  49:Eigen/src/Core/CwiseBinaryOp.h ****     Flags = cwise_promote_storage_order<typename traits<Lhs>::StorageKind,typename traits<Rhs>::Sto
  50:Eigen/src/Core/CwiseBinaryOp.h ****   };
  51:Eigen/src/Core/CwiseBinaryOp.h **** };
  52:Eigen/src/Core/CwiseBinaryOp.h **** } // end namespace internal
  53:Eigen/src/Core/CwiseBinaryOp.h **** 
  54:Eigen/src/Core/CwiseBinaryOp.h **** template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
  55:Eigen/src/Core/CwiseBinaryOp.h **** class CwiseBinaryOpImpl;
  56:Eigen/src/Core/CwiseBinaryOp.h **** 
  57:Eigen/src/Core/CwiseBinaryOp.h **** /** \class CwiseBinaryOp
  58:Eigen/src/Core/CwiseBinaryOp.h ****   * \ingroup Core_Module
  59:Eigen/src/Core/CwiseBinaryOp.h ****   *
  60:Eigen/src/Core/CwiseBinaryOp.h ****   * \brief Generic expression where a coefficient-wise binary operator is applied to two expression
  61:Eigen/src/Core/CwiseBinaryOp.h ****   *
  62:Eigen/src/Core/CwiseBinaryOp.h ****   * \tparam BinaryOp template functor implementing the operator
  63:Eigen/src/Core/CwiseBinaryOp.h ****   * \tparam LhsType the type of the left-hand side
  64:Eigen/src/Core/CwiseBinaryOp.h ****   * \tparam RhsType the type of the right-hand side
  65:Eigen/src/Core/CwiseBinaryOp.h ****   *
  66:Eigen/src/Core/CwiseBinaryOp.h ****   * This class represents an expression  where a coefficient-wise binary operator is applied to two
  67:Eigen/src/Core/CwiseBinaryOp.h ****   * It is the return type of binary operators, by which we mean only those binary operators where
  68:Eigen/src/Core/CwiseBinaryOp.h ****   * both the left-hand side and the right-hand side are Eigen expressions.
  69:Eigen/src/Core/CwiseBinaryOp.h ****   * For example, the return type of matrix1+matrix2 is a CwiseBinaryOp.
  70:Eigen/src/Core/CwiseBinaryOp.h ****   *
  71:Eigen/src/Core/CwiseBinaryOp.h ****   * Most of the time, this is the only way that it is used, so you typically don't have to name
  72:Eigen/src/Core/CwiseBinaryOp.h ****   * CwiseBinaryOp types explicitly.
  73:Eigen/src/Core/CwiseBinaryOp.h ****   *
  74:Eigen/src/Core/CwiseBinaryOp.h ****   * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, clas
  75:Eigen/src/Core/CwiseBinaryOp.h ****   */
  76:Eigen/src/Core/CwiseBinaryOp.h **** template<typename BinaryOp, typename LhsType, typename RhsType>
  77:Eigen/src/Core/CwiseBinaryOp.h **** class CwiseBinaryOp : 
  78:Eigen/src/Core/CwiseBinaryOp.h ****   public CwiseBinaryOpImpl<
  79:Eigen/src/Core/CwiseBinaryOp.h ****           BinaryOp, LhsType, RhsType,
  80:Eigen/src/Core/CwiseBinaryOp.h ****           typename internal::cwise_promote_storage_type<typename internal::traits<LhsType>::Storage
  81:Eigen/src/Core/CwiseBinaryOp.h ****                                                         typename internal::traits<RhsType>::Storage
  82:Eigen/src/Core/CwiseBinaryOp.h ****                                                         BinaryOp>::ret>,
  83:Eigen/src/Core/CwiseBinaryOp.h ****   internal::no_assignment_operator
  84:Eigen/src/Core/CwiseBinaryOp.h **** {
  85:Eigen/src/Core/CwiseBinaryOp.h ****   public:
  86:Eigen/src/Core/CwiseBinaryOp.h ****     
  87:Eigen/src/Core/CwiseBinaryOp.h ****     typedef typename internal::remove_all<BinaryOp>::type Functor;
  88:Eigen/src/Core/CwiseBinaryOp.h ****     typedef typename internal::remove_all<LhsType>::type Lhs;
  89:Eigen/src/Core/CwiseBinaryOp.h ****     typedef typename internal::remove_all<RhsType>::type Rhs;
  90:Eigen/src/Core/CwiseBinaryOp.h **** 
  91:Eigen/src/Core/CwiseBinaryOp.h ****     typedef typename CwiseBinaryOpImpl<
  92:Eigen/src/Core/CwiseBinaryOp.h ****         BinaryOp, LhsType, RhsType,
  93:Eigen/src/Core/CwiseBinaryOp.h ****         typename internal::cwise_promote_storage_type<typename internal::traits<LhsType>::StorageKi
  94:Eigen/src/Core/CwiseBinaryOp.h ****                                                       typename internal::traits<Rhs>::StorageKind,
  95:Eigen/src/Core/CwiseBinaryOp.h ****                                                       BinaryOp>::ret>::Base Base;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 177


  96:Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_GENERIC_PUBLIC_INTERFACE(CwiseBinaryOp)
  97:Eigen/src/Core/CwiseBinaryOp.h **** 
  98:Eigen/src/Core/CwiseBinaryOp.h ****     typedef typename internal::ref_selector<LhsType>::type LhsNested;
  99:Eigen/src/Core/CwiseBinaryOp.h ****     typedef typename internal::ref_selector<RhsType>::type RhsNested;
 100:Eigen/src/Core/CwiseBinaryOp.h ****     typedef typename internal::remove_reference<LhsNested>::type _LhsNested;
 101:Eigen/src/Core/CwiseBinaryOp.h ****     typedef typename internal::remove_reference<RhsNested>::type _RhsNested;
 102:Eigen/src/Core/CwiseBinaryOp.h **** 
 103:Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_DEVICE_FUNC
 104:Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_STRONG_INLINE CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = Bina
 1586              		.loc 25 104 25 is_stmt 1 view .LVU422
 1587              	.LBB2788:
 1588              	.LBB2789:
 1589              	.LBI2789:
 105:Eigen/src/Core/CwiseBinaryOp.h ****       : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 106:Eigen/src/Core/CwiseBinaryOp.h ****     {
 107:Eigen/src/Core/CwiseBinaryOp.h ****       EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar);
 108:Eigen/src/Core/CwiseBinaryOp.h ****       // require the sizes to match
 109:Eigen/src/Core/CwiseBinaryOp.h ****       EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)
 110:Eigen/src/Core/CwiseBinaryOp.h ****       eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 111:Eigen/src/Core/CwiseBinaryOp.h ****     }
 112:Eigen/src/Core/CwiseBinaryOp.h **** 
 113:Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_DEVICE_FUNC
 114:Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_STRONG_INLINE Index rows() const {
 115:Eigen/src/Core/CwiseBinaryOp.h ****       // return the fixed size type if available to enable compile time optimizations
 116:Eigen/src/Core/CwiseBinaryOp.h ****       if (internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dyna
 117:Eigen/src/Core/CwiseBinaryOp.h ****         return m_rhs.rows();
 118:Eigen/src/Core/CwiseBinaryOp.h ****       else
 119:Eigen/src/Core/CwiseBinaryOp.h ****         return m_lhs.rows();
 120:Eigen/src/Core/CwiseBinaryOp.h ****     }
 121:Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_DEVICE_FUNC
 122:Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_STRONG_INLINE Index cols() const {
 123:Eigen/src/Core/CwiseBinaryOp.h ****       // return the fixed size type if available to enable compile time optimizations
 124:Eigen/src/Core/CwiseBinaryOp.h ****       if (internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dyna
 125:Eigen/src/Core/CwiseBinaryOp.h ****         return m_rhs.cols();
 126:Eigen/src/Core/CwiseBinaryOp.h ****       else
 127:Eigen/src/Core/CwiseBinaryOp.h ****         return m_lhs.cols();
 128:Eigen/src/Core/CwiseBinaryOp.h ****     }
 129:Eigen/src/Core/CwiseBinaryOp.h **** 
 130:Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the left hand side nested expression */
 131:Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_DEVICE_FUNC
 132:Eigen/src/Core/CwiseBinaryOp.h ****     const _LhsNested& lhs() const { return m_lhs; }
 133:Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the right hand side nested expression */
 134:Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_DEVICE_FUNC
 135:Eigen/src/Core/CwiseBinaryOp.h ****     const _RhsNested& rhs() const { return m_rhs; }
 136:Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the functor representing the binary operation */
 137:Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_DEVICE_FUNC
 138:Eigen/src/Core/CwiseBinaryOp.h ****     const BinaryOp& functor() const { return m_functor; }
 139:Eigen/src/Core/CwiseBinaryOp.h **** 
 140:Eigen/src/Core/CwiseBinaryOp.h ****   protected:
 141:Eigen/src/Core/CwiseBinaryOp.h ****     LhsNested m_lhs;
 142:Eigen/src/Core/CwiseBinaryOp.h ****     RhsNested m_rhs;
 143:Eigen/src/Core/CwiseBinaryOp.h ****     const BinaryOp m_functor;
 144:Eigen/src/Core/CwiseBinaryOp.h **** };
 145:Eigen/src/Core/CwiseBinaryOp.h **** 
 146:Eigen/src/Core/CwiseBinaryOp.h **** // Generic API dispatcher
 147:Eigen/src/Core/CwiseBinaryOp.h **** template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
 148:Eigen/src/Core/CwiseBinaryOp.h **** class CwiseBinaryOpImpl
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 178


 1590              		.loc 25 148 7 view .LVU423
 1591              	.LBB2790:
 1592              	.LBI2790:
 1593              		.loc 7 467 23 view .LVU424
 1594              	.LBB2791:
 1595              	.LBI2791:
 1596              		.loc 8 591 23 view .LVU425
 1597              		.loc 8 591 23 is_stmt 0 view .LVU426
 1598              	.LBE2791:
 1599              	.LBE2790:
 1600              	.LBE2789:
 1601              	.LBB2792:
 1602              	.LBI2792:
  52:Eigen/src/Core/Transpose.h ****   : public TransposeImpl<MatrixType,typename internal::traits<MatrixType>::StorageKind>
 1603              		.loc 22 52 37 is_stmt 1 view .LVU427
 1604              	.LBB2793:
 1605              	.LBI2793:
 103:Eigen/src/Core/Block.h ****   : public BlockImpl<XprType, BlockRows, BlockCols, InnerPanel, typename internal::traits<XprType>:
 1606              		.loc 20 103 81 view .LVU428
 1607              	.LBB2794:
 1608              	.LBI2794:
 154:Eigen/src/Core/Block.h ****   : public internal::BlockImpl_dense<XprType, BlockRows, BlockCols, InnerPanel>
 1609              		.loc 20 154 7 view .LVU429
 1610              	.LBB2795:
 1611              	.LBI2795:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 1612              		.loc 20 329 7 view .LVU430
 1613              	.LBB2796:
 1614              	.LBB2797:
 1615              	.LBI2797:
  37:Eigen/src/Core/MapBase.h ****   : public internal::dense_xpr_base<Derived>::type
 1616              		.loc 21 37 34 view .LVU431
 1617              	.LBB2798:
 1618 0054 1493     		str	r3, [sp, #80]
 1619              	.LVL81:
 1620              	.LBB2799:
 1621              	.LBI2799:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1622              		.loc 18 109 5 view .LVU432
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1623              		.loc 18 109 5 is_stmt 0 view .LVU433
 1624              	.LBE2799:
 1625              	.LBB2800:
 1626              	.LBI2800:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1627              		.loc 18 109 5 is_stmt 1 view .LVU434
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1628              		.loc 18 109 5 is_stmt 0 view .LVU435
 1629              	.LBE2800:
 1630              	.LBE2798:
 1631              	.LBE2797:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 1632              		.loc 20 329 7 view .LVU436
 1633 0056 1693     		str	r3, [sp, #88]
 1634 0058 1791     		str	r1, [sp, #92]
 1635 005a 1891     		str	r1, [sp, #96]
 1636 005c 1990     		str	r0, [sp, #100]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 179


 1637              	.LVL82:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 1638              		.loc 20 329 7 view .LVU437
 1639              	.LBE2796:
 1640              	.LBE2795:
 1641              	.LBE2794:
 1642              	.LBE2793:
 1643              	.LBE2792:
 1644              	.LBB2801:
 1645              	.LBI2801:
 103:Eigen/src/Core/Block.h ****   : public BlockImpl<XprType, BlockRows, BlockCols, InnerPanel, typename internal::traits<XprType>:
 1646              		.loc 20 103 81 is_stmt 1 view .LVU438
 1647              	.LBB2802:
 1648              	.LBI2802:
 154:Eigen/src/Core/Block.h ****   : public internal::BlockImpl_dense<XprType, BlockRows, BlockCols, InnerPanel>
 1649              		.loc 20 154 7 view .LVU439
 1650              	.LBB2803:
 1651              	.LBI2803:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 1652              		.loc 20 329 7 view .LVU440
 1653              	.LBB2804:
 1654              	.LBB2805:
 1655              	.LBI2805:
  37:Eigen/src/Core/MapBase.h ****   : public internal::dense_xpr_base<Derived>::type
 1656              		.loc 21 37 34 view .LVU441
 1657              	.LBB2806:
 1658 005e 1A94     		str	r4, [sp, #104]
 1659              	.LVL83:
 1660              	.LBB2807:
 1661              	.LBI2807:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1662              		.loc 18 109 5 view .LVU442
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1663              		.loc 18 109 5 is_stmt 0 view .LVU443
 1664              	.LBE2807:
 1665              	.LBB2808:
 1666              	.LBI2808:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1667              		.loc 18 109 5 is_stmt 1 view .LVU444
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1668              		.loc 18 109 5 is_stmt 0 view .LVU445
 1669              	.LBE2808:
 1670              	.LBE2806:
 1671              	.LBE2805:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 1672              		.loc 20 329 7 view .LVU446
 1673 0060 1C94     		str	r4, [sp, #112]
 1674 0062 1D91     		str	r1, [sp, #116]
 1675              	.LVL84:
 1676              	.LBB2809:
 1677              	.LBI2809:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1678              		.loc 18 109 5 is_stmt 1 view .LVU447
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 1679              		.loc 18 109 5 is_stmt 0 view .LVU448
 1680              	.LBE2809:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 180


 1681              		.loc 20 329 7 view .LVU449
 1682 0064 1F92     		str	r2, [sp, #124]
 1683              	.LVL85:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 1684              		.loc 20 329 7 view .LVU450
 1685              	.LBE2804:
 1686              	.LBE2803:
 1687              	.LBE2802:
 1688              	.LBE2801:
 1689              	.LBB2810:
 1690              	.LBI2810:
 1691              		.loc 24 80 3 is_stmt 1 view .LVU451
 1692              		.loc 24 80 3 is_stmt 0 view .LVU452
 1693              	.LBE2810:
 1694              	.LBB2811:
 1695              	.LBI2811:
  68:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC inline Index cols() const { return m_matrix.rows(); }
 1696              		.loc 22 68 36 is_stmt 1 view .LVU453
  68:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC inline Index cols() const { return m_matrix.rows(); }
 1697              		.loc 22 68 36 is_stmt 0 view .LVU454
 1698              	.LBE2811:
 1699              	.LBB2812:
 1700              	.LBI2812:
  90:Eigen/src/Core/MapBase.h ****     /** \copydoc DenseBase::cols() */
 1701              		.loc 21 90 36 is_stmt 1 view .LVU455
  90:Eigen/src/Core/MapBase.h ****     /** \copydoc DenseBase::cols() */
 1702              		.loc 21 90 36 is_stmt 0 view .LVU456
 1703              	.LBE2812:
 1704              	.LBB2813:
 1705              	.LBI2813:
  69:Eigen/src/Core/Transpose.h **** 
 1706              		.loc 22 69 36 is_stmt 1 view .LVU457
  69:Eigen/src/Core/Transpose.h **** 
 1707              		.loc 22 69 36 is_stmt 0 view .LVU458
 1708              	.LBE2813:
 1709              	.LBB2814:
 1710              	.LBI2814:
  92:Eigen/src/Core/MapBase.h **** 
 1711              		.loc 21 92 36 is_stmt 1 view .LVU459
  92:Eigen/src/Core/MapBase.h **** 
 1712              		.loc 21 92 36 is_stmt 0 view .LVU460
 1713              	.LBE2814:
 1714              	.LBE2788:
 1715              	.LBE2787:
 1716              	.LBE2785:
 1717              	.LBB2815:
 1718              	.LBI2815:
 1719              		.file 26 "Eigen/src/Core/Redux.h"
   1:Eigen/src/Core/Redux.h **** // This file is part of Eigen, a lightweight C++ template library
   2:Eigen/src/Core/Redux.h **** // for linear algebra.
   3:Eigen/src/Core/Redux.h **** //
   4:Eigen/src/Core/Redux.h **** // Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:Eigen/src/Core/Redux.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:Eigen/src/Core/Redux.h **** //
   7:Eigen/src/Core/Redux.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:Eigen/src/Core/Redux.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:Eigen/src/Core/Redux.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 181


  10:Eigen/src/Core/Redux.h **** 
  11:Eigen/src/Core/Redux.h **** #ifndef EIGEN_REDUX_H
  12:Eigen/src/Core/Redux.h **** #define EIGEN_REDUX_H
  13:Eigen/src/Core/Redux.h **** 
  14:Eigen/src/Core/Redux.h **** namespace Eigen { 
  15:Eigen/src/Core/Redux.h **** 
  16:Eigen/src/Core/Redux.h **** namespace internal {
  17:Eigen/src/Core/Redux.h **** 
  18:Eigen/src/Core/Redux.h **** // TODO
  19:Eigen/src/Core/Redux.h **** //  * implement other kind of vectorization
  20:Eigen/src/Core/Redux.h **** //  * factorize code
  21:Eigen/src/Core/Redux.h **** 
  22:Eigen/src/Core/Redux.h **** /***************************************************************************
  23:Eigen/src/Core/Redux.h **** * Part 1 : the logic deciding a strategy for vectorization and unrolling
  24:Eigen/src/Core/Redux.h **** ***************************************************************************/
  25:Eigen/src/Core/Redux.h **** 
  26:Eigen/src/Core/Redux.h **** template<typename Func, typename Derived>
  27:Eigen/src/Core/Redux.h **** struct redux_traits
  28:Eigen/src/Core/Redux.h **** {
  29:Eigen/src/Core/Redux.h **** public:
  30:Eigen/src/Core/Redux.h ****     typedef typename find_best_packet<typename Derived::Scalar,Derived::SizeAtCompileTime>::type Pa
  31:Eigen/src/Core/Redux.h ****   enum {
  32:Eigen/src/Core/Redux.h ****     PacketSize = unpacket_traits<PacketType>::size,
  33:Eigen/src/Core/Redux.h ****     InnerMaxSize = int(Derived::IsRowMajor)
  34:Eigen/src/Core/Redux.h ****                  ? Derived::MaxColsAtCompileTime
  35:Eigen/src/Core/Redux.h ****                  : Derived::MaxRowsAtCompileTime
  36:Eigen/src/Core/Redux.h ****   };
  37:Eigen/src/Core/Redux.h **** 
  38:Eigen/src/Core/Redux.h ****   enum {
  39:Eigen/src/Core/Redux.h ****     MightVectorize = (int(Derived::Flags)&ActualPacketAccessBit)
  40:Eigen/src/Core/Redux.h ****                   && (functor_traits<Func>::PacketAccess),
  41:Eigen/src/Core/Redux.h ****     MayLinearVectorize = bool(MightVectorize) && (int(Derived::Flags)&LinearAccessBit),
  42:Eigen/src/Core/Redux.h ****     MaySliceVectorize  = bool(MightVectorize) && int(InnerMaxSize)>=3*PacketSize
  43:Eigen/src/Core/Redux.h ****   };
  44:Eigen/src/Core/Redux.h **** 
  45:Eigen/src/Core/Redux.h **** public:
  46:Eigen/src/Core/Redux.h ****   enum {
  47:Eigen/src/Core/Redux.h ****     Traversal = int(MayLinearVectorize) ? int(LinearVectorizedTraversal)
  48:Eigen/src/Core/Redux.h ****               : int(MaySliceVectorize)  ? int(SliceVectorizedTraversal)
  49:Eigen/src/Core/Redux.h ****                                         : int(DefaultTraversal)
  50:Eigen/src/Core/Redux.h ****   };
  51:Eigen/src/Core/Redux.h **** 
  52:Eigen/src/Core/Redux.h **** public:
  53:Eigen/src/Core/Redux.h ****   enum {
  54:Eigen/src/Core/Redux.h ****     Cost = Derived::SizeAtCompileTime == Dynamic ? HugeCost
  55:Eigen/src/Core/Redux.h ****          : Derived::SizeAtCompileTime * Derived::CoeffReadCost + (Derived::SizeAtCompileTime-1) * f
  56:Eigen/src/Core/Redux.h ****     UnrollingLimit = EIGEN_UNROLLING_LIMIT * (int(Traversal) == int(DefaultTraversal) ? 1 : int(Pac
  57:Eigen/src/Core/Redux.h ****   };
  58:Eigen/src/Core/Redux.h **** 
  59:Eigen/src/Core/Redux.h **** public:
  60:Eigen/src/Core/Redux.h ****   enum {
  61:Eigen/src/Core/Redux.h ****     Unrolling = Cost <= UnrollingLimit ? CompleteUnrolling : NoUnrolling
  62:Eigen/src/Core/Redux.h ****   };
  63:Eigen/src/Core/Redux.h ****   
  64:Eigen/src/Core/Redux.h **** #ifdef EIGEN_DEBUG_ASSIGN
  65:Eigen/src/Core/Redux.h ****   static void debug()
  66:Eigen/src/Core/Redux.h ****   {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 182


  67:Eigen/src/Core/Redux.h ****     std::cerr << "Xpr: " << typeid(typename Derived::XprType).name() << std::endl;
  68:Eigen/src/Core/Redux.h ****     std::cerr.setf(std::ios::hex, std::ios::basefield);
  69:Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(Derived::Flags)
  70:Eigen/src/Core/Redux.h ****     std::cerr.unsetf(std::ios::hex);
  71:Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(InnerMaxSize)
  72:Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(PacketSize)
  73:Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(MightVectorize)
  74:Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(MayLinearVectorize)
  75:Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(MaySliceVectorize)
  76:Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(Traversal)
  77:Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(UnrollingLimit)
  78:Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(Unrolling)
  79:Eigen/src/Core/Redux.h ****     std::cerr << std::endl;
  80:Eigen/src/Core/Redux.h ****   }
  81:Eigen/src/Core/Redux.h **** #endif
  82:Eigen/src/Core/Redux.h **** };
  83:Eigen/src/Core/Redux.h **** 
  84:Eigen/src/Core/Redux.h **** /***************************************************************************
  85:Eigen/src/Core/Redux.h **** * Part 2 : unrollers
  86:Eigen/src/Core/Redux.h **** ***************************************************************************/
  87:Eigen/src/Core/Redux.h **** 
  88:Eigen/src/Core/Redux.h **** /*** no vectorization ***/
  89:Eigen/src/Core/Redux.h **** 
  90:Eigen/src/Core/Redux.h **** template<typename Func, typename Derived, int Start, int Length>
  91:Eigen/src/Core/Redux.h **** struct redux_novec_unroller
  92:Eigen/src/Core/Redux.h **** {
  93:Eigen/src/Core/Redux.h ****   enum {
  94:Eigen/src/Core/Redux.h ****     HalfLength = Length/2
  95:Eigen/src/Core/Redux.h ****   };
  96:Eigen/src/Core/Redux.h **** 
  97:Eigen/src/Core/Redux.h ****   typedef typename Derived::Scalar Scalar;
  98:Eigen/src/Core/Redux.h **** 
  99:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC
 100:Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE Scalar run(const Derived &mat, const Func& func)
 101:Eigen/src/Core/Redux.h ****   {
 102:Eigen/src/Core/Redux.h ****     return func(redux_novec_unroller<Func, Derived, Start, HalfLength>::run(mat,func),
 103:Eigen/src/Core/Redux.h ****                 redux_novec_unroller<Func, Derived, Start+HalfLength, Length-HalfLength>::run(mat,f
 104:Eigen/src/Core/Redux.h ****   }
 105:Eigen/src/Core/Redux.h **** };
 106:Eigen/src/Core/Redux.h **** 
 107:Eigen/src/Core/Redux.h **** template<typename Func, typename Derived, int Start>
 108:Eigen/src/Core/Redux.h **** struct redux_novec_unroller<Func, Derived, Start, 1>
 109:Eigen/src/Core/Redux.h **** {
 110:Eigen/src/Core/Redux.h ****   enum {
 111:Eigen/src/Core/Redux.h ****     outer = Start / Derived::InnerSizeAtCompileTime,
 112:Eigen/src/Core/Redux.h ****     inner = Start % Derived::InnerSizeAtCompileTime
 113:Eigen/src/Core/Redux.h ****   };
 114:Eigen/src/Core/Redux.h **** 
 115:Eigen/src/Core/Redux.h ****   typedef typename Derived::Scalar Scalar;
 116:Eigen/src/Core/Redux.h **** 
 117:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC
 118:Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE Scalar run(const Derived &mat, const Func&)
 119:Eigen/src/Core/Redux.h ****   {
 120:Eigen/src/Core/Redux.h ****     return mat.coeffByOuterInner(outer, inner);
 121:Eigen/src/Core/Redux.h ****   }
 122:Eigen/src/Core/Redux.h **** };
 123:Eigen/src/Core/Redux.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 183


 124:Eigen/src/Core/Redux.h **** // This is actually dead code and will never be called. It is required
 125:Eigen/src/Core/Redux.h **** // to prevent false warnings regarding failed inlining though
 126:Eigen/src/Core/Redux.h **** // for 0 length run() will never be called at all.
 127:Eigen/src/Core/Redux.h **** template<typename Func, typename Derived, int Start>
 128:Eigen/src/Core/Redux.h **** struct redux_novec_unroller<Func, Derived, Start, 0>
 129:Eigen/src/Core/Redux.h **** {
 130:Eigen/src/Core/Redux.h ****   typedef typename Derived::Scalar Scalar;
 131:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC 
 132:Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE Scalar run(const Derived&, const Func&) { return Scalar(); }
 133:Eigen/src/Core/Redux.h **** };
 134:Eigen/src/Core/Redux.h **** 
 135:Eigen/src/Core/Redux.h **** /*** vectorization ***/
 136:Eigen/src/Core/Redux.h **** 
 137:Eigen/src/Core/Redux.h **** template<typename Func, typename Derived, int Start, int Length>
 138:Eigen/src/Core/Redux.h **** struct redux_vec_unroller
 139:Eigen/src/Core/Redux.h **** {
 140:Eigen/src/Core/Redux.h ****   enum {
 141:Eigen/src/Core/Redux.h ****     PacketSize = redux_traits<Func, Derived>::PacketSize,
 142:Eigen/src/Core/Redux.h ****     HalfLength = Length/2
 143:Eigen/src/Core/Redux.h ****   };
 144:Eigen/src/Core/Redux.h **** 
 145:Eigen/src/Core/Redux.h ****   typedef typename Derived::Scalar Scalar;
 146:Eigen/src/Core/Redux.h ****   typedef typename redux_traits<Func, Derived>::PacketType PacketScalar;
 147:Eigen/src/Core/Redux.h **** 
 148:Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE PacketScalar run(const Derived &mat, const Func& func)
 149:Eigen/src/Core/Redux.h ****   {
 150:Eigen/src/Core/Redux.h ****     return func.packetOp(
 151:Eigen/src/Core/Redux.h ****             redux_vec_unroller<Func, Derived, Start, HalfLength>::run(mat,func),
 152:Eigen/src/Core/Redux.h ****             redux_vec_unroller<Func, Derived, Start+HalfLength, Length-HalfLength>::run(mat,func) )
 153:Eigen/src/Core/Redux.h ****   }
 154:Eigen/src/Core/Redux.h **** };
 155:Eigen/src/Core/Redux.h **** 
 156:Eigen/src/Core/Redux.h **** template<typename Func, typename Derived, int Start>
 157:Eigen/src/Core/Redux.h **** struct redux_vec_unroller<Func, Derived, Start, 1>
 158:Eigen/src/Core/Redux.h **** {
 159:Eigen/src/Core/Redux.h ****   enum {
 160:Eigen/src/Core/Redux.h ****     index = Start * redux_traits<Func, Derived>::PacketSize,
 161:Eigen/src/Core/Redux.h ****     outer = index / int(Derived::InnerSizeAtCompileTime),
 162:Eigen/src/Core/Redux.h ****     inner = index % int(Derived::InnerSizeAtCompileTime),
 163:Eigen/src/Core/Redux.h ****     alignment = Derived::Alignment
 164:Eigen/src/Core/Redux.h ****   };
 165:Eigen/src/Core/Redux.h **** 
 166:Eigen/src/Core/Redux.h ****   typedef typename Derived::Scalar Scalar;
 167:Eigen/src/Core/Redux.h ****   typedef typename redux_traits<Func, Derived>::PacketType PacketScalar;
 168:Eigen/src/Core/Redux.h **** 
 169:Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE PacketScalar run(const Derived &mat, const Func&)
 170:Eigen/src/Core/Redux.h ****   {
 171:Eigen/src/Core/Redux.h ****     return mat.template packetByOuterInner<alignment,PacketScalar>(outer, inner);
 172:Eigen/src/Core/Redux.h ****   }
 173:Eigen/src/Core/Redux.h **** };
 174:Eigen/src/Core/Redux.h **** 
 175:Eigen/src/Core/Redux.h **** /***************************************************************************
 176:Eigen/src/Core/Redux.h **** * Part 3 : implementation of all cases
 177:Eigen/src/Core/Redux.h **** ***************************************************************************/
 178:Eigen/src/Core/Redux.h **** 
 179:Eigen/src/Core/Redux.h **** template<typename Func, typename Derived,
 180:Eigen/src/Core/Redux.h ****          int Traversal = redux_traits<Func, Derived>::Traversal,
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 184


 181:Eigen/src/Core/Redux.h ****          int Unrolling = redux_traits<Func, Derived>::Unrolling
 182:Eigen/src/Core/Redux.h **** >
 183:Eigen/src/Core/Redux.h **** struct redux_impl;
 184:Eigen/src/Core/Redux.h **** 
 185:Eigen/src/Core/Redux.h **** template<typename Func, typename Derived>
 186:Eigen/src/Core/Redux.h **** struct redux_impl<Func, Derived, DefaultTraversal, NoUnrolling>
 187:Eigen/src/Core/Redux.h **** {
 188:Eigen/src/Core/Redux.h ****   typedef typename Derived::Scalar Scalar;
 189:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC
 190:Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE Scalar run(const Derived &mat, const Func& func)
 191:Eigen/src/Core/Redux.h ****   {
 192:Eigen/src/Core/Redux.h ****     eigen_assert(mat.rows()>0 && mat.cols()>0 && "you are using an empty matrix");
 193:Eigen/src/Core/Redux.h ****     Scalar res;
 194:Eigen/src/Core/Redux.h ****     res = mat.coeffByOuterInner(0, 0);
 195:Eigen/src/Core/Redux.h ****     for(Index i = 1; i < mat.innerSize(); ++i)
 196:Eigen/src/Core/Redux.h ****       res = func(res, mat.coeffByOuterInner(0, i));
 197:Eigen/src/Core/Redux.h ****     for(Index i = 1; i < mat.outerSize(); ++i)
 198:Eigen/src/Core/Redux.h ****       for(Index j = 0; j < mat.innerSize(); ++j)
 199:Eigen/src/Core/Redux.h ****         res = func(res, mat.coeffByOuterInner(i, j));
 200:Eigen/src/Core/Redux.h ****     return res;
 201:Eigen/src/Core/Redux.h ****   }
 202:Eigen/src/Core/Redux.h **** };
 203:Eigen/src/Core/Redux.h **** 
 204:Eigen/src/Core/Redux.h **** template<typename Func, typename Derived>
 205:Eigen/src/Core/Redux.h **** struct redux_impl<Func,Derived, DefaultTraversal, CompleteUnrolling>
 206:Eigen/src/Core/Redux.h ****   : public redux_novec_unroller<Func,Derived, 0, Derived::SizeAtCompileTime>
 207:Eigen/src/Core/Redux.h **** {};
 208:Eigen/src/Core/Redux.h **** 
 209:Eigen/src/Core/Redux.h **** template<typename Func, typename Derived>
 210:Eigen/src/Core/Redux.h **** struct redux_impl<Func, Derived, LinearVectorizedTraversal, NoUnrolling>
 211:Eigen/src/Core/Redux.h **** {
 212:Eigen/src/Core/Redux.h ****   typedef typename Derived::Scalar Scalar;
 213:Eigen/src/Core/Redux.h ****   typedef typename redux_traits<Func, Derived>::PacketType PacketScalar;
 214:Eigen/src/Core/Redux.h **** 
 215:Eigen/src/Core/Redux.h ****   static Scalar run(const Derived &mat, const Func& func)
 216:Eigen/src/Core/Redux.h ****   {
 217:Eigen/src/Core/Redux.h ****     const Index size = mat.size();
 218:Eigen/src/Core/Redux.h ****     
 219:Eigen/src/Core/Redux.h ****     const Index packetSize = redux_traits<Func, Derived>::PacketSize;
 220:Eigen/src/Core/Redux.h ****     const int packetAlignment = unpacket_traits<PacketScalar>::alignment;
 221:Eigen/src/Core/Redux.h ****     enum {
 222:Eigen/src/Core/Redux.h ****       alignment0 = (bool(Derived::Flags & DirectAccessBit) && bool(packet_traits<Scalar>::AlignedOn
 223:Eigen/src/Core/Redux.h ****       alignment = EIGEN_PLAIN_ENUM_MAX(alignment0, Derived::Alignment)
 224:Eigen/src/Core/Redux.h ****     };
 225:Eigen/src/Core/Redux.h ****     const Index alignedStart = internal::first_default_aligned(mat.nestedExpression());
 226:Eigen/src/Core/Redux.h ****     const Index alignedSize2 = ((size-alignedStart)/(2*packetSize))*(2*packetSize);
 227:Eigen/src/Core/Redux.h ****     const Index alignedSize = ((size-alignedStart)/(packetSize))*(packetSize);
 228:Eigen/src/Core/Redux.h ****     const Index alignedEnd2 = alignedStart + alignedSize2;
 229:Eigen/src/Core/Redux.h ****     const Index alignedEnd  = alignedStart + alignedSize;
 230:Eigen/src/Core/Redux.h ****     Scalar res;
 231:Eigen/src/Core/Redux.h ****     if(alignedSize)
 232:Eigen/src/Core/Redux.h ****     {
 233:Eigen/src/Core/Redux.h ****       PacketScalar packet_res0 = mat.template packet<alignment,PacketScalar>(alignedStart);
 234:Eigen/src/Core/Redux.h ****       if(alignedSize>packetSize) // we have at least two packets to partly unroll the loop
 235:Eigen/src/Core/Redux.h ****       {
 236:Eigen/src/Core/Redux.h ****         PacketScalar packet_res1 = mat.template packet<alignment,PacketScalar>(alignedStart+packetS
 237:Eigen/src/Core/Redux.h ****         for(Index index = alignedStart + 2*packetSize; index < alignedEnd2; index += 2*packetSize)
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 185


 238:Eigen/src/Core/Redux.h ****         {
 239:Eigen/src/Core/Redux.h ****           packet_res0 = func.packetOp(packet_res0, mat.template packet<alignment,PacketScalar>(inde
 240:Eigen/src/Core/Redux.h ****           packet_res1 = func.packetOp(packet_res1, mat.template packet<alignment,PacketScalar>(inde
 241:Eigen/src/Core/Redux.h ****         }
 242:Eigen/src/Core/Redux.h **** 
 243:Eigen/src/Core/Redux.h ****         packet_res0 = func.packetOp(packet_res0,packet_res1);
 244:Eigen/src/Core/Redux.h ****         if(alignedEnd>alignedEnd2)
 245:Eigen/src/Core/Redux.h ****           packet_res0 = func.packetOp(packet_res0, mat.template packet<alignment,PacketScalar>(alig
 246:Eigen/src/Core/Redux.h ****       }
 247:Eigen/src/Core/Redux.h ****       res = func.predux(packet_res0);
 248:Eigen/src/Core/Redux.h **** 
 249:Eigen/src/Core/Redux.h ****       for(Index index = 0; index < alignedStart; ++index)
 250:Eigen/src/Core/Redux.h ****         res = func(res,mat.coeff(index));
 251:Eigen/src/Core/Redux.h **** 
 252:Eigen/src/Core/Redux.h ****       for(Index index = alignedEnd; index < size; ++index)
 253:Eigen/src/Core/Redux.h ****         res = func(res,mat.coeff(index));
 254:Eigen/src/Core/Redux.h ****     }
 255:Eigen/src/Core/Redux.h ****     else // too small to vectorize anything.
 256:Eigen/src/Core/Redux.h ****          // since this is dynamic-size hence inefficient anyway for such small sizes, don't try to 
 257:Eigen/src/Core/Redux.h ****     {
 258:Eigen/src/Core/Redux.h ****       res = mat.coeff(0);
 259:Eigen/src/Core/Redux.h ****       for(Index index = 1; index < size; ++index)
 260:Eigen/src/Core/Redux.h ****         res = func(res,mat.coeff(index));
 261:Eigen/src/Core/Redux.h ****     }
 262:Eigen/src/Core/Redux.h **** 
 263:Eigen/src/Core/Redux.h ****     return res;
 264:Eigen/src/Core/Redux.h ****   }
 265:Eigen/src/Core/Redux.h **** };
 266:Eigen/src/Core/Redux.h **** 
 267:Eigen/src/Core/Redux.h **** // NOTE: for SliceVectorizedTraversal we simply bypass unrolling
 268:Eigen/src/Core/Redux.h **** template<typename Func, typename Derived, int Unrolling>
 269:Eigen/src/Core/Redux.h **** struct redux_impl<Func, Derived, SliceVectorizedTraversal, Unrolling>
 270:Eigen/src/Core/Redux.h **** {
 271:Eigen/src/Core/Redux.h ****   typedef typename Derived::Scalar Scalar;
 272:Eigen/src/Core/Redux.h ****   typedef typename redux_traits<Func, Derived>::PacketType PacketType;
 273:Eigen/src/Core/Redux.h **** 
 274:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC static Scalar run(const Derived &mat, const Func& func)
 275:Eigen/src/Core/Redux.h ****   {
 276:Eigen/src/Core/Redux.h ****     eigen_assert(mat.rows()>0 && mat.cols()>0 && "you are using an empty matrix");
 277:Eigen/src/Core/Redux.h ****     const Index innerSize = mat.innerSize();
 278:Eigen/src/Core/Redux.h ****     const Index outerSize = mat.outerSize();
 279:Eigen/src/Core/Redux.h ****     enum {
 280:Eigen/src/Core/Redux.h ****       packetSize = redux_traits<Func, Derived>::PacketSize
 281:Eigen/src/Core/Redux.h ****     };
 282:Eigen/src/Core/Redux.h ****     const Index packetedInnerSize = ((innerSize)/packetSize)*packetSize;
 283:Eigen/src/Core/Redux.h ****     Scalar res;
 284:Eigen/src/Core/Redux.h ****     if(packetedInnerSize)
 285:Eigen/src/Core/Redux.h ****     {
 286:Eigen/src/Core/Redux.h ****       PacketType packet_res = mat.template packet<Unaligned,PacketType>(0,0);
 287:Eigen/src/Core/Redux.h ****       for(Index j=0; j<outerSize; ++j)
 288:Eigen/src/Core/Redux.h ****         for(Index i=(j==0?packetSize:0); i<packetedInnerSize; i+=Index(packetSize))
 289:Eigen/src/Core/Redux.h ****           packet_res = func.packetOp(packet_res, mat.template packetByOuterInner<Unaligned,PacketTy
 290:Eigen/src/Core/Redux.h **** 
 291:Eigen/src/Core/Redux.h ****       res = func.predux(packet_res);
 292:Eigen/src/Core/Redux.h ****       for(Index j=0; j<outerSize; ++j)
 293:Eigen/src/Core/Redux.h ****         for(Index i=packetedInnerSize; i<innerSize; ++i)
 294:Eigen/src/Core/Redux.h ****           res = func(res, mat.coeffByOuterInner(j,i));
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 186


 295:Eigen/src/Core/Redux.h ****     }
 296:Eigen/src/Core/Redux.h ****     else // too small to vectorize anything.
 297:Eigen/src/Core/Redux.h ****          // since this is dynamic-size hence inefficient anyway for such small sizes, don't try to 
 298:Eigen/src/Core/Redux.h ****     {
 299:Eigen/src/Core/Redux.h ****       res = redux_impl<Func, Derived, DefaultTraversal, NoUnrolling>::run(mat, func);
 300:Eigen/src/Core/Redux.h ****     }
 301:Eigen/src/Core/Redux.h **** 
 302:Eigen/src/Core/Redux.h ****     return res;
 303:Eigen/src/Core/Redux.h ****   }
 304:Eigen/src/Core/Redux.h **** };
 305:Eigen/src/Core/Redux.h **** 
 306:Eigen/src/Core/Redux.h **** template<typename Func, typename Derived>
 307:Eigen/src/Core/Redux.h **** struct redux_impl<Func, Derived, LinearVectorizedTraversal, CompleteUnrolling>
 308:Eigen/src/Core/Redux.h **** {
 309:Eigen/src/Core/Redux.h ****   typedef typename Derived::Scalar Scalar;
 310:Eigen/src/Core/Redux.h **** 
 311:Eigen/src/Core/Redux.h ****   typedef typename redux_traits<Func, Derived>::PacketType PacketScalar;
 312:Eigen/src/Core/Redux.h ****   enum {
 313:Eigen/src/Core/Redux.h ****     PacketSize = redux_traits<Func, Derived>::PacketSize,
 314:Eigen/src/Core/Redux.h ****     Size = Derived::SizeAtCompileTime,
 315:Eigen/src/Core/Redux.h ****     VectorizedSize = (Size / PacketSize) * PacketSize
 316:Eigen/src/Core/Redux.h ****   };
 317:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Scalar run(const Derived &mat, const Func& func)
 318:Eigen/src/Core/Redux.h ****   {
 319:Eigen/src/Core/Redux.h ****     eigen_assert(mat.rows()>0 && mat.cols()>0 && "you are using an empty matrix");
 320:Eigen/src/Core/Redux.h ****     if (VectorizedSize > 0) {
 321:Eigen/src/Core/Redux.h ****       Scalar res = func.predux(redux_vec_unroller<Func, Derived, 0, Size / PacketSize>::run(mat,fun
 322:Eigen/src/Core/Redux.h ****       if (VectorizedSize != Size)
 323:Eigen/src/Core/Redux.h ****         res = func(res,redux_novec_unroller<Func, Derived, VectorizedSize, Size-VectorizedSize>::ru
 324:Eigen/src/Core/Redux.h ****       return res;
 325:Eigen/src/Core/Redux.h ****     }
 326:Eigen/src/Core/Redux.h ****     else {
 327:Eigen/src/Core/Redux.h ****       return redux_novec_unroller<Func, Derived, 0, Size>::run(mat,func);
 328:Eigen/src/Core/Redux.h ****     }
 329:Eigen/src/Core/Redux.h ****   }
 330:Eigen/src/Core/Redux.h **** };
 331:Eigen/src/Core/Redux.h **** 
 332:Eigen/src/Core/Redux.h **** // evaluator adaptor
 333:Eigen/src/Core/Redux.h **** template<typename _XprType>
 334:Eigen/src/Core/Redux.h **** class redux_evaluator
 335:Eigen/src/Core/Redux.h **** {
 336:Eigen/src/Core/Redux.h **** public:
 337:Eigen/src/Core/Redux.h ****   typedef _XprType XprType;
 338:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC explicit redux_evaluator(const XprType &xpr) : m_evaluator(xpr), m_xpr(xpr) {}
 339:Eigen/src/Core/Redux.h ****   
 340:Eigen/src/Core/Redux.h ****   typedef typename XprType::Scalar Scalar;
 341:Eigen/src/Core/Redux.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
 342:Eigen/src/Core/Redux.h ****   typedef typename XprType::PacketScalar PacketScalar;
 343:Eigen/src/Core/Redux.h ****   typedef typename XprType::PacketReturnType PacketReturnType;
 344:Eigen/src/Core/Redux.h ****   
 345:Eigen/src/Core/Redux.h ****   enum {
 346:Eigen/src/Core/Redux.h ****     MaxRowsAtCompileTime = XprType::MaxRowsAtCompileTime,
 347:Eigen/src/Core/Redux.h ****     MaxColsAtCompileTime = XprType::MaxColsAtCompileTime,
 348:Eigen/src/Core/Redux.h ****     // TODO we should not remove DirectAccessBit and rather find an elegant way to query the alignm
 349:Eigen/src/Core/Redux.h ****     Flags = evaluator<XprType>::Flags & ~DirectAccessBit,
 350:Eigen/src/Core/Redux.h ****     IsRowMajor = XprType::IsRowMajor,
 351:Eigen/src/Core/Redux.h ****     SizeAtCompileTime = XprType::SizeAtCompileTime,
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 187


 352:Eigen/src/Core/Redux.h ****     InnerSizeAtCompileTime = XprType::InnerSizeAtCompileTime,
 353:Eigen/src/Core/Redux.h ****     CoeffReadCost = evaluator<XprType>::CoeffReadCost,
 354:Eigen/src/Core/Redux.h ****     Alignment = evaluator<XprType>::Alignment
 355:Eigen/src/Core/Redux.h ****   };
 356:Eigen/src/Core/Redux.h ****   
 357:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC Index rows() const { return m_xpr.rows(); }
 358:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC Index cols() const { return m_xpr.cols(); }
 359:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC Index size() const { return m_xpr.size(); }
 360:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC Index innerSize() const { return m_xpr.innerSize(); }
 361:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC Index outerSize() const { return m_xpr.outerSize(); }
 362:Eigen/src/Core/Redux.h **** 
 363:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC
 364:Eigen/src/Core/Redux.h ****   CoeffReturnType coeff(Index row, Index col) const
 365:Eigen/src/Core/Redux.h ****   { return m_evaluator.coeff(row, col); }
 366:Eigen/src/Core/Redux.h **** 
 367:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC
 368:Eigen/src/Core/Redux.h ****   CoeffReturnType coeff(Index index) const
 369:Eigen/src/Core/Redux.h ****   { return m_evaluator.coeff(index); }
 370:Eigen/src/Core/Redux.h **** 
 371:Eigen/src/Core/Redux.h ****   template<int LoadMode, typename PacketType>
 372:Eigen/src/Core/Redux.h ****   PacketType packet(Index row, Index col) const
 373:Eigen/src/Core/Redux.h ****   { return m_evaluator.template packet<LoadMode,PacketType>(row, col); }
 374:Eigen/src/Core/Redux.h **** 
 375:Eigen/src/Core/Redux.h ****   template<int LoadMode, typename PacketType>
 376:Eigen/src/Core/Redux.h ****   PacketType packet(Index index) const
 377:Eigen/src/Core/Redux.h ****   { return m_evaluator.template packet<LoadMode,PacketType>(index); }
 378:Eigen/src/Core/Redux.h ****   
 379:Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC
 380:Eigen/src/Core/Redux.h ****   CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 381:Eigen/src/Core/Redux.h ****   { return m_evaluator.coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 382:Eigen/src/Core/Redux.h ****   
 383:Eigen/src/Core/Redux.h ****   template<int LoadMode, typename PacketType>
 384:Eigen/src/Core/Redux.h ****   PacketType packetByOuterInner(Index outer, Index inner) const
 385:Eigen/src/Core/Redux.h ****   { return m_evaluator.template packet<LoadMode,PacketType>(IsRowMajor ? outer : inner, IsRowMajor 
 386:Eigen/src/Core/Redux.h ****   
 387:Eigen/src/Core/Redux.h ****   const XprType & nestedExpression() const { return m_xpr; }
 388:Eigen/src/Core/Redux.h ****   
 389:Eigen/src/Core/Redux.h **** protected:
 390:Eigen/src/Core/Redux.h ****   internal::evaluator<XprType> m_evaluator;
 391:Eigen/src/Core/Redux.h ****   const XprType &m_xpr;
 392:Eigen/src/Core/Redux.h **** };
 393:Eigen/src/Core/Redux.h **** 
 394:Eigen/src/Core/Redux.h **** } // end namespace internal
 395:Eigen/src/Core/Redux.h **** 
 396:Eigen/src/Core/Redux.h **** /***************************************************************************
 397:Eigen/src/Core/Redux.h **** * Part 4 : public API
 398:Eigen/src/Core/Redux.h **** ***************************************************************************/
 399:Eigen/src/Core/Redux.h **** 
 400:Eigen/src/Core/Redux.h **** 
 401:Eigen/src/Core/Redux.h **** /** \returns the result of a full redux operation on the whole matrix or vector using \a func
 402:Eigen/src/Core/Redux.h ****   *
 403:Eigen/src/Core/Redux.h ****   * The template parameter \a BinaryOp is the type of the functor \a func which must be
 404:Eigen/src/Core/Redux.h ****   * an associative operator. Both current C++98 and C++11 functor styles are handled.
 405:Eigen/src/Core/Redux.h ****   *
 406:Eigen/src/Core/Redux.h ****   * \sa DenseBase::sum(), DenseBase::minCoeff(), DenseBase::maxCoeff(), MatrixBase::colwise(), Matr
 407:Eigen/src/Core/Redux.h ****   */
 408:Eigen/src/Core/Redux.h **** template<typename Derived>
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 188


 409:Eigen/src/Core/Redux.h **** template<typename Func>
 410:Eigen/src/Core/Redux.h **** EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
 411:Eigen/src/Core/Redux.h **** DenseBase<Derived>::redux(const Func& func) const
 412:Eigen/src/Core/Redux.h **** {
 413:Eigen/src/Core/Redux.h ****   eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 414:Eigen/src/Core/Redux.h **** 
 415:Eigen/src/Core/Redux.h ****   typedef typename internal::redux_evaluator<Derived> ThisEvaluator;
 416:Eigen/src/Core/Redux.h ****   ThisEvaluator thisEval(derived());
 417:Eigen/src/Core/Redux.h ****   
 418:Eigen/src/Core/Redux.h ****   return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func);
 419:Eigen/src/Core/Redux.h **** }
 420:Eigen/src/Core/Redux.h **** 
 421:Eigen/src/Core/Redux.h **** /** \returns the minimum of all coefficients of \c *this.
 422:Eigen/src/Core/Redux.h ****   * \warning the result is undefined if \c *this contains NaN.
 423:Eigen/src/Core/Redux.h ****   */
 424:Eigen/src/Core/Redux.h **** template<typename Derived>
 425:Eigen/src/Core/Redux.h **** EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
 426:Eigen/src/Core/Redux.h **** DenseBase<Derived>::minCoeff() const
 427:Eigen/src/Core/Redux.h **** {
 428:Eigen/src/Core/Redux.h ****   return derived().redux(Eigen::internal::scalar_min_op<Scalar,Scalar>());
 429:Eigen/src/Core/Redux.h **** }
 430:Eigen/src/Core/Redux.h **** 
 431:Eigen/src/Core/Redux.h **** /** \returns the maximum of all coefficients of \c *this.
 432:Eigen/src/Core/Redux.h ****   * \warning the result is undefined if \c *this contains NaN.
 433:Eigen/src/Core/Redux.h ****   */
 434:Eigen/src/Core/Redux.h **** template<typename Derived>
 435:Eigen/src/Core/Redux.h **** EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
 436:Eigen/src/Core/Redux.h **** DenseBase<Derived>::maxCoeff() const
 437:Eigen/src/Core/Redux.h **** {
 438:Eigen/src/Core/Redux.h ****   return derived().redux(Eigen::internal::scalar_max_op<Scalar,Scalar>());
 439:Eigen/src/Core/Redux.h **** }
 440:Eigen/src/Core/Redux.h **** 
 441:Eigen/src/Core/Redux.h **** /** \returns the sum of all coefficients of \c *this
 442:Eigen/src/Core/Redux.h ****   *
 443:Eigen/src/Core/Redux.h ****   * If \c *this is empty, then the value 0 is returned.
 444:Eigen/src/Core/Redux.h ****   *
 445:Eigen/src/Core/Redux.h ****   * \sa trace(), prod(), mean()
 446:Eigen/src/Core/Redux.h ****   */
 447:Eigen/src/Core/Redux.h **** template<typename Derived>
 448:Eigen/src/Core/Redux.h **** EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
 449:Eigen/src/Core/Redux.h **** DenseBase<Derived>::sum() const
 1720              		.loc 26 449 1 is_stmt 1 view .LVU461
 1721              	.LBB2816:
 1722              	.LBI2816:
  36:Eigen/src/Core/functors/BinaryFunctors.h **** #else
 1723              		.loc 24 36 3 view .LVU462
  36:Eigen/src/Core/functors/BinaryFunctors.h **** #else
 1724              		.loc 24 36 3 is_stmt 0 view .LVU463
 1725              	.LBE2816:
 1726              	.LBB2817:
 1727              	.LBI2817:
 411:Eigen/src/Core/Redux.h **** {
 1728              		.loc 26 411 1 is_stmt 1 view .LVU464
 1729              	.LBB2818:
 1730              	.LBB2819:
 1731              	.LBI2819:
 338:Eigen/src/Core/Redux.h ****   
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 189


 1732              		.loc 26 338 30 view .LVU465
 1733              	.LBB2820:
 1734              	.LBB2821:
 1735              	.LBB2822:
 1736              	.LBI2822:
 244:Eigen/src/Core/CoreEvaluators.h ****     : evaluator<PlainObjectBase<XprType> >(m) 
 245:Eigen/src/Core/CoreEvaluators.h ****   { }
 246:Eigen/src/Core/CoreEvaluators.h **** };
 247:Eigen/src/Core/CoreEvaluators.h **** 
 248:Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
 249:Eigen/src/Core/CoreEvaluators.h **** struct evaluator<Array<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 250:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<PlainObjectBase<Array<Scalar, Rows, Cols, Options, MaxRows, MaxCols> > >
 251:Eigen/src/Core/CoreEvaluators.h **** {
 252:Eigen/src/Core/CoreEvaluators.h ****   typedef Array<Scalar, Rows, Cols, Options, MaxRows, MaxCols> XprType;
 253:Eigen/src/Core/CoreEvaluators.h **** 
 254:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC evaluator() {}
 255:Eigen/src/Core/CoreEvaluators.h ****   
 256:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit evaluator(const XprType& m)
 257:Eigen/src/Core/CoreEvaluators.h ****     : evaluator<PlainObjectBase<XprType> >(m) 
 258:Eigen/src/Core/CoreEvaluators.h ****   { }
 259:Eigen/src/Core/CoreEvaluators.h **** };
 260:Eigen/src/Core/CoreEvaluators.h **** 
 261:Eigen/src/Core/CoreEvaluators.h **** // -------------------- Transpose --------------------
 262:Eigen/src/Core/CoreEvaluators.h **** 
 263:Eigen/src/Core/CoreEvaluators.h **** template<typename ArgType>
 264:Eigen/src/Core/CoreEvaluators.h **** struct unary_evaluator<Transpose<ArgType>, IndexBased>
 265:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<Transpose<ArgType> >
 266:Eigen/src/Core/CoreEvaluators.h **** {
 267:Eigen/src/Core/CoreEvaluators.h ****   typedef Transpose<ArgType> XprType;
 268:Eigen/src/Core/CoreEvaluators.h ****   
 269:Eigen/src/Core/CoreEvaluators.h ****   enum {
 270:Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = evaluator<ArgType>::CoeffReadCost,    
 271:Eigen/src/Core/CoreEvaluators.h ****     Flags = evaluator<ArgType>::Flags ^ RowMajorBit,
 272:Eigen/src/Core/CoreEvaluators.h ****     Alignment = evaluator<ArgType>::Alignment
 273:Eigen/src/Core/CoreEvaluators.h ****   };
 274:Eigen/src/Core/CoreEvaluators.h **** 
 275:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 276:Eigen/src/Core/CoreEvaluators.h **** 
 277:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::Scalar Scalar;
 278:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
 279:Eigen/src/Core/CoreEvaluators.h **** 
 280:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 281:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
 282:Eigen/src/Core/CoreEvaluators.h ****   {
 283:Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.coeff(col, row);
 284:Eigen/src/Core/CoreEvaluators.h ****   }
 285:Eigen/src/Core/CoreEvaluators.h **** 
 286:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 287:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
 288:Eigen/src/Core/CoreEvaluators.h ****   {
 289:Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.coeff(index);
 290:Eigen/src/Core/CoreEvaluators.h ****   }
 291:Eigen/src/Core/CoreEvaluators.h **** 
 292:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 293:Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index row, Index col)
 294:Eigen/src/Core/CoreEvaluators.h ****   {
 295:Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.coeffRef(col, row);
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 190


 296:Eigen/src/Core/CoreEvaluators.h ****   }
 297:Eigen/src/Core/CoreEvaluators.h **** 
 298:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 299:Eigen/src/Core/CoreEvaluators.h ****   typename XprType::Scalar& coeffRef(Index index)
 300:Eigen/src/Core/CoreEvaluators.h ****   {
 301:Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.coeffRef(index);
 302:Eigen/src/Core/CoreEvaluators.h ****   }
 303:Eigen/src/Core/CoreEvaluators.h **** 
 304:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 305:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 306:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index row, Index col) const
 307:Eigen/src/Core/CoreEvaluators.h ****   {
 308:Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.template packet<LoadMode,PacketType>(col, row);
 309:Eigen/src/Core/CoreEvaluators.h ****   }
 310:Eigen/src/Core/CoreEvaluators.h **** 
 311:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 312:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 313:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index index) const
 314:Eigen/src/Core/CoreEvaluators.h ****   {
 315:Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.template packet<LoadMode,PacketType>(index);
 316:Eigen/src/Core/CoreEvaluators.h ****   }
 317:Eigen/src/Core/CoreEvaluators.h **** 
 318:Eigen/src/Core/CoreEvaluators.h ****   template<int StoreMode, typename PacketType>
 319:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 320:Eigen/src/Core/CoreEvaluators.h ****   void writePacket(Index row, Index col, const PacketType& x)
 321:Eigen/src/Core/CoreEvaluators.h ****   {
 322:Eigen/src/Core/CoreEvaluators.h ****     m_argImpl.template writePacket<StoreMode,PacketType>(col, row, x);
 323:Eigen/src/Core/CoreEvaluators.h ****   }
 324:Eigen/src/Core/CoreEvaluators.h **** 
 325:Eigen/src/Core/CoreEvaluators.h ****   template<int StoreMode, typename PacketType>
 326:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 327:Eigen/src/Core/CoreEvaluators.h ****   void writePacket(Index index, const PacketType& x)
 328:Eigen/src/Core/CoreEvaluators.h ****   {
 329:Eigen/src/Core/CoreEvaluators.h ****     m_argImpl.template writePacket<StoreMode,PacketType>(index, x);
 330:Eigen/src/Core/CoreEvaluators.h ****   }
 331:Eigen/src/Core/CoreEvaluators.h **** 
 332:Eigen/src/Core/CoreEvaluators.h **** protected:
 333:Eigen/src/Core/CoreEvaluators.h ****   evaluator<ArgType> m_argImpl;
 334:Eigen/src/Core/CoreEvaluators.h **** };
 335:Eigen/src/Core/CoreEvaluators.h **** 
 336:Eigen/src/Core/CoreEvaluators.h **** // -------------------- CwiseNullaryOp --------------------
 337:Eigen/src/Core/CoreEvaluators.h **** // Like Matrix and Array, this is not really a unary expression, so we directly specialize evaluato
 338:Eigen/src/Core/CoreEvaluators.h **** // Likewise, there is not need to more sophisticated dispatching here.
 339:Eigen/src/Core/CoreEvaluators.h **** 
 340:Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar,typename NullaryOp,
 341:Eigen/src/Core/CoreEvaluators.h ****          bool has_nullary = has_nullary_operator<NullaryOp>::value,
 342:Eigen/src/Core/CoreEvaluators.h ****          bool has_unary   = has_unary_operator<NullaryOp>::value,
 343:Eigen/src/Core/CoreEvaluators.h ****          bool has_binary  = has_binary_operator<NullaryOp>::value>
 344:Eigen/src/Core/CoreEvaluators.h **** struct nullary_wrapper
 345:Eigen/src/Core/CoreEvaluators.h **** {
 346:Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 347:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i, IndexTy
 348:Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 349:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i) const {
 350:Eigen/src/Core/CoreEvaluators.h **** 
 351:Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const 
 352:Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 191


 353:Eigen/src/Core/CoreEvaluators.h **** };
 354:Eigen/src/Core/CoreEvaluators.h **** 
 355:Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar,typename NullaryOp>
 356:Eigen/src/Core/CoreEvaluators.h **** struct nullary_wrapper<Scalar,NullaryOp,true,false,false>
 357:Eigen/src/Core/CoreEvaluators.h **** {
 358:Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 359:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexTy
 360:Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const 
 361:Eigen/src/Core/CoreEvaluators.h **** };
 362:Eigen/src/Core/CoreEvaluators.h **** 
 363:Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar,typename NullaryOp>
 364:Eigen/src/Core/CoreEvaluators.h **** struct nullary_wrapper<Scalar,NullaryOp,false,false,true>
 365:Eigen/src/Core/CoreEvaluators.h **** {
 366:Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 367:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i, IndexTy
 368:Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const 
 369:Eigen/src/Core/CoreEvaluators.h **** };
 370:Eigen/src/Core/CoreEvaluators.h **** 
 371:Eigen/src/Core/CoreEvaluators.h **** // We need the following specialization for vector-only functors assigned to a runtime vector,
 372:Eigen/src/Core/CoreEvaluators.h **** // for instance, using linspace and assigning a RowVectorXd to a MatrixXd or even a row of a Matrix
 373:Eigen/src/Core/CoreEvaluators.h **** // In this case, i==0 and j is used for the actual iteration.
 374:Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar,typename NullaryOp>
 375:Eigen/src/Core/CoreEvaluators.h **** struct nullary_wrapper<Scalar,NullaryOp,false,true,false>
 376:Eigen/src/Core/CoreEvaluators.h **** {
 377:Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 378:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i, IndexTy
 379:Eigen/src/Core/CoreEvaluators.h ****     eigen_assert(i==0 || j==0);
 380:Eigen/src/Core/CoreEvaluators.h ****     return op(i+j);
 381:Eigen/src/Core/CoreEvaluators.h ****   }
 382:Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const 
 383:Eigen/src/Core/CoreEvaluators.h ****     eigen_assert(i==0 || j==0);
 384:Eigen/src/Core/CoreEvaluators.h ****     return op.template packetOp<T>(i+j);
 385:Eigen/src/Core/CoreEvaluators.h ****   }
 386:Eigen/src/Core/CoreEvaluators.h **** 
 387:Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 388:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i) const {
 389:Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType>
 390:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const NullaryOp& op, IndexType i) const { return
 391:Eigen/src/Core/CoreEvaluators.h **** };
 392:Eigen/src/Core/CoreEvaluators.h **** 
 393:Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar,typename NullaryOp>
 394:Eigen/src/Core/CoreEvaluators.h **** struct nullary_wrapper<Scalar,NullaryOp,false,false,false> {};
 395:Eigen/src/Core/CoreEvaluators.h **** 
 396:Eigen/src/Core/CoreEvaluators.h **** #if 0 && EIGEN_COMP_MSVC>0
 397:Eigen/src/Core/CoreEvaluators.h **** // Disable this ugly workaround. This is now handled in traits<Ref>::match,
 398:Eigen/src/Core/CoreEvaluators.h **** // but this piece of code might still become handly if some other weird compilation
 399:Eigen/src/Core/CoreEvaluators.h **** // erros pop up again.
 400:Eigen/src/Core/CoreEvaluators.h **** 
 401:Eigen/src/Core/CoreEvaluators.h **** // MSVC exhibits a weird compilation error when
 402:Eigen/src/Core/CoreEvaluators.h **** // compiling:
 403:Eigen/src/Core/CoreEvaluators.h **** //    Eigen::MatrixXf A = MatrixXf::Random(3,3);
 404:Eigen/src/Core/CoreEvaluators.h **** //    Ref<const MatrixXf> R = 2.f*A;
 405:Eigen/src/Core/CoreEvaluators.h **** // and that has_*ary_operator<scalar_constant_op<float>> have not been instantiated yet.
 406:Eigen/src/Core/CoreEvaluators.h **** // The "problem" is that evaluator<2.f*A> is instantiated by traits<Ref>::match<2.f*A>
 407:Eigen/src/Core/CoreEvaluators.h **** // and at that time has_*ary_operator<T> returns true regardless of T.
 408:Eigen/src/Core/CoreEvaluators.h **** // Then nullary_wrapper is badly instantiated as nullary_wrapper<.,.,true,true,true>.
 409:Eigen/src/Core/CoreEvaluators.h **** // The trick is thus to defer the proper instantiation of nullary_wrapper when coeff(),
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 192


 410:Eigen/src/Core/CoreEvaluators.h **** // and packet() are really instantiated as implemented below:
 411:Eigen/src/Core/CoreEvaluators.h **** 
 412:Eigen/src/Core/CoreEvaluators.h **** // This is a simple wrapper around Index to enforce the re-instantiation of
 413:Eigen/src/Core/CoreEvaluators.h **** // has_*ary_operator when needed.
 414:Eigen/src/Core/CoreEvaluators.h **** template<typename T> struct nullary_wrapper_workaround_msvc {
 415:Eigen/src/Core/CoreEvaluators.h ****   nullary_wrapper_workaround_msvc(const T&);
 416:Eigen/src/Core/CoreEvaluators.h ****   operator T()const;
 417:Eigen/src/Core/CoreEvaluators.h **** };
 418:Eigen/src/Core/CoreEvaluators.h **** 
 419:Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar,typename NullaryOp>
 420:Eigen/src/Core/CoreEvaluators.h **** struct nullary_wrapper<Scalar,NullaryOp,true,true,true>
 421:Eigen/src/Core/CoreEvaluators.h **** {
 422:Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 423:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i, IndexTy
 424:Eigen/src/Core/CoreEvaluators.h ****     return nullary_wrapper<Scalar,NullaryOp,
 425:Eigen/src/Core/CoreEvaluators.h ****     has_nullary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 426:Eigen/src/Core/CoreEvaluators.h ****     has_unary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 427:Eigen/src/Core/CoreEvaluators.h ****     has_binary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value>().operator()
 428:Eigen/src/Core/CoreEvaluators.h ****   }
 429:Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 430:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i) const {
 431:Eigen/src/Core/CoreEvaluators.h ****     return nullary_wrapper<Scalar,NullaryOp,
 432:Eigen/src/Core/CoreEvaluators.h ****     has_nullary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 433:Eigen/src/Core/CoreEvaluators.h ****     has_unary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 434:Eigen/src/Core/CoreEvaluators.h ****     has_binary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value>().operator()
 435:Eigen/src/Core/CoreEvaluators.h ****   }
 436:Eigen/src/Core/CoreEvaluators.h **** 
 437:Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType>
 438:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const NullaryOp& op, IndexType i, IndexType j) c
 439:Eigen/src/Core/CoreEvaluators.h ****     return nullary_wrapper<Scalar,NullaryOp,
 440:Eigen/src/Core/CoreEvaluators.h ****     has_nullary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 441:Eigen/src/Core/CoreEvaluators.h ****     has_unary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 442:Eigen/src/Core/CoreEvaluators.h ****     has_binary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value>().template p
 443:Eigen/src/Core/CoreEvaluators.h ****   }
 444:Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType>
 445:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const NullaryOp& op, IndexType i) const {
 446:Eigen/src/Core/CoreEvaluators.h ****     return nullary_wrapper<Scalar,NullaryOp,
 447:Eigen/src/Core/CoreEvaluators.h ****     has_nullary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 448:Eigen/src/Core/CoreEvaluators.h ****     has_unary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 449:Eigen/src/Core/CoreEvaluators.h ****     has_binary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value>().template p
 450:Eigen/src/Core/CoreEvaluators.h ****   }
 451:Eigen/src/Core/CoreEvaluators.h **** };
 452:Eigen/src/Core/CoreEvaluators.h **** #endif // MSVC workaround
 453:Eigen/src/Core/CoreEvaluators.h **** 
 454:Eigen/src/Core/CoreEvaluators.h **** template<typename NullaryOp, typename PlainObjectType>
 455:Eigen/src/Core/CoreEvaluators.h **** struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 456:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 457:Eigen/src/Core/CoreEvaluators.h **** {
 458:Eigen/src/Core/CoreEvaluators.h ****   typedef CwiseNullaryOp<NullaryOp,PlainObjectType> XprType;
 459:Eigen/src/Core/CoreEvaluators.h ****   typedef typename internal::remove_all<PlainObjectType>::type PlainObjectTypeCleaned;
 460:Eigen/src/Core/CoreEvaluators.h ****   
 461:Eigen/src/Core/CoreEvaluators.h ****   enum {
 462:Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = internal::functor_traits<NullaryOp>::Cost,
 463:Eigen/src/Core/CoreEvaluators.h ****     
 464:Eigen/src/Core/CoreEvaluators.h ****     Flags = (evaluator<PlainObjectTypeCleaned>::Flags
 465:Eigen/src/Core/CoreEvaluators.h ****           &  (  HereditaryBits
 466:Eigen/src/Core/CoreEvaluators.h ****               | (functor_has_linear_access<NullaryOp>::ret  ? LinearAccessBit : 0)
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 193


 467:Eigen/src/Core/CoreEvaluators.h ****               | (functor_traits<NullaryOp>::PacketAccess    ? PacketAccessBit : 0)))
 468:Eigen/src/Core/CoreEvaluators.h ****           | (functor_traits<NullaryOp>::IsRepeatable ? 0 : EvalBeforeNestingBit),
 469:Eigen/src/Core/CoreEvaluators.h ****     Alignment = AlignedMax
 470:Eigen/src/Core/CoreEvaluators.h ****   };
 471:Eigen/src/Core/CoreEvaluators.h **** 
 472:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)
 473:Eigen/src/Core/CoreEvaluators.h ****     : m_functor(n.functor()), m_wrapper()
 474:Eigen/src/Core/CoreEvaluators.h ****   {
 475:Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 476:Eigen/src/Core/CoreEvaluators.h ****   }
 477:Eigen/src/Core/CoreEvaluators.h **** 
 478:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
 479:Eigen/src/Core/CoreEvaluators.h **** 
 480:Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 481:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 482:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(IndexType row, IndexType col) const
 483:Eigen/src/Core/CoreEvaluators.h ****   {
 484:Eigen/src/Core/CoreEvaluators.h ****     return m_wrapper(m_functor, row, col);
 485:Eigen/src/Core/CoreEvaluators.h ****   }
 486:Eigen/src/Core/CoreEvaluators.h **** 
 487:Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 488:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 489:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(IndexType index) const
 490:Eigen/src/Core/CoreEvaluators.h ****   {
 491:Eigen/src/Core/CoreEvaluators.h ****     return m_wrapper(m_functor,index);
 492:Eigen/src/Core/CoreEvaluators.h ****   }
 493:Eigen/src/Core/CoreEvaluators.h **** 
 494:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType, typename IndexType>
 495:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 496:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(IndexType row, IndexType col) const
 497:Eigen/src/Core/CoreEvaluators.h ****   {
 498:Eigen/src/Core/CoreEvaluators.h ****     return m_wrapper.template packetOp<PacketType>(m_functor, row, col);
 499:Eigen/src/Core/CoreEvaluators.h ****   }
 500:Eigen/src/Core/CoreEvaluators.h **** 
 501:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType, typename IndexType>
 502:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 503:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(IndexType index) const
 504:Eigen/src/Core/CoreEvaluators.h ****   {
 505:Eigen/src/Core/CoreEvaluators.h ****     return m_wrapper.template packetOp<PacketType>(m_functor, index);
 506:Eigen/src/Core/CoreEvaluators.h ****   }
 507:Eigen/src/Core/CoreEvaluators.h **** 
 508:Eigen/src/Core/CoreEvaluators.h **** protected:
 509:Eigen/src/Core/CoreEvaluators.h ****   const NullaryOp m_functor;
 510:Eigen/src/Core/CoreEvaluators.h ****   const internal::nullary_wrapper<CoeffReturnType,NullaryOp> m_wrapper;
 511:Eigen/src/Core/CoreEvaluators.h **** };
 512:Eigen/src/Core/CoreEvaluators.h **** 
 513:Eigen/src/Core/CoreEvaluators.h **** // -------------------- CwiseUnaryOp --------------------
 514:Eigen/src/Core/CoreEvaluators.h **** 
 515:Eigen/src/Core/CoreEvaluators.h **** template<typename UnaryOp, typename ArgType>
 516:Eigen/src/Core/CoreEvaluators.h **** struct unary_evaluator<CwiseUnaryOp<UnaryOp, ArgType>, IndexBased >
 517:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<CwiseUnaryOp<UnaryOp, ArgType> >
 518:Eigen/src/Core/CoreEvaluators.h **** {
 519:Eigen/src/Core/CoreEvaluators.h ****   typedef CwiseUnaryOp<UnaryOp, ArgType> XprType;
 520:Eigen/src/Core/CoreEvaluators.h ****   
 521:Eigen/src/Core/CoreEvaluators.h ****   enum {
 522:Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = evaluator<ArgType>::CoeffReadCost + functor_traits<UnaryOp>::Cost,
 523:Eigen/src/Core/CoreEvaluators.h ****     
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 194


 524:Eigen/src/Core/CoreEvaluators.h ****     Flags = evaluator<ArgType>::Flags
 525:Eigen/src/Core/CoreEvaluators.h ****           & (HereditaryBits | LinearAccessBit | (functor_traits<UnaryOp>::PacketAccess ? PacketAcce
 526:Eigen/src/Core/CoreEvaluators.h ****     Alignment = evaluator<ArgType>::Alignment
 527:Eigen/src/Core/CoreEvaluators.h ****   };
 528:Eigen/src/Core/CoreEvaluators.h **** 
 529:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 530:Eigen/src/Core/CoreEvaluators.h ****   explicit unary_evaluator(const XprType& op)
 531:Eigen/src/Core/CoreEvaluators.h ****     : m_functor(op.functor()), 
 532:Eigen/src/Core/CoreEvaluators.h ****       m_argImpl(op.nestedExpression()) 
 533:Eigen/src/Core/CoreEvaluators.h ****   {
 534:Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<UnaryOp>::Cost);
 535:Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 536:Eigen/src/Core/CoreEvaluators.h ****   }
 537:Eigen/src/Core/CoreEvaluators.h **** 
 538:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
 539:Eigen/src/Core/CoreEvaluators.h **** 
 540:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 541:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
 542:Eigen/src/Core/CoreEvaluators.h ****   {
 543:Eigen/src/Core/CoreEvaluators.h ****     return m_functor(m_argImpl.coeff(row, col));
 544:Eigen/src/Core/CoreEvaluators.h ****   }
 545:Eigen/src/Core/CoreEvaluators.h **** 
 546:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 547:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
 548:Eigen/src/Core/CoreEvaluators.h ****   {
 549:Eigen/src/Core/CoreEvaluators.h ****     return m_functor(m_argImpl.coeff(index));
 550:Eigen/src/Core/CoreEvaluators.h ****   }
 551:Eigen/src/Core/CoreEvaluators.h **** 
 552:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 553:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 554:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index row, Index col) const
 555:Eigen/src/Core/CoreEvaluators.h ****   {
 556:Eigen/src/Core/CoreEvaluators.h ****     return m_functor.packetOp(m_argImpl.template packet<LoadMode, PacketType>(row, col));
 557:Eigen/src/Core/CoreEvaluators.h ****   }
 558:Eigen/src/Core/CoreEvaluators.h **** 
 559:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 560:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 561:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index index) const
 562:Eigen/src/Core/CoreEvaluators.h ****   {
 563:Eigen/src/Core/CoreEvaluators.h ****     return m_functor.packetOp(m_argImpl.template packet<LoadMode, PacketType>(index));
 564:Eigen/src/Core/CoreEvaluators.h ****   }
 565:Eigen/src/Core/CoreEvaluators.h **** 
 566:Eigen/src/Core/CoreEvaluators.h **** protected:
 567:Eigen/src/Core/CoreEvaluators.h ****   const UnaryOp m_functor;
 568:Eigen/src/Core/CoreEvaluators.h ****   evaluator<ArgType> m_argImpl;
 569:Eigen/src/Core/CoreEvaluators.h **** };
 570:Eigen/src/Core/CoreEvaluators.h **** 
 571:Eigen/src/Core/CoreEvaluators.h **** // -------------------- CwiseTernaryOp --------------------
 572:Eigen/src/Core/CoreEvaluators.h **** 
 573:Eigen/src/Core/CoreEvaluators.h **** // this is a ternary expression
 574:Eigen/src/Core/CoreEvaluators.h **** template<typename TernaryOp, typename Arg1, typename Arg2, typename Arg3>
 575:Eigen/src/Core/CoreEvaluators.h **** struct evaluator<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> >
 576:Eigen/src/Core/CoreEvaluators.h ****   : public ternary_evaluator<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> >
 577:Eigen/src/Core/CoreEvaluators.h **** {
 578:Eigen/src/Core/CoreEvaluators.h ****   typedef CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> XprType;
 579:Eigen/src/Core/CoreEvaluators.h ****   typedef ternary_evaluator<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> > Base;
 580:Eigen/src/Core/CoreEvaluators.h ****   
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 195


 581:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit evaluator(const XprType& xpr) : Base(xpr) {}
 582:Eigen/src/Core/CoreEvaluators.h **** };
 583:Eigen/src/Core/CoreEvaluators.h **** 
 584:Eigen/src/Core/CoreEvaluators.h **** template<typename TernaryOp, typename Arg1, typename Arg2, typename Arg3>
 585:Eigen/src/Core/CoreEvaluators.h **** struct ternary_evaluator<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3>, IndexBased, IndexBased>
 586:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> >
 587:Eigen/src/Core/CoreEvaluators.h **** {
 588:Eigen/src/Core/CoreEvaluators.h ****   typedef CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> XprType;
 589:Eigen/src/Core/CoreEvaluators.h ****   
 590:Eigen/src/Core/CoreEvaluators.h ****   enum {
 591:Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = evaluator<Arg1>::CoeffReadCost + evaluator<Arg2>::CoeffReadCost + evaluator<Arg
 592:Eigen/src/Core/CoreEvaluators.h ****     
 593:Eigen/src/Core/CoreEvaluators.h ****     Arg1Flags = evaluator<Arg1>::Flags,
 594:Eigen/src/Core/CoreEvaluators.h ****     Arg2Flags = evaluator<Arg2>::Flags,
 595:Eigen/src/Core/CoreEvaluators.h ****     Arg3Flags = evaluator<Arg3>::Flags,
 596:Eigen/src/Core/CoreEvaluators.h ****     SameType = is_same<typename Arg1::Scalar,typename Arg2::Scalar>::value && is_same<typename Arg1
 597:Eigen/src/Core/CoreEvaluators.h ****     StorageOrdersAgree = (int(Arg1Flags)&RowMajorBit)==(int(Arg2Flags)&RowMajorBit) && (int(Arg1Fla
 598:Eigen/src/Core/CoreEvaluators.h ****     Flags0 = (int(Arg1Flags) | int(Arg2Flags) | int(Arg3Flags)) & (
 599:Eigen/src/Core/CoreEvaluators.h ****         HereditaryBits
 600:Eigen/src/Core/CoreEvaluators.h ****         | (int(Arg1Flags) & int(Arg2Flags) & int(Arg3Flags) &
 601:Eigen/src/Core/CoreEvaluators.h ****            ( (StorageOrdersAgree ? LinearAccessBit : 0)
 602:Eigen/src/Core/CoreEvaluators.h ****            | (functor_traits<TernaryOp>::PacketAccess && StorageOrdersAgree && SameType ? PacketAcc
 603:Eigen/src/Core/CoreEvaluators.h ****            )
 604:Eigen/src/Core/CoreEvaluators.h ****         )
 605:Eigen/src/Core/CoreEvaluators.h ****      ),
 606:Eigen/src/Core/CoreEvaluators.h ****     Flags = (Flags0 & ~RowMajorBit) | (Arg1Flags & RowMajorBit),
 607:Eigen/src/Core/CoreEvaluators.h ****     Alignment = EIGEN_PLAIN_ENUM_MIN(
 608:Eigen/src/Core/CoreEvaluators.h ****         EIGEN_PLAIN_ENUM_MIN(evaluator<Arg1>::Alignment, evaluator<Arg2>::Alignment),
 609:Eigen/src/Core/CoreEvaluators.h ****         evaluator<Arg3>::Alignment)
 610:Eigen/src/Core/CoreEvaluators.h ****   };
 611:Eigen/src/Core/CoreEvaluators.h **** 
 612:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit ternary_evaluator(const XprType& xpr)
 613:Eigen/src/Core/CoreEvaluators.h ****     : m_functor(xpr.functor()),
 614:Eigen/src/Core/CoreEvaluators.h ****       m_arg1Impl(xpr.arg1()), 
 615:Eigen/src/Core/CoreEvaluators.h ****       m_arg2Impl(xpr.arg2()), 
 616:Eigen/src/Core/CoreEvaluators.h ****       m_arg3Impl(xpr.arg3())  
 617:Eigen/src/Core/CoreEvaluators.h ****   {
 618:Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<TernaryOp>::Cost);
 619:Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 620:Eigen/src/Core/CoreEvaluators.h ****   }
 621:Eigen/src/Core/CoreEvaluators.h **** 
 622:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
 623:Eigen/src/Core/CoreEvaluators.h **** 
 624:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 625:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
 626:Eigen/src/Core/CoreEvaluators.h ****   {
 627:Eigen/src/Core/CoreEvaluators.h ****     return m_functor(m_arg1Impl.coeff(row, col), m_arg2Impl.coeff(row, col), m_arg3Impl.coeff(row, 
 628:Eigen/src/Core/CoreEvaluators.h ****   }
 629:Eigen/src/Core/CoreEvaluators.h **** 
 630:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 631:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
 632:Eigen/src/Core/CoreEvaluators.h ****   {
 633:Eigen/src/Core/CoreEvaluators.h ****     return m_functor(m_arg1Impl.coeff(index), m_arg2Impl.coeff(index), m_arg3Impl.coeff(index));
 634:Eigen/src/Core/CoreEvaluators.h ****   }
 635:Eigen/src/Core/CoreEvaluators.h **** 
 636:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 637:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 196


 638:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index row, Index col) const
 639:Eigen/src/Core/CoreEvaluators.h ****   {
 640:Eigen/src/Core/CoreEvaluators.h ****     return m_functor.packetOp(m_arg1Impl.template packet<LoadMode,PacketType>(row, col),
 641:Eigen/src/Core/CoreEvaluators.h ****                               m_arg2Impl.template packet<LoadMode,PacketType>(row, col),
 642:Eigen/src/Core/CoreEvaluators.h ****                               m_arg3Impl.template packet<LoadMode,PacketType>(row, col));
 643:Eigen/src/Core/CoreEvaluators.h ****   }
 644:Eigen/src/Core/CoreEvaluators.h **** 
 645:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 646:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 647:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index index) const
 648:Eigen/src/Core/CoreEvaluators.h ****   {
 649:Eigen/src/Core/CoreEvaluators.h ****     return m_functor.packetOp(m_arg1Impl.template packet<LoadMode,PacketType>(index),
 650:Eigen/src/Core/CoreEvaluators.h ****                               m_arg2Impl.template packet<LoadMode,PacketType>(index),
 651:Eigen/src/Core/CoreEvaluators.h ****                               m_arg3Impl.template packet<LoadMode,PacketType>(index));
 652:Eigen/src/Core/CoreEvaluators.h ****   }
 653:Eigen/src/Core/CoreEvaluators.h **** 
 654:Eigen/src/Core/CoreEvaluators.h **** protected:
 655:Eigen/src/Core/CoreEvaluators.h ****   const TernaryOp m_functor;
 656:Eigen/src/Core/CoreEvaluators.h ****   evaluator<Arg1> m_arg1Impl;
 657:Eigen/src/Core/CoreEvaluators.h ****   evaluator<Arg2> m_arg2Impl;
 658:Eigen/src/Core/CoreEvaluators.h ****   evaluator<Arg3> m_arg3Impl;
 659:Eigen/src/Core/CoreEvaluators.h **** };
 660:Eigen/src/Core/CoreEvaluators.h **** 
 661:Eigen/src/Core/CoreEvaluators.h **** // -------------------- CwiseBinaryOp --------------------
 662:Eigen/src/Core/CoreEvaluators.h **** 
 663:Eigen/src/Core/CoreEvaluators.h **** // this is a binary expression
 664:Eigen/src/Core/CoreEvaluators.h **** template<typename BinaryOp, typename Lhs, typename Rhs>
 665:Eigen/src/Core/CoreEvaluators.h **** struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 666:Eigen/src/Core/CoreEvaluators.h ****   : public binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 667:Eigen/src/Core/CoreEvaluators.h **** {
 668:Eigen/src/Core/CoreEvaluators.h ****   typedef CwiseBinaryOp<BinaryOp, Lhs, Rhs> XprType;
 669:Eigen/src/Core/CoreEvaluators.h ****   typedef binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> > Base;
 670:Eigen/src/Core/CoreEvaluators.h ****   
 671:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit evaluator(const XprType& xpr) : Base(xpr) {}
 1737              		.loc 15 671 30 view .LVU466
 1738              	.LBB2823:
 1739              	.LBB2824:
 1740              	.LBI2824:
 672:Eigen/src/Core/CoreEvaluators.h **** };
 673:Eigen/src/Core/CoreEvaluators.h **** 
 674:Eigen/src/Core/CoreEvaluators.h **** template<typename BinaryOp, typename Lhs, typename Rhs>
 675:Eigen/src/Core/CoreEvaluators.h **** struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 676:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 677:Eigen/src/Core/CoreEvaluators.h **** {
 678:Eigen/src/Core/CoreEvaluators.h ****   typedef CwiseBinaryOp<BinaryOp, Lhs, Rhs> XprType;
 679:Eigen/src/Core/CoreEvaluators.h ****   
 680:Eigen/src/Core/CoreEvaluators.h ****   enum {
 681:Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = evaluator<Lhs>::CoeffReadCost + evaluator<Rhs>::CoeffReadCost + functor_traits<
 682:Eigen/src/Core/CoreEvaluators.h ****     
 683:Eigen/src/Core/CoreEvaluators.h ****     LhsFlags = evaluator<Lhs>::Flags,
 684:Eigen/src/Core/CoreEvaluators.h ****     RhsFlags = evaluator<Rhs>::Flags,
 685:Eigen/src/Core/CoreEvaluators.h ****     SameType = is_same<typename Lhs::Scalar,typename Rhs::Scalar>::value,
 686:Eigen/src/Core/CoreEvaluators.h ****     StorageOrdersAgree = (int(LhsFlags)&RowMajorBit)==(int(RhsFlags)&RowMajorBit),
 687:Eigen/src/Core/CoreEvaluators.h ****     Flags0 = (int(LhsFlags) | int(RhsFlags)) & (
 688:Eigen/src/Core/CoreEvaluators.h ****         HereditaryBits
 689:Eigen/src/Core/CoreEvaluators.h ****       | (int(LhsFlags) & int(RhsFlags) &
 690:Eigen/src/Core/CoreEvaluators.h ****            ( (StorageOrdersAgree ? LinearAccessBit : 0)
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 197


 691:Eigen/src/Core/CoreEvaluators.h ****            | (functor_traits<BinaryOp>::PacketAccess && StorageOrdersAgree && SameType ? PacketAcce
 692:Eigen/src/Core/CoreEvaluators.h ****            )
 693:Eigen/src/Core/CoreEvaluators.h ****         )
 694:Eigen/src/Core/CoreEvaluators.h ****      ),
 695:Eigen/src/Core/CoreEvaluators.h ****     Flags = (Flags0 & ~RowMajorBit) | (LhsFlags & RowMajorBit),
 696:Eigen/src/Core/CoreEvaluators.h ****     Alignment = EIGEN_PLAIN_ENUM_MIN(evaluator<Lhs>::Alignment,evaluator<Rhs>::Alignment)
 697:Eigen/src/Core/CoreEvaluators.h ****   };
 698:Eigen/src/Core/CoreEvaluators.h **** 
 699:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit binary_evaluator(const XprType& xpr)
 1741              		.loc 15 699 30 view .LVU467
 1742              	.LBB2825:
 1743              	.LBB2826:
 1744              	.LBI2826:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 1745              		.loc 15 109 8 view .LVU468
 1746              	.LBB2827:
 1747              	.LBI2827:
 1748              		.loc 16 299 21 view .LVU469
 1749              		.loc 16 299 21 is_stmt 0 view .LVU470
 1750              	.LBE2827:
 1751              	.LBE2826:
 1752              	.LBB2828:
 1753              	.LBI2828:
 138:Eigen/src/Core/CwiseBinaryOp.h **** 
 1754              		.loc 25 138 21 is_stmt 1 view .LVU471
 138:Eigen/src/Core/CwiseBinaryOp.h **** 
 1755              		.loc 25 138 21 is_stmt 0 view .LVU472
 1756              	.LBE2828:
 1757              	.LBB2829:
 1758              	.LBI2829:
 1759              		.loc 24 80 3 is_stmt 1 view .LVU473
 1760              		.loc 24 80 3 is_stmt 0 view .LVU474
 1761              	.LBE2829:
 1762              	.LBB2830:
 1763              	.LBI2830:
 132:Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the right hand side nested expression */
 1764              		.loc 25 132 23 is_stmt 1 view .LVU475
 132:Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the right hand side nested expression */
 1765              		.loc 25 132 23 is_stmt 0 view .LVU476
 1766              	.LBE2830:
 1767              	.LBB2831:
 1768              	.LBI2831:
 103:Eigen/src/Core/CoreEvaluators.h **** };
 1769              		.loc 15 103 12 is_stmt 1 view .LVU477
 1770              	.LBB2832:
 1771              	.LBB2833:
 1772              	.LBI2833:
  93:Eigen/src/Core/CoreEvaluators.h **** };
 1773              		.loc 15 93 30 view .LVU478
 1774              	.LBB2834:
 1775              	.LBB2835:
 1776              	.LBI2835:
 275:Eigen/src/Core/CoreEvaluators.h **** 
 1777              		.loc 15 275 30 view .LVU479
 1778              	.LBB2836:
 1779              	.LBB2837:
 1780              	.LBI2837:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 198


 109:Eigen/src/Core/CoreEvaluators.h **** {
 1781              		.loc 15 109 8 view .LVU480
 1782              	.LBB2838:
 1783              	.LBI2838:
 1784              		.loc 16 299 21 view .LVU481
 1785              		.loc 16 299 21 is_stmt 0 view .LVU482
 1786              	.LBE2838:
 1787              	.LBE2837:
 1788              	.LBB2839:
 1789              	.LBI2839:
  74:Eigen/src/Core/Transpose.h **** 
 1790              		.loc 22 74 5 is_stmt 1 view .LVU483
  74:Eigen/src/Core/Transpose.h **** 
 1791              		.loc 22 74 5 is_stmt 0 view .LVU484
 1792              	.LBE2839:
 1793              	.LBB2840:
 1794              	.LBI2840:
 103:Eigen/src/Core/CoreEvaluators.h **** };
 1795              		.loc 15 103 12 is_stmt 1 view .LVU485
 1796              	.LBB2841:
 1797              	.LBB2842:
 1798              	.LBI2842:
 700:Eigen/src/Core/CoreEvaluators.h ****     : m_functor(xpr.functor()),
 701:Eigen/src/Core/CoreEvaluators.h ****       m_lhsImpl(xpr.lhs()), 
 702:Eigen/src/Core/CoreEvaluators.h ****       m_rhsImpl(xpr.rhs())  
 703:Eigen/src/Core/CoreEvaluators.h ****   {
 704:Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<BinaryOp>::Cost);
 705:Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 706:Eigen/src/Core/CoreEvaluators.h ****   }
 707:Eigen/src/Core/CoreEvaluators.h **** 
 708:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
 709:Eigen/src/Core/CoreEvaluators.h **** 
 710:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 711:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
 712:Eigen/src/Core/CoreEvaluators.h ****   {
 713:Eigen/src/Core/CoreEvaluators.h ****     return m_functor(m_lhsImpl.coeff(row, col), m_rhsImpl.coeff(row, col));
 714:Eigen/src/Core/CoreEvaluators.h ****   }
 715:Eigen/src/Core/CoreEvaluators.h **** 
 716:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 717:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
 718:Eigen/src/Core/CoreEvaluators.h ****   {
 719:Eigen/src/Core/CoreEvaluators.h ****     return m_functor(m_lhsImpl.coeff(index), m_rhsImpl.coeff(index));
 720:Eigen/src/Core/CoreEvaluators.h ****   }
 721:Eigen/src/Core/CoreEvaluators.h **** 
 722:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 723:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 724:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index row, Index col) const
 725:Eigen/src/Core/CoreEvaluators.h ****   {
 726:Eigen/src/Core/CoreEvaluators.h ****     return m_functor.packetOp(m_lhsImpl.template packet<LoadMode,PacketType>(row, col),
 727:Eigen/src/Core/CoreEvaluators.h ****                               m_rhsImpl.template packet<LoadMode,PacketType>(row, col));
 728:Eigen/src/Core/CoreEvaluators.h ****   }
 729:Eigen/src/Core/CoreEvaluators.h **** 
 730:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 731:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 732:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index index) const
 733:Eigen/src/Core/CoreEvaluators.h ****   {
 734:Eigen/src/Core/CoreEvaluators.h ****     return m_functor.packetOp(m_lhsImpl.template packet<LoadMode,PacketType>(index),
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 199


 735:Eigen/src/Core/CoreEvaluators.h ****                               m_rhsImpl.template packet<LoadMode,PacketType>(index));
 736:Eigen/src/Core/CoreEvaluators.h ****   }
 737:Eigen/src/Core/CoreEvaluators.h **** 
 738:Eigen/src/Core/CoreEvaluators.h **** protected:
 739:Eigen/src/Core/CoreEvaluators.h ****   const BinaryOp m_functor;
 740:Eigen/src/Core/CoreEvaluators.h ****   evaluator<Lhs> m_lhsImpl;
 741:Eigen/src/Core/CoreEvaluators.h ****   evaluator<Rhs> m_rhsImpl;
 742:Eigen/src/Core/CoreEvaluators.h **** };
 743:Eigen/src/Core/CoreEvaluators.h **** 
 744:Eigen/src/Core/CoreEvaluators.h **** // -------------------- CwiseUnaryView --------------------
 745:Eigen/src/Core/CoreEvaluators.h **** 
 746:Eigen/src/Core/CoreEvaluators.h **** template<typename UnaryOp, typename ArgType>
 747:Eigen/src/Core/CoreEvaluators.h **** struct unary_evaluator<CwiseUnaryView<UnaryOp, ArgType>, IndexBased>
 748:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<CwiseUnaryView<UnaryOp, ArgType> >
 749:Eigen/src/Core/CoreEvaluators.h **** {
 750:Eigen/src/Core/CoreEvaluators.h ****   typedef CwiseUnaryView<UnaryOp, ArgType> XprType;
 751:Eigen/src/Core/CoreEvaluators.h ****   
 752:Eigen/src/Core/CoreEvaluators.h ****   enum {
 753:Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = evaluator<ArgType>::CoeffReadCost + functor_traits<UnaryOp>::Cost,
 754:Eigen/src/Core/CoreEvaluators.h ****     
 755:Eigen/src/Core/CoreEvaluators.h ****     Flags = (evaluator<ArgType>::Flags & (HereditaryBits | LinearAccessBit | DirectAccessBit)),
 756:Eigen/src/Core/CoreEvaluators.h ****     
 757:Eigen/src/Core/CoreEvaluators.h ****     Alignment = 0 // FIXME it is not very clear why alignment is necessarily lost...
 758:Eigen/src/Core/CoreEvaluators.h ****   };
 759:Eigen/src/Core/CoreEvaluators.h **** 
 760:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit unary_evaluator(const XprType& op)
 761:Eigen/src/Core/CoreEvaluators.h ****     : m_unaryOp(op.functor()), 
 762:Eigen/src/Core/CoreEvaluators.h ****       m_argImpl(op.nestedExpression()) 
 763:Eigen/src/Core/CoreEvaluators.h ****   {
 764:Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<UnaryOp>::Cost);
 765:Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 766:Eigen/src/Core/CoreEvaluators.h ****   }
 767:Eigen/src/Core/CoreEvaluators.h **** 
 768:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::Scalar Scalar;
 769:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
 770:Eigen/src/Core/CoreEvaluators.h **** 
 771:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 772:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
 773:Eigen/src/Core/CoreEvaluators.h ****   {
 774:Eigen/src/Core/CoreEvaluators.h ****     return m_unaryOp(m_argImpl.coeff(row, col));
 775:Eigen/src/Core/CoreEvaluators.h ****   }
 776:Eigen/src/Core/CoreEvaluators.h **** 
 777:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 778:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
 779:Eigen/src/Core/CoreEvaluators.h ****   {
 780:Eigen/src/Core/CoreEvaluators.h ****     return m_unaryOp(m_argImpl.coeff(index));
 781:Eigen/src/Core/CoreEvaluators.h ****   }
 782:Eigen/src/Core/CoreEvaluators.h **** 
 783:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 784:Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index row, Index col)
 785:Eigen/src/Core/CoreEvaluators.h ****   {
 786:Eigen/src/Core/CoreEvaluators.h ****     return m_unaryOp(m_argImpl.coeffRef(row, col));
 787:Eigen/src/Core/CoreEvaluators.h ****   }
 788:Eigen/src/Core/CoreEvaluators.h **** 
 789:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 790:Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index index)
 791:Eigen/src/Core/CoreEvaluators.h ****   {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 200


 792:Eigen/src/Core/CoreEvaluators.h ****     return m_unaryOp(m_argImpl.coeffRef(index));
 793:Eigen/src/Core/CoreEvaluators.h ****   }
 794:Eigen/src/Core/CoreEvaluators.h **** 
 795:Eigen/src/Core/CoreEvaluators.h **** protected:
 796:Eigen/src/Core/CoreEvaluators.h ****   const UnaryOp m_unaryOp;
 797:Eigen/src/Core/CoreEvaluators.h ****   evaluator<ArgType> m_argImpl;
 798:Eigen/src/Core/CoreEvaluators.h **** };
 799:Eigen/src/Core/CoreEvaluators.h **** 
 800:Eigen/src/Core/CoreEvaluators.h **** // -------------------- Map --------------------
 801:Eigen/src/Core/CoreEvaluators.h **** 
 802:Eigen/src/Core/CoreEvaluators.h **** // FIXME perhaps the PlainObjectType could be provided by Derived::PlainObject ?
 803:Eigen/src/Core/CoreEvaluators.h **** // but that might complicate template specialization
 804:Eigen/src/Core/CoreEvaluators.h **** template<typename Derived, typename PlainObjectType>
 805:Eigen/src/Core/CoreEvaluators.h **** struct mapbase_evaluator;
 806:Eigen/src/Core/CoreEvaluators.h **** 
 807:Eigen/src/Core/CoreEvaluators.h **** template<typename Derived, typename PlainObjectType>
 808:Eigen/src/Core/CoreEvaluators.h **** struct mapbase_evaluator : evaluator_base<Derived>
 809:Eigen/src/Core/CoreEvaluators.h **** {
 810:Eigen/src/Core/CoreEvaluators.h ****   typedef Derived  XprType;
 811:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::PointerType PointerType;
 812:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::Scalar Scalar;
 813:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
 814:Eigen/src/Core/CoreEvaluators.h ****   
 815:Eigen/src/Core/CoreEvaluators.h ****   enum {
 816:Eigen/src/Core/CoreEvaluators.h ****     IsRowMajor = XprType::RowsAtCompileTime,
 817:Eigen/src/Core/CoreEvaluators.h ****     ColsAtCompileTime = XprType::ColsAtCompileTime,
 818:Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = NumTraits<Scalar>::ReadCost
 819:Eigen/src/Core/CoreEvaluators.h ****   };
 820:Eigen/src/Core/CoreEvaluators.h **** 
 821:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit mapbase_evaluator(const XprType& map)
 822:Eigen/src/Core/CoreEvaluators.h ****     : m_data(const_cast<PointerType>(map.data())),
 823:Eigen/src/Core/CoreEvaluators.h ****       m_innerStride(map.innerStride()),
 824:Eigen/src/Core/CoreEvaluators.h ****       m_outerStride(map.outerStride())
 825:Eigen/src/Core/CoreEvaluators.h ****   {
 826:Eigen/src/Core/CoreEvaluators.h ****     EIGEN_STATIC_ASSERT(EIGEN_IMPLIES(evaluator<Derived>::Flags&PacketAccessBit, internal::inner_st
 827:Eigen/src/Core/CoreEvaluators.h ****                         PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1);
 828:Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 829:Eigen/src/Core/CoreEvaluators.h ****   }
 830:Eigen/src/Core/CoreEvaluators.h **** 
 831:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 832:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
 833:Eigen/src/Core/CoreEvaluators.h ****   {
 834:Eigen/src/Core/CoreEvaluators.h ****     return m_data[col * colStride() + row * rowStride()];
 835:Eigen/src/Core/CoreEvaluators.h ****   }
 836:Eigen/src/Core/CoreEvaluators.h **** 
 837:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 838:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
 839:Eigen/src/Core/CoreEvaluators.h ****   {
 840:Eigen/src/Core/CoreEvaluators.h ****     return m_data[index * m_innerStride.value()];
 841:Eigen/src/Core/CoreEvaluators.h ****   }
 842:Eigen/src/Core/CoreEvaluators.h **** 
 843:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 844:Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index row, Index col)
 845:Eigen/src/Core/CoreEvaluators.h ****   {
 846:Eigen/src/Core/CoreEvaluators.h ****     return m_data[col * colStride() + row * rowStride()];
 847:Eigen/src/Core/CoreEvaluators.h ****   }
 848:Eigen/src/Core/CoreEvaluators.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 201


 849:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 850:Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index index)
 851:Eigen/src/Core/CoreEvaluators.h ****   {
 852:Eigen/src/Core/CoreEvaluators.h ****     return m_data[index * m_innerStride.value()];
 853:Eigen/src/Core/CoreEvaluators.h ****   }
 854:Eigen/src/Core/CoreEvaluators.h **** 
 855:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 856:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 857:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index row, Index col) const
 858:Eigen/src/Core/CoreEvaluators.h ****   {
 859:Eigen/src/Core/CoreEvaluators.h ****     PointerType ptr = m_data + row * rowStride() + col * colStride();
 860:Eigen/src/Core/CoreEvaluators.h ****     return internal::ploadt<PacketType, LoadMode>(ptr);
 861:Eigen/src/Core/CoreEvaluators.h ****   }
 862:Eigen/src/Core/CoreEvaluators.h **** 
 863:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 864:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 865:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index index) const
 866:Eigen/src/Core/CoreEvaluators.h ****   {
 867:Eigen/src/Core/CoreEvaluators.h ****     return internal::ploadt<PacketType, LoadMode>(m_data + index * m_innerStride.value());
 868:Eigen/src/Core/CoreEvaluators.h ****   }
 869:Eigen/src/Core/CoreEvaluators.h **** 
 870:Eigen/src/Core/CoreEvaluators.h ****   template<int StoreMode, typename PacketType>
 871:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 872:Eigen/src/Core/CoreEvaluators.h ****   void writePacket(Index row, Index col, const PacketType& x)
 873:Eigen/src/Core/CoreEvaluators.h ****   {
 874:Eigen/src/Core/CoreEvaluators.h ****     PointerType ptr = m_data + row * rowStride() + col * colStride();
 875:Eigen/src/Core/CoreEvaluators.h ****     return internal::pstoret<Scalar, PacketType, StoreMode>(ptr, x);
 876:Eigen/src/Core/CoreEvaluators.h ****   }
 877:Eigen/src/Core/CoreEvaluators.h **** 
 878:Eigen/src/Core/CoreEvaluators.h ****   template<int StoreMode, typename PacketType>
 879:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 880:Eigen/src/Core/CoreEvaluators.h ****   void writePacket(Index index, const PacketType& x)
 881:Eigen/src/Core/CoreEvaluators.h ****   {
 882:Eigen/src/Core/CoreEvaluators.h ****     internal::pstoret<Scalar, PacketType, StoreMode>(m_data + index * m_innerStride.value(), x);
 883:Eigen/src/Core/CoreEvaluators.h ****   }
 884:Eigen/src/Core/CoreEvaluators.h **** protected:
 885:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC
 886:Eigen/src/Core/CoreEvaluators.h ****   inline Index rowStride() const { return XprType::IsRowMajor ? m_outerStride.value() : m_innerStri
 887:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC
 888:Eigen/src/Core/CoreEvaluators.h ****   inline Index colStride() const { return XprType::IsRowMajor ? m_innerStride.value() : m_outerStri
 889:Eigen/src/Core/CoreEvaluators.h **** 
 890:Eigen/src/Core/CoreEvaluators.h ****   PointerType m_data;
 891:Eigen/src/Core/CoreEvaluators.h ****   const internal::variable_if_dynamic<Index, XprType::InnerStrideAtCompileTime> m_innerStride;
 892:Eigen/src/Core/CoreEvaluators.h ****   const internal::variable_if_dynamic<Index, XprType::OuterStrideAtCompileTime> m_outerStride;
 893:Eigen/src/Core/CoreEvaluators.h **** };
 894:Eigen/src/Core/CoreEvaluators.h **** 
 895:Eigen/src/Core/CoreEvaluators.h **** template<typename PlainObjectType, int MapOptions, typename StrideType> 
 896:Eigen/src/Core/CoreEvaluators.h **** struct evaluator<Map<PlainObjectType, MapOptions, StrideType> >
 897:Eigen/src/Core/CoreEvaluators.h ****   : public mapbase_evaluator<Map<PlainObjectType, MapOptions, StrideType>, PlainObjectType>
 898:Eigen/src/Core/CoreEvaluators.h **** {
 899:Eigen/src/Core/CoreEvaluators.h ****   typedef Map<PlainObjectType, MapOptions, StrideType> XprType;
 900:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::Scalar Scalar;
 901:Eigen/src/Core/CoreEvaluators.h ****   // TODO: should check for smaller packet types once we can handle multi-sized packet types
 902:Eigen/src/Core/CoreEvaluators.h ****   typedef typename packet_traits<Scalar>::type PacketScalar;
 903:Eigen/src/Core/CoreEvaluators.h ****   
 904:Eigen/src/Core/CoreEvaluators.h ****   enum {
 905:Eigen/src/Core/CoreEvaluators.h ****     InnerStrideAtCompileTime = StrideType::InnerStrideAtCompileTime == 0
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 202


 906:Eigen/src/Core/CoreEvaluators.h ****                              ? int(PlainObjectType::InnerStrideAtCompileTime)
 907:Eigen/src/Core/CoreEvaluators.h ****                              : int(StrideType::InnerStrideAtCompileTime),
 908:Eigen/src/Core/CoreEvaluators.h ****     OuterStrideAtCompileTime = StrideType::OuterStrideAtCompileTime == 0
 909:Eigen/src/Core/CoreEvaluators.h ****                              ? int(PlainObjectType::OuterStrideAtCompileTime)
 910:Eigen/src/Core/CoreEvaluators.h ****                              : int(StrideType::OuterStrideAtCompileTime),
 911:Eigen/src/Core/CoreEvaluators.h ****     HasNoInnerStride = InnerStrideAtCompileTime == 1,
 912:Eigen/src/Core/CoreEvaluators.h ****     HasNoOuterStride = StrideType::OuterStrideAtCompileTime == 0,
 913:Eigen/src/Core/CoreEvaluators.h ****     HasNoStride = HasNoInnerStride && HasNoOuterStride,
 914:Eigen/src/Core/CoreEvaluators.h ****     IsDynamicSize = PlainObjectType::SizeAtCompileTime==Dynamic,
 915:Eigen/src/Core/CoreEvaluators.h ****     
 916:Eigen/src/Core/CoreEvaluators.h ****     PacketAccessMask = bool(HasNoInnerStride) ? ~int(0) : ~int(PacketAccessBit),
 917:Eigen/src/Core/CoreEvaluators.h ****     LinearAccessMask = bool(HasNoStride) || bool(PlainObjectType::IsVectorAtCompileTime) ? ~int(0) 
 918:Eigen/src/Core/CoreEvaluators.h ****     Flags = int( evaluator<PlainObjectType>::Flags) & (LinearAccessMask&PacketAccessMask),
 919:Eigen/src/Core/CoreEvaluators.h ****     
 920:Eigen/src/Core/CoreEvaluators.h ****     Alignment = int(MapOptions)&int(AlignedMask)
 921:Eigen/src/Core/CoreEvaluators.h ****   };
 922:Eigen/src/Core/CoreEvaluators.h **** 
 923:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit evaluator(const XprType& map)
 924:Eigen/src/Core/CoreEvaluators.h ****     : mapbase_evaluator<XprType, PlainObjectType>(map) 
 925:Eigen/src/Core/CoreEvaluators.h ****   { }
 926:Eigen/src/Core/CoreEvaluators.h **** };
 927:Eigen/src/Core/CoreEvaluators.h **** 
 928:Eigen/src/Core/CoreEvaluators.h **** // -------------------- Ref --------------------
 929:Eigen/src/Core/CoreEvaluators.h **** 
 930:Eigen/src/Core/CoreEvaluators.h **** template<typename PlainObjectType, int RefOptions, typename StrideType> 
 931:Eigen/src/Core/CoreEvaluators.h **** struct evaluator<Ref<PlainObjectType, RefOptions, StrideType> >
 932:Eigen/src/Core/CoreEvaluators.h ****   : public mapbase_evaluator<Ref<PlainObjectType, RefOptions, StrideType>, PlainObjectType>
 933:Eigen/src/Core/CoreEvaluators.h **** {
 934:Eigen/src/Core/CoreEvaluators.h ****   typedef Ref<PlainObjectType, RefOptions, StrideType> XprType;
 935:Eigen/src/Core/CoreEvaluators.h ****   
 936:Eigen/src/Core/CoreEvaluators.h ****   enum {
 937:Eigen/src/Core/CoreEvaluators.h ****     Flags = evaluator<Map<PlainObjectType, RefOptions, StrideType> >::Flags,
 938:Eigen/src/Core/CoreEvaluators.h ****     Alignment = evaluator<Map<PlainObjectType, RefOptions, StrideType> >::Alignment
 939:Eigen/src/Core/CoreEvaluators.h ****   };
 940:Eigen/src/Core/CoreEvaluators.h **** 
 941:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit evaluator(const XprType& ref)
 942:Eigen/src/Core/CoreEvaluators.h ****     : mapbase_evaluator<XprType, PlainObjectType>(ref) 
 943:Eigen/src/Core/CoreEvaluators.h ****   { }
 944:Eigen/src/Core/CoreEvaluators.h **** };
 945:Eigen/src/Core/CoreEvaluators.h **** 
 946:Eigen/src/Core/CoreEvaluators.h **** // -------------------- Block --------------------
 947:Eigen/src/Core/CoreEvaluators.h **** 
 948:Eigen/src/Core/CoreEvaluators.h **** template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel,
 949:Eigen/src/Core/CoreEvaluators.h ****          bool HasDirectAccess = internal::has_direct_access<ArgType>::ret> struct block_evaluator;
 950:Eigen/src/Core/CoreEvaluators.h ****          
 951:Eigen/src/Core/CoreEvaluators.h **** template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel> 
 952:Eigen/src/Core/CoreEvaluators.h **** struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 953:Eigen/src/Core/CoreEvaluators.h ****   : block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel>
 954:Eigen/src/Core/CoreEvaluators.h **** {
 955:Eigen/src/Core/CoreEvaluators.h ****   typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
 956:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::Scalar Scalar;
 957:Eigen/src/Core/CoreEvaluators.h ****   // TODO: should check for smaller packet types once we can handle multi-sized packet types
 958:Eigen/src/Core/CoreEvaluators.h ****   typedef typename packet_traits<Scalar>::type PacketScalar;
 959:Eigen/src/Core/CoreEvaluators.h ****   
 960:Eigen/src/Core/CoreEvaluators.h ****   enum {
 961:Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = evaluator<ArgType>::CoeffReadCost,
 962:Eigen/src/Core/CoreEvaluators.h ****     
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 203


 963:Eigen/src/Core/CoreEvaluators.h ****     RowsAtCompileTime = traits<XprType>::RowsAtCompileTime,
 964:Eigen/src/Core/CoreEvaluators.h ****     ColsAtCompileTime = traits<XprType>::ColsAtCompileTime,
 965:Eigen/src/Core/CoreEvaluators.h ****     MaxRowsAtCompileTime = traits<XprType>::MaxRowsAtCompileTime,
 966:Eigen/src/Core/CoreEvaluators.h ****     MaxColsAtCompileTime = traits<XprType>::MaxColsAtCompileTime,
 967:Eigen/src/Core/CoreEvaluators.h ****     
 968:Eigen/src/Core/CoreEvaluators.h ****     ArgTypeIsRowMajor = (int(evaluator<ArgType>::Flags)&RowMajorBit) != 0,
 969:Eigen/src/Core/CoreEvaluators.h ****     IsRowMajor = (MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1) ? 1
 970:Eigen/src/Core/CoreEvaluators.h ****                : (MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1) ? 0
 971:Eigen/src/Core/CoreEvaluators.h ****                : ArgTypeIsRowMajor,
 972:Eigen/src/Core/CoreEvaluators.h ****     HasSameStorageOrderAsArgType = (IsRowMajor == ArgTypeIsRowMajor),
 973:Eigen/src/Core/CoreEvaluators.h ****     InnerSize = IsRowMajor ? int(ColsAtCompileTime) : int(RowsAtCompileTime),
 974:Eigen/src/Core/CoreEvaluators.h ****     InnerStrideAtCompileTime = HasSameStorageOrderAsArgType
 975:Eigen/src/Core/CoreEvaluators.h ****                              ? int(inner_stride_at_compile_time<ArgType>::ret)
 976:Eigen/src/Core/CoreEvaluators.h ****                              : int(outer_stride_at_compile_time<ArgType>::ret),
 977:Eigen/src/Core/CoreEvaluators.h ****     OuterStrideAtCompileTime = HasSameStorageOrderAsArgType
 978:Eigen/src/Core/CoreEvaluators.h ****                              ? int(outer_stride_at_compile_time<ArgType>::ret)
 979:Eigen/src/Core/CoreEvaluators.h ****                              : int(inner_stride_at_compile_time<ArgType>::ret),
 980:Eigen/src/Core/CoreEvaluators.h ****     MaskPacketAccessBit = (InnerStrideAtCompileTime == 1 || HasSameStorageOrderAsArgType) ? PacketA
 981:Eigen/src/Core/CoreEvaluators.h ****     
 982:Eigen/src/Core/CoreEvaluators.h ****     FlagsLinearAccessBit = (RowsAtCompileTime == 1 || ColsAtCompileTime == 1 || (InnerPanel && (eva
 983:Eigen/src/Core/CoreEvaluators.h ****     FlagsRowMajorBit = XprType::Flags&RowMajorBit,
 984:Eigen/src/Core/CoreEvaluators.h ****     Flags0 = evaluator<ArgType>::Flags & ( (HereditaryBits & ~RowMajorBit) |
 985:Eigen/src/Core/CoreEvaluators.h ****                                            DirectAccessBit |
 986:Eigen/src/Core/CoreEvaluators.h ****                                            MaskPacketAccessBit),
 987:Eigen/src/Core/CoreEvaluators.h ****     Flags = Flags0 | FlagsLinearAccessBit | FlagsRowMajorBit,
 988:Eigen/src/Core/CoreEvaluators.h ****     
 989:Eigen/src/Core/CoreEvaluators.h ****     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
 990:Eigen/src/Core/CoreEvaluators.h ****     Alignment0 = (InnerPanel && (OuterStrideAtCompileTime!=Dynamic)
 991:Eigen/src/Core/CoreEvaluators.h ****                              && (OuterStrideAtCompileTime!=0)
 992:Eigen/src/Core/CoreEvaluators.h ****                              && (((OuterStrideAtCompileTime * int(sizeof(Scalar))) % int(PacketAlig
 993:Eigen/src/Core/CoreEvaluators.h ****     Alignment = EIGEN_PLAIN_ENUM_MIN(evaluator<ArgType>::Alignment, Alignment0)
 994:Eigen/src/Core/CoreEvaluators.h ****   };
 995:Eigen/src/Core/CoreEvaluators.h ****   typedef block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel> block_evaluator_type;
 996:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit evaluator(const XprType& block) : block_evaluator_type(block)
 1799              		.loc 15 996 30 view .LVU486
 1800              	.LBB2843:
 1801              	.LBB2844:
 1802              	.LBI2844:
 997:Eigen/src/Core/CoreEvaluators.h ****   {
 998:Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 999:Eigen/src/Core/CoreEvaluators.h ****   }
1000:Eigen/src/Core/CoreEvaluators.h **** };
1001:Eigen/src/Core/CoreEvaluators.h **** 
1002:Eigen/src/Core/CoreEvaluators.h **** // no direct-access => dispatch to a unary evaluator
1003:Eigen/src/Core/CoreEvaluators.h **** template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>
1004:Eigen/src/Core/CoreEvaluators.h **** struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /*HasDirectAccess*/ false>
1005:Eigen/src/Core/CoreEvaluators.h ****   : unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
1006:Eigen/src/Core/CoreEvaluators.h **** {
1007:Eigen/src/Core/CoreEvaluators.h ****   typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
1008:Eigen/src/Core/CoreEvaluators.h **** 
1009:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit block_evaluator(const XprType& block)
1010:Eigen/src/Core/CoreEvaluators.h ****     : unary_evaluator<XprType>(block) 
1011:Eigen/src/Core/CoreEvaluators.h ****   {}
1012:Eigen/src/Core/CoreEvaluators.h **** };
1013:Eigen/src/Core/CoreEvaluators.h **** 
1014:Eigen/src/Core/CoreEvaluators.h **** template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>
1015:Eigen/src/Core/CoreEvaluators.h **** struct unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>, IndexBased>
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 204


1016:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
1017:Eigen/src/Core/CoreEvaluators.h **** {
1018:Eigen/src/Core/CoreEvaluators.h ****   typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
1019:Eigen/src/Core/CoreEvaluators.h **** 
1020:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit unary_evaluator(const XprType& block)
1021:Eigen/src/Core/CoreEvaluators.h ****     : m_argImpl(block.nestedExpression()), 
1022:Eigen/src/Core/CoreEvaluators.h ****       m_startRow(block.startRow()), 
1023:Eigen/src/Core/CoreEvaluators.h ****       m_startCol(block.startCol()),
1024:Eigen/src/Core/CoreEvaluators.h ****       m_linear_offset(InnerPanel?(XprType::IsRowMajor ? block.startRow()*block.cols() : block.start
1025:Eigen/src/Core/CoreEvaluators.h ****   { }
1026:Eigen/src/Core/CoreEvaluators.h ****  
1027:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::Scalar Scalar;
1028:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
1029:Eigen/src/Core/CoreEvaluators.h **** 
1030:Eigen/src/Core/CoreEvaluators.h ****   enum {
1031:Eigen/src/Core/CoreEvaluators.h ****     RowsAtCompileTime = XprType::RowsAtCompileTime,
1032:Eigen/src/Core/CoreEvaluators.h ****     ForwardLinearAccess = InnerPanel && bool(evaluator<ArgType>::Flags&LinearAccessBit)
1033:Eigen/src/Core/CoreEvaluators.h ****   };
1034:Eigen/src/Core/CoreEvaluators.h ****  
1035:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1036:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
1037:Eigen/src/Core/CoreEvaluators.h ****   { 
1038:Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.coeff(m_startRow.value() + row, m_startCol.value() + col); 
1039:Eigen/src/Core/CoreEvaluators.h ****   }
1040:Eigen/src/Core/CoreEvaluators.h ****   
1041:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1042:Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
1043:Eigen/src/Core/CoreEvaluators.h ****   { 
1044:Eigen/src/Core/CoreEvaluators.h ****     if (ForwardLinearAccess)
1045:Eigen/src/Core/CoreEvaluators.h ****       return m_argImpl.coeff(m_linear_offset.value() + index); 
1046:Eigen/src/Core/CoreEvaluators.h ****     else
1047:Eigen/src/Core/CoreEvaluators.h ****       return coeff(RowsAtCompileTime == 1 ? 0 : index, RowsAtCompileTime == 1 ? index : 0);
1048:Eigen/src/Core/CoreEvaluators.h ****   }
1049:Eigen/src/Core/CoreEvaluators.h **** 
1050:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1051:Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index row, Index col)
1052:Eigen/src/Core/CoreEvaluators.h ****   { 
1053:Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.coeffRef(m_startRow.value() + row, m_startCol.value() + col); 
1054:Eigen/src/Core/CoreEvaluators.h ****   }
1055:Eigen/src/Core/CoreEvaluators.h ****   
1056:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1057:Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index index)
1058:Eigen/src/Core/CoreEvaluators.h ****   { 
1059:Eigen/src/Core/CoreEvaluators.h ****     if (ForwardLinearAccess)
1060:Eigen/src/Core/CoreEvaluators.h ****       return m_argImpl.coeffRef(m_linear_offset.value() + index); 
1061:Eigen/src/Core/CoreEvaluators.h ****     else
1062:Eigen/src/Core/CoreEvaluators.h ****       return coeffRef(RowsAtCompileTime == 1 ? 0 : index, RowsAtCompileTime == 1 ? index : 0);
1063:Eigen/src/Core/CoreEvaluators.h ****   }
1064:Eigen/src/Core/CoreEvaluators.h ****  
1065:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
1066:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
1067:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index row, Index col) const 
1068:Eigen/src/Core/CoreEvaluators.h ****   { 
1069:Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.template packet<LoadMode,PacketType>(m_startRow.value() + row, m_startCol.valu
1070:Eigen/src/Core/CoreEvaluators.h ****   }
1071:Eigen/src/Core/CoreEvaluators.h **** 
1072:Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 205


1073:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
1074:Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index index) const 
1075:Eigen/src/Core/CoreEvaluators.h ****   { 
1076:Eigen/src/Core/CoreEvaluators.h ****     if (ForwardLinearAccess)
1077:Eigen/src/Core/CoreEvaluators.h ****       return m_argImpl.template packet<LoadMode,PacketType>(m_linear_offset.value() + index);
1078:Eigen/src/Core/CoreEvaluators.h ****     else
1079:Eigen/src/Core/CoreEvaluators.h ****       return packet<LoadMode,PacketType>(RowsAtCompileTime == 1 ? 0 : index,
1080:Eigen/src/Core/CoreEvaluators.h ****                                          RowsAtCompileTime == 1 ? index : 0);
1081:Eigen/src/Core/CoreEvaluators.h ****   }
1082:Eigen/src/Core/CoreEvaluators.h ****   
1083:Eigen/src/Core/CoreEvaluators.h ****   template<int StoreMode, typename PacketType>
1084:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
1085:Eigen/src/Core/CoreEvaluators.h ****   void writePacket(Index row, Index col, const PacketType& x) 
1086:Eigen/src/Core/CoreEvaluators.h ****   {
1087:Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.template writePacket<StoreMode,PacketType>(m_startRow.value() + row, m_startCo
1088:Eigen/src/Core/CoreEvaluators.h ****   }
1089:Eigen/src/Core/CoreEvaluators.h ****   
1090:Eigen/src/Core/CoreEvaluators.h ****   template<int StoreMode, typename PacketType>
1091:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
1092:Eigen/src/Core/CoreEvaluators.h ****   void writePacket(Index index, const PacketType& x) 
1093:Eigen/src/Core/CoreEvaluators.h ****   {
1094:Eigen/src/Core/CoreEvaluators.h ****     if (ForwardLinearAccess)
1095:Eigen/src/Core/CoreEvaluators.h ****       return m_argImpl.template writePacket<StoreMode,PacketType>(m_linear_offset.value() + index, 
1096:Eigen/src/Core/CoreEvaluators.h ****     else
1097:Eigen/src/Core/CoreEvaluators.h ****       return writePacket<StoreMode,PacketType>(RowsAtCompileTime == 1 ? 0 : index,
1098:Eigen/src/Core/CoreEvaluators.h ****                                               RowsAtCompileTime == 1 ? index : 0,
1099:Eigen/src/Core/CoreEvaluators.h ****                                               x);
1100:Eigen/src/Core/CoreEvaluators.h ****   }
1101:Eigen/src/Core/CoreEvaluators.h ****  
1102:Eigen/src/Core/CoreEvaluators.h **** protected:
1103:Eigen/src/Core/CoreEvaluators.h ****   evaluator<ArgType> m_argImpl;
1104:Eigen/src/Core/CoreEvaluators.h ****   const variable_if_dynamic<Index, (ArgType::RowsAtCompileTime == 1 && BlockRows==1) ? 0 : Dynamic>
1105:Eigen/src/Core/CoreEvaluators.h ****   const variable_if_dynamic<Index, (ArgType::ColsAtCompileTime == 1 && BlockCols==1) ? 0 : Dynamic>
1106:Eigen/src/Core/CoreEvaluators.h ****   const variable_if_dynamic<Index, InnerPanel ? Dynamic : 0> m_linear_offset;
1107:Eigen/src/Core/CoreEvaluators.h **** };
1108:Eigen/src/Core/CoreEvaluators.h **** 
1109:Eigen/src/Core/CoreEvaluators.h **** // TODO: This evaluator does not actually use the child evaluator; 
1110:Eigen/src/Core/CoreEvaluators.h **** // all action is via the data() as returned by the Block expression.
1111:Eigen/src/Core/CoreEvaluators.h **** 
1112:Eigen/src/Core/CoreEvaluators.h **** template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel> 
1113:Eigen/src/Core/CoreEvaluators.h **** struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
1114:Eigen/src/Core/CoreEvaluators.h ****   : mapbase_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>,
1115:Eigen/src/Core/CoreEvaluators.h ****                       typename Block<ArgType, BlockRows, BlockCols, InnerPanel>::PlainObject>
1116:Eigen/src/Core/CoreEvaluators.h **** {
1117:Eigen/src/Core/CoreEvaluators.h ****   typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
1118:Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::Scalar Scalar;
1119:Eigen/src/Core/CoreEvaluators.h **** 
1120:Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit block_evaluator(const XprType& block)
 1803              		.loc 15 1120 30 view .LVU487
 1804              	.LBB2845:
 1805              	.LBB2846:
 1806              	.LBB2847:
 1807              	.LBI2847:
 821:Eigen/src/Core/CoreEvaluators.h ****     : m_data(const_cast<PointerType>(map.data())),
 1808              		.loc 15 821 30 view .LVU488
 1809              	.LBB2848:
 1810              	.LBB2849:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 206


 1811              	.LBB2850:
 1812              	.LBI2850:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 1813              		.loc 15 109 8 view .LVU489
 1814              	.LBB2851:
 1815              	.LBI2851:
 1816              		.loc 16 299 21 view .LVU490
 1817              		.loc 16 299 21 is_stmt 0 view .LVU491
 1818              	.LBE2851:
 1819              	.LBE2850:
 1820              	.LBB2852:
 1821              	.LBI2852:
 100:Eigen/src/Core/MapBase.h **** 
 1822              		.loc 21 100 44 is_stmt 1 view .LVU492
 100:Eigen/src/Core/MapBase.h **** 
 1823              		.loc 21 100 44 is_stmt 0 view .LVU493
 1824              	.LBE2852:
 824:Eigen/src/Core/CoreEvaluators.h ****   {
 1825              		.loc 15 824 38 view .LVU494
 1826 0066 0F93     		str	r3, [sp, #60]
 1827              	.LVL86:
 1828              	.LBB2853:
 1829              	.LBI2853:
 391:Eigen/src/Core/Block.h ****     {
 1830              		.loc 20 391 18 is_stmt 1 view .LVU495
 391:Eigen/src/Core/Block.h ****     {
 1831              		.loc 20 391 18 is_stmt 0 view .LVU496
 1832              	.LBE2853:
 1833              	.LBB2854:
 1834              	.LBI2854:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1835              		.loc 18 110 52 is_stmt 1 view .LVU497
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1836              		.loc 18 110 52 is_stmt 0 view .LVU498
 1837              	.LBE2854:
 1838              	.LBB2855:
 1839              	.LBI2855:
 400:Eigen/src/Core/Block.h ****     {
 1840              		.loc 20 400 18 is_stmt 1 view .LVU499
 400:Eigen/src/Core/Block.h ****     {
 1841              		.loc 20 400 18 is_stmt 0 view .LVU500
 1842              	.LBE2855:
 1843              	.LBB2856:
 1844              	.LBI2856:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1845              		.loc 18 110 52 is_stmt 1 view .LVU501
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1846              		.loc 18 110 52 is_stmt 0 view .LVU502
 1847              	.LBE2856:
 1848              	.LBE2849:
 1849              	.LBE2848:
 1850              	.LBE2847:
 1851              	.LBB2857:
 1852              	.LBI2857:
 100:Eigen/src/Core/MapBase.h **** 
 1853              		.loc 21 100 44 is_stmt 1 view .LVU503
 100:Eigen/src/Core/MapBase.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 207


 1854              		.loc 21 100 44 is_stmt 0 view .LVU504
 1855              	.LBE2857:
 1856              	.LBE2846:
 1857              	.LBE2845:
 1858              	.LBE2844:
 1859              	.LBE2843:
 1860              	.LBE2842:
 1861              	.LBE2841:
 1862              	.LBE2840:
 1863              	.LBE2836:
 1864              	.LBE2835:
 1865              	.LBE2834:
 1866              	.LBE2833:
 1867              	.LBE2832:
 1868              	.LBE2831:
 1869              	.LBB2858:
 1870              	.LBI2858:
 135:Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the functor representing the binary operation */
 1871              		.loc 25 135 23 is_stmt 1 view .LVU505
 135:Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the functor representing the binary operation */
 1872              		.loc 25 135 23 is_stmt 0 view .LVU506
 1873              	.LBE2858:
 1874              	.LBB2859:
 1875              	.LBI2859:
 103:Eigen/src/Core/CoreEvaluators.h **** };
 1876              		.loc 15 103 12 is_stmt 1 view .LVU507
 1877              	.LBB2860:
 1878              	.LBB2861:
 1879              	.LBI2861:
 996:Eigen/src/Core/CoreEvaluators.h ****   {
 1880              		.loc 15 996 30 view .LVU508
 1881              	.LBB2862:
 1882              	.LBB2863:
 1883              	.LBI2863:
 1884              		.loc 15 1120 30 view .LVU509
 1885              	.LBB2864:
 1886              	.LBB2865:
 1887              	.LBB2866:
 1888              	.LBI2866:
 821:Eigen/src/Core/CoreEvaluators.h ****     : m_data(const_cast<PointerType>(map.data())),
 1889              		.loc 15 821 30 view .LVU510
 1890              	.LBB2867:
 1891              	.LBB2868:
 1892              	.LBB2869:
 1893              	.LBI2869:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 1894              		.loc 15 109 8 view .LVU511
 1895              	.LBB2870:
 1896              	.LBI2870:
 1897              		.loc 16 299 21 view .LVU512
 1898              		.loc 16 299 21 is_stmt 0 view .LVU513
 1899              	.LBE2870:
 1900              	.LBE2869:
 1901              	.LBB2871:
 1902              	.LBI2871:
 100:Eigen/src/Core/MapBase.h **** 
 1903              		.loc 21 100 44 is_stmt 1 view .LVU514
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 208


 100:Eigen/src/Core/MapBase.h **** 
 1904              		.loc 21 100 44 is_stmt 0 view .LVU515
 1905              	.LBE2871:
 824:Eigen/src/Core/CoreEvaluators.h ****   {
 1906              		.loc 15 824 38 view .LVU516
 1907 0068 1194     		str	r4, [sp, #68]
 1908              	.LVL87:
 1909              	.LBB2872:
 1910              	.LBI2872:
 391:Eigen/src/Core/Block.h ****     {
 1911              		.loc 20 391 18 is_stmt 1 view .LVU517
 391:Eigen/src/Core/Block.h ****     {
 1912              		.loc 20 391 18 is_stmt 0 view .LVU518
 1913              	.LBE2872:
 1914              	.LBB2873:
 1915              	.LBI2873:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1916              		.loc 18 110 52 is_stmt 1 view .LVU519
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1917              		.loc 18 110 52 is_stmt 0 view .LVU520
 1918              	.LBE2873:
 1919              	.LBB2874:
 1920              	.LBI2874:
 400:Eigen/src/Core/Block.h ****     {
 1921              		.loc 20 400 18 is_stmt 1 view .LVU521
 400:Eigen/src/Core/Block.h ****     {
 1922              		.loc 20 400 18 is_stmt 0 view .LVU522
 1923              	.LBE2874:
 1924              	.LBB2875:
 1925              	.LBI2875:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1926              		.loc 18 110 52 is_stmt 1 view .LVU523
 1927              	.LBB2876:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1928              		.loc 18 110 109 is_stmt 0 view .LVU524
 1929 006a 9242     		cmp	r2, r2
 1930 006c 6FD1     		bne	.L61
 1931              	.LVL88:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 1932              		.loc 18 110 109 view .LVU525
 1933              	.LBE2876:
 1934              	.LBE2875:
 1935              	.LBE2868:
 1936              	.LBE2867:
 1937              	.LBE2866:
 1938              	.LBB2881:
 1939              	.LBI2881:
 100:Eigen/src/Core/MapBase.h **** 
 1940              		.loc 21 100 44 is_stmt 1 view .LVU526
 100:Eigen/src/Core/MapBase.h **** 
 1941              		.loc 21 100 44 is_stmt 0 view .LVU527
 1942              	.LBE2881:
 1943              	.LBE2865:
 1944              	.LBE2864:
 1945              	.LBE2863:
 1946              	.LBE2862:
 1947              	.LBE2861:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 209


 1948              	.LBE2860:
 1949              	.LBE2859:
 1950              	.LBE2825:
 1951              	.LBE2824:
 1952              	.LBE2823:
 1953              	.LBE2822:
 338:Eigen/src/Core/Redux.h ****   
 1954              		.loc 26 338 95 view .LVU528
 1955 006e 14AB     		add	r3, sp, #80
 1956              	.LVL89:
 338:Eigen/src/Core/Redux.h ****   
 1957              		.loc 26 338 95 view .LVU529
 1958 0070 1393     		str	r3, [sp, #76]
 1959              	.LVL90:
 338:Eigen/src/Core/Redux.h ****   
 1960              		.loc 26 338 95 view .LVU530
 1961              	.LBE2821:
 1962              	.LBE2820:
 1963              	.LBE2819:
 1964              	.LBB2896:
 1965              	.LBI2896:
 100:Eigen/src/Core/Redux.h ****   {
 1966              		.loc 26 100 37 is_stmt 1 view .LVU531
 1967              	.LBB2897:
 1968              	.LBI2897:
 118:Eigen/src/Core/Redux.h ****   {
 1969              		.loc 26 118 37 view .LVU532
 1970              	.LBB2898:
 1971              	.LBI2898:
 380:Eigen/src/Core/Redux.h ****   { return m_evaluator.coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 1972              		.loc 26 380 19 view .LVU533
 1973              	.LBB2899:
 1974              	.LBI2899:
 711:Eigen/src/Core/CoreEvaluators.h ****   {
 1975              		.loc 15 711 19 view .LVU534
 1976              	.LBB2900:
 1977              	.LBI2900:
 281:Eigen/src/Core/CoreEvaluators.h ****   {
 1978              		.loc 15 281 19 view .LVU535
 1979              	.LBB2901:
 1980              	.LBI2901:
 832:Eigen/src/Core/CoreEvaluators.h ****   {
 1981              		.loc 15 832 19 view .LVU536
 1982              	.LBB2902:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 1983              		.loc 15 834 12 is_stmt 0 view .LVU537
 1984 0072 0F9A     		ldr	r2, [sp, #60]
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 1985              		.loc 15 834 56 view .LVU538
 1986 0074 D2ED007A 		vldr.32	s15, [r2]
 1987              	.LVL91:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 1988              		.loc 15 834 56 view .LVU539
 1989              	.LBE2902:
 1990              	.LBE2901:
 1991              	.LBE2900:
 1992              	.LBB2903:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 210


 1993              	.LBI2903:
 832:Eigen/src/Core/CoreEvaluators.h ****   {
 1994              		.loc 15 832 19 is_stmt 1 view .LVU540
 1995              	.LBB2904:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 1996              		.loc 15 834 12 is_stmt 0 view .LVU541
 1997 0078 119B     		ldr	r3, [sp, #68]
 1998              	.LVL92:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 1999              		.loc 15 834 56 view .LVU542
 2000 007a 93ED007A 		vldr.32	s14, [r3]
 2001              	.LVL93:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 2002              		.loc 15 834 56 view .LVU543
 2003              	.LBE2904:
 2004              	.LBE2903:
 2005              	.LBB2905:
 2006              	.LBI2905:
  81:Eigen/src/Core/functors/BinaryFunctors.h **** #else
  82:Eigen/src/Core/functors/BinaryFunctors.h ****   scalar_product_op() {
  83:Eigen/src/Core/functors/BinaryFunctors.h ****     EIGEN_SCALAR_BINARY_OP_PLUGIN
  84:Eigen/src/Core/functors/BinaryFunctors.h ****   }
  85:Eigen/src/Core/functors/BinaryFunctors.h **** #endif
  86:Eigen/src/Core/functors/BinaryFunctors.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const Rhs
 2007              		.loc 24 86 59 is_stmt 1 view .LVU544
 2008              	.LBB2906:
 2009              		.loc 24 86 130 is_stmt 0 view .LVU545
 2010 007e 27EE877A 		vmul.f32	s14, s15, s14
 2011              	.LVL94:
 2012              		.loc 24 86 130 view .LVU546
 2013              	.LBE2906:
 2014              	.LBE2905:
 2015              	.LBE2899:
 2016              	.LBE2898:
 2017              	.LBE2897:
 2018              	.LBB2907:
 2019              	.LBI2907:
 100:Eigen/src/Core/Redux.h ****   {
 2020              		.loc 26 100 37 is_stmt 1 view .LVU547
 2021              	.LBB2908:
 2022              	.LBI2908:
 118:Eigen/src/Core/Redux.h ****   {
 2023              		.loc 26 118 37 view .LVU548
 2024              	.LBB2909:
 2025              	.LBI2909:
 380:Eigen/src/Core/Redux.h ****   { return m_evaluator.coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 2026              		.loc 26 380 19 view .LVU549
 2027              	.LBB2910:
 2028              	.LBI2910:
 711:Eigen/src/Core/CoreEvaluators.h ****   {
 2029              		.loc 15 711 19 view .LVU550
 2030              	.LBB2911:
 2031              	.LBI2911:
 281:Eigen/src/Core/CoreEvaluators.h ****   {
 2032              		.loc 15 281 19 view .LVU551
 2033              	.LBB2912:
 2034              	.LBI2912:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 211


 832:Eigen/src/Core/CoreEvaluators.h ****   {
 2035              		.loc 15 832 19 view .LVU552
 2036              	.LBB2913:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 2037              		.loc 15 834 56 is_stmt 0 view .LVU553
 2038 0082 D2ED027A 		vldr.32	s15, [r2, #8]
 2039              	.LVL95:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 2040              		.loc 15 834 56 view .LVU554
 2041              	.LBE2913:
 2042              	.LBE2912:
 2043              	.LBE2911:
 2044              	.LBB2914:
 2045              	.LBI2914:
 832:Eigen/src/Core/CoreEvaluators.h ****   {
 2046              		.loc 15 832 19 is_stmt 1 view .LVU555
 2047              	.LBB2915:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 2048              		.loc 15 834 56 is_stmt 0 view .LVU556
 2049 0086 D3ED016A 		vldr.32	s13, [r3, #4]
 2050              	.LVL96:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 2051              		.loc 15 834 56 view .LVU557
 2052              	.LBE2915:
 2053              	.LBE2914:
 2054              	.LBB2916:
 2055              	.LBI2916:
 2056              		.loc 24 86 59 is_stmt 1 view .LVU558
 2057              	.LBB2917:
 2058              		.loc 24 86 130 is_stmt 0 view .LVU559
 2059 008a 67EEA66A 		vmul.f32	s13, s15, s13
 2060              	.LVL97:
 2061              		.loc 24 86 130 view .LVU560
 2062              	.LBE2917:
 2063              	.LBE2916:
 2064              	.LBE2910:
 2065              	.LBE2909:
 2066              	.LBE2908:
 2067              	.LBB2918:
 2068              	.LBI2918:
 118:Eigen/src/Core/Redux.h ****   {
 2069              		.loc 26 118 37 is_stmt 1 view .LVU561
 2070              	.LBB2919:
 2071              	.LBI2919:
 380:Eigen/src/Core/Redux.h ****   { return m_evaluator.coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 2072              		.loc 26 380 19 view .LVU562
 2073              	.LBB2920:
 2074              	.LBI2920:
 711:Eigen/src/Core/CoreEvaluators.h ****   {
 2075              		.loc 15 711 19 view .LVU563
 2076              	.LBB2921:
 2077              	.LBI2921:
 281:Eigen/src/Core/CoreEvaluators.h ****   {
 2078              		.loc 15 281 19 view .LVU564
 2079              	.LBB2922:
 2080              	.LBI2922:
 832:Eigen/src/Core/CoreEvaluators.h ****   {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 212


 2081              		.loc 15 832 19 view .LVU565
 2082              	.LBB2923:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 2083              		.loc 15 834 56 is_stmt 0 view .LVU566
 2084 008e D2ED047A 		vldr.32	s15, [r2, #16]
 2085              	.LVL98:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 2086              		.loc 15 834 56 view .LVU567
 2087              	.LBE2923:
 2088              	.LBE2922:
 2089              	.LBE2921:
 2090              	.LBB2924:
 2091              	.LBI2924:
 832:Eigen/src/Core/CoreEvaluators.h ****   {
 2092              		.loc 15 832 19 is_stmt 1 view .LVU568
 2093              	.LBB2925:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 2094              		.loc 15 834 56 is_stmt 0 view .LVU569
 2095 0092 93ED026A 		vldr.32	s12, [r3, #8]
 2096              	.LVL99:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 2097              		.loc 15 834 56 view .LVU570
 2098              	.LBE2925:
 2099              	.LBE2924:
 2100              	.LBB2926:
 2101              	.LBI2926:
 2102              		.loc 24 86 59 is_stmt 1 view .LVU571
 2103              	.LBB2927:
 2104              		.loc 24 86 130 is_stmt 0 view .LVU572
 2105 0096 67EE867A 		vmul.f32	s15, s15, s12
 2106              	.LVL100:
 2107              		.loc 24 86 130 view .LVU573
 2108              	.LBE2927:
 2109              	.LBE2926:
 2110              	.LBE2920:
 2111              	.LBE2919:
 2112              	.LBE2918:
 2113              	.LBB2928:
 2114              	.LBI2928:
  42:Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
 2115              		.loc 24 42 59 is_stmt 1 view .LVU574
 2116              	.LBB2929:
  42:Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
 2117              		.loc 24 42 130 is_stmt 0 view .LVU575
 2118 009a 77EEA67A 		vadd.f32	s15, s15, s13
 2119              	.LVL101:
  42:Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
 2120              		.loc 24 42 130 view .LVU576
 2121              	.LBE2929:
 2122              	.LBE2928:
 2123              	.LBE2907:
 2124              	.LBB2930:
 2125              	.LBI2930:
  42:Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
 2126              		.loc 24 42 59 is_stmt 1 view .LVU577
 2127              	.LBB2931:
  42:Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 213


 2128              		.loc 24 42 130 is_stmt 0 view .LVU578
 2129 009e 77EE877A 		vadd.f32	s15, s15, s14
 2130              	.LVL102:
  42:Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
 2131              		.loc 24 42 130 view .LVU579
 2132              	.LBE2931:
 2133              	.LBE2930:
 2134              	.LBE2896:
 2135              	.LBB2932:
 2136              	.LBI2932:
 334:Eigen/src/Core/Redux.h **** {
 2137              		.loc 26 334 7 is_stmt 1 view .LVU580
 2138              	.LBB2933:
 2139              	.LBB2934:
 2140              	.LBI2934:
 665:Eigen/src/Core/CoreEvaluators.h ****   : public binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 2141              		.loc 15 665 8 view .LVU581
 2142              	.LBB2935:
 2143              	.LBB2936:
 2144              	.LBI2936:
 675:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 2145              		.loc 15 675 8 view .LVU582
 2146              	.LBB2937:
 2147              	.LBB2938:
 2148              	.LBI2938:
  99:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<T>
 2149              		.loc 15 99 8 view .LVU583
 2150              	.LBB2939:
 2151              	.LBB2940:
 2152              	.LBI2940:
 952:Eigen/src/Core/CoreEvaluators.h ****   : block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel>
 2153              		.loc 15 952 8 view .LVU584
 2154              	.LBB2941:
 2155              	.LBB2942:
 2156              	.LBI2942:
1113:Eigen/src/Core/CoreEvaluators.h ****   : mapbase_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>,
 2157              		.loc 15 1113 8 view .LVU585
 2158              	.LBB2943:
 2159              	.LBB2944:
 2160              	.LBI2944:
 808:Eigen/src/Core/CoreEvaluators.h **** {
 2161              		.loc 15 808 8 view .LVU586
 2162              	.LBB2945:
 2163              	.LBB2946:
 2164              	.LBI2946:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 2165              		.loc 15 109 8 view .LVU587
 2166              	.LBB2947:
 2167              	.LBI2947:
 300:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 2168              		.loc 16 300 21 view .LVU588
 2169              		.loc 16 300 21 is_stmt 0 view .LVU589
 2170              	.LBE2947:
 2171              	.LBE2946:
 2172              	.LBE2945:
 2173              	.LBE2944:
 2174              	.LBE2943:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 214


 2175              	.LBE2942:
 2176              	.LBE2941:
 2177              	.LBE2940:
 2178              	.LBE2939:
 2179              	.LBE2938:
 2180              	.LBB2948:
 2181              	.LBI2948:
  99:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<T>
 2182              		.loc 15 99 8 is_stmt 1 view .LVU590
 2183              	.LBB2949:
 2184              	.LBB2950:
 2185              	.LBI2950:
  90:Eigen/src/Core/CoreEvaluators.h **** {
 2186              		.loc 15 90 8 view .LVU591
 2187              	.LBB2951:
 2188              	.LBB2952:
 2189              	.LBI2952:
 264:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<Transpose<ArgType> >
 2190              		.loc 15 264 8 view .LVU592
 2191              	.LBB2953:
 2192              	.LBB2954:
 2193              	.LBI2954:
  99:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<T>
 2194              		.loc 15 99 8 view .LVU593
 2195              	.LBB2955:
 2196              	.LBB2956:
 2197              	.LBI2956:
 952:Eigen/src/Core/CoreEvaluators.h ****   : block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel>
 2198              		.loc 15 952 8 view .LVU594
 2199              	.LBB2957:
 2200              	.LBB2958:
 2201              	.LBI2958:
1113:Eigen/src/Core/CoreEvaluators.h ****   : mapbase_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>,
 2202              		.loc 15 1113 8 view .LVU595
 2203              	.LBB2959:
 2204              	.LBB2960:
 2205              	.LBI2960:
 808:Eigen/src/Core/CoreEvaluators.h **** {
 2206              		.loc 15 808 8 view .LVU596
 2207              	.LBB2961:
 2208              	.LBB2962:
 2209              	.LBI2962:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 2210              		.loc 15 109 8 view .LVU597
 2211              	.LBB2963:
 2212              	.LBI2963:
 2213              		.loc 16 300 21 view .LVU598
 2214              		.loc 16 300 21 is_stmt 0 view .LVU599
 2215              	.LBE2963:
 2216              	.LBE2962:
 2217              	.LBE2961:
 2218              	.LBE2960:
 2219              	.LBE2959:
 2220              	.LBE2958:
 2221              	.LBE2957:
 2222              	.LBE2956:
 2223              	.LBE2955:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 215


 2224              	.LBE2954:
 2225              	.LBB2964:
 2226              	.LBI2964:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 2227              		.loc 15 109 8 is_stmt 1 view .LVU600
 2228              	.LBB2965:
 2229              	.LBI2965:
 2230              		.loc 16 300 21 view .LVU601
 2231              		.loc 16 300 21 is_stmt 0 view .LVU602
 2232              	.LBE2965:
 2233              	.LBE2964:
 2234              	.LBE2953:
 2235              	.LBE2952:
 2236              	.LBE2951:
 2237              	.LBE2950:
 2238              	.LBE2949:
 2239              	.LBE2948:
 2240              	.LBB2966:
 2241              	.LBI2966:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 2242              		.loc 15 109 8 is_stmt 1 view .LVU603
 2243              	.LBB2967:
 2244              	.LBI2967:
 2245              		.loc 16 300 21 view .LVU604
 2246              		.loc 16 300 21 is_stmt 0 view .LVU605
 2247              	.LBE2967:
 2248              	.LBE2966:
 2249              	.LBE2937:
 2250              	.LBE2936:
 2251              	.LBE2935:
 2252              	.LBE2934:
 2253              	.LBE2933:
 2254              	.LBE2932:
 2255              	.LBE2818:
 2256              	.LBE2817:
 2257              	.LBE2815:
 2258              	.LBE2715:
 2259              	.LBE2714:
 2260              	.LBB2973:
 2261              	.LBI2973:
  24:Eigen/src/Core/functors/AssignmentFunctors.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { 
 2262              		.loc 13 24 46 is_stmt 1 view .LVU606
 2263              	.LBB2974:
 2264              		.loc 13 24 102 is_stmt 0 view .LVU607
 2265 00a2 CDED217A 		vstr.32	s15, [sp, #132]
 2266              	.LVL103:
 2267              		.loc 13 24 102 view .LVU608
 2268              	.LBE2974:
 2269              	.LBE2973:
 2270              	.LBE2712:
 2271              	.LBE2711:
 2272              	.LBB2977:
 2273              	.LBI2977:
 240:Eigen/src/Core/AssignEvaluator.h ****   {
 2274              		.loc 10 240 53 is_stmt 1 view .LVU609
 2275              	.LBB2978:
 2276              	.LBI2978:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 216


 635:Eigen/src/Core/AssignEvaluator.h ****   {
 2277              		.loc 10 635 46 view .LVU610
 2278              	.LBB2979:
 637:Eigen/src/Core/AssignEvaluator.h ****   }
 2279              		.loc 10 637 27 is_stmt 0 view .LVU611
 2280 00a6 029B     		ldr	r3, [sp, #8]
 2281              	.LVL104:
 2282              	.LBB2980:
 2283              	.LBI2980:
 185:Eigen/src/Core/CoreEvaluators.h ****   {
 2284              		.loc 15 185 11 is_stmt 1 view .LVU612
 2285              	.LBB2981:
 187:Eigen/src/Core/CoreEvaluators.h ****   }
 2286              		.loc 15 187 32 is_stmt 0 view .LVU613
 2287 00a8 D3F800C0 		ldr	ip, [r3]
 2288              	.LVL105:
 187:Eigen/src/Core/CoreEvaluators.h ****   }
 2289              		.loc 15 187 32 view .LVU614
 2290              	.LBE2981:
 2291              	.LBE2980:
 637:Eigen/src/Core/AssignEvaluator.h ****   }
 2292              		.loc 10 637 50 view .LVU615
 2293 00ac 0398     		ldr	r0, [sp, #12]
 2294              	.LVL106:
 2295              	.LBB2982:
 2296              	.LBI2982:
 2297              		.loc 14 559 43 is_stmt 1 view .LVU616
 2298              	.LBB2983:
 560:Eigen/src/Core/ProductEvaluators.h ****   {
 561:Eigen/src/Core/ProductEvaluators.h ****     const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 562:Eigen/src/Core/ProductEvaluators.h ****     const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 563:Eigen/src/Core/ProductEvaluators.h ****     return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 2299              		.loc 14 563 13 is_stmt 0 view .LVU617
 2300 00ae 0468     		ldr	r4, [r0]
 2301              	.LVL107:
 2302              	.LBB2984:
 2303              	.LBI2984:
 2304              		.loc 19 866 20 is_stmt 1 view .LVU618
 2305              	.LBB2985:
 2306              	.LBI2985:
 118:Eigen/src/Core/Block.h ****     {
 2307              		.loc 20 118 12 view .LVU619
 2308              	.LBB2986:
 2309              	.LBB2987:
 2310              	.LBB2988:
 2311              	.LBI2988:
 162:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC inline BlockImpl(XprType& xpr, Index startRow, Index startCol) : Impl(xpr, st
 2312              		.loc 20 162 30 view .LVU620
 2313              	.LBB2989:
 2314              	.LBB2990:
 2315              	.LBI2990:
 346:Eigen/src/Core/Block.h ****       : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!
 2316              		.loc 20 346 12 view .LVU621
 2317              	.LBB2991:
 2318              	.LBB2992:
 2319              	.LBB2993:
 2320              	.LBI2993:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 217


 255:Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 2321              		.loc 9 255 57 view .LVU622
 2322              	.LBB2994:
 2323              	.LBI2994:
 2324              		.loc 12 215 32 view .LVU623
 2325              		.loc 12 215 32 is_stmt 0 view .LVU624
 2326              	.LBE2994:
 2327              	.LBE2993:
 2328              	.LBB2995:
 2329              	.LBI2995:
 380:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC inline Index outerStride() const { return this->innerSize(); }
 2330              		.loc 11 380 36 is_stmt 1 view .LVU625
 380:Eigen/src/Core/Matrix.h ****     EIGEN_DEVICE_FUNC inline Index outerStride() const { return this->innerSize(); }
 2331              		.loc 11 380 36 is_stmt 0 view .LVU626
 2332              	.LBE2995:
 353:Eigen/src/Core/Block.h ****     {
 2333              		.loc 20 353 86 view .LVU627
 2334 00b0 221D     		adds	r2, r4, #4
 2335              	.LVL108:
 2336              	.LBB2996:
 2337              	.LBI2996:
 153:Eigen/src/Core/PlainObjectBase.h **** 
 2338              		.loc 9 153 31 is_stmt 1 view .LVU628
 153:Eigen/src/Core/PlainObjectBase.h **** 
 2339              		.loc 9 153 31 is_stmt 0 view .LVU629
 2340              	.LBE2996:
 2341              	.LBB2997:
 2342              	.LBI2997:
 171:Eigen/src/Core/MapBase.h ****             : m_data(dataPtr), m_rows(rows), m_cols(cols)
 2343              		.loc 21 171 12 is_stmt 1 view .LVU630
 2344              	.LBB2998:
 2345              	.LBB2999:
 2346              	.LBI2999:
 2347              		.loc 7 467 23 view .LVU631
 2348              	.LBB3000:
 2349              	.LBI3000:
 2350              		.loc 8 591 23 view .LVU632
 2351              		.loc 8 591 23 is_stmt 0 view .LVU633
 2352              	.LBE3000:
 2353              	.LBE2999:
 172:Eigen/src/Core/MapBase.h ****     {
 2354              		.loc 21 172 57 view .LVU634
 2355 00b2 3E92     		str	r2, [sp, #248]
 2356              	.LVL109:
 2357              	.LBB3001:
 2358              	.LBI3001:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2359              		.loc 18 110 52 is_stmt 1 view .LVU635
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2360              		.loc 18 110 52 is_stmt 0 view .LVU636
 2361              	.LBE3001:
 2362              	.LBB3002:
 2363              	.LBI3002:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2364              		.loc 18 110 52 is_stmt 1 view .LVU637
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2365              		.loc 18 110 52 is_stmt 0 view .LVU638
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 218


 2366              	.LBE3002:
 2367              	.LBB3003:
 2368              	.LBI3003:
 2369              		.loc 21 201 10 is_stmt 1 view .LVU639
 2370              		.loc 21 201 10 is_stmt 0 view .LVU640
 2371              	.LBE3003:
 2372              	.LBE2998:
 2373              	.LBE2997:
 353:Eigen/src/Core/Block.h ****     {
 2374              		.loc 20 353 86 view .LVU641
 2375 00b4 4094     		str	r4, [sp, #256]
 2376              	.LVL110:
 2377              	.LBB3004:
 2378              	.LBI3004:
 2379              		.loc 18 120 52 is_stmt 1 view .LVU642
 2380              	.LBB3005:
 2381              	.LBB3006:
 2382              		.loc 18 120 96 is_stmt 0 view .LVU643
 2383 00b6 0123     		movs	r3, #1
 2384 00b8 4193     		str	r3, [sp, #260]
 2385              	.LVL111:
 2386              		.loc 18 120 96 view .LVU644
 2387              	.LBE3006:
 2388              	.LBE3005:
 2389              	.LBE3004:
 2390              	.LBB3007:
 2391              	.LBI3007:
 2392              		.loc 18 120 52 is_stmt 1 view .LVU645
 2393              	.LBB3008:
 2394              	.LBB3009:
 2395              		.loc 18 120 96 is_stmt 0 view .LVU646
 2396 00ba 0021     		movs	r1, #0
 2397 00bc 4291     		str	r1, [sp, #264]
 2398              	.LVL112:
 2399              		.loc 18 120 96 view .LVU647
 2400              	.LBE3009:
 2401              	.LBE3008:
 2402              	.LBE3007:
 2403              	.LBB3010:
 2404              	.LBI3010:
 435:Eigen/src/Core/Block.h ****     {
 2405              		.loc 20 435 10 is_stmt 1 view .LVU648
 2406              	.LBB3011:
 2407              		.loc 20 437 21 is_stmt 0 view .LVU649
 2408 00be 4393     		str	r3, [sp, #268]
 2409              	.LVL113:
 2410              		.loc 20 437 21 view .LVU650
 2411              	.LBE3011:
 2412              	.LBE3010:
 2413              	.LBE2992:
 2414              	.LBE2991:
 2415              	.LBE2990:
 2416              	.LBE2989:
 2417              	.LBE2988:
 2418              	.LBB3012:
 2419              	.LBI3012:
 151:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 219


 2420              		.loc 9 151 31 is_stmt 1 view .LVU651
 151:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 2421              		.loc 9 151 31 is_stmt 0 view .LVU652
 2422              	.LBE3012:
 2423              	.LBE2987:
 2424              	.LBE2986:
 2425              	.LBE2985:
 2426              	.LBE2984:
 2427              	.LBB3013:
 2428              	.LBI3013:
 2429              		.loc 22 184 1 is_stmt 1 view .LVU653
 2430              	.LBB3014:
 2431              	.LBI3014:
  64:Eigen/src/Core/Transpose.h **** 
 2432              		.loc 22 64 21 view .LVU654
 2433              	.LBB3015:
 2434              	.LBI3015:
 115:Eigen/src/Core/Transpose.h ****   : public internal::TransposeImpl_base<MatrixType>::type
 2435              		.loc 22 115 37 view .LVU655
 2436              	.LBB3016:
 2437              	.LBI3016:
 2438              		.loc 7 467 23 view .LVU656
 2439              	.LBB3017:
 2440              	.LBI3017:
 2441              		.loc 8 591 23 view .LVU657
 2442              		.loc 8 591 23 is_stmt 0 view .LVU658
 2443              	.LBE3017:
 2444              	.LBE3016:
 2445              	.LBE3015:
 2446              	.LBB3018:
 2447              	.LBI3018:
 103:Eigen/src/Core/Block.h ****   : public BlockImpl<XprType, BlockRows, BlockCols, InnerPanel, typename internal::traits<XprType>:
 2448              		.loc 20 103 81 is_stmt 1 view .LVU659
 2449              	.LBB3019:
 2450              	.LBI3019:
 154:Eigen/src/Core/Block.h ****   : public internal::BlockImpl_dense<XprType, BlockRows, BlockCols, InnerPanel>
 2451              		.loc 20 154 7 view .LVU660
 2452              	.LBB3020:
 2453              	.LBI3020:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 2454              		.loc 20 329 7 view .LVU661
 2455              	.LBB3021:
 2456              	.LBB3022:
 2457              	.LBI3022:
  37:Eigen/src/Core/MapBase.h ****   : public internal::dense_xpr_base<Derived>::type
 2458              		.loc 21 37 34 view .LVU662
 2459              	.LBB3023:
 2460 00c0 4492     		str	r2, [sp, #272]
 2461              	.LVL114:
 2462              	.LBB3024:
 2463              	.LBI3024:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 2464              		.loc 18 109 5 view .LVU663
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 2465              		.loc 18 109 5 is_stmt 0 view .LVU664
 2466              	.LBE3024:
 2467              	.LBB3025:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 220


 2468              	.LBI3025:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 2469              		.loc 18 109 5 is_stmt 1 view .LVU665
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 2470              		.loc 18 109 5 is_stmt 0 view .LVU666
 2471              	.LBE3025:
 2472              	.LBE3023:
 2473              	.LBE3022:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 2474              		.loc 20 329 7 view .LVU667
 2475 00c2 4694     		str	r4, [sp, #280]
 2476 00c4 4793     		str	r3, [sp, #284]
 2477 00c6 4891     		str	r1, [sp, #288]
 2478 00c8 4993     		str	r3, [sp, #292]
 2479              	.LVL115:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 2480              		.loc 20 329 7 view .LVU668
 2481              	.LBE3021:
 2482              	.LBE3020:
 2483              	.LBE3019:
 2484              	.LBE3018:
 2485              	.LBE3014:
 2486              	.LBE3013:
 2487              		.loc 14 563 54 view .LVU669
 2488 00ca 4068     		ldr	r0, [r0, #4]
 2489              	.LVL116:
 2490              	.LBB3026:
 2491              	.LBI3026:
 845:Eigen/src/Core/../plugins/BlockMethods.h **** {
 2492              		.loc 19 845 20 is_stmt 1 view .LVU670
 2493              	.LBB3027:
 2494              	.LBI3027:
 118:Eigen/src/Core/Block.h ****     {
 2495              		.loc 20 118 12 view .LVU671
 2496              	.LBB3028:
 2497              	.LBB3029:
 2498              	.LBB3030:
 2499              	.LBI3030:
 162:Eigen/src/Core/Block.h ****     EIGEN_DEVICE_FUNC inline BlockImpl(XprType& xpr, Index startRow, Index startCol) : Impl(xpr, st
 2500              		.loc 20 162 30 view .LVU672
 2501              	.LBB3031:
 2502              	.LBB3032:
 2503              	.LBI3032:
 346:Eigen/src/Core/Block.h ****       : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!
 2504              		.loc 20 346 12 view .LVU673
 2505              	.LBB3033:
 2506              	.LBB3034:
 2507              	.LBB3035:
 2508              	.LBI3035:
 255:Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 2509              		.loc 9 255 57 view .LVU674
 2510              	.LBB3036:
 2511              	.LBI3036:
 2512              		.loc 12 215 32 view .LVU675
 2513              		.loc 12 215 32 is_stmt 0 view .LVU676
 2514              	.LBE3036:
 2515              	.LBE3035:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 221


 2516              	.LBB3037:
 2517              	.LBI3037:
 2518              		.loc 11 381 36 is_stmt 1 view .LVU677
 2519              		.loc 11 381 36 is_stmt 0 view .LVU678
 2520              	.LBE3037:
 2521              	.LBB3038:
 2522              	.LBI3038:
 151:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 2523              		.loc 9 151 31 is_stmt 1 view .LVU679
 151:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 2524              		.loc 9 151 31 is_stmt 0 view .LVU680
 2525              	.LBE3038:
 2526              	.LBB3039:
 2527              	.LBI3039:
 171:Eigen/src/Core/MapBase.h ****             : m_data(dataPtr), m_rows(rows), m_cols(cols)
 2528              		.loc 21 171 12 is_stmt 1 view .LVU681
 2529              	.LBB3040:
 2530              	.LBB3041:
 2531              	.LBI3041:
 2532              		.loc 7 467 23 view .LVU682
 2533              	.LBB3042:
 2534              	.LBI3042:
 2535              		.loc 8 591 23 view .LVU683
 2536              		.loc 8 591 23 is_stmt 0 view .LVU684
 2537              	.LBE3042:
 2538              	.LBE3041:
 172:Eigen/src/Core/MapBase.h ****     {
 2539              		.loc 21 172 57 view .LVU685
 2540 00cc 3890     		str	r0, [sp, #224]
 2541              	.LVL117:
 2542              	.LBB3043:
 2543              	.LBI3043:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2544              		.loc 18 110 52 is_stmt 1 view .LVU686
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2545              		.loc 18 110 52 is_stmt 0 view .LVU687
 2546              	.LBE3043:
 2547              	.LBB3044:
 2548              	.LBI3044:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2549              		.loc 18 110 52 is_stmt 1 view .LVU688
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2550              		.loc 18 110 52 is_stmt 0 view .LVU689
 2551              	.LBE3044:
 2552              	.LBB3045:
 2553              	.LBI3045:
 2554              		.loc 21 201 10 is_stmt 1 view .LVU690
 2555              		.loc 21 201 10 is_stmt 0 view .LVU691
 2556              	.LBE3045:
 2557              	.LBE3040:
 2558              	.LBE3039:
 353:Eigen/src/Core/Block.h ****     {
 2559              		.loc 20 353 86 view .LVU692
 2560 00ce 3A90     		str	r0, [sp, #232]
 2561              	.LVL118:
 2562              	.LBB3046:
 2563              	.LBI3046:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 222


 2564              		.loc 18 120 52 is_stmt 1 view .LVU693
 2565              	.LBB3047:
 2566              	.LBB3048:
 2567              		.loc 18 120 96 is_stmt 0 view .LVU694
 2568 00d0 3B91     		str	r1, [sp, #236]
 2569              	.LVL119:
 2570              		.loc 18 120 96 view .LVU695
 2571              	.LBE3048:
 2572              	.LBE3047:
 2573              	.LBE3046:
 2574              	.LBB3049:
 2575              	.LBI3049:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2576              		.loc 18 110 52 is_stmt 1 view .LVU696
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2577              		.loc 18 110 52 is_stmt 0 view .LVU697
 2578              	.LBE3049:
 2579              	.LBB3050:
 2580              	.LBI3050:
 435:Eigen/src/Core/Block.h ****     {
 2581              		.loc 20 435 10 is_stmt 1 view .LVU698
 2582              	.LBB3051:
 2583              		.loc 20 437 21 is_stmt 0 view .LVU699
 2584 00d2 0327     		movs	r7, #3
 2585 00d4 3D97     		str	r7, [sp, #244]
 2586              	.LVL120:
 2587              		.loc 20 437 21 view .LVU700
 2588              	.LBE3051:
 2589              	.LBE3050:
 2590              	.LBE3034:
 2591              	.LBE3033:
 2592              	.LBE3032:
 2593              	.LBE3031:
 2594              	.LBE3030:
 2595              	.LBB3052:
 2596              	.LBI3052:
 153:Eigen/src/Core/PlainObjectBase.h **** 
 2597              		.loc 9 153 31 is_stmt 1 view .LVU701
 153:Eigen/src/Core/PlainObjectBase.h **** 
 2598              		.loc 9 153 31 is_stmt 0 view .LVU702
 2599              	.LBE3052:
 2600              	.LBE3029:
 2601              	.LBE3028:
 2602              	.LBE3027:
 2603              	.LBE3026:
 2604              	.LBB3053:
 2605              	.LBI3053:
 2606              		.loc 23 23 1 is_stmt 1 view .LVU703
 2607              	.LBB3054:
 2608              	.LBI3054:
  80:Eigen/src/Core/functors/BinaryFunctors.h **** #else
 2609              		.loc 24 80 3 view .LVU704
  80:Eigen/src/Core/functors/BinaryFunctors.h **** #else
 2610              		.loc 24 80 3 is_stmt 0 view .LVU705
 2611              	.LBE3054:
 2612              	.LBB3055:
 2613              	.LBI3055:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 223


 104:Eigen/src/Core/CwiseBinaryOp.h ****       : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 2614              		.loc 25 104 25 is_stmt 1 view .LVU706
 2615              	.LBB3056:
 2616              	.LBB3057:
 2617              	.LBI3057:
 2618              		.loc 25 148 7 view .LVU707
 2619              	.LBB3058:
 2620              	.LBI3058:
 2621              		.loc 7 467 23 view .LVU708
 2622              	.LBB3059:
 2623              	.LBI3059:
 2624              		.loc 8 591 23 view .LVU709
 2625              		.loc 8 591 23 is_stmt 0 view .LVU710
 2626              	.LBE3059:
 2627              	.LBE3058:
 2628              	.LBE3057:
 2629              	.LBB3060:
 2630              	.LBI3060:
  52:Eigen/src/Core/Transpose.h ****   : public TransposeImpl<MatrixType,typename internal::traits<MatrixType>::StorageKind>
 2631              		.loc 22 52 37 is_stmt 1 view .LVU711
 2632              	.LBB3061:
 2633              	.LBI3061:
 103:Eigen/src/Core/Block.h ****   : public BlockImpl<XprType, BlockRows, BlockCols, InnerPanel, typename internal::traits<XprType>:
 2634              		.loc 20 103 81 view .LVU712
 2635              	.LBB3062:
 2636              	.LBI3062:
 154:Eigen/src/Core/Block.h ****   : public internal::BlockImpl_dense<XprType, BlockRows, BlockCols, InnerPanel>
 2637              		.loc 20 154 7 view .LVU713
 2638              	.LBB3063:
 2639              	.LBI3063:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 2640              		.loc 20 329 7 view .LVU714
 2641              	.LBB3064:
 2642              	.LBB3065:
 2643              	.LBI3065:
  37:Eigen/src/Core/MapBase.h ****   : public internal::dense_xpr_base<Derived>::type
 2644              		.loc 21 37 34 view .LVU715
 2645              	.LBB3066:
 2646 00d6 1492     		str	r2, [sp, #80]
 2647              	.LVL121:
 2648              	.LBB3067:
 2649              	.LBI3067:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 2650              		.loc 18 109 5 view .LVU716
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 2651              		.loc 18 109 5 is_stmt 0 view .LVU717
 2652              	.LBE3067:
 2653              	.LBB3068:
 2654              	.LBI3068:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 2655              		.loc 18 109 5 is_stmt 1 view .LVU718
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 2656              		.loc 18 109 5 is_stmt 0 view .LVU719
 2657              	.LBE3068:
 2658              	.LBE3066:
 2659              	.LBE3065:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 224


 2660              		.loc 20 329 7 view .LVU720
 2661 00d8 1694     		str	r4, [sp, #88]
 2662 00da 1793     		str	r3, [sp, #92]
 2663 00dc 1891     		str	r1, [sp, #96]
 2664 00de 1993     		str	r3, [sp, #100]
 2665              	.LVL122:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 2666              		.loc 20 329 7 view .LVU721
 2667              	.LBE3064:
 2668              	.LBE3063:
 2669              	.LBE3062:
 2670              	.LBE3061:
 2671              	.LBE3060:
 2672              	.LBB3069:
 2673              	.LBI3069:
 103:Eigen/src/Core/Block.h ****   : public BlockImpl<XprType, BlockRows, BlockCols, InnerPanel, typename internal::traits<XprType>:
 2674              		.loc 20 103 81 is_stmt 1 view .LVU722
 2675              	.LBB3070:
 2676              	.LBI3070:
 154:Eigen/src/Core/Block.h ****   : public internal::BlockImpl_dense<XprType, BlockRows, BlockCols, InnerPanel>
 2677              		.loc 20 154 7 view .LVU723
 2678              	.LBB3071:
 2679              	.LBI3071:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 2680              		.loc 20 329 7 view .LVU724
 2681              	.LBB3072:
 2682              	.LBB3073:
 2683              	.LBI3073:
  37:Eigen/src/Core/MapBase.h ****   : public internal::dense_xpr_base<Derived>::type
 2684              		.loc 21 37 34 view .LVU725
 2685              	.LBB3074:
 2686 00e0 1A90     		str	r0, [sp, #104]
 2687              	.LVL123:
 2688              	.LBB3075:
 2689              	.LBI3075:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 2690              		.loc 18 109 5 view .LVU726
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 2691              		.loc 18 109 5 is_stmt 0 view .LVU727
 2692              	.LBE3075:
 2693              	.LBB3076:
 2694              	.LBI3076:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 2695              		.loc 18 109 5 is_stmt 1 view .LVU728
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 2696              		.loc 18 109 5 is_stmt 0 view .LVU729
 2697              	.LBE3076:
 2698              	.LBE3074:
 2699              	.LBE3073:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 2700              		.loc 20 329 7 view .LVU730
 2701 00e2 1C90     		str	r0, [sp, #112]
 2702 00e4 1D91     		str	r1, [sp, #116]
 2703              	.LVL124:
 2704              	.LBB3077:
 2705              	.LBI3077:
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 225


 2706              		.loc 18 109 5 is_stmt 1 view .LVU731
 109:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 2707              		.loc 18 109 5 is_stmt 0 view .LVU732
 2708              	.LBE3077:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 2709              		.loc 20 329 7 view .LVU733
 2710 00e6 1F97     		str	r7, [sp, #124]
 2711              	.LVL125:
 329:Eigen/src/Core/Block.h ****   : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
 2712              		.loc 20 329 7 view .LVU734
 2713              	.LBE3072:
 2714              	.LBE3071:
 2715              	.LBE3070:
 2716              	.LBE3069:
 2717              	.LBB3078:
 2718              	.LBI3078:
  80:Eigen/src/Core/functors/BinaryFunctors.h **** #else
 2719              		.loc 24 80 3 is_stmt 1 view .LVU735
  80:Eigen/src/Core/functors/BinaryFunctors.h **** #else
 2720              		.loc 24 80 3 is_stmt 0 view .LVU736
 2721              	.LBE3078:
 2722              	.LBB3079:
 2723              	.LBI3079:
  68:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC inline Index cols() const { return m_matrix.rows(); }
 2724              		.loc 22 68 36 is_stmt 1 view .LVU737
  68:Eigen/src/Core/Transpose.h ****     EIGEN_DEVICE_FUNC inline Index cols() const { return m_matrix.rows(); }
 2725              		.loc 22 68 36 is_stmt 0 view .LVU738
 2726              	.LBE3079:
 2727              	.LBB3080:
 2728              	.LBI3080:
  90:Eigen/src/Core/MapBase.h ****     /** \copydoc DenseBase::cols() */
 2729              		.loc 21 90 36 is_stmt 1 view .LVU739
  90:Eigen/src/Core/MapBase.h ****     /** \copydoc DenseBase::cols() */
 2730              		.loc 21 90 36 is_stmt 0 view .LVU740
 2731              	.LBE3080:
 2732              	.LBB3081:
 2733              	.LBI3081:
  69:Eigen/src/Core/Transpose.h **** 
 2734              		.loc 22 69 36 is_stmt 1 view .LVU741
  69:Eigen/src/Core/Transpose.h **** 
 2735              		.loc 22 69 36 is_stmt 0 view .LVU742
 2736              	.LBE3081:
 2737              	.LBB3082:
 2738              	.LBI3082:
  92:Eigen/src/Core/MapBase.h **** 
 2739              		.loc 21 92 36 is_stmt 1 view .LVU743
  92:Eigen/src/Core/MapBase.h **** 
 2740              		.loc 21 92 36 is_stmt 0 view .LVU744
 2741              	.LBE3082:
 2742              	.LBE3056:
 2743              	.LBE3055:
 2744              	.LBE3053:
 2745              	.LBB3083:
 2746              	.LBI3083:
 2747              		.loc 26 449 1 is_stmt 1 view .LVU745
 2748              	.LBB3084:
 2749              	.LBI3084:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 226


  36:Eigen/src/Core/functors/BinaryFunctors.h **** #else
 2750              		.loc 24 36 3 view .LVU746
  36:Eigen/src/Core/functors/BinaryFunctors.h **** #else
 2751              		.loc 24 36 3 is_stmt 0 view .LVU747
 2752              	.LBE3084:
 2753              	.LBB3085:
 2754              	.LBI3085:
 411:Eigen/src/Core/Redux.h **** {
 2755              		.loc 26 411 1 is_stmt 1 view .LVU748
 2756              	.LBB3086:
 2757              	.LBB3087:
 2758              	.LBI3087:
 338:Eigen/src/Core/Redux.h ****   
 2759              		.loc 26 338 30 view .LVU749
 2760              	.LBB3088:
 2761              	.LBB3089:
 2762              	.LBB3090:
 2763              	.LBI3090:
 671:Eigen/src/Core/CoreEvaluators.h **** };
 2764              		.loc 15 671 30 view .LVU750
 2765              	.LBB3091:
 2766              	.LBB3092:
 2767              	.LBI3092:
 699:Eigen/src/Core/CoreEvaluators.h ****     : m_functor(xpr.functor()),
 2768              		.loc 15 699 30 view .LVU751
 2769              	.LBB3093:
 2770              	.LBB3094:
 2771              	.LBI3094:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 2772              		.loc 15 109 8 view .LVU752
 2773              	.LBB3095:
 2774              	.LBI3095:
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 2775              		.loc 16 299 21 view .LVU753
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 2776              		.loc 16 299 21 is_stmt 0 view .LVU754
 2777              	.LBE3095:
 2778              	.LBE3094:
 2779              	.LBB3096:
 2780              	.LBI3096:
 138:Eigen/src/Core/CwiseBinaryOp.h **** 
 2781              		.loc 25 138 21 is_stmt 1 view .LVU755
 138:Eigen/src/Core/CwiseBinaryOp.h **** 
 2782              		.loc 25 138 21 is_stmt 0 view .LVU756
 2783              	.LBE3096:
 2784              	.LBB3097:
 2785              	.LBI3097:
  80:Eigen/src/Core/functors/BinaryFunctors.h **** #else
 2786              		.loc 24 80 3 is_stmt 1 view .LVU757
  80:Eigen/src/Core/functors/BinaryFunctors.h **** #else
 2787              		.loc 24 80 3 is_stmt 0 view .LVU758
 2788              	.LBE3097:
 2789              	.LBB3098:
 2790              	.LBI3098:
 132:Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the right hand side nested expression */
 2791              		.loc 25 132 23 is_stmt 1 view .LVU759
 132:Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the right hand side nested expression */
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 227


 2792              		.loc 25 132 23 is_stmt 0 view .LVU760
 2793              	.LBE3098:
 2794              	.LBB3099:
 2795              	.LBI3099:
 103:Eigen/src/Core/CoreEvaluators.h **** };
 2796              		.loc 15 103 12 is_stmt 1 view .LVU761
 2797              	.LBB3100:
 2798              	.LBB3101:
 2799              	.LBI3101:
  93:Eigen/src/Core/CoreEvaluators.h **** };
 2800              		.loc 15 93 30 view .LVU762
 2801              	.LBB3102:
 2802              	.LBB3103:
 2803              	.LBI3103:
 275:Eigen/src/Core/CoreEvaluators.h **** 
 2804              		.loc 15 275 30 view .LVU763
 2805              	.LBB3104:
 2806              	.LBB3105:
 2807              	.LBI3105:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 2808              		.loc 15 109 8 view .LVU764
 2809              	.LBB3106:
 2810              	.LBI3106:
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 2811              		.loc 16 299 21 view .LVU765
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 2812              		.loc 16 299 21 is_stmt 0 view .LVU766
 2813              	.LBE3106:
 2814              	.LBE3105:
 2815              	.LBB3107:
 2816              	.LBI3107:
  74:Eigen/src/Core/Transpose.h **** 
 2817              		.loc 22 74 5 is_stmt 1 view .LVU767
  74:Eigen/src/Core/Transpose.h **** 
 2818              		.loc 22 74 5 is_stmt 0 view .LVU768
 2819              	.LBE3107:
 2820              	.LBB3108:
 2821              	.LBI3108:
 103:Eigen/src/Core/CoreEvaluators.h **** };
 2822              		.loc 15 103 12 is_stmt 1 view .LVU769
 2823              	.LBB3109:
 2824              	.LBB3110:
 2825              	.LBI3110:
 996:Eigen/src/Core/CoreEvaluators.h ****   {
 2826              		.loc 15 996 30 view .LVU770
 2827              	.LBB3111:
 2828              	.LBB3112:
 2829              	.LBI3112:
 2830              		.loc 15 1120 30 view .LVU771
 2831              	.LBB3113:
 2832              	.LBB3114:
 2833              	.LBB3115:
 2834              	.LBI3115:
 821:Eigen/src/Core/CoreEvaluators.h ****     : m_data(const_cast<PointerType>(map.data())),
 2835              		.loc 15 821 30 view .LVU772
 2836              	.LBB3116:
 2837              	.LBB3117:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 228


 2838              	.LBB3118:
 2839              	.LBI3118:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 2840              		.loc 15 109 8 view .LVU773
 2841              	.LBB3119:
 2842              	.LBI3119:
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 2843              		.loc 16 299 21 view .LVU774
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 2844              		.loc 16 299 21 is_stmt 0 view .LVU775
 2845              	.LBE3119:
 2846              	.LBE3118:
 2847              	.LBB3120:
 2848              	.LBI3120:
 100:Eigen/src/Core/MapBase.h **** 
 2849              		.loc 21 100 44 is_stmt 1 view .LVU776
 100:Eigen/src/Core/MapBase.h **** 
 2850              		.loc 21 100 44 is_stmt 0 view .LVU777
 2851              	.LBE3120:
 824:Eigen/src/Core/CoreEvaluators.h ****   {
 2852              		.loc 15 824 38 view .LVU778
 2853 00e8 0F92     		str	r2, [sp, #60]
 2854              	.LVL126:
 2855              	.LBB3121:
 2856              	.LBI3121:
 391:Eigen/src/Core/Block.h ****     {
 2857              		.loc 20 391 18 is_stmt 1 view .LVU779
 391:Eigen/src/Core/Block.h ****     {
 2858              		.loc 20 391 18 is_stmt 0 view .LVU780
 2859              	.LBE3121:
 2860              	.LBB3122:
 2861              	.LBI3122:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2862              		.loc 18 110 52 is_stmt 1 view .LVU781
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2863              		.loc 18 110 52 is_stmt 0 view .LVU782
 2864              	.LBE3122:
 2865              	.LBB3123:
 2866              	.LBI3123:
 400:Eigen/src/Core/Block.h ****     {
 2867              		.loc 20 400 18 is_stmt 1 view .LVU783
 400:Eigen/src/Core/Block.h ****     {
 2868              		.loc 20 400 18 is_stmt 0 view .LVU784
 2869              	.LBE3123:
 2870              	.LBB3124:
 2871              	.LBI3124:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2872              		.loc 18 110 52 is_stmt 1 view .LVU785
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2873              		.loc 18 110 52 is_stmt 0 view .LVU786
 2874              	.LBE3124:
 2875              	.LBE3117:
 2876              	.LBE3116:
 2877              	.LBE3115:
 2878              	.LBB3125:
 2879              	.LBI3125:
 100:Eigen/src/Core/MapBase.h **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 229


 2880              		.loc 21 100 44 is_stmt 1 view .LVU787
 100:Eigen/src/Core/MapBase.h **** 
 2881              		.loc 21 100 44 is_stmt 0 view .LVU788
 2882              	.LBE3125:
 2883              	.LBE3114:
 2884              	.LBE3113:
 2885              	.LBE3112:
 2886              	.LBE3111:
 2887              	.LBE3110:
 2888              	.LBE3109:
 2889              	.LBE3108:
 2890              	.LBE3104:
 2891              	.LBE3103:
 2892              	.LBE3102:
 2893              	.LBE3101:
 2894              	.LBE3100:
 2895              	.LBE3099:
 2896              	.LBB3126:
 2897              	.LBI3126:
 135:Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the functor representing the binary operation */
 2898              		.loc 25 135 23 is_stmt 1 view .LVU789
 135:Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the functor representing the binary operation */
 2899              		.loc 25 135 23 is_stmt 0 view .LVU790
 2900              	.LBE3126:
 2901              	.LBB3127:
 2902              	.LBI3127:
 103:Eigen/src/Core/CoreEvaluators.h **** };
 2903              		.loc 15 103 12 is_stmt 1 view .LVU791
 2904              	.LBB3128:
 2905              	.LBB3129:
 2906              	.LBI3129:
 996:Eigen/src/Core/CoreEvaluators.h ****   {
 2907              		.loc 15 996 30 view .LVU792
 2908              	.LBB3130:
 2909              	.LBB3131:
 2910              	.LBI3131:
 2911              		.loc 15 1120 30 view .LVU793
 2912              	.LBB3132:
 2913              	.LBB3133:
 2914              	.LBB3134:
 2915              	.LBI3134:
 821:Eigen/src/Core/CoreEvaluators.h ****     : m_data(const_cast<PointerType>(map.data())),
 2916              		.loc 15 821 30 view .LVU794
 2917              	.LBB3135:
 2918              	.LBB3136:
 2919              	.LBB3137:
 2920              	.LBI3137:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 2921              		.loc 15 109 8 view .LVU795
 2922              	.LBB3138:
 2923              	.LBI3138:
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 2924              		.loc 16 299 21 view .LVU796
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 2925              		.loc 16 299 21 is_stmt 0 view .LVU797
 2926              	.LBE3138:
 2927              	.LBE3137:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 230


 2928              	.LBB3139:
 2929              	.LBI3139:
 100:Eigen/src/Core/MapBase.h **** 
 2930              		.loc 21 100 44 is_stmt 1 view .LVU798
 100:Eigen/src/Core/MapBase.h **** 
 2931              		.loc 21 100 44 is_stmt 0 view .LVU799
 2932              	.LBE3139:
 824:Eigen/src/Core/CoreEvaluators.h ****   {
 2933              		.loc 15 824 38 view .LVU800
 2934 00ea 1190     		str	r0, [sp, #68]
 2935              	.LVL127:
 2936              	.LBB3140:
 2937              	.LBI3140:
 391:Eigen/src/Core/Block.h ****     {
 2938              		.loc 20 391 18 is_stmt 1 view .LVU801
 391:Eigen/src/Core/Block.h ****     {
 2939              		.loc 20 391 18 is_stmt 0 view .LVU802
 2940              	.LBE3140:
 2941              	.LBB3141:
 2942              	.LBI3141:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2943              		.loc 18 110 52 is_stmt 1 view .LVU803
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2944              		.loc 18 110 52 is_stmt 0 view .LVU804
 2945              	.LBE3141:
 2946              	.LBB3142:
 2947              	.LBI3142:
 400:Eigen/src/Core/Block.h ****     {
 2948              		.loc 20 400 18 is_stmt 1 view .LVU805
 400:Eigen/src/Core/Block.h ****     {
 2949              		.loc 20 400 18 is_stmt 0 view .LVU806
 2950              	.LBE3142:
 2951              	.LBB3143:
 2952              	.LBI3143:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2953              		.loc 18 110 52 is_stmt 1 view .LVU807
 2954              	.LBB3144:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2955              		.loc 18 110 109 is_stmt 0 view .LVU808
 2956 00ec BF42     		cmp	r7, r7
 2957 00ee 34D1     		bne	.L62
 2958              	.LVL128:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 2959              		.loc 18 110 109 view .LVU809
 2960              	.LBE3144:
 2961              	.LBE3143:
 2962              	.LBE3136:
 2963              	.LBE3135:
 2964              	.LBE3134:
 2965              	.LBB3149:
 2966              	.LBI3149:
 100:Eigen/src/Core/MapBase.h **** 
 2967              		.loc 21 100 44 is_stmt 1 view .LVU810
 100:Eigen/src/Core/MapBase.h **** 
 2968              		.loc 21 100 44 is_stmt 0 view .LVU811
 2969              	.LBE3149:
 2970              	.LBE3133:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 231


 2971              	.LBE3132:
 2972              	.LBE3131:
 2973              	.LBE3130:
 2974              	.LBE3129:
 2975              	.LBE3128:
 2976              	.LBE3127:
 2977              	.LBE3093:
 2978              	.LBE3092:
 2979              	.LBE3091:
 2980              	.LBE3090:
 338:Eigen/src/Core/Redux.h ****   
 2981              		.loc 26 338 95 view .LVU812
 2982 00f0 14AB     		add	r3, sp, #80
 2983 00f2 1393     		str	r3, [sp, #76]
 2984              	.LVL129:
 338:Eigen/src/Core/Redux.h ****   
 2985              		.loc 26 338 95 view .LVU813
 2986              	.LBE3089:
 2987              	.LBE3088:
 2988              	.LBE3087:
 2989              	.LBB3164:
 2990              	.LBI3164:
 100:Eigen/src/Core/Redux.h ****   {
 2991              		.loc 26 100 37 is_stmt 1 view .LVU814
 2992              	.LBB3165:
 2993              	.LBI3165:
 118:Eigen/src/Core/Redux.h ****   {
 2994              		.loc 26 118 37 view .LVU815
 2995              	.LBB3166:
 2996              	.LBI3166:
 380:Eigen/src/Core/Redux.h ****   { return m_evaluator.coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 2997              		.loc 26 380 19 view .LVU816
 2998              	.LBB3167:
 2999              	.LBI3167:
 711:Eigen/src/Core/CoreEvaluators.h ****   {
 3000              		.loc 15 711 19 view .LVU817
 3001              	.LBB3168:
 3002              	.LBI3168:
 281:Eigen/src/Core/CoreEvaluators.h ****   {
 3003              		.loc 15 281 19 view .LVU818
 3004              	.LBB3169:
 3005              	.LBI3169:
 832:Eigen/src/Core/CoreEvaluators.h ****   {
 3006              		.loc 15 832 19 view .LVU819
 3007              	.LBB3170:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 3008              		.loc 15 834 12 is_stmt 0 view .LVU820
 3009 00f4 0F9A     		ldr	r2, [sp, #60]
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 3010              		.loc 15 834 56 view .LVU821
 3011 00f6 D2ED007A 		vldr.32	s15, [r2]
 3012              	.LVL130:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 3013              		.loc 15 834 56 view .LVU822
 3014              	.LBE3170:
 3015              	.LBE3169:
 3016              	.LBE3168:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 232


 3017              	.LBB3171:
 3018              	.LBI3171:
 832:Eigen/src/Core/CoreEvaluators.h ****   {
 3019              		.loc 15 832 19 is_stmt 1 view .LVU823
 3020              	.LBB3172:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 3021              		.loc 15 834 12 is_stmt 0 view .LVU824
 3022 00fa 119B     		ldr	r3, [sp, #68]
 3023              	.LVL131:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 3024              		.loc 15 834 56 view .LVU825
 3025 00fc 93ED007A 		vldr.32	s14, [r3]
 3026              	.LVL132:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 3027              		.loc 15 834 56 view .LVU826
 3028              	.LBE3172:
 3029              	.LBE3171:
 3030              	.LBB3173:
 3031              	.LBI3173:
 3032              		.loc 24 86 59 is_stmt 1 view .LVU827
 3033              	.LBB3174:
 3034              		.loc 24 86 130 is_stmt 0 view .LVU828
 3035 0100 27EE877A 		vmul.f32	s14, s15, s14
 3036              	.LVL133:
 3037              		.loc 24 86 130 view .LVU829
 3038              	.LBE3174:
 3039              	.LBE3173:
 3040              	.LBE3167:
 3041              	.LBE3166:
 3042              	.LBE3165:
 3043              	.LBB3175:
 3044              	.LBI3175:
 100:Eigen/src/Core/Redux.h ****   {
 3045              		.loc 26 100 37 is_stmt 1 view .LVU830
 3046              	.LBB3176:
 3047              	.LBI3176:
 118:Eigen/src/Core/Redux.h ****   {
 3048              		.loc 26 118 37 view .LVU831
 3049              	.LBB3177:
 3050              	.LBI3177:
 380:Eigen/src/Core/Redux.h ****   { return m_evaluator.coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 3051              		.loc 26 380 19 view .LVU832
 3052              	.LBB3178:
 3053              	.LBI3178:
 711:Eigen/src/Core/CoreEvaluators.h ****   {
 3054              		.loc 15 711 19 view .LVU833
 3055              	.LBB3179:
 3056              	.LBI3179:
 281:Eigen/src/Core/CoreEvaluators.h ****   {
 3057              		.loc 15 281 19 view .LVU834
 3058              	.LBB3180:
 3059              	.LBI3180:
 832:Eigen/src/Core/CoreEvaluators.h ****   {
 3060              		.loc 15 832 19 view .LVU835
 3061              	.LBB3181:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 3062              		.loc 15 834 56 is_stmt 0 view .LVU836
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 233


 3063 0104 D2ED027A 		vldr.32	s15, [r2, #8]
 3064              	.LVL134:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 3065              		.loc 15 834 56 view .LVU837
 3066              	.LBE3181:
 3067              	.LBE3180:
 3068              	.LBE3179:
 3069              	.LBB3182:
 3070              	.LBI3182:
 832:Eigen/src/Core/CoreEvaluators.h ****   {
 3071              		.loc 15 832 19 is_stmt 1 view .LVU838
 3072              	.LBB3183:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 3073              		.loc 15 834 56 is_stmt 0 view .LVU839
 3074 0108 D3ED016A 		vldr.32	s13, [r3, #4]
 3075              	.LVL135:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 3076              		.loc 15 834 56 view .LVU840
 3077              	.LBE3183:
 3078              	.LBE3182:
 3079              	.LBB3184:
 3080              	.LBI3184:
 3081              		.loc 24 86 59 is_stmt 1 view .LVU841
 3082              	.LBB3185:
 3083              		.loc 24 86 130 is_stmt 0 view .LVU842
 3084 010c 67EEA66A 		vmul.f32	s13, s15, s13
 3085              	.LVL136:
 3086              		.loc 24 86 130 view .LVU843
 3087              	.LBE3185:
 3088              	.LBE3184:
 3089              	.LBE3178:
 3090              	.LBE3177:
 3091              	.LBE3176:
 3092              	.LBB3186:
 3093              	.LBI3186:
 118:Eigen/src/Core/Redux.h ****   {
 3094              		.loc 26 118 37 is_stmt 1 view .LVU844
 3095              	.LBB3187:
 3096              	.LBI3187:
 380:Eigen/src/Core/Redux.h ****   { return m_evaluator.coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 3097              		.loc 26 380 19 view .LVU845
 3098              	.LBB3188:
 3099              	.LBI3188:
 711:Eigen/src/Core/CoreEvaluators.h ****   {
 3100              		.loc 15 711 19 view .LVU846
 3101              	.LBB3189:
 3102              	.LBI3189:
 281:Eigen/src/Core/CoreEvaluators.h ****   {
 3103              		.loc 15 281 19 view .LVU847
 3104              	.LBB3190:
 3105              	.LBI3190:
 832:Eigen/src/Core/CoreEvaluators.h ****   {
 3106              		.loc 15 832 19 view .LVU848
 3107              	.LBB3191:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 3108              		.loc 15 834 56 is_stmt 0 view .LVU849
 3109 0110 D2ED047A 		vldr.32	s15, [r2, #16]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 234


 3110              	.LVL137:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 3111              		.loc 15 834 56 view .LVU850
 3112              	.LBE3191:
 3113              	.LBE3190:
 3114              	.LBE3189:
 3115              	.LBB3192:
 3116              	.LBI3192:
 832:Eigen/src/Core/CoreEvaluators.h ****   {
 3117              		.loc 15 832 19 is_stmt 1 view .LVU851
 3118              	.LBB3193:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 3119              		.loc 15 834 56 is_stmt 0 view .LVU852
 3120 0114 93ED026A 		vldr.32	s12, [r3, #8]
 3121              	.LVL138:
 834:Eigen/src/Core/CoreEvaluators.h ****   }
 3122              		.loc 15 834 56 view .LVU853
 3123              	.LBE3193:
 3124              	.LBE3192:
 3125              	.LBB3194:
 3126              	.LBI3194:
 3127              		.loc 24 86 59 is_stmt 1 view .LVU854
 3128              	.LBB3195:
 3129              		.loc 24 86 130 is_stmt 0 view .LVU855
 3130 0118 67EE867A 		vmul.f32	s15, s15, s12
 3131              	.LVL139:
 3132              		.loc 24 86 130 view .LVU856
 3133              	.LBE3195:
 3134              	.LBE3194:
 3135              	.LBE3188:
 3136              	.LBE3187:
 3137              	.LBE3186:
 3138              	.LBB3196:
 3139              	.LBI3196:
  42:Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
 3140              		.loc 24 42 59 is_stmt 1 view .LVU857
 3141              	.LBB3197:
  42:Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
 3142              		.loc 24 42 130 is_stmt 0 view .LVU858
 3143 011c 77EEA67A 		vadd.f32	s15, s15, s13
 3144              	.LVL140:
  42:Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
 3145              		.loc 24 42 130 view .LVU859
 3146              	.LBE3197:
 3147              	.LBE3196:
 3148              	.LBE3175:
 3149              	.LBB3198:
 3150              	.LBI3198:
  42:Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
 3151              		.loc 24 42 59 is_stmt 1 view .LVU860
 3152              	.LBB3199:
  42:Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
 3153              		.loc 24 42 130 is_stmt 0 view .LVU861
 3154 0120 77EE877A 		vadd.f32	s15, s15, s14
 3155              	.LVL141:
  42:Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
 3156              		.loc 24 42 130 view .LVU862
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 235


 3157              	.LBE3199:
 3158              	.LBE3198:
 3159              	.LBE3164:
 3160              	.LBB3200:
 3161              	.LBI3200:
 334:Eigen/src/Core/Redux.h **** {
 3162              		.loc 26 334 7 is_stmt 1 view .LVU863
 3163              	.LBB3201:
 3164              	.LBB3202:
 3165              	.LBI3202:
 665:Eigen/src/Core/CoreEvaluators.h ****   : public binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 3166              		.loc 15 665 8 view .LVU864
 3167              	.LBB3203:
 3168              	.LBB3204:
 3169              	.LBI3204:
 675:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 3170              		.loc 15 675 8 view .LVU865
 3171              	.LBB3205:
 3172              	.LBB3206:
 3173              	.LBI3206:
  99:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<T>
 3174              		.loc 15 99 8 view .LVU866
 3175              	.LBB3207:
 3176              	.LBB3208:
 3177              	.LBI3208:
 952:Eigen/src/Core/CoreEvaluators.h ****   : block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel>
 3178              		.loc 15 952 8 view .LVU867
 3179              	.LBB3209:
 3180              	.LBB3210:
 3181              	.LBI3210:
1113:Eigen/src/Core/CoreEvaluators.h ****   : mapbase_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>,
 3182              		.loc 15 1113 8 view .LVU868
 3183              	.LBB3211:
 3184              	.LBB3212:
 3185              	.LBI3212:
 808:Eigen/src/Core/CoreEvaluators.h **** {
 3186              		.loc 15 808 8 view .LVU869
 3187              	.LBB3213:
 3188              	.LBB3214:
 3189              	.LBI3214:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 3190              		.loc 15 109 8 view .LVU870
 3191              	.LBB3215:
 3192              	.LBI3215:
 3193              		.loc 16 300 21 view .LVU871
 3194              		.loc 16 300 21 is_stmt 0 view .LVU872
 3195              	.LBE3215:
 3196              	.LBE3214:
 3197              	.LBE3213:
 3198              	.LBE3212:
 3199              	.LBE3211:
 3200              	.LBE3210:
 3201              	.LBE3209:
 3202              	.LBE3208:
 3203              	.LBE3207:
 3204              	.LBE3206:
 3205              	.LBB3216:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 236


 3206              	.LBI3216:
  99:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<T>
 3207              		.loc 15 99 8 is_stmt 1 view .LVU873
 3208              	.LBB3217:
 3209              	.LBB3218:
 3210              	.LBI3218:
  90:Eigen/src/Core/CoreEvaluators.h **** {
 3211              		.loc 15 90 8 view .LVU874
 3212              	.LBB3219:
 3213              	.LBB3220:
 3214              	.LBI3220:
 264:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<Transpose<ArgType> >
 3215              		.loc 15 264 8 view .LVU875
 3216              	.LBB3221:
 3217              	.LBB3222:
 3218              	.LBI3222:
  99:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<T>
 3219              		.loc 15 99 8 view .LVU876
 3220              	.LBB3223:
 3221              	.LBB3224:
 3222              	.LBI3224:
 952:Eigen/src/Core/CoreEvaluators.h ****   : block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel>
 3223              		.loc 15 952 8 view .LVU877
 3224              	.LBB3225:
 3225              	.LBB3226:
 3226              	.LBI3226:
1113:Eigen/src/Core/CoreEvaluators.h ****   : mapbase_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>,
 3227              		.loc 15 1113 8 view .LVU878
 3228              	.LBB3227:
 3229              	.LBB3228:
 3230              	.LBI3228:
 808:Eigen/src/Core/CoreEvaluators.h **** {
 3231              		.loc 15 808 8 view .LVU879
 3232              	.LBB3229:
 3233              	.LBB3230:
 3234              	.LBI3230:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 3235              		.loc 15 109 8 view .LVU880
 3236              	.LBB3231:
 3237              	.LBI3231:
 3238              		.loc 16 300 21 view .LVU881
 3239              		.loc 16 300 21 is_stmt 0 view .LVU882
 3240              	.LBE3231:
 3241              	.LBE3230:
 3242              	.LBE3229:
 3243              	.LBE3228:
 3244              	.LBE3227:
 3245              	.LBE3226:
 3246              	.LBE3225:
 3247              	.LBE3224:
 3248              	.LBE3223:
 3249              	.LBE3222:
 3250              	.LBB3232:
 3251              	.LBI3232:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 3252              		.loc 15 109 8 is_stmt 1 view .LVU883
 3253              	.LBB3233:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 237


 3254              	.LBI3233:
 3255              		.loc 16 300 21 view .LVU884
 3256              		.loc 16 300 21 is_stmt 0 view .LVU885
 3257              	.LBE3233:
 3258              	.LBE3232:
 3259              	.LBE3221:
 3260              	.LBE3220:
 3261              	.LBE3219:
 3262              	.LBE3218:
 3263              	.LBE3217:
 3264              	.LBE3216:
 3265              	.LBB3234:
 3266              	.LBI3234:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 3267              		.loc 15 109 8 is_stmt 1 view .LVU886
 3268              	.LBB3235:
 3269              	.LBI3235:
 3270              		.loc 16 300 21 view .LVU887
 3271              		.loc 16 300 21 is_stmt 0 view .LVU888
 3272              	.LBE3235:
 3273              	.LBE3234:
 3274              	.LBE3205:
 3275              	.LBE3204:
 3276              	.LBE3203:
 3277              	.LBE3202:
 3278              	.LBE3201:
 3279              	.LBE3200:
 3280              	.LBE3086:
 3281              	.LBE3085:
 3282              	.LBE3083:
 3283              	.LBE2983:
 3284              	.LBE2982:
 3285              	.LBB3241:
 3286              	.LBI3241:
 3287              		.loc 13 24 46 is_stmt 1 view .LVU889
 3288              	.LBB3242:
 3289              		.loc 13 24 102 is_stmt 0 view .LVU890
 3290 0124 CCED017A 		vstr.32	s15, [ip, #4]
 3291              	.LVL142:
 3292              		.loc 13 24 102 view .LVU891
 3293              	.LBE3242:
 3294              	.LBE3241:
 3295              	.LBE2979:
 3296              	.LBE2978:
 3297              	.LBE2977:
 3298              	.LBE2710:
 3299              	.LBE2709:
 3300              	.LBE2708:
 3301              	.LBB3250:
 3302              	.LBI3250:
 236:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<PlainObjectBase<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> > >
 3303              		.loc 15 236 8 is_stmt 1 view .LVU892
 3304              	.LBB3251:
 3305              	.LBB3252:
 3306              	.LBI3252:
 127:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<Derived>
 3307              		.loc 15 127 8 view .LVU893
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 238


 3308              	.LBB3253:
 3309              	.LBB3254:
 3310              	.LBI3254:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 3311              		.loc 15 109 8 view .LVU894
 3312              	.LBB3255:
 3313              	.LBI3255:
 3314              		.loc 16 300 21 view .LVU895
 3315              		.loc 16 300 21 is_stmt 0 view .LVU896
 3316              	.LBE3255:
 3317              	.LBE3254:
 3318              	.LBE3253:
 3319              	.LBE3252:
 3320              	.LBE3251:
 3321              	.LBE3250:
 3322              	.LBB3256:
 3323              	.LBI3256:
  29:Eigen/src/Core/ProductEvaluators.h ****  : public product_evaluator<Product<Lhs, Rhs, Options> >
 3324              		.loc 14 29 8 is_stmt 1 view .LVU897
 3325              	.LBB3257:
 3326              	.LBB3258:
 3327              	.LBI3258:
 437:Eigen/src/Core/ProductEvaluators.h ****     : evaluator_base<Product<Lhs, Rhs, LazyProduct> >
 3328              		.loc 14 437 8 view .LVU898
 3329              	.LBB3259:
 3330              	.LBB3260:
 3331              	.LBI3260:
 236:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<PlainObjectBase<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> > >
 3332              		.loc 15 236 8 view .LVU899
 3333              	.LBB3261:
 3334              	.LBB3262:
 3335              	.LBI3262:
 127:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<Derived>
 3336              		.loc 15 127 8 view .LVU900
 3337              	.LBB3263:
 3338              	.LBB3264:
 3339              	.LBI3264:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 3340              		.loc 15 109 8 view .LVU901
 3341              	.LBB3265:
 3342              	.LBI3265:
 3343              		.loc 16 300 21 view .LVU902
 3344              		.loc 16 300 21 is_stmt 0 view .LVU903
 3345              	.LBE3265:
 3346              	.LBE3264:
 3347              	.LBE3263:
 3348              	.LBE3262:
 3349              	.LBE3261:
 3350              	.LBE3260:
 3351              	.LBB3266:
 3352              	.LBI3266:
 236:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<PlainObjectBase<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> > >
 3353              		.loc 15 236 8 is_stmt 1 view .LVU904
 3354              	.LBB3267:
 3355              	.LBB3268:
 3356              	.LBI3268:
 127:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<Derived>
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 239


 3357              		.loc 15 127 8 view .LVU905
 3358              	.LBB3269:
 3359              	.LBB3270:
 3360              	.LBI3270:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 3361              		.loc 15 109 8 view .LVU906
 3362              	.LBB3271:
 3363              	.LBI3271:
 3364              		.loc 16 300 21 view .LVU907
 3365              		.loc 16 300 21 is_stmt 0 view .LVU908
 3366              	.LBE3271:
 3367              	.LBE3270:
 3368              	.LBE3269:
 3369              	.LBE3268:
 3370              	.LBE3267:
 3371              	.LBE3266:
 3372              	.LBB3272:
 3373              	.LBI3272:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 3374              		.loc 15 109 8 is_stmt 1 view .LVU909
 3375              	.LBB3273:
 3376              	.LBI3273:
 3377              		.loc 16 300 21 view .LVU910
 3378              		.loc 16 300 21 is_stmt 0 view .LVU911
 3379              	.LBE3273:
 3380              	.LBE3272:
 3381              	.LBE3259:
 3382              	.LBE3258:
 3383              	.LBE3257:
 3384              	.LBE3256:
 3385              	.LBE2660:
 3386              	.LBE2659:
 3387              	.LBE2658:
 3388              	.LBE2657:
 3389              	.LBE2656:
 3390              	.LBE2654:
 3391              	.LBE2653:
 3392              	.LBE2650:
 3393              	.LBE2649:
 3394              	.LBE2648:
 3395              	.LBE2647:
 3396              	.LBE2645:
 3397              	.LBE2644:
 3398              	.LBE2635:
 3399              	.LBE2634:
 3400              	.LBB3289:
 3401              	.LBI3289:
 819:Eigen/src/Core/AssignEvaluator.h **** {
 3402              		.loc 10 819 6 is_stmt 1 view .LVU912
 3403              	.LBB3290:
 3404              	.LBB3291:
 3405              	.LBI3291:
 3406              		.loc 10 873 35 view .LVU913
 3407              	.LBB3292:
 3408              	.LBI3292:
 725:Eigen/src/Core/AssignEvaluator.h **** {
 3409              		.loc 10 725 44 view .LVU914
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 240


 3410              	.LBB3293:
 3411              	.LBB3294:
 3412              	.LBI3294:
 243:Eigen/src/Core/CoreEvaluators.h ****     : evaluator<PlainObjectBase<XprType> >(m) 
 3413              		.loc 15 243 30 view .LVU915
 3414              	.LBB3295:
 3415              	.LBB3296:
 3416              	.LBI3296:
 154:Eigen/src/Core/CoreEvaluators.h ****     : m_data(m.data()), m_outerStride(IsVectorAtCompileTime ? 0 : m.outerStride()) 
 3417              		.loc 15 154 30 view .LVU916
 3418              	.LBB3297:
 3419              	.LBB3298:
 3420              	.LBB3299:
 3421              	.LBI3299:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 3422              		.loc 15 109 8 view .LVU917
 3423              	.LBB3300:
 3424              	.LBI3300:
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 3425              		.loc 16 299 21 view .LVU918
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 3426              		.loc 16 299 21 is_stmt 0 view .LVU919
 3427              	.LBE3300:
 3428              	.LBE3299:
 3429              	.LBB3301:
 3430              	.LBI3301:
 255:Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 3431              		.loc 9 255 57 is_stmt 1 view .LVU920
 3432              	.LBB3302:
 3433              	.LBI3302:
 3434              		.loc 12 215 32 view .LVU921
 3435              		.loc 12 215 32 is_stmt 0 view .LVU922
 3436              	.LBE3302:
 3437              	.LBE3301:
 155:Eigen/src/Core/CoreEvaluators.h ****   {
 3438              		.loc 15 155 82 view .LVU923
 3439 0128 06AB     		add	r3, sp, #24
 3440 012a 21AA     		add	r2, sp, #132
 3441 012c 0692     		str	r2, [sp, #24]
 3442              	.LVL143:
 3443              	.LBB3303:
 3444              	.LBI3303:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 3445              		.loc 18 110 52 is_stmt 1 view .LVU924
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 3446              		.loc 18 110 52 is_stmt 0 view .LVU925
 3447              	.LBE3303:
 3448              	.LBE3298:
 3449              	.LBE3297:
 3450              	.LBE3296:
 3451              	.LBE3295:
 3452              	.LBE3294:
 3453              	.LBB3304:
 3454              	.LBI3304:
 243:Eigen/src/Core/CoreEvaluators.h ****     : evaluator<PlainObjectBase<XprType> >(m) 
 3455              		.loc 15 243 30 is_stmt 1 view .LVU926
 3456              	.LBB3305:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 241


 3457              	.LBB3306:
 3458              	.LBI3306:
 154:Eigen/src/Core/CoreEvaluators.h ****     : m_data(m.data()), m_outerStride(IsVectorAtCompileTime ? 0 : m.outerStride()) 
 3459              		.loc 15 154 30 view .LVU927
 3460              	.LBB3307:
 3461              	.LBB3308:
 3462              	.LBB3309:
 3463              	.LBI3309:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 3464              		.loc 15 109 8 view .LVU928
 3465              	.LBB3310:
 3466              	.LBI3310:
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 3467              		.loc 16 299 21 view .LVU929
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 3468              		.loc 16 299 21 is_stmt 0 view .LVU930
 3469              	.LBE3310:
 3470              	.LBE3309:
 3471              	.LBB3311:
 3472              	.LBI3311:
 255:Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 3473              		.loc 9 255 57 is_stmt 1 view .LVU931
 3474              	.LBB3312:
 3475              	.LBI3312:
 3476              		.loc 12 215 32 view .LVU932
 3477              		.loc 12 215 32 is_stmt 0 view .LVU933
 3478              	.LBE3312:
 3479              	.LBE3311:
 155:Eigen/src/Core/CoreEvaluators.h ****   {
 3480              		.loc 15 155 82 view .LVU934
 3481 012e 0D95     		str	r5, [sp, #52]
 3482              	.LVL144:
 3483              	.LBB3313:
 3484              	.LBI3313:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 3485              		.loc 18 110 52 is_stmt 1 view .LVU935
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 3486              		.loc 18 110 52 is_stmt 0 view .LVU936
 3487              	.LBE3313:
 3488              	.LBE3308:
 3489              	.LBE3307:
 3490              	.LBE3306:
 3491              	.LBE3305:
 3492              	.LBE3304:
 3493              	.LBB3314:
 3494              	.LBI3314:
 610:Eigen/src/Core/AssignEvaluator.h ****     : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 3495              		.loc 10 610 21 is_stmt 1 view .LVU937
 3496              	.LBB3315:
 3497              	.LBB3316:
 611:Eigen/src/Core/AssignEvaluator.h ****   {
 3498              		.loc 10 611 65 is_stmt 0 view .LVU938
 3499 0130 0DAA     		add	r2, sp, #52
 3500              	.LVL145:
 611:Eigen/src/Core/AssignEvaluator.h ****   {
 3501              		.loc 10 611 65 view .LVU939
 3502 0132 1492     		str	r2, [sp, #80]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 242


 3503 0134 1593     		str	r3, [sp, #84]
 3504 0136 1696     		str	r6, [sp, #88]
 3505 0138 1795     		str	r5, [sp, #92]
 3506              	.LVL146:
 611:Eigen/src/Core/AssignEvaluator.h ****   {
 3507              		.loc 10 611 65 view .LVU940
 3508              	.LBE3316:
 3509              	.LBE3315:
 3510              	.LBE3314:
 3511              	.LBB3317:
 3512              	.LBI3317:
 504:Eigen/src/Core/AssignEvaluator.h ****   {
 3513              		.loc 10 504 53 is_stmt 1 view .LVU941
 3514              	.LBB3318:
 3515              	.LBB3319:
 3516              	.LBI3319:
 240:Eigen/src/Core/AssignEvaluator.h ****   {
 3517              		.loc 10 240 53 view .LVU942
 3518              	.LBB3320:
 3519              	.LBI3320:
 635:Eigen/src/Core/AssignEvaluator.h ****   {
 3520              		.loc 10 635 46 view .LVU943
 3521              	.LBB3321:
 3522              	.LBB3322:
 3523              	.LBI3322:
 185:Eigen/src/Core/CoreEvaluators.h ****   {
 3524              		.loc 15 185 11 view .LVU944
 185:Eigen/src/Core/CoreEvaluators.h ****   {
 3525              		.loc 15 185 11 is_stmt 0 view .LVU945
 3526              	.LBE3322:
 3527              	.LBB3323:
 3528              	.LBI3323:
 170:Eigen/src/Core/CoreEvaluators.h ****   {
 3529              		.loc 15 170 19 is_stmt 1 view .LVU946
 170:Eigen/src/Core/CoreEvaluators.h ****   {
 3530              		.loc 15 170 19 is_stmt 0 view .LVU947
 3531              	.LBE3323:
 3532              	.LBB3324:
 3533              	.LBI3324:
 3534              		.loc 13 24 46 is_stmt 1 view .LVU948
 3535              	.LBB3325:
 3536              		.loc 13 24 102 is_stmt 0 view .LVU949
 3537 013a 219A     		ldr	r2, [sp, #132]	@ float
 3538 013c 2A60     		str	r2, [r5]	@ float
 3539              	.LVL147:
 3540              		.loc 13 24 102 view .LVU950
 3541              	.LBE3325:
 3542              	.LBE3324:
 3543              	.LBE3321:
 3544              	.LBE3320:
 3545              	.LBB3326:
 3546              	.LBI3326:
 240:Eigen/src/Core/AssignEvaluator.h ****   {
 3547              		.loc 10 240 53 is_stmt 1 view .LVU951
 3548              	.LBB3327:
 3549              	.LBI3327:
 635:Eigen/src/Core/AssignEvaluator.h ****   {
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 243


 3550              		.loc 10 635 46 view .LVU952
 3551              	.LBB3328:
 637:Eigen/src/Core/AssignEvaluator.h ****   }
 3552              		.loc 10 637 27 is_stmt 0 view .LVU953
 3553 013e 149B     		ldr	r3, [sp, #80]
 3554              	.LVL148:
 3555              	.LBB3329:
 3556              	.LBI3329:
 185:Eigen/src/Core/CoreEvaluators.h ****   {
 3557              		.loc 15 185 11 is_stmt 1 view .LVU954
 3558              	.LBB3330:
 187:Eigen/src/Core/CoreEvaluators.h ****   }
 3559              		.loc 15 187 32 is_stmt 0 view .LVU955
 3560 0140 1B68     		ldr	r3, [r3]
 3561              	.LVL149:
 187:Eigen/src/Core/CoreEvaluators.h ****   }
 3562              		.loc 15 187 32 view .LVU956
 3563              	.LBE3330:
 3564              	.LBE3329:
 637:Eigen/src/Core/AssignEvaluator.h ****   }
 3565              		.loc 10 637 50 view .LVU957
 3566 0142 159A     		ldr	r2, [sp, #84]
 3567              	.LVL150:
 3568              	.LBB3331:
 3569              	.LBI3331:
 170:Eigen/src/Core/CoreEvaluators.h ****   {
 3570              		.loc 15 170 19 is_stmt 1 view .LVU958
 3571              	.LBB3332:
 172:Eigen/src/Core/CoreEvaluators.h ****   }
 3572              		.loc 15 172 12 is_stmt 0 view .LVU959
 3573 0144 1268     		ldr	r2, [r2]
 3574              	.LVL151:
 172:Eigen/src/Core/CoreEvaluators.h ****   }
 3575              		.loc 15 172 12 view .LVU960
 3576              	.LBE3332:
 3577              	.LBE3331:
 3578              	.LBB3333:
 3579              	.LBI3333:
 3580              		.loc 13 24 46 is_stmt 1 view .LVU961
 3581              	.LBB3334:
 3582              		.loc 13 24 102 is_stmt 0 view .LVU962
 3583 0146 5268     		ldr	r2, [r2, #4]	@ float
 3584 0148 5A60     		str	r2, [r3, #4]	@ float
 3585              	.LVL152:
 3586              		.loc 13 24 102 view .LVU963
 3587              	.LBE3334:
 3588              	.LBE3333:
 3589              	.LBE3328:
 3590              	.LBE3327:
 3591              	.LBE3326:
 3592              	.LBE3319:
 3593              	.LBE3318:
 3594              	.LBE3317:
 3595              	.LBB3335:
 3596              	.LBI3335:
 236:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<PlainObjectBase<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> > >
 3597              		.loc 15 236 8 is_stmt 1 view .LVU964
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 244


 3598              	.LBB3336:
 3599              	.LBB3337:
 3600              	.LBI3337:
 127:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<Derived>
 3601              		.loc 15 127 8 view .LVU965
 3602              	.LBB3338:
 3603              	.LBB3339:
 3604              	.LBI3339:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 3605              		.loc 15 109 8 view .LVU966
 3606              	.LBB3340:
 3607              	.LBI3340:
 3608              		.loc 16 300 21 view .LVU967
 3609              		.loc 16 300 21 is_stmt 0 view .LVU968
 3610              	.LBE3340:
 3611              	.LBE3339:
 3612              	.LBE3338:
 3613              	.LBE3337:
 3614              	.LBE3336:
 3615              	.LBE3335:
 3616              	.LBB3341:
 3617              	.LBI3341:
 236:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<PlainObjectBase<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> > >
 3618              		.loc 15 236 8 is_stmt 1 view .LVU969
 3619              	.LBB3342:
 3620              	.LBB3343:
 3621              	.LBI3343:
 127:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<Derived>
 3622              		.loc 15 127 8 view .LVU970
 3623              	.LBB3344:
 3624              	.LBB3345:
 3625              	.LBI3345:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 3626              		.loc 15 109 8 view .LVU971
 3627              	.LBB3346:
 3628              	.LBI3346:
 3629              		.loc 16 300 21 view .LVU972
 3630              		.loc 16 300 21 is_stmt 0 view .LVU973
 3631              	.LBE3346:
 3632              	.LBE3345:
 3633              	.LBE3344:
 3634              	.LBE3343:
 3635              	.LBE3342:
 3636              	.LBE3341:
 3637              	.LBE3293:
 3638              	.LBE3292:
 3639              	.LBE3291:
 3640              	.LBE3290:
 3641              	.LBE3289:
 798:Eigen/src/Core/AssignEvaluator.h **** 
 3642              		.loc 10 798 1 view .LVU974
 3643 014a 4BB0     		add	sp, sp, #300
 3644              		.cfi_remember_state
 3645              		.cfi_def_cfa_offset 20
 3646              		@ sp needed
 3647 014c F0BD     		pop	{r4, r5, r6, r7, pc}
 3648              	.LVL153:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 245


 3649              	.L61:
 3650              		.cfi_restore_state
 3651              	.LBB3347:
 3652              	.LBB3288:
 3653              	.LBB3287:
 3654              	.LBB3286:
 3655              	.LBB3285:
 3656              	.LBB3284:
 3657              	.LBB3283:
 3658              	.LBB3282:
 3659              	.LBB3281:
 3660              	.LBB3280:
 3661              	.LBB3279:
 3662              	.LBB3278:
 3663              	.LBB3277:
 3664              	.LBB3276:
 3665              	.LBB3275:
 3666              	.LBB3274:
 3667              	.LBB3249:
 3668              	.LBB3248:
 3669              	.LBB3246:
 3670              	.LBB2976:
 3671              	.LBB2975:
 3672              	.LBB2972:
 3673              	.LBB2971:
 3674              	.LBB2970:
 3675              	.LBB2969:
 3676              	.LBB2968:
 3677              	.LBB2895:
 3678              	.LBB2894:
 3679              	.LBB2893:
 3680              	.LBB2892:
 3681              	.LBB2891:
 3682              	.LBB2890:
 3683              	.LBB2889:
 3684              	.LBB2888:
 3685              	.LBB2887:
 3686              	.LBB2886:
 3687              	.LBB2885:
 3688              	.LBB2884:
 3689              	.LBB2883:
 3690              	.LBB2882:
 3691              	.LBB2880:
 3692              	.LBB2879:
 3693              	.LBB2878:
 3694              	.LBB2877:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 3695              		.loc 18 110 109 view .LVU975
 3696 014e 064B     		ldr	r3, .L63
 3697              	.LVL154:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 3698              		.loc 18 110 109 view .LVU976
 3699 0150 064A     		ldr	r2, .L63+4
 3700 0152 6E21     		movs	r1, #110
 3701 0154 0648     		ldr	r0, .L63+8
 3702 0156 FFF7FEFF 		bl	__assert_func
 3703              	.LVL155:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 246


 3704              	.L62:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 3705              		.loc 18 110 109 view .LVU977
 3706              	.LBE2877:
 3707              	.LBE2878:
 3708              	.LBE2879:
 3709              	.LBE2880:
 3710              	.LBE2882:
 3711              	.LBE2883:
 3712              	.LBE2884:
 3713              	.LBE2885:
 3714              	.LBE2886:
 3715              	.LBE2887:
 3716              	.LBE2888:
 3717              	.LBE2889:
 3718              	.LBE2890:
 3719              	.LBE2891:
 3720              	.LBE2892:
 3721              	.LBE2893:
 3722              	.LBE2894:
 3723              	.LBE2895:
 3724              	.LBE2968:
 3725              	.LBE2969:
 3726              	.LBE2970:
 3727              	.LBE2971:
 3728              	.LBE2972:
 3729              	.LBE2975:
 3730              	.LBE2976:
 3731              	.LBE3246:
 3732              	.LBB3247:
 3733              	.LBB3245:
 3734              	.LBB3244:
 3735              	.LBB3243:
 3736              	.LBB3240:
 3737              	.LBB3239:
 3738              	.LBB3238:
 3739              	.LBB3237:
 3740              	.LBB3236:
 3741              	.LBB3163:
 3742              	.LBB3162:
 3743              	.LBB3161:
 3744              	.LBB3160:
 3745              	.LBB3159:
 3746              	.LBB3158:
 3747              	.LBB3157:
 3748              	.LBB3156:
 3749              	.LBB3155:
 3750              	.LBB3154:
 3751              	.LBB3153:
 3752              	.LBB3152:
 3753              	.LBB3151:
 3754              	.LBB3150:
 3755              	.LBB3148:
 3756              	.LBB3147:
 3757              	.LBB3146:
 3758              	.LBB3145:
 3759 015a 034B     		ldr	r3, .L63
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 247


 3760 015c 034A     		ldr	r2, .L63+4
 3761 015e 6E21     		movs	r1, #110
 3762 0160 0348     		ldr	r0, .L63+8
 3763 0162 FFF7FEFF 		bl	__assert_func
 3764              	.LVL156:
 3765              	.L64:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 3766              		.loc 18 110 109 view .LVU978
 3767 0166 00BF     		.align	2
 3768              	.L63:
 3769 0168 00000000 		.word	.LC4
 3770 016c 98000000 		.word	.LC7
 3771 0170 78000000 		.word	.LC6
 3772              	.LBE3145:
 3773              	.LBE3146:
 3774              	.LBE3147:
 3775              	.LBE3148:
 3776              	.LBE3150:
 3777              	.LBE3151:
 3778              	.LBE3152:
 3779              	.LBE3153:
 3780              	.LBE3154:
 3781              	.LBE3155:
 3782              	.LBE3156:
 3783              	.LBE3157:
 3784              	.LBE3158:
 3785              	.LBE3159:
 3786              	.LBE3160:
 3787              	.LBE3161:
 3788              	.LBE3162:
 3789              	.LBE3163:
 3790              	.LBE3236:
 3791              	.LBE3237:
 3792              	.LBE3238:
 3793              	.LBE3239:
 3794              	.LBE3240:
 3795              	.LBE3243:
 3796              	.LBE3244:
 3797              	.LBE3245:
 3798              	.LBE3247:
 3799              	.LBE3248:
 3800              	.LBE3249:
 3801              	.LBE3274:
 3802              	.LBE3275:
 3803              	.LBE3276:
 3804              	.LBE3277:
 3805              	.LBE3278:
 3806              	.LBE3279:
 3807              	.LBE3280:
 3808              	.LBE3281:
 3809              	.LBE3282:
 3810              	.LBE3283:
 3811              	.LBE3284:
 3812              	.LBE3285:
 3813              	.LBE3286:
 3814              	.LBE3287:
 3815              	.LBE3288:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 248


 3816              	.LBE3347:
 3817              		.cfi_endproc
 3818              	.LFE8889:
 3819              		.fnend
 3821              		.section	.rodata.TaskNavi_Init.str1.4,"aMS",%progbits,1
 3822              		.align	2
 3823              	.LC8:
 3824 0000 6D5F726F 		.ascii	"m_row<m_xpr.rows() && \"Too many rows passed to com"
 3824      773C6D5F 
 3824      7870722E 
 3824      726F7773 
 3824      28292026 
 3825 0032 6D612069 		.ascii	"ma initializer (operator<<)\"\000"
 3825      6E697469 
 3825      616C697A 
 3825      65722028 
 3825      6F706572 
 3826 004f 00       		.align	2
 3827              	.LC9:
 3828 0050 45696765 		.ascii	"Eigen::CommaInitializer<MatrixType>& Eigen::CommaIn"
 3828      6E3A3A43 
 3828      6F6D6D61 
 3828      496E6974 
 3828      69616C69 
 3829 0083 69746961 		.ascii	"itializer<MatrixType>::operator,(const Scalar&) [wi"
 3829      6C697A65 
 3829      723C4D61 
 3829      74726978 
 3829      54797065 
 3830 00b6 74682058 		.ascii	"th XprType = Eigen::Matrix<float, 2, 3>; Eigen::Com"
 3830      70725479 
 3830      7065203D 
 3830      20456967 
 3830      656E3A3A 
 3831 00e9 6D61496E 		.ascii	"maInitializer<MatrixType>::Scalar = float]\000"
 3831      69746961 
 3831      6C697A65 
 3831      723C4D61 
 3831      74726978 
 3832              		.align	2
 3833              	.LC10:
 3834 0114 6D5F636F 		.ascii	"m_col<m_xpr.cols() && \"Too many coefficients passe"
 3834      6C3C6D5F 
 3834      7870722E 
 3834      636F6C73 
 3834      28292026 
 3835 0146 6420746F 		.ascii	"d to comma initializer (operator<<)\"\000"
 3835      20636F6D 
 3835      6D612069 
 3835      6E697469 
 3835      616C697A 
 3836 016b 00       		.align	2
 3837              	.LC11:
 3838 016c 6D5F6375 		.ascii	"m_currentBlockRows==1\000"
 3838      7272656E 
 3838      74426C6F 
 3838      636B526F 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 249


 3838      77733D3D 
 3839 0182 0000     		.align	2
 3840              	.LC12:
 3841 0184 45696765 		.ascii	"Eigen::CommaInitializer<MatrixType>& Eigen::CommaIn"
 3841      6E3A3A43 
 3841      6F6D6D61 
 3841      496E6974 
 3841      69616C69 
 3842 01b7 69746961 		.ascii	"itializer<MatrixType>::operator,(const Scalar&) [wi"
 3842      6C697A65 
 3842      723C4D61 
 3842      74726978 
 3842      54797065 
 3843 01ea 74682058 		.ascii	"th XprType = Eigen::Matrix<float, 3, 1>; Eigen::Com"
 3843      70725479 
 3843      7065203D 
 3843      20456967 
 3843      656E3A3A 
 3844 021d 6D61496E 		.ascii	"maInitializer<MatrixType>::Scalar = float]\000"
 3844      69746961 
 3844      6C697A65 
 3844      723C4D61 
 3844      74726978 
 3845              		.align	2
 3846              	.LC13:
 3847 0248 45696765 		.ascii	"Eigen Test\015\012\000"
 3847      6E205465 
 3847      73740D0A 
 3847      00
 3848 0255 000000   		.align	2
 3849              	.LC14:
 3850 0258 2000     		.ascii	" \000"
 3851 025a 0000     		.align	2
 3852              	.LC15:
 3853 025c 726F7720 		.ascii	"row >= 0 && row < rows() && col >= 0 && col < cols("
 3853      3E3D2030 
 3853      20262620 
 3853      726F7720 
 3853      3C20726F 
 3854 028f 2900     		.ascii	")\000"
 3855 0291 000000   		.align	2
 3856              	.LC16:
 3857 0294 45696765 		.ascii	"Eigen::DenseCoeffsBase<Derived, 1>::Scalar& Eigen::"
 3857      6E3A3A44 
 3857      656E7365 
 3857      436F6566 
 3857      66734261 
 3858 02c7 44656E73 		.ascii	"DenseCoeffsBase<Derived, 1>::operator()(Eigen::Inde"
 3858      65436F65 
 3858      66667342 
 3858      6173653C 
 3858      44657269 
 3859 02fa 782C2045 		.ascii	"x, Eigen::Index) [with Derived = Eigen::Matrix<floa"
 3859      6967656E 
 3859      3A3A496E 
 3859      64657829 
 3859      205B7769 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 250


 3860 032d 742C2032 		.ascii	"t, 2, 1>; Eigen::DenseCoeffsBase<Derived, 1>::Scala"
 3860      2C20313E 
 3860      3B204569 
 3860      67656E3A 
 3860      3A44656E 
 3861 0360 72203D20 		.ascii	"r = float; Eigen::Index = int]\000"
 3861      666C6F61 
 3861      743B2045 
 3861      6967656E 
 3861      3A3A496E 
 3862 037f 00       		.align	2
 3863              	.LC17:
 3864 0380 45696765 		.ascii	"Eigen/src/Core/DenseCoeffsBase.h\000"
 3864      6E2F7372 
 3864      632F436F 
 3864      72652F44 
 3864      656E7365 
 3865 03a1 000000   		.align	2
 3866              	.LC18:
 3867 03a4 25660900 		.ascii	"%f\011\000"
 3868              		.global	__aeabi_f2d
 3869              		.align	2
 3870              	.LC19:
 3871 03a8 0D0A00   		.ascii	"\015\012\000"
 3872              		.section	.text.TaskNavi_Init,"ax",%progbits
 3873              		.align	1
 3874              		.global	TaskNavi_Init
 3875              		.syntax unified
 3876              		.thumb
 3877              		.thumb_func
 3879              	TaskNavi_Init:
 3880              		.fnstart
 3881              	.LVL157:
 3882              	.LFB8392:
  40:Task/Task_Navi.cpp ****     memset(&TaskNavi_Monitor, 0, sizeof(TaskNavi_Monitor_TypeDef));
 3883              		.loc 1 40 1 is_stmt 1 view -0
 3884              		.cfi_startproc
 3885              		@ args = 0, pretend = 0, frame = 96
 3886              		@ frame_needed = 0, uses_anonymous_args = 0
  40:Task/Task_Navi.cpp ****     memset(&TaskNavi_Monitor, 0, sizeof(TaskNavi_Monitor_TypeDef));
 3887              		.loc 1 40 1 is_stmt 0 view .LVU980
 3888 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3889              		.save {r4, r5, r6, r7, lr}
 3890              		.cfi_def_cfa_offset 20
 3891              		.cfi_offset 4, -20
 3892              		.cfi_offset 5, -16
 3893              		.cfi_offset 6, -12
 3894              		.cfi_offset 7, -8
 3895              		.cfi_offset 14, -4
 3896              		.pad #108
 3897 0002 9BB0     		sub	sp, sp, #108
 3898              		.cfi_def_cfa_offset 128
 3899 0004 0646     		mov	r6, r0
  41:Task/Task_Navi.cpp **** 
 3900              		.loc 1 41 5 is_stmt 1 view .LVU981
  41:Task/Task_Navi.cpp **** 
 3901              		.loc 1 41 11 is_stmt 0 view .LVU982
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 251


 3902 0006 AE4F     		ldr	r7, .L122
 3903 0008 6022     		movs	r2, #96
 3904 000a 0021     		movs	r1, #0
 3905 000c 3846     		mov	r0, r7
 3906              	.LVL158:
  41:Task/Task_Navi.cpp **** 
 3907              		.loc 1 41 11 view .LVU983
 3908 000e FFF7FEFF 		bl	memset
 3909              	.LVL159:
  44:Task/Task_Navi.cpp **** 
 3910              		.loc 1 44 5 is_stmt 1 view .LVU984
  44:Task/Task_Navi.cpp **** 
 3911              		.loc 1 44 11 is_stmt 0 view .LVU985
 3912 0012 AC4C     		ldr	r4, .L122+4
 3913 0014 2722     		movs	r2, #39
 3914 0016 0021     		movs	r1, #0
 3915 0018 2046     		mov	r0, r4
 3916 001a FFF7FEFF 		bl	memset
 3917              	.LVL160:
  46:Task/Task_Navi.cpp ****     memset(DataPipe_DataObjAddr(Navi_Altitude), 0, DataPipe_DataSize(Navi_Altitude));
 3918              		.loc 1 46 5 is_stmt 1 view .LVU986
  46:Task/Task_Navi.cpp ****     memset(DataPipe_DataObjAddr(Navi_Altitude), 0, DataPipe_DataSize(Navi_Altitude));
 3919              		.loc 1 46 11 is_stmt 0 view .LVU987
 3920 001e AA4D     		ldr	r5, .L122+8
 3921 0020 2222     		movs	r2, #34
 3922 0022 0021     		movs	r1, #0
 3923 0024 2846     		mov	r0, r5
 3924 0026 FFF7FEFF 		bl	memset
 3925              	.LVL161:
  47:Task/Task_Navi.cpp **** 
 3926              		.loc 1 47 5 is_stmt 1 view .LVU988
  47:Task/Task_Navi.cpp **** 
 3927              		.loc 1 47 11 is_stmt 0 view .LVU989
 3928 002a 05F12400 		add	r0, r5, #36
 3929 002e 0022     		movs	r2, #0
 3930 0030 6A62     		str	r2, [r5, #36]
 3931 0032 AA62     		str	r2, [r5, #40]
  49:Task/Task_Navi.cpp ****     Attitude_smp_DataPipe.data_size = DataPipe_DataSize(Navi_Attitude);
 3932              		.loc 1 49 5 is_stmt 1 view .LVU990
  49:Task/Task_Navi.cpp ****     Attitude_smp_DataPipe.data_size = DataPipe_DataSize(Navi_Attitude);
 3933              		.loc 1 49 37 is_stmt 0 view .LVU991
 3934 0034 C4F80D50 		str	r5, [r4, #13]	@ unaligned
  50:Task/Task_Navi.cpp ****     DataPipe_Enable(&Attitude_smp_DataPipe);
 3935              		.loc 1 50 5 is_stmt 1 view .LVU992
  50:Task/Task_Navi.cpp ****     DataPipe_Enable(&Attitude_smp_DataPipe);
 3936              		.loc 1 50 37 is_stmt 0 view .LVU993
 3937 0038 2223     		movs	r3, #34
 3938 003a 6374     		strb	r3, [r4, #17]
 3939 003c A274     		strb	r2, [r4, #18]
  51:Task/Task_Navi.cpp **** 
 3940              		.loc 1 51 5 is_stmt 1 view .LVU994
 3941              	.LVL162:
 3942              	.LBB3491:
 3943              	.LBI3491:
 3944              		.file 27 "System/DataPipe/DataPipe.h"
   1:System/DataPipe/DataPipe.h **** #ifndef __DATAPIPE_H
   2:System/DataPipe/DataPipe.h **** #define __DATAPIPE_H
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 252


   3:System/DataPipe/DataPipe.h **** 
   4:System/DataPipe/DataPipe.h **** #ifdef __cplusplus
   5:System/DataPipe/DataPipe.h **** extern "C" {
   6:System/DataPipe/DataPipe.h **** #endif
   7:System/DataPipe/DataPipe.h **** 
   8:System/DataPipe/DataPipe.h **** #include <stdint.h>
   9:System/DataPipe/DataPipe.h **** #include <string.h>
  10:System/DataPipe/DataPipe.h **** #include <stdbool.h>
  11:System/DataPipe/DataPipe.h **** #include "../../FCHW_Config.h"
  12:System/DataPipe/DataPipe.h **** 
  13:System/DataPipe/DataPipe.h **** typedef void (*Pipe_TransFinish_Callback)(void *pipe_obj);
  14:System/DataPipe/DataPipe.h **** typedef void (*Pipe_TransError_Callback)(void *pipe_obj);
  15:System/DataPipe/DataPipe.h **** typedef void (*Pipe_TimeOutProc_Callback)(void *pipe_obj);
  16:System/DataPipe/DataPipe.h **** 
  17:System/DataPipe/DataPipe.h **** #define DataPipeHandleToObj(x) ((DataPipeObj_TypeDef *)x)
  18:System/DataPipe/DataPipe.h **** #define DataPipe_CreateDataObj(type, name) static type name##_##PipeDataObj __attribute__((section(
  19:System/DataPipe/DataPipe.h **** #define DataPipe_DataObjAddr(name) (&name##_##PipeDataObj)
  20:System/DataPipe/DataPipe.h **** #define DataPipe_DataObj(name) name##_##PipeDataObj
  21:System/DataPipe/DataPipe.h **** #define DataPipe_DataSize(name) sizeof(name##_##PipeDataObj)
  22:System/DataPipe/DataPipe.h **** 
  23:System/DataPipe/DataPipe.h **** typedef enum
  24:System/DataPipe/DataPipe.h **** {
  25:System/DataPipe/DataPipe.h ****     Pipe_UnReady = 0,
  26:System/DataPipe/DataPipe.h ****     Pipe_Ready,
  27:System/DataPipe/DataPipe.h ****     Pipe_Busy,
  28:System/DataPipe/DataPipe.h ****     Pipe_Error,
  29:System/DataPipe/DataPipe.h **** } DataPipe_State_List;
  30:System/DataPipe/DataPipe.h **** 
  31:System/DataPipe/DataPipe.h **** #pragma pack(1)
  32:System/DataPipe/DataPipe.h **** typedef struct
  33:System/DataPipe/DataPipe.h **** {
  34:System/DataPipe/DataPipe.h ****     uint32_t min_rx_interval;
  35:System/DataPipe/DataPipe.h ****     uint32_t detect_interval;
  36:System/DataPipe/DataPipe.h ****     uint32_t rx_ms_rt;
  37:System/DataPipe/DataPipe.h **** 
  38:System/DataPipe/DataPipe.h ****     bool enable;
  39:System/DataPipe/DataPipe.h **** 
  40:System/DataPipe/DataPipe.h ****     uint32_t data_addr;
  41:System/DataPipe/DataPipe.h ****     uint16_t data_size;
  42:System/DataPipe/DataPipe.h **** 
  43:System/DataPipe/DataPipe.h ****     Pipe_TransFinish_Callback trans_finish_cb;
  44:System/DataPipe/DataPipe.h ****     Pipe_TransError_Callback trans_error_cb;
  45:System/DataPipe/DataPipe.h **** 
  46:System/DataPipe/DataPipe.h ****     uint32_t tx_cnt;
  47:System/DataPipe/DataPipe.h ****     uint32_t rx_cnt;
  48:System/DataPipe/DataPipe.h ****     uint32_t er_cnt;
  49:System/DataPipe/DataPipe.h **** } DataPipeObj_TypeDef;
  50:System/DataPipe/DataPipe.h **** #pragma pack()
  51:System/DataPipe/DataPipe.h **** 
  52:System/DataPipe/DataPipe.h **** typedef struct
  53:System/DataPipe/DataPipe.h **** {
  54:System/DataPipe/DataPipe.h ****     DataPipeObj_TypeDef *org;
  55:System/DataPipe/DataPipe.h ****     DataPipeObj_TypeDef *dst;
  56:System/DataPipe/DataPipe.h **** } Data_PlugedPipeObj_TypeDef;
  57:System/DataPipe/DataPipe.h **** 
  58:System/DataPipe/DataPipe.h **** bool DataPipe_Init(void);
  59:System/DataPipe/DataPipe.h **** bool DataPipe_DeInit(void);
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 253


  60:System/DataPipe/DataPipe.h **** bool DataPipe_SendTo(DataPipeObj_TypeDef *p_org, DataPipeObj_TypeDef *p_dst);
  61:System/DataPipe/DataPipe.h **** bool DataPipe_DealError(void);
  62:System/DataPipe/DataPipe.h **** 
  63:System/DataPipe/DataPipe.h **** inline bool DataPipe_Enable(DataPipeObj_TypeDef *obj)
 3945              		.loc 27 63 13 view .LVU995
 3946              	.LBB3492:
  64:System/DataPipe/DataPipe.h **** {
  65:System/DataPipe/DataPipe.h ****     if (obj == NULL)
 3947              		.loc 27 65 5 view .LVU996
  66:System/DataPipe/DataPipe.h ****         return false;
  67:System/DataPipe/DataPipe.h **** 
  68:System/DataPipe/DataPipe.h ****     obj->enable = true;
 3948              		.loc 27 68 5 view .LVU997
 3949              		.loc 27 68 17 is_stmt 0 view .LVU998
 3950 003e 0121     		movs	r1, #1
 3951 0040 2173     		strb	r1, [r4, #12]
  69:System/DataPipe/DataPipe.h **** 
  70:System/DataPipe/DataPipe.h ****     return true;
 3952              		.loc 27 70 5 is_stmt 1 view .LVU999
 3953              	.LVL163:
 3954              		.loc 27 70 5 is_stmt 0 view .LVU1000
 3955              	.LBE3492:
 3956              	.LBE3491:
  53:Task/Task_Navi.cpp ****     Altitude_smp_DataPipe.data_size = DataPipe_DataSize(Navi_Altitude);
 3957              		.loc 1 53 5 is_stmt 1 view .LVU1001
  53:Task/Task_Navi.cpp ****     Altitude_smp_DataPipe.data_size = DataPipe_DataSize(Navi_Altitude);
 3958              		.loc 1 53 37 is_stmt 0 view .LVU1002
 3959 0042 A24B     		ldr	r3, .L122+12
 3960 0044 C3F80D00 		str	r0, [r3, #13]	@ unaligned
  54:Task/Task_Navi.cpp ****     DataPipe_Enable(&Altitude_smp_DataPipe);
 3961              		.loc 1 54 5 is_stmt 1 view .LVU1003
  54:Task/Task_Navi.cpp ****     DataPipe_Enable(&Altitude_smp_DataPipe);
 3962              		.loc 1 54 37 is_stmt 0 view .LVU1004
 3963 0048 0820     		movs	r0, #8
 3964 004a 5874     		strb	r0, [r3, #17]
 3965 004c 9A74     		strb	r2, [r3, #18]
  55:Task/Task_Navi.cpp **** 
 3966              		.loc 1 55 5 is_stmt 1 view .LVU1005
 3967              	.LVL164:
 3968              	.LBB3493:
 3969              	.LBI3493:
  63:System/DataPipe/DataPipe.h **** {
 3970              		.loc 27 63 13 view .LVU1006
 3971              	.LBB3494:
  65:System/DataPipe/DataPipe.h ****         return false;
 3972              		.loc 27 65 5 view .LVU1007
  68:System/DataPipe/DataPipe.h **** 
 3973              		.loc 27 68 5 view .LVU1008
  68:System/DataPipe/DataPipe.h **** 
 3974              		.loc 27 68 17 is_stmt 0 view .LVU1009
 3975 004e 1973     		strb	r1, [r3, #12]
 3976              		.loc 27 70 5 is_stmt 1 view .LVU1010
 3977              	.LVL165:
 3978              		.loc 27 70 5 is_stmt 0 view .LVU1011
 3979              	.LBE3494:
 3980              	.LBE3493:
  57:Task/Task_Navi.cpp **** 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 254


 3981              		.loc 1 57 5 is_stmt 1 view .LVU1012
  57:Task/Task_Navi.cpp **** 
 3982              		.loc 1 57 29 is_stmt 0 view .LVU1013
 3983 0050 A7F85860 		strh	r6, [r7, #88]	@ movhi
  60:Task/Task_Navi.cpp ****     Matrix<float, 3, 1> vd_3d;
 3984              		.loc 1 60 5 is_stmt 1 view .LVU1014
 3985              	.LVL166:
 3986              	.LBB3495:
 3987              	.LBI3495:
 259:Eigen/src/Core/Matrix.h ****     {
 3988              		.loc 11 259 25 view .LVU1015
 3989              	.LBB3496:
 3990              	.LBB3497:
 3991              	.LBI3497:
 484:Eigen/src/Core/PlainObjectBase.h ****     {
 3992              		.loc 9 484 25 view .LVU1016
 3993              	.LBB3498:
 3994              	.LBB3499:
 3995              	.LBI3499:
 3996              		.loc 7 467 23 view .LVU1017
 3997              	.LBB3500:
 3998              	.LBI3500:
 3999              		.loc 8 591 23 view .LVU1018
 4000              		.loc 8 591 23 is_stmt 0 view .LVU1019
 4001              	.LBE3500:
 4002              	.LBE3499:
 4003              	.LBB3501:
 4004              	.LBI3501:
 187:Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
 4005              		.loc 12 187 23 is_stmt 1 view .LVU1020
 4006              	.LBB3502:
 4007              	.LBB3503:
 4008              	.LBI3503:
  49:Eigen/src/Core/DenseStorage.h ****   { 
 4009              		.loc 12 49 3 view .LVU1021
  49:Eigen/src/Core/DenseStorage.h ****   { 
 4010              		.loc 12 49 3 is_stmt 0 view .LVU1022
 4011              	.LBE3503:
 4012              	.LBE3502:
 4013              	.LBE3501:
 4014              	.LBE3498:
 4015              	.LBE3497:
 4016              	.LBB3504:
 4017              	.LBI3504:
 4018              		.loc 9 901 37 is_stmt 1 view .LVU1023
 4019              		.loc 9 901 37 is_stmt 0 view .LVU1024
 4020              	.LBE3504:
 4021              	.LBE3496:
 4022              	.LBE3495:
  61:Task/Task_Navi.cpp ****     Matrix<float, 2, 1> result2;
 4023              		.loc 1 61 5 is_stmt 1 view .LVU1025
 4024              	.LBB3505:
 4025              	.LBI3505:
 259:Eigen/src/Core/Matrix.h ****     {
 4026              		.loc 11 259 25 view .LVU1026
 4027              	.LBB3506:
 4028              	.LBB3507:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 255


 4029              	.LBI3507:
 484:Eigen/src/Core/PlainObjectBase.h ****     {
 4030              		.loc 9 484 25 view .LVU1027
 4031              	.LBB3508:
 4032              	.LBB3509:
 4033              	.LBI3509:
 4034              		.loc 7 467 23 view .LVU1028
 4035              	.LBB3510:
 4036              	.LBI3510:
 4037              		.loc 8 591 23 view .LVU1029
 4038              		.loc 8 591 23 is_stmt 0 view .LVU1030
 4039              	.LBE3510:
 4040              	.LBE3509:
 4041              	.LBB3511:
 4042              	.LBI3511:
 187:Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
 4043              		.loc 12 187 23 is_stmt 1 view .LVU1031
 4044              	.LBB3512:
 4045              	.LBB3513:
 4046              	.LBI3513:
  49:Eigen/src/Core/DenseStorage.h ****   { 
 4047              		.loc 12 49 3 view .LVU1032
  49:Eigen/src/Core/DenseStorage.h ****   { 
 4048              		.loc 12 49 3 is_stmt 0 view .LVU1033
 4049              	.LBE3513:
 4050              	.LBE3512:
 4051              	.LBE3511:
 4052              	.LBE3508:
 4053              	.LBE3507:
 4054              	.LBB3514:
 4055              	.LBI3514:
 4056              		.loc 9 901 37 is_stmt 1 view .LVU1034
 4057              		.loc 9 901 37 is_stmt 0 view .LVU1035
 4058              	.LBE3514:
 4059              	.LBE3506:
 4060              	.LBE3505:
  62:Task/Task_Navi.cpp **** 
 4061              		.loc 1 62 5 is_stmt 1 view .LVU1036
 4062              	.LBB3515:
 4063              	.LBI3515:
 259:Eigen/src/Core/Matrix.h ****     {
 4064              		.loc 11 259 25 view .LVU1037
 4065              	.LBB3516:
 4066              	.LBB3517:
 4067              	.LBI3517:
 484:Eigen/src/Core/PlainObjectBase.h ****     {
 4068              		.loc 9 484 25 view .LVU1038
 4069              	.LBB3518:
 4070              	.LBB3519:
 4071              	.LBI3519:
 4072              		.loc 7 467 23 view .LVU1039
 4073              	.LBB3520:
 4074              	.LBI3520:
 4075              		.loc 8 591 23 view .LVU1040
 4076              		.loc 8 591 23 is_stmt 0 view .LVU1041
 4077              	.LBE3520:
 4078              	.LBE3519:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 256


 4079              	.LBB3521:
 4080              	.LBI3521:
 187:Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
 4081              		.loc 12 187 23 is_stmt 1 view .LVU1042
 4082              	.LBB3522:
 4083              	.LBB3523:
 4084              	.LBI3523:
  49:Eigen/src/Core/DenseStorage.h ****   { 
 4085              		.loc 12 49 3 view .LVU1043
  49:Eigen/src/Core/DenseStorage.h ****   { 
 4086              		.loc 12 49 3 is_stmt 0 view .LVU1044
 4087              	.LBE3523:
 4088              	.LBE3522:
 4089              	.LBE3521:
 4090              	.LBE3518:
 4091              	.LBE3517:
 4092              	.LBB3524:
 4093              	.LBI3524:
 4094              		.loc 9 901 37 is_stmt 1 view .LVU1045
 4095              		.loc 9 901 37 is_stmt 0 view .LVU1046
 4096              	.LBE3524:
 4097              	.LBE3516:
 4098              	.LBE3515:
  64:Task/Task_Navi.cpp ****     vd_3d << 3, 2, 1;
 4099              		.loc 1 64 5 is_stmt 1 view .LVU1047
 4100              	.LBB3525:
 4101              	.LBI3525:
 123:Eigen/src/Core/CommaInitializer.h **** 
 124:Eigen/src/Core/CommaInitializer.h ****   XprType& m_xpr;           // target expression
 125:Eigen/src/Core/CommaInitializer.h ****   Index m_row;              // current row id
 126:Eigen/src/Core/CommaInitializer.h ****   Index m_col;              // current col id
 127:Eigen/src/Core/CommaInitializer.h ****   Index m_currentBlockRows; // current block height
 128:Eigen/src/Core/CommaInitializer.h **** };
 129:Eigen/src/Core/CommaInitializer.h **** 
 130:Eigen/src/Core/CommaInitializer.h **** /** \anchor MatrixBaseCommaInitRef
 131:Eigen/src/Core/CommaInitializer.h ****   * Convenient operator to set the coefficients of a matrix.
 132:Eigen/src/Core/CommaInitializer.h ****   *
 133:Eigen/src/Core/CommaInitializer.h ****   * The coefficients must be provided in a row major order and exactly match
 134:Eigen/src/Core/CommaInitializer.h ****   * the size of the matrix. Otherwise an assertion is raised.
 135:Eigen/src/Core/CommaInitializer.h ****   *
 136:Eigen/src/Core/CommaInitializer.h ****   * Example: \include MatrixBase_set.cpp
 137:Eigen/src/Core/CommaInitializer.h ****   * Output: \verbinclude MatrixBase_set.out
 138:Eigen/src/Core/CommaInitializer.h ****   * 
 139:Eigen/src/Core/CommaInitializer.h ****   * \note According the c++ standard, the argument expressions of this comma initializer are evalua
 140:Eigen/src/Core/CommaInitializer.h ****   *
 141:Eigen/src/Core/CommaInitializer.h ****   * \sa CommaInitializer::finished(), class CommaInitializer
 142:Eigen/src/Core/CommaInitializer.h ****   */
 143:Eigen/src/Core/CommaInitializer.h **** template<typename Derived>
 144:Eigen/src/Core/CommaInitializer.h **** inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 4102              		.loc 4 144 34 view .LVU1048
 4103              	.LBB3526:
 4104              	.LBI3526:
  33:Eigen/src/Core/CommaInitializer.h ****     : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 4105              		.loc 4 33 10 view .LVU1049
 4106              	.LBB3527:
  34:Eigen/src/Core/CommaInitializer.h ****   {
 4107              		.loc 4 34 59 is_stmt 0 view .LVU1050
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 257


 4108 0054 07AB     		add	r3, sp, #28
 4109              	.LVL167:
  34:Eigen/src/Core/CommaInitializer.h ****   {
 4110              		.loc 4 34 59 view .LVU1051
 4111 0056 0D93     		str	r3, [sp, #52]
 4112 0058 0E92     		str	r2, [sp, #56]
 4113 005a 0F91     		str	r1, [sp, #60]
 4114 005c 1091     		str	r1, [sp, #64]
 4115              	.LVL168:
 4116              	.LBB3528:
 4117              	.LBI3528:
 183:Eigen/src/Core/PlainObjectBase.h ****     {
 4118              		.loc 9 183 33 is_stmt 1 view .LVU1052
 183:Eigen/src/Core/PlainObjectBase.h ****     {
 4119              		.loc 9 183 33 is_stmt 0 view .LVU1053
 4120              	.LBE3528:
  36:Eigen/src/Core/CommaInitializer.h ****   }
 4121              		.loc 4 36 25 view .LVU1054
 4122 005e 4FF07E52 		mov	r2, #1065353216
 4123 0062 0792     		str	r2, [sp, #28]	@ float
 4124              	.LVL169:
  36:Eigen/src/Core/CommaInitializer.h ****   }
 4125              		.loc 4 36 25 view .LVU1055
 4126              	.LBE3527:
 4127              	.LBE3526:
 4128              	.LBE3525:
 4129              	.LBB3529:
 4130              	.LBI3529:
  61:Eigen/src/Core/CommaInitializer.h ****   {
 4131              		.loc 4 61 21 is_stmt 1 view .LVU1056
 4132              	.LBB3530:
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
 4133              		.loc 4 71 5 is_stmt 0 view .LVU1057
 4134 0064 0229     		cmp	r1, #2
 4135 0066 00F3C880 		bgt	.L102
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4136              		.loc 4 73 5 view .LVU1058
 4137 006a 109A     		ldr	r2, [sp, #64]
 4138 006c 012A     		cmp	r2, #1
 4139 006e 40F0CF80 		bne	.L103
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4140              		.loc 4 74 19 view .LVU1059
 4141 0072 4A1C     		adds	r2, r1, #1
 4142 0074 0F92     		str	r2, [sp, #60]
 4143              	.LVL170:
 4144              	.LBB3531:
 4145              	.LBI3531:
 183:Eigen/src/Core/PlainObjectBase.h ****     {
 4146              		.loc 9 183 33 is_stmt 1 view .LVU1060
 4147              	.LBB3532:
 4148              	.LBB3533:
 4149              	.LBI3533:
 216:Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 4150              		.loc 12 216 26 view .LVU1061
 4151              		.loc 12 216 26 is_stmt 0 view .LVU1062
 4152              	.LBE3533:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 258


 4153              		.loc 9 188 39 view .LVU1063
 4154 0076 0E9A     		ldr	r2, [sp, #56]
 4155 0078 02EB4102 		add	r2, r2, r1, lsl #1
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4156              		.loc 9 188 65 view .LVU1064
 4157 007c 03EB8203 		add	r3, r3, r2, lsl #2
 4158              	.LVL171:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4159              		.loc 9 188 65 view .LVU1065
 4160              	.LBE3532:
 4161              	.LBE3531:
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4162              		.loc 4 74 36 view .LVU1066
 4163 0080 4FF08042 		mov	r2, #1073741824
 4164 0084 1A60     		str	r2, [r3]	@ float
 4165              	.LVL172:
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4166              		.loc 4 74 36 view .LVU1067
 4167              	.LBE3530:
 4168              	.LBE3529:
 4169              	.LBB3536:
 4170              	.LBI3536:
  61:Eigen/src/Core/CommaInitializer.h ****   {
 4171              		.loc 4 61 21 is_stmt 1 view .LVU1068
 4172              	.LBB3537:
  63:Eigen/src/Core/CommaInitializer.h ****     {
 4173              		.loc 4 63 16 is_stmt 0 view .LVU1069
 4174 0086 0D9B     		ldr	r3, [sp, #52]
  63:Eigen/src/Core/CommaInitializer.h ****     {
 4175              		.loc 4 63 5 view .LVU1070
 4176 0088 0F9A     		ldr	r2, [sp, #60]
 4177 008a 032A     		cmp	r2, #3
 4178 008c 00F0C680 		beq	.L104
 4179              	.L69:
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
 4180              		.loc 4 71 5 view .LVU1071
 4181 0090 0F99     		ldr	r1, [sp, #60]
 4182 0092 0229     		cmp	r1, #2
 4183 0094 00F3D380 		bgt	.L105
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4184              		.loc 4 73 5 view .LVU1072
 4185 0098 109A     		ldr	r2, [sp, #64]
 4186 009a 012A     		cmp	r2, #1
 4187 009c 40F0D580 		bne	.L106
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4188              		.loc 4 74 19 view .LVU1073
 4189 00a0 4A1C     		adds	r2, r1, #1
 4190 00a2 0F92     		str	r2, [sp, #60]
 4191              	.LVL173:
 4192              	.LBB3538:
 4193              	.LBI3538:
 183:Eigen/src/Core/PlainObjectBase.h ****     {
 4194              		.loc 9 183 33 is_stmt 1 view .LVU1074
 4195              	.LBB3539:
 4196              	.LBB3540:
 4197              	.LBI3540:
 4198              		.loc 12 216 26 view .LVU1075
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 259


 4199              		.loc 12 216 26 is_stmt 0 view .LVU1076
 4200              	.LBE3540:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4201              		.loc 9 188 39 view .LVU1077
 4202 00a4 0E9A     		ldr	r2, [sp, #56]
 4203 00a6 02EB4102 		add	r2, r2, r1, lsl #1
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4204              		.loc 9 188 65 view .LVU1078
 4205 00aa 03EB8203 		add	r3, r3, r2, lsl #2
 4206              	.LVL174:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4207              		.loc 9 188 65 view .LVU1079
 4208              	.LBE3539:
 4209              	.LBE3538:
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4210              		.loc 4 74 36 view .LVU1080
 4211 00ae 884A     		ldr	r2, .L122+16
 4212 00b0 1A60     		str	r2, [r3]	@ float
 4213              	.LVL175:
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4214              		.loc 4 74 36 view .LVU1081
 4215              	.LBE3537:
 4216              	.LBE3536:
 4217              	.LBB3542:
 4218              	.LBI3542:
  61:Eigen/src/Core/CommaInitializer.h ****   {
 4219              		.loc 4 61 21 is_stmt 1 view .LVU1082
 4220              	.LBB3543:
  63:Eigen/src/Core/CommaInitializer.h ****     {
 4221              		.loc 4 63 16 is_stmt 0 view .LVU1083
 4222 00b2 0D9B     		ldr	r3, [sp, #52]
  63:Eigen/src/Core/CommaInitializer.h ****     {
 4223              		.loc 4 63 5 view .LVU1084
 4224 00b4 0F9A     		ldr	r2, [sp, #60]
 4225 00b6 032A     		cmp	r2, #3
 4226 00b8 00F0CD80 		beq	.L107
 4227              	.L72:
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
 4228              		.loc 4 71 5 view .LVU1085
 4229 00bc 0F99     		ldr	r1, [sp, #60]
 4230 00be 0229     		cmp	r1, #2
 4231 00c0 00F3DA80 		bgt	.L108
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4232              		.loc 4 73 5 view .LVU1086
 4233 00c4 109A     		ldr	r2, [sp, #64]
 4234 00c6 012A     		cmp	r2, #1
 4235 00c8 40F0DC80 		bne	.L109
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4236              		.loc 4 74 19 view .LVU1087
 4237 00cc 4A1C     		adds	r2, r1, #1
 4238 00ce 0F92     		str	r2, [sp, #60]
 4239              	.LVL176:
 4240              	.LBB3544:
 4241              	.LBI3544:
 183:Eigen/src/Core/PlainObjectBase.h ****     {
 4242              		.loc 9 183 33 is_stmt 1 view .LVU1088
 4243              	.LBB3545:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 260


 4244              	.LBB3546:
 4245              	.LBI3546:
 4246              		.loc 12 216 26 view .LVU1089
 4247              		.loc 12 216 26 is_stmt 0 view .LVU1090
 4248              	.LBE3546:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4249              		.loc 9 188 39 view .LVU1091
 4250 00d0 0E9A     		ldr	r2, [sp, #56]
 4251 00d2 02EB4102 		add	r2, r2, r1, lsl #1
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4252              		.loc 9 188 65 view .LVU1092
 4253 00d6 03EB8203 		add	r3, r3, r2, lsl #2
 4254              	.LVL177:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4255              		.loc 9 188 65 view .LVU1093
 4256              	.LBE3545:
 4257              	.LBE3544:
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4258              		.loc 4 74 36 view .LVU1094
 4259 00da 4FF08142 		mov	r2, #1082130432
 4260 00de 1A60     		str	r2, [r3]	@ float
 4261              	.LVL178:
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4262              		.loc 4 74 36 view .LVU1095
 4263              	.LBE3543:
 4264              	.LBE3542:
 4265              	.LBB3548:
 4266              	.LBI3548:
  61:Eigen/src/Core/CommaInitializer.h ****   {
 4267              		.loc 4 61 21 is_stmt 1 view .LVU1096
 4268              	.LBB3549:
  63:Eigen/src/Core/CommaInitializer.h ****     {
 4269              		.loc 4 63 16 is_stmt 0 view .LVU1097
 4270 00e0 0D9B     		ldr	r3, [sp, #52]
  63:Eigen/src/Core/CommaInitializer.h ****     {
 4271              		.loc 4 63 5 view .LVU1098
 4272 00e2 0F9A     		ldr	r2, [sp, #60]
 4273 00e4 032A     		cmp	r2, #3
 4274 00e6 00F0D380 		beq	.L110
 4275              	.L75:
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
 4276              		.loc 4 71 5 view .LVU1099
 4277 00ea 0F99     		ldr	r1, [sp, #60]
 4278 00ec 0229     		cmp	r1, #2
 4279 00ee 00F3E080 		bgt	.L111
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4280              		.loc 4 73 5 view .LVU1100
 4281 00f2 109A     		ldr	r2, [sp, #64]
 4282 00f4 012A     		cmp	r2, #1
 4283 00f6 40F00181 		bne	.L112
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4284              		.loc 4 74 19 view .LVU1101
 4285 00fa 4A1C     		adds	r2, r1, #1
 4286 00fc 0F92     		str	r2, [sp, #60]
 4287              	.LVL179:
 4288              	.LBB3550:
 4289              	.LBI3550:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 261


 183:Eigen/src/Core/PlainObjectBase.h ****     {
 4290              		.loc 9 183 33 is_stmt 1 view .LVU1102
 4291              	.LBB3551:
 4292              	.LBB3552:
 4293              	.LBI3552:
 4294              		.loc 12 216 26 view .LVU1103
 4295              		.loc 12 216 26 is_stmt 0 view .LVU1104
 4296              	.LBE3552:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4297              		.loc 9 188 39 view .LVU1105
 4298 00fe 0E9A     		ldr	r2, [sp, #56]
 4299 0100 02EB4102 		add	r2, r2, r1, lsl #1
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4300              		.loc 9 188 65 view .LVU1106
 4301 0104 03EB8203 		add	r3, r3, r2, lsl #2
 4302              	.LVL180:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4303              		.loc 9 188 65 view .LVU1107
 4304              	.LBE3551:
 4305              	.LBE3550:
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4306              		.loc 4 74 36 view .LVU1108
 4307 0108 724A     		ldr	r2, .L122+20
 4308 010a 1A60     		str	r2, [r3]	@ float
 4309              	.LVL181:
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4310              		.loc 4 74 36 view .LVU1109
 4311              	.LBE3549:
 4312              	.LBE3548:
 4313              	.LBB3554:
 4314              	.LBI3554:
  61:Eigen/src/Core/CommaInitializer.h ****   {
 4315              		.loc 4 61 21 is_stmt 1 view .LVU1110
 4316              	.LBB3555:
  63:Eigen/src/Core/CommaInitializer.h ****     {
 4317              		.loc 4 63 16 is_stmt 0 view .LVU1111
 4318 010c 0D9B     		ldr	r3, [sp, #52]
  63:Eigen/src/Core/CommaInitializer.h ****     {
 4319              		.loc 4 63 5 view .LVU1112
 4320 010e 0F9A     		ldr	r2, [sp, #60]
 4321 0110 032A     		cmp	r2, #3
 4322 0112 00F0F980 		beq	.L113
 4323              	.L78:
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
 4324              		.loc 4 71 5 view .LVU1113
 4325 0116 0F99     		ldr	r1, [sp, #60]
 4326 0118 0229     		cmp	r1, #2
 4327 011a 00F30681 		bgt	.L114
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4328              		.loc 4 73 5 view .LVU1114
 4329 011e 109A     		ldr	r2, [sp, #64]
 4330 0120 012A     		cmp	r2, #1
 4331 0122 40F00881 		bne	.L115
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4332              		.loc 4 74 19 view .LVU1115
 4333 0126 4A1C     		adds	r2, r1, #1
 4334 0128 0F92     		str	r2, [sp, #60]
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 262


 4335              	.LVL182:
 4336              	.LBB3556:
 4337              	.LBI3556:
 183:Eigen/src/Core/PlainObjectBase.h ****     {
 4338              		.loc 9 183 33 is_stmt 1 view .LVU1116
 4339              	.LBB3557:
 4340              	.LBB3558:
 4341              	.LBI3558:
 4342              		.loc 12 216 26 view .LVU1117
 4343              		.loc 12 216 26 is_stmt 0 view .LVU1118
 4344              	.LBE3558:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4345              		.loc 9 188 39 view .LVU1119
 4346 012a 0E9A     		ldr	r2, [sp, #56]
 4347 012c 02EB4102 		add	r2, r2, r1, lsl #1
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4348              		.loc 9 188 65 view .LVU1120
 4349 0130 03EB8203 		add	r3, r3, r2, lsl #2
 4350              	.LVL183:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4351              		.loc 9 188 65 view .LVU1121
 4352              	.LBE3557:
 4353              	.LBE3556:
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4354              		.loc 4 74 36 view .LVU1122
 4355 0134 684A     		ldr	r2, .L122+24
 4356 0136 1A60     		str	r2, [r3]	@ float
 4357              	.LVL184:
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4358              		.loc 4 74 36 view .LVU1123
 4359              	.LBE3555:
 4360              	.LBE3554:
 4361              	.LBB3560:
 4362              	.LBI3560:
 101:Eigen/src/Core/CommaInitializer.h **** #if defined VERIFY_RAISES_ASSERT && (!defined EIGEN_NO_ASSERTION_CHECKING) && defined EIGEN_EXCEPTI
 4363              		.loc 4 101 10 is_stmt 1 view .LVU1124
 4364              	.LBB3561:
 4365              	.LBB3562:
 4366              	.LBI3562:
 117:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 4367              		.loc 4 117 19 view .LVU1125
 4368              	.LBB3563:
 118:Eigen/src/Core/CommaInitializer.h ****            && m_col == m_xpr.cols()
 4369              		.loc 4 118 7 is_stmt 0 view .LVU1126
 4370 0138 0E9B     		ldr	r3, [sp, #56]
 4371 013a 109A     		ldr	r2, [sp, #64]
 4372 013c 1344     		add	r3, r3, r2
 4373 013e 022B     		cmp	r3, #2
 4374 0140 40F0FF80 		bne	.L81
 4375 0144 0F9B     		ldr	r3, [sp, #60]
 4376 0146 032B     		cmp	r3, #3
 4377 0148 40F0FB80 		bne	.L81
 4378              	.LVL185:
 118:Eigen/src/Core/CommaInitializer.h ****            && m_col == m_xpr.cols()
 4379              		.loc 4 118 7 view .LVU1127
 4380              	.LBE3563:
 4381              	.LBE3562:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 263


 4382              	.LBE3561:
 4383              	.LBE3560:
  65:Task/Task_Navi.cpp **** 
 4384              		.loc 1 65 5 is_stmt 1 discriminator 12 view .LVU1128
 4385              	.LBB3567:
 4386              	.LBI3567:
 4387              		.loc 4 144 34 discriminator 12 view .LVU1129
 4388              	.LBB3568:
 4389              	.LBI3568:
  33:Eigen/src/Core/CommaInitializer.h ****     : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 4390              		.loc 4 33 10 discriminator 12 view .LVU1130
 4391              	.LBB3569:
  34:Eigen/src/Core/CommaInitializer.h ****   {
 4392              		.loc 4 34 59 is_stmt 0 discriminator 12 view .LVU1131
 4393 014c 04AB     		add	r3, sp, #16
 4394              	.LVL186:
  34:Eigen/src/Core/CommaInitializer.h ****   {
 4395              		.loc 4 34 59 discriminator 12 view .LVU1132
 4396 014e 1193     		str	r3, [sp, #68]
 4397 0150 0022     		movs	r2, #0
 4398 0152 1292     		str	r2, [sp, #72]
 4399 0154 0122     		movs	r2, #1
 4400 0156 1392     		str	r2, [sp, #76]
 4401 0158 1492     		str	r2, [sp, #80]
 4402              	.LVL187:
 4403              	.LBB3570:
 4404              	.LBI3570:
 183:Eigen/src/Core/PlainObjectBase.h ****     {
 4405              		.loc 9 183 33 is_stmt 1 discriminator 12 view .LVU1133
 183:Eigen/src/Core/PlainObjectBase.h ****     {
 4406              		.loc 9 183 33 is_stmt 0 discriminator 12 view .LVU1134
 4407              	.LBE3570:
  36:Eigen/src/Core/CommaInitializer.h ****   }
 4408              		.loc 4 36 25 discriminator 12 view .LVU1135
 4409 015a 5D4A     		ldr	r2, .L122+16
 4410 015c 0492     		str	r2, [sp, #16]	@ float
 4411              	.LVL188:
  36:Eigen/src/Core/CommaInitializer.h ****   }
 4412              		.loc 4 36 25 discriminator 12 view .LVU1136
 4413              	.LBE3569:
 4414              	.LBE3568:
 4415              	.LBE3567:
 4416              	.LBB3571:
 4417              	.LBI3571:
  61:Eigen/src/Core/CommaInitializer.h ****   {
 4418              		.loc 4 61 21 is_stmt 1 discriminator 12 view .LVU1137
 4419              	.LBB3572:
  65:Eigen/src/Core/CommaInitializer.h ****       m_col = 0;
 4420              		.loc 4 65 12 is_stmt 0 discriminator 12 view .LVU1138
 4421 015e 0122     		movs	r2, #1
 4422 0160 0021     		movs	r1, #0
 4423 0162 0A44     		add	r2, r2, r1
 4424 0164 1292     		str	r2, [sp, #72]
  66:Eigen/src/Core/CommaInitializer.h ****       m_currentBlockRows = 1;
 4425              		.loc 4 66 13 discriminator 12 view .LVU1139
 4426 0166 1391     		str	r1, [sp, #76]
  68:Eigen/src/Core/CommaInitializer.h ****         && "Too many rows passed to comma initializer (operator<<)");
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 264


 4427              		.loc 4 68 7 discriminator 12 view .LVU1140
 4428 0168 022A     		cmp	r2, #2
 4429 016a 00F3F080 		bgt	.L116
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
 4430              		.loc 4 71 5 view .LVU1141
 4431 016e 139A     		ldr	r2, [sp, #76]
 4432 0170 002A     		cmp	r2, #0
 4433 0172 00F3F780 		bgt	.L117
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4434              		.loc 4 73 5 view .LVU1142
 4435 0176 1499     		ldr	r1, [sp, #80]
 4436 0178 0129     		cmp	r1, #1
 4437 017a 40F0F980 		bne	.L118
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4438              		.loc 4 74 19 view .LVU1143
 4439 017e 511C     		adds	r1, r2, #1
 4440 0180 1391     		str	r1, [sp, #76]
 4441              	.LVL189:
 4442              	.LBB3573:
 4443              	.LBI3573:
 183:Eigen/src/Core/PlainObjectBase.h ****     {
 4444              		.loc 9 183 33 is_stmt 1 view .LVU1144
 4445              	.LBB3574:
 4446              	.LBB3575:
 4447              	.LBI3575:
 4448              		.loc 12 216 26 view .LVU1145
 4449              		.loc 12 216 26 is_stmt 0 view .LVU1146
 4450              	.LBE3575:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4451              		.loc 9 188 47 view .LVU1147
 4452 0182 02EB4202 		add	r2, r2, r2, lsl #1
 4453              	.LVL190:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4454              		.loc 9 188 39 view .LVU1148
 4455 0186 1299     		ldr	r1, [sp, #72]
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4456              		.loc 9 188 39 view .LVU1149
 4457 0188 0A44     		add	r2, r2, r1
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4458              		.loc 9 188 65 view .LVU1150
 4459 018a 03EB8203 		add	r3, r3, r2, lsl #2
 4460              	.LVL191:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4461              		.loc 9 188 65 view .LVU1151
 4462              	.LBE3574:
 4463              	.LBE3573:
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4464              		.loc 4 74 36 view .LVU1152
 4465 018e 4FF08042 		mov	r2, #1073741824
 4466 0192 1A60     		str	r2, [r3]	@ float
 4467              	.LVL192:
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4468              		.loc 4 74 36 view .LVU1153
 4469              	.LBE3572:
 4470              	.LBE3571:
 4471              	.LBB3578:
 4472              	.LBI3578:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 265


  61:Eigen/src/Core/CommaInitializer.h ****   {
 4473              		.loc 4 61 21 is_stmt 1 view .LVU1154
 4474              	.LBB3579:
  63:Eigen/src/Core/CommaInitializer.h ****     {
 4475              		.loc 4 63 16 is_stmt 0 view .LVU1155
 4476 0194 119A     		ldr	r2, [sp, #68]
  63:Eigen/src/Core/CommaInitializer.h ****     {
 4477              		.loc 4 63 5 view .LVU1156
 4478 0196 139B     		ldr	r3, [sp, #76]
 4479 0198 012B     		cmp	r3, #1
 4480 019a 00F0EF80 		beq	.L119
 4481              	.L86:
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
 4482              		.loc 4 71 5 view .LVU1157
 4483 019e 139B     		ldr	r3, [sp, #76]
 4484 01a0 002B     		cmp	r3, #0
 4485 01a2 00F3FC80 		bgt	.L120
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4486              		.loc 4 73 5 view .LVU1158
 4487 01a6 1499     		ldr	r1, [sp, #80]
 4488 01a8 0129     		cmp	r1, #1
 4489 01aa 40F0FE80 		bne	.L121
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4490              		.loc 4 74 19 view .LVU1159
 4491 01ae 591C     		adds	r1, r3, #1
 4492 01b0 1391     		str	r1, [sp, #76]
 4493              	.LVL193:
 4494              	.LBB3580:
 4495              	.LBI3580:
 183:Eigen/src/Core/PlainObjectBase.h ****     {
 4496              		.loc 9 183 33 is_stmt 1 view .LVU1160
 4497              	.LBB3581:
 4498              	.LBB3582:
 4499              	.LBI3582:
 4500              		.loc 12 216 26 view .LVU1161
 4501              		.loc 12 216 26 is_stmt 0 view .LVU1162
 4502              	.LBE3582:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4503              		.loc 9 188 47 view .LVU1163
 4504 01b2 03EB4303 		add	r3, r3, r3, lsl #1
 4505              	.LVL194:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4506              		.loc 9 188 39 view .LVU1164
 4507 01b6 1299     		ldr	r1, [sp, #72]
 4508              	.LVL195:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4509              		.loc 9 188 39 view .LVU1165
 4510 01b8 0B44     		add	r3, r3, r1
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4511              		.loc 9 188 65 view .LVU1166
 4512 01ba 02EB8303 		add	r3, r2, r3, lsl #2
 4513              	.LVL196:
 188:Eigen/src/Core/PlainObjectBase.h ****     }
 4514              		.loc 9 188 65 view .LVU1167
 4515              	.LBE3581:
 4516              	.LBE3580:
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 266


 4517              		.loc 4 74 36 view .LVU1168
 4518 01be 4FF07E52 		mov	r2, #1065353216
 4519 01c2 1A60     		str	r2, [r3]	@ float
 4520              	.LVL197:
  74:Eigen/src/Core/CommaInitializer.h ****     return *this;
 4521              		.loc 4 74 36 view .LVU1169
 4522              	.LBE3579:
 4523              	.LBE3578:
 4524              	.LBB3584:
 4525              	.LBI3584:
 101:Eigen/src/Core/CommaInitializer.h **** #if defined VERIFY_RAISES_ASSERT && (!defined EIGEN_NO_ASSERTION_CHECKING) && defined EIGEN_EXCEPTI
 4526              		.loc 4 101 10 is_stmt 1 view .LVU1170
 4527              	.LBB3585:
 4528              	.LBB3586:
 4529              	.LBI3586:
 117:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 4530              		.loc 4 117 19 view .LVU1171
 4531              	.LBB3587:
 118:Eigen/src/Core/CommaInitializer.h ****            && m_col == m_xpr.cols()
 4532              		.loc 4 118 7 is_stmt 0 view .LVU1172
 4533 01c4 129B     		ldr	r3, [sp, #72]
 4534 01c6 149A     		ldr	r2, [sp, #80]
 4535 01c8 1344     		add	r3, r3, r2
 4536 01ca 032B     		cmp	r3, #3
 4537 01cc 40F0F380 		bne	.L89
 4538 01d0 139B     		ldr	r3, [sp, #76]
 4539 01d2 012B     		cmp	r3, #1
 4540 01d4 40F0EF80 		bne	.L89
 4541              	.LVL198:
 118:Eigen/src/Core/CommaInitializer.h ****            && m_col == m_xpr.cols()
 4542              		.loc 4 118 7 view .LVU1173
 4543              	.LBE3587:
 4544              	.LBE3586:
 4545              	.LBE3585:
 4546              	.LBE3584:
  67:Task/Task_Navi.cpp ****     NAVI_INFO("Eigen Test\r\n");
 4547              		.loc 1 67 5 is_stmt 1 discriminator 6 view .LVU1174
 4548              	.LBB3591:
 4549              	.LBI3591:
 390:Eigen/src/Core/GeneralProduct.h **** {
 4550              		.loc 5 390 1 discriminator 6 view .LVU1175
 4551              	.LBB3592:
 4552              	.LBB3593:
 4553              	.LBI3593:
  93:Eigen/src/Core/Product.h ****     {
 4554              		.loc 6 93 23 discriminator 6 view .LVU1176
 4555              	.LBB3594:
 4556              	.LBB3595:
 4557              	.LBB3596:
 4558              	.LBI3596:
 4559              		.loc 6 147 7 discriminator 6 view .LVU1177
 4560              	.LBB3597:
 4561              	.LBI3597:
 115:Eigen/src/Core/Product.h ****  : public internal::dense_xpr_base<Product<Lhs,Rhs,Option> >::type
 4562              		.loc 6 115 7 discriminator 6 view .LVU1178
 4563              	.LBB3598:
 4564              	.LBI3598:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 267


 4565              		.loc 7 467 23 discriminator 6 view .LVU1179
 4566              	.LBB3599:
 4567              	.LBI3599:
 4568              		.loc 8 591 23 discriminator 6 view .LVU1180
 4569              		.loc 8 591 23 is_stmt 0 discriminator 6 view .LVU1181
 4570              	.LBE3599:
 4571              	.LBE3598:
 4572              	.LBE3597:
 4573              	.LBE3596:
  93:Eigen/src/Core/Product.h ****     {
 4574              		.loc 6 93 86 discriminator 6 view .LVU1182
 4575 01d8 07AB     		add	r3, sp, #28
 4576              	.LVL199:
  93:Eigen/src/Core/Product.h ****     {
 4577              		.loc 6 93 86 discriminator 6 view .LVU1183
 4578 01da 1593     		str	r3, [sp, #84]
 4579 01dc 04AB     		add	r3, sp, #16
 4580              	.LVL200:
  93:Eigen/src/Core/Product.h ****     {
 4581              		.loc 6 93 86 discriminator 6 view .LVU1184
 4582 01de 1693     		str	r3, [sp, #88]
 4583              	.LVL201:
 4584              	.LBB3600:
 4585              	.LBI3600:
 153:Eigen/src/Core/PlainObjectBase.h **** 
 4586              		.loc 9 153 31 is_stmt 1 discriminator 6 view .LVU1185
 153:Eigen/src/Core/PlainObjectBase.h **** 
 4587              		.loc 9 153 31 is_stmt 0 discriminator 6 view .LVU1186
 4588              	.LBE3600:
 4589              	.LBB3601:
 4590              	.LBI3601:
 151:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 4591              		.loc 9 151 31 is_stmt 1 discriminator 6 view .LVU1187
 151:Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 4592              		.loc 9 151 31 is_stmt 0 discriminator 6 view .LVU1188
 4593              	.LBE3601:
 4594              	.LBE3595:
 4595              	.LBE3594:
 4596              	.LBE3593:
 4597              	.LBE3592:
 4598              	.LBE3591:
 4599              	.LBB3602:
 4600              	.LBI3602:
 223:Eigen/src/Core/Matrix.h ****     {
 4601              		.loc 11 223 33 is_stmt 1 discriminator 6 view .LVU1189
 4602              	.LBB3603:
 4603              	.LBI3603:
 712:Eigen/src/Core/PlainObjectBase.h ****     {
 4604              		.loc 9 712 34 discriminator 6 view .LVU1190
 4605              	.LBB3604:
 4606              	.LBI3604:
 780:Eigen/src/Core/AssignEvaluator.h **** {
 4607              		.loc 10 780 6 discriminator 6 view .LVU1191
 4608              	.LBB3605:
 4609              	.LBB3606:
 4610              	.LBI3606:
  23:Eigen/src/Core/functors/AssignmentFunctors.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { 
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 268


 4611              		.loc 13 23 3 discriminator 6 view .LVU1192
  23:Eigen/src/Core/functors/AssignmentFunctors.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { 
 4612              		.loc 13 23 3 is_stmt 0 discriminator 6 view .LVU1193
 4613              	.LBE3606:
 782:Eigen/src/Core/AssignEvaluator.h **** }
 4614              		.loc 10 782 18 discriminator 6 view .LVU1194
 4615 01e0 0023     		movs	r3, #0
 4616 01e2 17AA     		add	r2, sp, #92
 4617 01e4 15A9     		add	r1, sp, #84
 4618              	.LVL202:
 782:Eigen/src/Core/AssignEvaluator.h **** }
 4619              		.loc 10 782 18 discriminator 6 view .LVU1195
 4620 01e6 02A8     		add	r0, sp, #8
 4621              	.LVL203:
 4622              	.LEHB0:
 782:Eigen/src/Core/AssignEvaluator.h **** }
 4623              		.loc 10 782 18 discriminator 6 view .LVU1196
 4624 01e8 FFF7FEFF 		bl	_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi2ELi1ELi0ELi2ELi1EEENS_7ProductINS2_IfLi2ELi3
 4625              	.LVL204:
 782:Eigen/src/Core/AssignEvaluator.h **** }
 4626              		.loc 10 782 18 discriminator 6 view .LVU1197
 4627              	.LBE3605:
 4628              	.LBE3604:
 4629              	.LBE3603:
 4630              	.LBE3602:
  68:Task/Task_Navi.cpp ****     for (int i = 0; i < 2; i++)
 4631              		.loc 1 68 5 is_stmt 1 discriminator 6 view .LVU1198
 4632 01ec 3B4A     		ldr	r2, .L122+28
 4633 01ee 3C49     		ldr	r1, .L122+32
 4634 01f0 3C48     		ldr	r0, .L122+36
 4635 01f2 FFF7FEFF 		bl	Debug_Print
 4636              	.LVL205:
 4637              	.LEHE0:
 4638              	.LBB3607:
  69:Task/Task_Navi.cpp ****     {
 4639              		.loc 1 69 14 is_stmt 0 discriminator 6 view .LVU1199
 4640 01f6 0024     		movs	r4, #0
 4641 01f8 F0E0     		b	.L96
 4642              	.LVL206:
 4643              	.L102:
  69:Task/Task_Navi.cpp ****     {
 4644              		.loc 1 69 14 discriminator 6 view .LVU1200
 4645              	.LBE3607:
 4646              	.LBB3636:
 4647              	.LBB3534:
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
 4648              		.loc 4 71 5 view .LVU1201
 4649 01fa 3B4B     		ldr	r3, .L122+40
 4650 01fc 3B4A     		ldr	r2, .L122+44
 4651 01fe 4721     		movs	r1, #71
 4652 0200 3B48     		ldr	r0, .L122+48
 4653              	.LEHB1:
 4654 0202 FFF7FEFF 		bl	__assert_func
 4655              	.LVL207:
 4656              	.LEHE1:
 4657              	.L99:
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 269


 4658              		.loc 4 71 5 view .LVU1202
 4659              	.LBE3534:
 4660              	.LBE3636:
 4661              	.LBB3637:
 4662              	.LBI3637:
 101:Eigen/src/Core/CommaInitializer.h **** #if defined VERIFY_RAISES_ASSERT && (!defined EIGEN_NO_ASSERTION_CHECKING) && defined EIGEN_EXCEPTI
 4663              		.loc 4 101 10 is_stmt 1 view .LVU1203
 4664              	.LBB3638:
 106:Eigen/src/Core/CommaInitializer.h ****   }
 4665              		.loc 4 106 15 is_stmt 0 view .LVU1204
 4666 0206 0DA8     		add	r0, sp, #52
 4667              	.LVL208:
 106:Eigen/src/Core/CommaInitializer.h ****   }
 4668              		.loc 4 106 15 view .LVU1205
 4669 0208 FFF7FEFF 		bl	_ZN5Eigen16CommaInitializerINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE8finishedEv
 4670              	.LVL209:
 4671              	.LEHB2:
 106:Eigen/src/Core/CommaInitializer.h ****   }
 4672              		.loc 4 106 15 view .LVU1206
 4673 020c FFF7FEFF 		bl	__cxa_end_cleanup
 4674              	.LVL210:
 4675              	.LEHE2:
 4676              	.L103:
 106:Eigen/src/Core/CommaInitializer.h ****   }
 4677              		.loc 4 106 15 view .LVU1207
 4678              	.LBE3638:
 4679              	.LBE3637:
 4680              	.LBB3639:
 4681              	.LBB3535:
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4682              		.loc 4 73 5 view .LVU1208
 4683 0210 384B     		ldr	r3, .L122+52
 4684 0212 364A     		ldr	r2, .L122+44
 4685 0214 4921     		movs	r1, #73
 4686 0216 3648     		ldr	r0, .L122+48
 4687              	.LEHB3:
 4688 0218 FFF7FEFF 		bl	__assert_func
 4689              	.LVL211:
 4690              	.L104:
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4691              		.loc 4 73 5 view .LVU1209
 4692              	.LBE3535:
 4693              	.LBE3639:
 4694              	.LBB3640:
 4695              	.LBB3541:
  65:Eigen/src/Core/CommaInitializer.h ****       m_col = 0;
 4696              		.loc 4 65 12 view .LVU1210
 4697 021c 109A     		ldr	r2, [sp, #64]
 4698 021e 0E99     		ldr	r1, [sp, #56]
 4699 0220 0A44     		add	r2, r2, r1
 4700 0222 0E92     		str	r2, [sp, #56]
  66:Eigen/src/Core/CommaInitializer.h ****       m_currentBlockRows = 1;
 4701              		.loc 4 66 13 view .LVU1211
 4702 0224 0021     		movs	r1, #0
 4703 0226 0F91     		str	r1, [sp, #60]
  67:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(m_row<m_xpr.rows()
 4704              		.loc 4 67 26 view .LVU1212
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 270


 4705 0228 0121     		movs	r1, #1
 4706 022a 1091     		str	r1, [sp, #64]
  68:Eigen/src/Core/CommaInitializer.h ****         && "Too many rows passed to comma initializer (operator<<)");
 4707              		.loc 4 68 7 view .LVU1213
 4708 022c 8A42     		cmp	r2, r1
 4709 022e 7FF72FAF 		ble	.L69
 4710 0232 314B     		ldr	r3, .L122+56
 4711 0234 2D4A     		ldr	r2, .L122+44
 4712 0236 4421     		movs	r1, #68
 4713 0238 2D48     		ldr	r0, .L122+48
 4714 023a FFF7FEFF 		bl	__assert_func
 4715              	.LVL212:
 4716              	.L105:
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
 4717              		.loc 4 71 5 view .LVU1214
 4718 023e 2A4B     		ldr	r3, .L122+40
 4719 0240 2A4A     		ldr	r2, .L122+44
 4720 0242 4721     		movs	r1, #71
 4721 0244 2A48     		ldr	r0, .L122+48
 4722 0246 FFF7FEFF 		bl	__assert_func
 4723              	.LVL213:
 4724              	.L106:
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4725              		.loc 4 73 5 view .LVU1215
 4726 024a 2A4B     		ldr	r3, .L122+52
 4727 024c 274A     		ldr	r2, .L122+44
 4728 024e 4921     		movs	r1, #73
 4729 0250 2748     		ldr	r0, .L122+48
 4730 0252 FFF7FEFF 		bl	__assert_func
 4731              	.LVL214:
 4732              	.L107:
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4733              		.loc 4 73 5 view .LVU1216
 4734              	.LBE3541:
 4735              	.LBE3640:
 4736              	.LBB3641:
 4737              	.LBB3547:
  65:Eigen/src/Core/CommaInitializer.h ****       m_col = 0;
 4738              		.loc 4 65 12 view .LVU1217
 4739 0256 109A     		ldr	r2, [sp, #64]
 4740 0258 0E99     		ldr	r1, [sp, #56]
 4741 025a 0A44     		add	r2, r2, r1
 4742 025c 0E92     		str	r2, [sp, #56]
  66:Eigen/src/Core/CommaInitializer.h ****       m_currentBlockRows = 1;
 4743              		.loc 4 66 13 view .LVU1218
 4744 025e 0021     		movs	r1, #0
 4745 0260 0F91     		str	r1, [sp, #60]
  67:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(m_row<m_xpr.rows()
 4746              		.loc 4 67 26 view .LVU1219
 4747 0262 0121     		movs	r1, #1
 4748 0264 1091     		str	r1, [sp, #64]
  68:Eigen/src/Core/CommaInitializer.h ****         && "Too many rows passed to comma initializer (operator<<)");
 4749              		.loc 4 68 7 view .LVU1220
 4750 0266 8A42     		cmp	r2, r1
 4751 0268 7FF728AF 		ble	.L72
 4752 026c 224B     		ldr	r3, .L122+56
 4753 026e 1F4A     		ldr	r2, .L122+44
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 271


 4754 0270 4421     		movs	r1, #68
 4755 0272 1F48     		ldr	r0, .L122+48
 4756 0274 FFF7FEFF 		bl	__assert_func
 4757              	.LVL215:
 4758              	.L108:
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
 4759              		.loc 4 71 5 view .LVU1221
 4760 0278 1B4B     		ldr	r3, .L122+40
 4761 027a 1C4A     		ldr	r2, .L122+44
 4762 027c 4721     		movs	r1, #71
 4763 027e 1C48     		ldr	r0, .L122+48
 4764 0280 FFF7FEFF 		bl	__assert_func
 4765              	.LVL216:
 4766              	.L109:
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4767              		.loc 4 73 5 view .LVU1222
 4768 0284 1B4B     		ldr	r3, .L122+52
 4769 0286 194A     		ldr	r2, .L122+44
 4770 0288 4921     		movs	r1, #73
 4771 028a 1948     		ldr	r0, .L122+48
 4772 028c FFF7FEFF 		bl	__assert_func
 4773              	.LVL217:
 4774              	.L110:
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4775              		.loc 4 73 5 view .LVU1223
 4776              	.LBE3547:
 4777              	.LBE3641:
 4778              	.LBB3642:
 4779              	.LBB3553:
  65:Eigen/src/Core/CommaInitializer.h ****       m_col = 0;
 4780              		.loc 4 65 12 view .LVU1224
 4781 0290 109A     		ldr	r2, [sp, #64]
 4782 0292 0E99     		ldr	r1, [sp, #56]
 4783 0294 0A44     		add	r2, r2, r1
 4784 0296 0E92     		str	r2, [sp, #56]
  66:Eigen/src/Core/CommaInitializer.h ****       m_currentBlockRows = 1;
 4785              		.loc 4 66 13 view .LVU1225
 4786 0298 0021     		movs	r1, #0
 4787 029a 0F91     		str	r1, [sp, #60]
  67:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(m_row<m_xpr.rows()
 4788              		.loc 4 67 26 view .LVU1226
 4789 029c 0121     		movs	r1, #1
 4790 029e 1091     		str	r1, [sp, #64]
  68:Eigen/src/Core/CommaInitializer.h ****         && "Too many rows passed to comma initializer (operator<<)");
 4791              		.loc 4 68 7 view .LVU1227
 4792 02a0 8A42     		cmp	r2, r1
 4793 02a2 7FF722AF 		ble	.L75
 4794 02a6 144B     		ldr	r3, .L122+56
 4795 02a8 104A     		ldr	r2, .L122+44
 4796 02aa 4421     		movs	r1, #68
 4797 02ac 1048     		ldr	r0, .L122+48
 4798 02ae FFF7FEFF 		bl	__assert_func
 4799              	.LVL218:
 4800              	.L111:
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
 4801              		.loc 4 71 5 view .LVU1228
 4802 02b2 0D4B     		ldr	r3, .L122+40
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 272


 4803 02b4 0D4A     		ldr	r2, .L122+44
 4804 02b6 4721     		movs	r1, #71
 4805 02b8 0D48     		ldr	r0, .L122+48
 4806 02ba FFF7FEFF 		bl	__assert_func
 4807              	.LVL219:
 4808              	.L123:
 4809 02be 00BF     		.align	2
 4810              	.L122:
 4811 02c0 00000000 		.word	.LANCHOR5
 4812 02c4 00000000 		.word	Attitude_smp_DataPipe
 4813 02c8 00000000 		.word	.LANCHOR4
 4814 02cc 00000000 		.word	Altitude_smp_DataPipe
 4815 02d0 00004040 		.word	1077936128
 4816 02d4 0000A040 		.word	1084227584
 4817 02d8 0000C040 		.word	1086324736
 4818 02dc 48020000 		.word	.LC13
 4819 02e0 58020000 		.word	.LC14
 4820 02e4 00000000 		.word	DebugPort
 4821 02e8 14010000 		.word	.LC10
 4822 02ec 50000000 		.word	.LC9
 4823 02f0 08010000 		.word	.LC2
 4824 02f4 6C010000 		.word	.LC11
 4825 02f8 00000000 		.word	.LC8
 4826              	.L112:
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4827              		.loc 4 73 5 view .LVU1229
 4828 02fc 464B     		ldr	r3, .L124
 4829 02fe 474A     		ldr	r2, .L124+4
 4830 0300 4921     		movs	r1, #73
 4831 0302 4748     		ldr	r0, .L124+8
 4832 0304 FFF7FEFF 		bl	__assert_func
 4833              	.LVL220:
 4834              	.L113:
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4835              		.loc 4 73 5 view .LVU1230
 4836              	.LBE3553:
 4837              	.LBE3642:
 4838              	.LBB3643:
 4839              	.LBB3559:
  65:Eigen/src/Core/CommaInitializer.h ****       m_col = 0;
 4840              		.loc 4 65 12 view .LVU1231
 4841 0308 109A     		ldr	r2, [sp, #64]
 4842 030a 0E99     		ldr	r1, [sp, #56]
 4843 030c 0A44     		add	r2, r2, r1
 4844 030e 0E92     		str	r2, [sp, #56]
  66:Eigen/src/Core/CommaInitializer.h ****       m_currentBlockRows = 1;
 4845              		.loc 4 66 13 view .LVU1232
 4846 0310 0021     		movs	r1, #0
 4847 0312 0F91     		str	r1, [sp, #60]
  67:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(m_row<m_xpr.rows()
 4848              		.loc 4 67 26 view .LVU1233
 4849 0314 0121     		movs	r1, #1
 4850 0316 1091     		str	r1, [sp, #64]
  68:Eigen/src/Core/CommaInitializer.h ****         && "Too many rows passed to comma initializer (operator<<)");
 4851              		.loc 4 68 7 view .LVU1234
 4852 0318 8A42     		cmp	r2, r1
 4853 031a 7FF7FCAE 		ble	.L78
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 273


 4854 031e 414B     		ldr	r3, .L124+12
 4855 0320 3E4A     		ldr	r2, .L124+4
 4856 0322 4421     		movs	r1, #68
 4857 0324 3E48     		ldr	r0, .L124+8
 4858 0326 FFF7FEFF 		bl	__assert_func
 4859              	.LVL221:
 4860              	.L114:
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
 4861              		.loc 4 71 5 view .LVU1235
 4862 032a 3F4B     		ldr	r3, .L124+16
 4863 032c 3B4A     		ldr	r2, .L124+4
 4864 032e 4721     		movs	r1, #71
 4865 0330 3B48     		ldr	r0, .L124+8
 4866 0332 FFF7FEFF 		bl	__assert_func
 4867              	.LVL222:
 4868              	.L115:
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4869              		.loc 4 73 5 view .LVU1236
 4870 0336 384B     		ldr	r3, .L124
 4871 0338 384A     		ldr	r2, .L124+4
 4872 033a 4921     		movs	r1, #73
 4873 033c 3848     		ldr	r0, .L124+8
 4874 033e FFF7FEFF 		bl	__assert_func
 4875              	.LVL223:
 4876              	.LEHE3:
 4877              	.L81:
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4878              		.loc 4 73 5 view .LVU1237
 4879              	.LBE3559:
 4880              	.LBE3643:
 4881              	.LBB3644:
 4882              	.LBB3566:
 4883              	.LBB3565:
 4884              	.LBB3564:
 118:Eigen/src/Core/CommaInitializer.h ****            && m_col == m_xpr.cols()
 4885              		.loc 4 118 7 view .LVU1238
 4886 0342 3A4B     		ldr	r3, .L124+20
 4887 0344 3A4A     		ldr	r2, .L124+24
 4888 0346 7621     		movs	r1, #118
 4889 0348 3548     		ldr	r0, .L124+8
 4890 034a FFF7FEFF 		bl	__assert_func
 4891              	.LVL224:
 4892              	.L116:
 118:Eigen/src/Core/CommaInitializer.h ****            && m_col == m_xpr.cols()
 4893              		.loc 4 118 7 view .LVU1239
 4894              	.LBE3564:
 4895              	.LBE3565:
 4896              	.LBE3566:
 4897              	.LBE3644:
 4898              	.LBB3645:
 4899              	.LBB3576:
  68:Eigen/src/Core/CommaInitializer.h ****         && "Too many rows passed to comma initializer (operator<<)");
 4900              		.loc 4 68 7 view .LVU1240
 4901 034e 354B     		ldr	r3, .L124+12
 4902 0350 384A     		ldr	r2, .L124+28
 4903 0352 4421     		movs	r1, #68
 4904 0354 3248     		ldr	r0, .L124+8
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 274


 4905              	.LEHB4:
 4906 0356 FFF7FEFF 		bl	__assert_func
 4907              	.LVL225:
 4908              	.LEHE4:
 4909              	.L100:
  68:Eigen/src/Core/CommaInitializer.h ****         && "Too many rows passed to comma initializer (operator<<)");
 4910              		.loc 4 68 7 view .LVU1241
 4911              	.LBE3576:
 4912              	.LBE3645:
 4913              	.LBB3646:
 4914              	.LBI3646:
 101:Eigen/src/Core/CommaInitializer.h **** #if defined VERIFY_RAISES_ASSERT && (!defined EIGEN_NO_ASSERTION_CHECKING) && defined EIGEN_EXCEPTI
 4915              		.loc 4 101 10 is_stmt 1 view .LVU1242
 4916              	.LBB3647:
 106:Eigen/src/Core/CommaInitializer.h ****   }
 4917              		.loc 4 106 15 is_stmt 0 view .LVU1243
 4918 035a 11A8     		add	r0, sp, #68
 4919              	.LVL226:
 106:Eigen/src/Core/CommaInitializer.h ****   }
 4920              		.loc 4 106 15 view .LVU1244
 4921 035c FFF7FEFF 		bl	_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv
 4922              	.LVL227:
 4923              	.LEHB5:
 106:Eigen/src/Core/CommaInitializer.h ****   }
 4924              		.loc 4 106 15 view .LVU1245
 4925 0360 FFF7FEFF 		bl	__cxa_end_cleanup
 4926              	.LVL228:
 4927              	.LEHE5:
 4928              	.L117:
 106:Eigen/src/Core/CommaInitializer.h ****   }
 4929              		.loc 4 106 15 view .LVU1246
 4930              	.LBE3647:
 4931              	.LBE3646:
 4932              	.LBB3648:
 4933              	.LBB3577:
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
 4934              		.loc 4 71 5 view .LVU1247
 4935 0364 304B     		ldr	r3, .L124+16
 4936 0366 334A     		ldr	r2, .L124+28
 4937 0368 4721     		movs	r1, #71
 4938 036a 2D48     		ldr	r0, .L124+8
 4939              	.LEHB6:
 4940 036c FFF7FEFF 		bl	__assert_func
 4941              	.LVL229:
 4942              	.L118:
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4943              		.loc 4 73 5 view .LVU1248
 4944 0370 294B     		ldr	r3, .L124
 4945 0372 304A     		ldr	r2, .L124+28
 4946 0374 4921     		movs	r1, #73
 4947 0376 2A48     		ldr	r0, .L124+8
 4948 0378 FFF7FEFF 		bl	__assert_func
 4949              	.LVL230:
 4950              	.L119:
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4951              		.loc 4 73 5 view .LVU1249
 4952              	.LBE3577:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 275


 4953              	.LBE3648:
 4954              	.LBB3649:
 4955              	.LBB3583:
  65:Eigen/src/Core/CommaInitializer.h ****       m_col = 0;
 4956              		.loc 4 65 12 view .LVU1250
 4957 037c 149B     		ldr	r3, [sp, #80]
 4958 037e 1299     		ldr	r1, [sp, #72]
 4959 0380 0B44     		add	r3, r3, r1
 4960 0382 1293     		str	r3, [sp, #72]
  66:Eigen/src/Core/CommaInitializer.h ****       m_currentBlockRows = 1;
 4961              		.loc 4 66 13 view .LVU1251
 4962 0384 0021     		movs	r1, #0
 4963 0386 1391     		str	r1, [sp, #76]
  67:Eigen/src/Core/CommaInitializer.h ****       eigen_assert(m_row<m_xpr.rows()
 4964              		.loc 4 67 26 view .LVU1252
 4965 0388 0121     		movs	r1, #1
 4966 038a 1491     		str	r1, [sp, #80]
  68:Eigen/src/Core/CommaInitializer.h ****         && "Too many rows passed to comma initializer (operator<<)");
 4967              		.loc 4 68 7 view .LVU1253
 4968 038c 022B     		cmp	r3, #2
 4969 038e 7FF706AF 		ble	.L86
 4970 0392 244B     		ldr	r3, .L124+12
 4971 0394 274A     		ldr	r2, .L124+28
 4972 0396 4421     		movs	r1, #68
 4973 0398 2148     		ldr	r0, .L124+8
 4974 039a FFF7FEFF 		bl	__assert_func
 4975              	.LVL231:
 4976              	.L120:
  71:Eigen/src/Core/CommaInitializer.h ****       && "Too many coefficients passed to comma initializer (operator<<)");
 4977              		.loc 4 71 5 view .LVU1254
 4978 039e 224B     		ldr	r3, .L124+16
 4979 03a0 244A     		ldr	r2, .L124+28
 4980 03a2 4721     		movs	r1, #71
 4981 03a4 1E48     		ldr	r0, .L124+8
 4982 03a6 FFF7FEFF 		bl	__assert_func
 4983              	.LVL232:
 4984              	.L121:
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4985              		.loc 4 73 5 view .LVU1255
 4986 03aa 1B4B     		ldr	r3, .L124
 4987 03ac 214A     		ldr	r2, .L124+28
 4988 03ae 4921     		movs	r1, #73
 4989 03b0 1B48     		ldr	r0, .L124+8
 4990 03b2 FFF7FEFF 		bl	__assert_func
 4991              	.LVL233:
 4992              	.LEHE6:
 4993              	.L89:
  73:Eigen/src/Core/CommaInitializer.h ****     m_xpr.coeffRef(m_row, m_col++) = s;
 4994              		.loc 4 73 5 view .LVU1256
 4995              	.LBE3583:
 4996              	.LBE3649:
 4997              	.LBB3650:
 4998              	.LBB3590:
 4999              	.LBB3589:
 5000              	.LBB3588:
 118:Eigen/src/Core/CommaInitializer.h ****            && m_col == m_xpr.cols()
 5001              		.loc 4 118 7 view .LVU1257
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 276


 5002 03b6 1D4B     		ldr	r3, .L124+20
 5003 03b8 1F4A     		ldr	r2, .L124+32
 5004 03ba 7621     		movs	r1, #118
 5005 03bc 1848     		ldr	r0, .L124+8
 5006 03be FFF7FEFF 		bl	__assert_func
 5007              	.LVL234:
 5008              	.L93:
 118:Eigen/src/Core/CommaInitializer.h ****            && m_col == m_xpr.cols()
 5009              		.loc 4 118 7 view .LVU1258
 5010              	.LBE3588:
 5011              	.LBE3589:
 5012              	.LBE3590:
 5013              	.LBE3650:
 5014              	.LBB3651:
 5015              	.LBB3608:
 5016              	.LBB3609:
 5017              	.LBB3610:
 5018              	.LBB3611:
 364:Eigen/src/Core/DenseCoeffsBase.h ****           && col >= 0 && col < cols());
 5019              		.loc 17 364 7 view .LVU1259
 5020 03c2 1E4B     		ldr	r3, .L124+36
 5021 03c4 1E4A     		ldr	r2, .L124+40
 5022 03c6 4FF4B671 		mov	r1, #364
 5023 03ca 1E48     		ldr	r0, .L124+44
 5024              	.LEHB7:
 5025 03cc FFF7FEFF 		bl	__assert_func
 5026              	.LVL235:
 5027              	.L92:
 364:Eigen/src/Core/DenseCoeffsBase.h ****           && col >= 0 && col < cols());
 5028              		.loc 17 364 7 view .LVU1260
 5029              	.LBE3611:
 5030              	.LBE3610:
 5031              	.LBE3609:
  75:Task/Task_Navi.cpp ****     }
 5032              		.loc 1 75 9 is_stmt 1 view .LVU1261
 5033 03d0 1D4A     		ldr	r2, .L124+48
 5034 03d2 1E49     		ldr	r1, .L124+52
 5035 03d4 1E48     		ldr	r0, .L124+56
 5036 03d6 FFF7FEFF 		bl	Debug_Print
 5037              	.LVL236:
 5038              	.LBE3608:
  69:Task/Task_Navi.cpp ****     {
 5039              		.loc 1 69 5 view .LVU1262
 5040 03da 0134     		adds	r4, r4, #1
 5041              	.LVL237:
 5042              	.L96:
  69:Task/Task_Navi.cpp ****     {
 5043              		.loc 1 69 23 discriminator 1 view .LVU1263
 5044 03dc 012C     		cmp	r4, #1
 5045 03de 19DC     		bgt	.L65
 5046              	.LBB3635:
 5047              	.LBB3634:
  71:Task/Task_Navi.cpp ****         {
 5048              		.loc 1 71 18 is_stmt 0 view .LVU1264
 5049 03e0 0025     		movs	r5, #0
 5050              	.L95:
 5051              	.LVL238:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 277


  71:Task/Task_Navi.cpp ****         {
 5052              		.loc 1 71 27 is_stmt 1 discriminator 1 view .LVU1265
 5053 03e2 002D     		cmp	r5, #0
 5054 03e4 F4DC     		bgt	.L92
  73:Task/Task_Navi.cpp ****         }
 5055              		.loc 1 73 13 view .LVU1266
 5056              	.LVL239:
 5057              	.LBB3633:
 5058              	.LBI3610:
 362:Eigen/src/Core/DenseCoeffsBase.h ****     {
 5059              		.loc 17 362 5 view .LVU1267
 5060              	.LBB3632:
 364:Eigen/src/Core/DenseCoeffsBase.h ****           && col >= 0 && col < cols());
 5061              		.loc 17 364 7 is_stmt 0 view .LVU1268
 5062 03e6 002C     		cmp	r4, #0
 5063 03e8 EBDB     		blt	.L93
 5064 03ea 012C     		cmp	r4, #1
 5065 03ec E9DC     		bgt	.L93
 5066 03ee 002D     		cmp	r5, #0
 5067 03f0 E7DB     		blt	.L93
 5068 03f2 E6DC     		bgt	.L93
 5069              	.LVL240:
 5070              	.LBB3612:
 5071              	.LBI3612:
 340:Eigen/src/Core/DenseCoeffsBase.h ****     {
 5072              		.loc 17 340 33 is_stmt 1 view .LVU1269
 5073              	.LBB3613:
 5074              	.LBB3614:
 5075              	.LBI3614:
 243:Eigen/src/Core/CoreEvaluators.h ****     : evaluator<PlainObjectBase<XprType> >(m) 
 5076              		.loc 15 243 30 view .LVU1270
 5077              	.LBB3615:
 5078              	.LBB3616:
 5079              	.LBI3616:
 154:Eigen/src/Core/CoreEvaluators.h ****     : m_data(m.data()), m_outerStride(IsVectorAtCompileTime ? 0 : m.outerStride()) 
 5080              		.loc 15 154 30 view .LVU1271
 5081              	.LBB3617:
 5082              	.LBB3618:
 5083              	.LBB3619:
 5084              	.LBI3619:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 5085              		.loc 15 109 8 view .LVU1272
 5086              	.LBB3620:
 5087              	.LBI3620:
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 5088              		.loc 16 299 21 view .LVU1273
 299:Eigen/src/Core/util/Meta.h ****   EIGEN_DEVICE_FUNC ~noncopyable() {}
 5089              		.loc 16 299 21 is_stmt 0 view .LVU1274
 5090              	.LBE3620:
 5091              	.LBE3619:
 5092              	.LBB3621:
 5093              	.LBI3621:
 255:Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 5094              		.loc 9 255 57 is_stmt 1 view .LVU1275
 5095              	.LBB3622:
 5096              	.LBI3622:
 215:Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 278


 5097              		.loc 12 215 32 view .LVU1276
 215:Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 5098              		.loc 12 215 32 is_stmt 0 view .LVU1277
 5099              	.LBE3622:
 5100              	.LBE3621:
 155:Eigen/src/Core/CoreEvaluators.h ****   {
 5101              		.loc 15 155 82 view .LVU1278
 5102 03f4 02AB     		add	r3, sp, #8
 5103              	.LVL241:
 155:Eigen/src/Core/CoreEvaluators.h ****   {
 5104              		.loc 15 155 82 view .LVU1279
 5105 03f6 1893     		str	r3, [sp, #96]
 5106              	.LVL242:
 5107              	.LBB3623:
 5108              	.LBI3623:
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 5109              		.loc 18 110 52 is_stmt 1 view .LVU1280
 110:Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE T value() { return T(Value); }
 5110              		.loc 18 110 52 is_stmt 0 view .LVU1281
 5111              	.LBE3623:
 5112              	.LBE3618:
 5113              	.LBE3617:
 5114              	.LBE3616:
 5115              	.LBE3615:
 5116              	.LBE3614:
 5117              	.LBB3624:
 5118              	.LBI3624:
 176:Eigen/src/Core/CoreEvaluators.h ****   {
 5119              		.loc 15 176 11 is_stmt 1 view .LVU1282
 5120              	.LBB3625:
 181:Eigen/src/Core/CoreEvaluators.h ****   }
 5121              		.loc 15 181 75 is_stmt 0 view .LVU1283
 5122 03f8 03EB8403 		add	r3, r3, r4, lsl #2
 5123              	.LVL243:
 181:Eigen/src/Core/CoreEvaluators.h ****   }
 5124              		.loc 15 181 75 view .LVU1284
 5125              	.LBE3625:
 5126              	.LBE3624:
 5127              	.LBB3626:
 5128              	.LBI3626:
 236:Eigen/src/Core/CoreEvaluators.h ****   : evaluator<PlainObjectBase<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> > >
 5129              		.loc 15 236 8 is_stmt 1 view .LVU1285
 5130              	.LBB3627:
 5131              	.LBB3628:
 5132              	.LBI3628:
 127:Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<Derived>
 5133              		.loc 15 127 8 view .LVU1286
 5134              	.LBB3629:
 5135              	.LBB3630:
 5136              	.LBI3630:
 109:Eigen/src/Core/CoreEvaluators.h **** {
 5137              		.loc 15 109 8 view .LVU1287
 5138              	.LBB3631:
 5139              	.LBI3631:
 5140              		.loc 16 300 21 view .LVU1288
 5141              		.loc 16 300 21 is_stmt 0 view .LVU1289
 5142              	.LBE3631:
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 279


 5143              	.LBE3630:
 5144              	.LBE3629:
 5145              	.LBE3628:
 5146              	.LBE3627:
 5147              	.LBE3626:
 5148              	.LBE3613:
 5149              	.LBE3612:
 5150              	.LBE3632:
 5151              	.LBE3633:
  73:Task/Task_Navi.cpp ****         }
 5152              		.loc 1 73 13 view .LVU1290
 5153 03fc 1868     		ldr	r0, [r3]	@ float
 5154 03fe FFF7FEFF 		bl	__aeabi_f2d
 5155              	.LVL244:
 5156 0402 CDE90001 		strd	r0, [sp]
 5157 0406 134A     		ldr	r2, .L124+60
 5158 0408 1049     		ldr	r1, .L124+52
 5159 040a 1148     		ldr	r0, .L124+56
 5160 040c FFF7FEFF 		bl	Debug_Print
 5161              	.LVL245:
 5162              	.LEHE7:
  71:Task/Task_Navi.cpp ****         {
 5163              		.loc 1 71 9 is_stmt 1 view .LVU1291
 5164 0410 0135     		adds	r5, r5, #1
 5165              	.LVL246:
  71:Task/Task_Navi.cpp ****         {
 5166              		.loc 1 71 9 is_stmt 0 view .LVU1292
 5167 0412 E6E7     		b	.L95
 5168              	.LVL247:
 5169              	.L65:
  71:Task/Task_Navi.cpp ****         {
 5170              		.loc 1 71 9 view .LVU1293
 5171              	.LBE3634:
 5172              	.LBE3635:
 5173              	.LBE3651:
  78:Task/Task_Navi.cpp **** 
 5174              		.loc 1 78 1 view .LVU1294
 5175 0414 1BB0     		add	sp, sp, #108
 5176              		.cfi_def_cfa_offset 20
 5177              		@ sp needed
 5178 0416 F0BD     		pop	{r4, r5, r6, r7, pc}
 5179              	.LVL248:
 5180              	.L125:
  78:Task/Task_Navi.cpp **** 
 5181              		.loc 1 78 1 view .LVU1295
 5182              		.align	2
 5183              	.L124:
 5184 0418 6C010000 		.word	.LC11
 5185 041c 50000000 		.word	.LC9
 5186 0420 08010000 		.word	.LC2
 5187 0424 00000000 		.word	.LC8
 5188 0428 14010000 		.word	.LC10
 5189 042c 00000000 		.word	.LC0
 5190 0430 A0000000 		.word	.LC1
 5191 0434 84010000 		.word	.LC12
 5192 0438 00000000 		.word	.LC3
 5193 043c 5C020000 		.word	.LC15
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 280


 5194 0440 94020000 		.word	.LC16
 5195 0444 80030000 		.word	.LC17
 5196 0448 A8030000 		.word	.LC19
 5197 044c 58020000 		.word	.LC14
 5198 0450 00000000 		.word	DebugPort
 5199 0454 A4030000 		.word	.LC18
 5200              		.cfi_endproc
 5201              	.LFE8392:
 5202              		.global	__gxx_personality_v0
 5203              		.personality	__gxx_personality_v0
 5204              		.handlerdata
 5205              	.LLSDA8392:
 5206 0008 FF       		.byte	0xff
 5207 0009 FF       		.byte	0xff
 5208 000a 01       		.byte	0x1
 5209 000b 2D       		.uleb128 .LLSDACSE8392-.LLSDACSB8392
 5210              	.LLSDACSB8392:
 5211 000c E803     		.uleb128 .LEHB0-.LFB8392
 5212 000e 0E       		.uleb128 .LEHE0-.LEHB0
 5213 000f 00       		.uleb128 0
 5214 0010 00       		.uleb128 0
 5215 0011 8204     		.uleb128 .LEHB1-.LFB8392
 5216 0013 04       		.uleb128 .LEHE1-.LEHB1
 5217 0014 8604     		.uleb128 .L99-.LFB8392
 5218 0016 00       		.uleb128 0
 5219 0017 8C04     		.uleb128 .LEHB2-.LFB8392
 5220 0019 04       		.uleb128 .LEHE2-.LEHB2
 5221 001a 00       		.uleb128 0
 5222 001b 00       		.uleb128 0
 5223 001c 9804     		.uleb128 .LEHB3-.LFB8392
 5224 001e AA02     		.uleb128 .LEHE3-.LEHB3
 5225 0020 8604     		.uleb128 .L99-.LFB8392
 5226 0022 00       		.uleb128 0
 5227 0023 D606     		.uleb128 .LEHB4-.LFB8392
 5228 0025 04       		.uleb128 .LEHE4-.LEHB4
 5229 0026 DA06     		.uleb128 .L100-.LFB8392
 5230 0028 00       		.uleb128 0
 5231 0029 E006     		.uleb128 .LEHB5-.LFB8392
 5232 002b 04       		.uleb128 .LEHE5-.LEHB5
 5233 002c 00       		.uleb128 0
 5234 002d 00       		.uleb128 0
 5235 002e EC06     		.uleb128 .LEHB6-.LFB8392
 5236 0030 4A       		.uleb128 .LEHE6-.LEHB6
 5237 0031 DA06     		.uleb128 .L100-.LFB8392
 5238 0033 00       		.uleb128 0
 5239 0034 CC07     		.uleb128 .LEHB7-.LFB8392
 5240 0036 44       		.uleb128 .LEHE7-.LEHB7
 5241 0037 00       		.uleb128 0
 5242 0038 00       		.uleb128 0
 5243              	.LLSDACSE8392:
 5244              		.section	.text.TaskNavi_Init
 5245              		.fnend
 5247              		.section	.text._GLOBAL__sub_I_TaskNavi_Monitor,"ax",%progbits
 5248              		.align	1
 5249              		.syntax unified
 5250              		.thumb
 5251              		.thumb_func
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 281


 5253              	_GLOBAL__sub_I_TaskNavi_Monitor:
 5254              		.fnstart
 5255              	.LFB9355:
 5256              		.loc 1 229 1 is_stmt 1 view -0
 5257              		.cfi_startproc
 5258              		@ args = 0, pretend = 0, frame = 0
 5259              		@ frame_needed = 0, uses_anonymous_args = 0
 5260 0000 08B5     		push	{r3, lr}
 5261              		.cfi_def_cfa_offset 8
 5262              		.cfi_offset 3, -8
 5263              		.cfi_offset 14, -4
 5264              		.loc 1 229 1 is_stmt 0 view .LVU1297
 5265 0002 4FF6FF71 		movw	r1, #65535
 5266 0006 0120     		movs	r0, #1
 5267 0008 FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 5268              	.LVL249:
 5269 000c 08BD     		pop	{r3, pc}
 5270              		.cfi_endproc
 5271              	.LFE9355:
 5272              		.cantunwind
 5273              		.fnend
 5275              		.section	.init_array,"aw",%init_array
 5276              		.align	2
 5277 0000 00000000 		.word	_GLOBAL__sub_I_TaskNavi_Monitor(target1)
 5278              		.global	TaskNavi_Monitor
 5279              		.section	.Perph_Section,"aw"
 5280              		.align	2
 5281              		.set	.LANCHOR4,. + 0
 5284              	_ZL25Navi_Attitude_PipeDataObj:
 5285 0000 00000000 		.space	34
 5285      00000000 
 5285      00000000 
 5285      00000000 
 5285      00000000 
 5286 0022 0000     		.space	2
 5289              	_ZL25Navi_Altitude_PipeDataObj:
 5290 0024 00000000 		.space	8
 5290      00000000 
 5291              		.section	.bss.TaskNavi_Monitor,"aw",%nobits
 5292              		.align	3
 5293              		.set	.LANCHOR5,. + 0
 5296              	TaskNavi_Monitor:
 5297 0000 00000000 		.space	96
 5297      00000000 
 5297      00000000 
 5297      00000000 
 5297      00000000 
 5298              		.section	.bss._ZStL8__ioinit,"aw",%nobits
 5299              		.align	2
 5300              		.set	.LANCHOR3,. + 0
 5303              	_ZStL8__ioinit:
 5304 0000 00       		.space	1
 5305              		.section	.bss._ZZL24TaskNavi_FlipOver_DetectfE14FlipOver_State,"aw",%nobits
 5306              		.set	.LANCHOR0,. + 0
 5309              	_ZZL24TaskNavi_FlipOver_DetectfE14FlipOver_State:
 5310 0000 00       		.space	1
 5311              		.section	.bss._ZZL24TaskNavi_FlipOver_DetectfE21FilpOver_Trigger_Time,"aw",%nobits
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 282


 5312              		.align	2
 5313              		.set	.LANCHOR1,. + 0
 5316              	_ZZL24TaskNavi_FlipOver_DetectfE21FilpOver_Trigger_Time:
 5317 0000 00000000 		.space	4
 5318              		.section	.bss._ZZL24TaskNavi_FlipOver_DetectfE26FlipOver_ResetTrigger_Time,"aw",%nobits
 5319              		.align	2
 5320              		.set	.LANCHOR2,. + 0
 5323              	_ZZL24TaskNavi_FlipOver_DetectfE26FlipOver_ResetTrigger_Time:
 5324 0000 00000000 		.space	4
 5325              		.text
 5326              	.Letext0:
 5327              		.file 28 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5328              		.file 29 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5329              		.file 30 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5330              		.file 31 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\lib\\gcc\\arm-none-eabi
 5331              		.file 32 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5332              		.file 33 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5333              		.file 34 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5334              		.file 35 "common/gen_physic_def/pos_data.h"
 5335              		.file 36 "Task/Task_Navi.h"
 5336              		.file 37 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5337              		.file 38 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5338              		.file 39 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5339              		.file 40 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5340              		.file 41 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5341              		.file 42 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5342              		.file 43 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5343              		.file 44 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5344              		.file 45 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5345              		.file 46 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5346              		.file 47 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5347              		.file 48 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5348              		.file 49 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5349              		.file 50 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5350              		.file 51 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5351              		.file 52 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5352              		.file 53 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5353              		.file 54 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5354              		.file 55 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5355              		.file 56 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5356              		.file 57 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5357              		.file 58 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5358              		.file 59 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5359              		.file 60 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5360              		.file 61 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5361              		.file 62 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5362              		.file 63 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5363              		.file 64 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5364              		.file 65 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5365              		.file 66 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5366              		.file 67 "<built-in>"
 5367              		.file 68 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5368              		.file 69 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5369              		.file 70 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5370              		.file 71 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5371              		.file 72 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5372              		.file 73 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 283


 5373              		.file 74 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\lib\\gcc\\arm-none-eabi
 5374              		.file 75 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5375              		.file 76 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5376              		.file 77 "System/FreeRTOS/include/portable.h"
 5377              		.file 78 "Service/Srv_OsCommon.h"
 5378              		.file 79 "debug/debug_util.h"
 5379              		.file 80 "common/Error_Log/../../common/gen_physic_def/imu_data.h"
 5380              		.file 81 "HW_Lib/AT32F435/PinPort_Def/CCRC_AT32_20/HW_Def.h"
 5381              		.file 82 "Service/control_data.h"
 5382              		.file 83 "Service/Srv_DataHub.h"
 5383              		.file 84 "Algorithm/Navi_Dep/MadgwickAHRS.h"
 5384              		.file 85 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5385              		.file 86 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5386              		.file 87 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5387              		.file 88 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5388              		.file 89 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 5389              		.file 90 "Eigen/src/Core/util/Macros.h"
 5390              		.file 91 "Eigen/Core"
 5391              		.file 92 "Eigen/src/Core/util/Constants.h"
 5392              		.file 93 "Eigen/src/Core/products/GeneralBlockPanelKernel.h"
 5393              		.file 94 "Eigen/src/Core/util/ForwardDeclarations.h"
 5394              		.file 95 "Eigen/src/Core/NumTraits.h"
 5395              		.file 96 "Eigen/src/Core/arch/CUDA/Half.h"
 5396              		.file 97 "Eigen/src/Core/IO.h"
 5397              		.file 98 "Eigen/src/SparseCore/SparseUtil.h"
 5398              		.file 99 "Eigen/src/Core/../plugins/CommonCwiseUnaryOps.h"
 5399              		.file 100 "Eigen/src/Core/../plugins/MatrixCwiseUnaryOps.h"
 5400              		.file 101 "Eigen/src/Core/Assign.h"
 5401              		.file 102 "Eigen/src/Core/Dot.h"
 5402              		.file 103 "Eigen/src/Core/StableNorm.h"
 5403              		.file 104 "Eigen/src/Core/Diagonal.h"
 5404              		.file 105 "Eigen/src/SparseCore/SparseView.h"
 5405              		.file 106 "Eigen/src/Core/CwiseNullaryOp.h"
 5406              		.file 107 "Eigen/src/Core/DiagonalMatrix.h"
 5407              		.file 108 "Eigen/src/Core/PermutationMatrix.h"
 5408              		.file 109 "Eigen/src/Core/TriangularMatrix.h"
 5409              		.file 110 "Eigen/src/Core/NoAlias.h"
 5410              		.file 111 "Eigen/src/LU/FullPivLU.h"
 5411              		.file 112 "Eigen/src/LU/PartialPivLU.h"
 5412              		.file 113 "Eigen/src/LU/InverseImpl.h"
 5413              		.file 114 "Eigen/src/LU/Determinant.h"
 5414              		.file 115 "Eigen/src/Cholesky/LLT.h"
 5415              		.file 116 "Eigen/src/Cholesky/LDLT.h"
 5416              		.file 117 "Eigen/src/QR/HouseholderQR.h"
 5417              		.file 118 "Eigen/src/QR/ColPivHouseholderQR.h"
 5418              		.file 119 "Eigen/src/QR/FullPivHouseholderQR.h"
 5419              		.file 120 "Eigen/src/QR/CompleteOrthogonalDecomposition.h"
 5420              		.file 121 "Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h"
 5421              		.file 122 "Eigen/src/SVD/JacobiSVD.h"
 5422              		.file 123 "Eigen/src/SVD/BDCSVD.h"
 5423              		.file 124 "Eigen/src/Geometry/OrthoMethods.h"
 5424              		.file 125 "Eigen/src/Geometry/EulerAngles.h"
 5425              		.file 126 "Eigen/src/Geometry/Homogeneous.h"
 5426              		.file 127 "Eigen/src/Householder/Householder.h"
 5427              		.file 128 "Eigen/src/Core/EigenBase.h"
 5428              		.file 129 "Eigen/src/Core/Random.h"
 5429              		.file 130 "Eigen/src/Core/Fuzzy.h"
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 284


 5430              		.file 131 "Eigen/src/Core/BooleanRedux.h"
 5431              		.file 132 "Eigen/src/Core/SelfCwiseBinaryOp.h"
 5432              		.file 133 "Eigen/src/Core/NestByValue.h"
 5433              		.file 134 "Eigen/src/Core/VectorwiseOp.h"
 5434              		.file 135 "Eigen/src/Core/Reverse.h"
 5435              		.file 136 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 285


DEFINED SYMBOLS
                            *ABS*:00000000 Task_Navi.cpp
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:20     .text._ZL24TaskNavi_FlipOver_Detectf:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:25     .text._ZL24TaskNavi_FlipOver_Detectf:00000000 _ZL24TaskNavi_FlipOver_Detectf
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:195    .text._ZL24TaskNavi_FlipOver_Detectf:000000d4 $d
.ARM.extab.text._ZL24TaskNavi_FlipOver_Detectf:00000000 $d
.ARM.exidx.text._ZL24TaskNavi_FlipOver_Detectf:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:208    .text._Z41__static_initialization_and_destruction_0ii:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:213    .text._Z41__static_initialization_and_destruction_0ii:00000000 _Z41__static_initialization_and_destruction_0ii
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:255    .text._Z41__static_initialization_and_destruction_0ii:00000024 $d
.ARM.exidx.text._Z41__static_initialization_and_destruction_0ii:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:264    .text.TaskNavi_Core:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:270    .text.TaskNavi_Core:00000000 TaskNavi_Core
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:671    .text.TaskNavi_Core:000001e0 $d
    .ARM.exidx.text.TaskNavi_Core:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:687    .rodata._ZN5Eigen16CommaInitializerINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE8finishedEv.str1.4:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:701    .text._ZN5Eigen16CommaInitializerINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE8finishedEv:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:707    .text._ZN5Eigen16CommaInitializerINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE8finishedEv:00000000 _ZN5Eigen16CommaInitializerINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE8finishedEv
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:751    .text._ZN5Eigen16CommaInitializerINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE8finishedEv:00000024 $d
.ARM.extab.text._ZN5Eigen16CommaInitializerINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE8finishedEv:00000000 $d
.ARM.exidx.text._ZN5Eigen16CommaInitializerINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE8finishedEv:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:759    .rodata._ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv.str1.4:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:764    .text._ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:770    .text._ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv:00000000 _ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:813    .text._ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv:00000024 $d
.ARM.extab.text._ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv:00000000 $d
.ARM.exidx.text._ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:821    .text._ZNK5Eigen10MatrixBaseINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:827    .text._ZNK5Eigen10MatrixBaseINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE:00000000 _ZNK5Eigen10MatrixBaseINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE
.ARM.exidx.text._ZNK5Eigen10MatrixBaseINS_6MatrixIfLi2ELi3ELi0ELi2ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:888    .rodata._ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi2ELi1ELi0ELi2ELi1EEENS_7ProductINS2_IfLi2ELi3ELi0ELi2ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISC_NS0_16evaluator_traitsISC_E5ShapeEEE5valueEPvE4typeE.str1.4:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:903    .text._ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi2ELi1ELi0ELi2ELi1EEENS_7ProductINS2_IfLi2ELi3ELi0ELi2ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISC_NS0_16evaluator_traitsISC_E5ShapeEEE5valueEPvE4typeE:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:909    .text._ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi2ELi1ELi0ELi2ELi1EEENS_7ProductINS2_IfLi2ELi3ELi0ELi2ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISC_NS0_16evaluator_traitsISC_E5ShapeEEE5valueEPvE4typeE:00000000 _ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi2ELi1ELi0ELi2ELi1EEENS_7ProductINS2_IfLi2ELi3ELi0ELi2ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISC_NS0_16evaluator_traitsISC_E5ShapeEEE5valueEPvE4typeE
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:3769   .text._ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi2ELi1ELi0ELi2ELi1EEENS_7ProductINS2_IfLi2ELi3ELi0ELi2ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISC_NS0_16evaluator_traitsISC_E5ShapeEEE5valueEPvE4typeE:00000168 $d
.ARM.exidx.text._ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi2ELi1ELi0ELi2ELi1EEENS_7ProductINS2_IfLi2ELi3ELi0ELi2ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISC_NS0_16evaluator_traitsISC_E5ShapeEEE5valueEPvE4typeE:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:3822   .rodata.TaskNavi_Init.str1.4:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:3873   .text.TaskNavi_Init:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:3879   .text.TaskNavi_Init:00000000 TaskNavi_Init
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:4811   .text.TaskNavi_Init:000002c0 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:4828   .text.TaskNavi_Init:000002fc $t
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5184   .text.TaskNavi_Init:00000418 $d
    .ARM.extab.text.TaskNavi_Init:00000000 $d
    .ARM.exidx.text.TaskNavi_Init:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5248   .text._GLOBAL__sub_I_TaskNavi_Monitor:00000000 $t
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5253   .text._GLOBAL__sub_I_TaskNavi_Monitor:00000000 _GLOBAL__sub_I_TaskNavi_Monitor
.ARM.exidx.text._GLOBAL__sub_I_TaskNavi_Monitor:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5276   .init_array:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5296   .bss.TaskNavi_Monitor:00000000 TaskNavi_Monitor
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5280   .Perph_Section:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5284   .Perph_Section:00000000 _ZL25Navi_Attitude_PipeDataObj
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5289   .Perph_Section:00000024 _ZL25Navi_Altitude_PipeDataObj
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5292   .bss.TaskNavi_Monitor:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5299   .bss._ZStL8__ioinit:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5303   .bss._ZStL8__ioinit:00000000 _ZStL8__ioinit
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5309   .bss._ZZL24TaskNavi_FlipOver_DetectfE14FlipOver_State:00000000 _ZZL24TaskNavi_FlipOver_DetectfE14FlipOver_State
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5310   .bss._ZZL24TaskNavi_FlipOver_DetectfE14FlipOver_State:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5312   .bss._ZZL24TaskNavi_FlipOver_DetectfE21FilpOver_Trigger_Time:00000000 $d
ARM GAS  C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s 			page 286


C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5316   .bss._ZZL24TaskNavi_FlipOver_DetectfE21FilpOver_Trigger_Time:00000000 _ZZL24TaskNavi_FlipOver_DetectfE21FilpOver_Trigger_Time
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5319   .bss._ZZL24TaskNavi_FlipOver_DetectfE26FlipOver_ResetTrigger_Time:00000000 $d
C:\Users\8bit\AppData\Local\Temp\ccatNzAl.s:5323   .bss._ZZL24TaskNavi_FlipOver_DetectfE26FlipOver_ResetTrigger_Time:00000000 _ZZL24TaskNavi_FlipOver_DetectfE26FlipOver_ResetTrigger_Time

UNDEFINED SYMBOLS
SrvOsCommon
__aeabi_unwind_cpp_pr1
_ZNSt8ios_base4InitC1Ev
__aeabi_atexit
__dso_handle
_ZNSt8ios_base4InitD1Ev
memset
MadgwickAHRSInit
MadgwickAHRSupdate
DataPipe_SendTo
Attitude_smp_DataPipe
Attitude_hub_DataPipe
Attitude_Log_DataPipe
SrvDataHub
Altitude_smp_DataPipe
Altitude_hub_DataPipe
Altitude_Log_DataPipe
__aeabi_unwind_cpp_pr0
__assert_func
__aeabi_f2d
Debug_Print
__cxa_end_cleanup
DebugPort
__gxx_personality_v0
