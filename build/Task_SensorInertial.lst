ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"Task_SensorInertial.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.global	__aeabi_uldivmod
  17              		.section	.text.TaskInertical_Blink_Notification,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	TaskInertical_Blink_Notification:
  26              	.LVL0:
  27              	.LFB153:
  28              		.file 1 "Task/Task_SensorInertial.c"
   1:Task/Task_SensorInertial.c **** #include "Task_SensorInertial.h"
   2:Task/Task_SensorInertial.c **** #include "scheduler.h"
   3:Task/Task_SensorInertial.c **** #include "debug_util.h"
   4:Task/Task_SensorInertial.c **** #include "runtime.h"
   5:Task/Task_SensorInertial.c **** #include "IO_Definition.h"
   6:Task/Task_SensorInertial.c **** #include "debug_util.h"
   7:Task/Task_SensorInertial.c **** #include "error_log.h"
   8:Task/Task_SensorInertial.c **** #include "DataPipe/DataPipe.h"
   9:Task/Task_SensorInertial.c **** 
  10:Task/Task_SensorInertial.c **** #define DATAPIPE_TRANS_TIMEOUT_100Ms 100
  11:Task/Task_SensorInertial.c **** 
  12:Task/Task_SensorInertial.c **** /* internal var */
  13:Task/Task_SensorInertial.c **** static Task_SensorInertial_State TaskInertial_State = Task_SensorInertial_Core;
  14:Task/Task_SensorInertial.c **** static Error_Handler TaskInertial_ErrorLog_Handle = NULL;
  15:Task/Task_SensorInertial.c **** 
  16:Task/Task_SensorInertial.c **** DataPipe_CreateDataObj(SrvIMU_UnionData_TypeDef, IMU_Data);
  17:Task/Task_SensorInertial.c **** 
  18:Task/Task_SensorInertial.c **** /* internal function */
  19:Task/Task_SensorInertial.c **** static void TaskInertical_Blink_Notification(uint16_t duration);
  20:Task/Task_SensorInertial.c **** static void TaskInertical_Led_Control(bool state);
  21:Task/Task_SensorInertial.c **** 
  22:Task/Task_SensorInertial.c **** /* external function */
  23:Task/Task_SensorInertial.c **** 
  24:Task/Task_SensorInertial.c **** void TaskInertial_Init(void)
  25:Task/Task_SensorInertial.c **** {
  26:Task/Task_SensorInertial.c ****     memset(&IMU_Smp_DataPipe, NULL, sizeof(IMU_Smp_DataPipe));
  27:Task/Task_SensorInertial.c ****     memset(DataPipe_DataObjAddr(IMU_Data), NULL, sizeof(DataPipe_DataObj(IMU_Data)));
  28:Task/Task_SensorInertial.c **** 
  29:Task/Task_SensorInertial.c ****     IMU_Smp_DataPipe.data_addr = (uint32_t)DataPipe_DataObjAddr(IMU_Data);
  30:Task/Task_SensorInertial.c ****     IMU_Smp_DataPipe.data_size = sizeof(DataPipe_DataObj(IMU_Data));
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s 			page 2


  31:Task/Task_SensorInertial.c ****     DataPipe_Enable(&IMU_Smp_DataPipe);
  32:Task/Task_SensorInertial.c **** 
  33:Task/Task_SensorInertial.c ****     /* regist error */
  34:Task/Task_SensorInertial.c ****     if (SrvIMU.init() == SrvIMU_AllModule_Init_Error)
  35:Task/Task_SensorInertial.c ****         TaskInertial_State = Task_SensorInertial_Error;
  36:Task/Task_SensorInertial.c **** }
  37:Task/Task_SensorInertial.c **** 
  38:Task/Task_SensorInertial.c **** void TaskInertical_Core(Task_Handle hdl)
  39:Task/Task_SensorInertial.c **** {
  40:Task/Task_SensorInertial.c ****     DebugPin.ctl(Debug_PB5, true);
  41:Task/Task_SensorInertial.c ****     switch ((uint8_t)TaskInertial_State)
  42:Task/Task_SensorInertial.c ****     {
  43:Task/Task_SensorInertial.c ****     case Task_SensorInertial_Core:
  44:Task/Task_SensorInertial.c ****         TaskInertical_Blink_Notification(100);
  45:Task/Task_SensorInertial.c ****         if (SrvIMU.sample(SrvIMU_Both_Sample))
  46:Task/Task_SensorInertial.c ****         {
  47:Task/Task_SensorInertial.c ****             DataPipe_DataObj(IMU_Data).data = SrvIMU.get_data(SrvIMU_FusModule);
  48:Task/Task_SensorInertial.c **** 
  49:Task/Task_SensorInertial.c ****             for (uint8_t chk = 0; chk < sizeof(DataPipe_DataObj(IMU_Data)) - sizeof(uint16_t); chk+
  50:Task/Task_SensorInertial.c ****             {
  51:Task/Task_SensorInertial.c ****                 DataPipe_DataObj(IMU_Data).data.chk_sum += DataPipe_DataObj(IMU_Data).buff[chk];
  52:Task/Task_SensorInertial.c ****             }
  53:Task/Task_SensorInertial.c **** 
  54:Task/Task_SensorInertial.c ****             DataPipe_SendTo(&IMU_Smp_DataPipe, &IMU_Log_DataPipe); /* to Log task */
  55:Task/Task_SensorInertial.c ****             DataPipe_SendTo(&IMU_Smp_DataPipe, &IMU_hub_DataPipe); /* to control task */
  56:Task/Task_SensorInertial.c **** 
  57:Task/Task_SensorInertial.c ****             if(DataPipe_DataObj(IMU_Data).data.error_code == SrvIMU_Sample_Over_Angular_Accelerate)
  58:Task/Task_SensorInertial.c ****             {
  59:Task/Task_SensorInertial.c ****                 TaskInertical_Led_Control(true);
  60:Task/Task_SensorInertial.c ****             }
  61:Task/Task_SensorInertial.c ****             else
  62:Task/Task_SensorInertial.c ****                 TaskInertical_Led_Control(false);
  63:Task/Task_SensorInertial.c ****         }
  64:Task/Task_SensorInertial.c ****         break;
  65:Task/Task_SensorInertial.c **** 
  66:Task/Task_SensorInertial.c ****     case Task_SensorInertial_Error:
  67:Task/Task_SensorInertial.c ****         break;
  68:Task/Task_SensorInertial.c **** 
  69:Task/Task_SensorInertial.c ****     default:
  70:Task/Task_SensorInertial.c ****         break;
  71:Task/Task_SensorInertial.c ****     }
  72:Task/Task_SensorInertial.c **** 
  73:Task/Task_SensorInertial.c ****     SrvIMU.error_proc();
  74:Task/Task_SensorInertial.c ****     DebugPin.ctl(Debug_PB5, false);
  75:Task/Task_SensorInertial.c **** }
  76:Task/Task_SensorInertial.c **** 
  77:Task/Task_SensorInertial.c **** static void TaskInertical_Blink_Notification(uint16_t duration)
  78:Task/Task_SensorInertial.c **** {
  29              		.loc 1 78 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 78 1 is_stmt 0 view .LVU1
  34 0000 70B5     		push	{r4, r5, r6, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 4, -16
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s 			page 3


  38              		.cfi_offset 5, -12
  39              		.cfi_offset 6, -8
  40              		.cfi_offset 14, -4
  41 0002 0446     		mov	r4, r0
  79:Task/Task_SensorInertial.c ****     SYSTEM_RunTime Rt = 0;
  42              		.loc 1 79 5 is_stmt 1 view .LVU2
  43              	.LVL1:
  80:Task/Task_SensorInertial.c ****     static SYSTEM_RunTime Lst_Rt = 0;
  44              		.loc 1 80 5 view .LVU3
  81:Task/Task_SensorInertial.c ****     static bool led_state = false;
  45              		.loc 1 81 5 view .LVU4
  82:Task/Task_SensorInertial.c **** 
  83:Task/Task_SensorInertial.c ****     Rt = Get_CurrentRunningMs();
  46              		.loc 1 83 5 view .LVU5
  47              		.loc 1 83 10 is_stmt 0 view .LVU6
  48 0004 FFF7FEFF 		bl	Get_CurrentRunningMs
  49              	.LVL2:
  50              		.loc 1 83 10 view .LVU7
  51 0008 0646     		mov	r6, r0
  52 000a 0D46     		mov	r5, r1
  53              	.LVL3:
  84:Task/Task_SensorInertial.c **** 
  85:Task/Task_SensorInertial.c ****     if ((Rt % duration == 0) && (Lst_Rt != Rt))
  54              		.loc 1 85 5 is_stmt 1 view .LVU8
  55              		.loc 1 85 13 is_stmt 0 view .LVU9
  56 000c 2246     		mov	r2, r4
  57 000e 0023     		movs	r3, #0
  58 0010 FFF7FEFF 		bl	__aeabi_uldivmod
  59              	.LVL4:
  60              		.loc 1 85 8 view .LVU10
  61 0014 1343     		orrs	r3, r3, r2
  62 0016 0ED1     		bne	.L2
  63              		.loc 1 85 41 discriminator 1 view .LVU11
  64 0018 0B4B     		ldr	r3, .L4
  65 001a 1A68     		ldr	r2, [r3]
  66 001c 5B68     		ldr	r3, [r3, #4]
  67              		.loc 1 85 30 discriminator 1 view .LVU12
  68 001e AB42     		cmp	r3, r5
  69 0020 08BF     		it	eq
  70 0022 B242     		cmpeq	r2, r6
  71 0024 07D0     		beq	.L2
  86:Task/Task_SensorInertial.c ****     {
  87:Task/Task_SensorInertial.c ****         led_state = !led_state;
  72              		.loc 1 87 9 is_stmt 1 view .LVU13
  73 0026 094A     		ldr	r2, .L4+4
  74 0028 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  75 002a 83F00103 		eor	r3, r3, #1
  76              		.loc 1 87 19 is_stmt 0 view .LVU14
  77 002e 1370     		strb	r3, [r2]
  88:Task/Task_SensorInertial.c ****         Lst_Rt = Rt;
  78              		.loc 1 88 9 is_stmt 1 view .LVU15
  79              		.loc 1 88 16 is_stmt 0 view .LVU16
  80 0030 054B     		ldr	r3, .L4
  81 0032 1E60     		str	r6, [r3]
  82 0034 5D60     		str	r5, [r3, #4]
  83              	.L2:
  89:Task/Task_SensorInertial.c ****     }
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s 			page 4


  90:Task/Task_SensorInertial.c **** 
  91:Task/Task_SensorInertial.c ****     DevLED.ctl(Led2, led_state);
  84              		.loc 1 91 5 is_stmt 1 view .LVU17
  85              		.loc 1 91 11 is_stmt 0 view .LVU18
  86 0036 064B     		ldr	r3, .L4+8
  87 0038 5C68     		ldr	r4, [r3, #4]
  88              		.loc 1 91 5 view .LVU19
  89 003a 064A     		ldr	r2, .L4+12
  90 003c 034B     		ldr	r3, .L4+4
  91 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  92 0040 07CA     		ldm	r2, {r0, r1, r2}
  93 0042 A047     		blx	r4
  94              	.LVL5:
  92:Task/Task_SensorInertial.c ****     // test_PC1_ctl();
  93:Task/Task_SensorInertial.c **** }
  95              		.loc 1 93 1 view .LVU20
  96 0044 70BD     		pop	{r4, r5, r6, pc}
  97              	.LVL6:
  98              	.L5:
  99              		.loc 1 93 1 view .LVU21
 100 0046 00BF     		.align	2
 101              	.L4:
 102 0048 00000000 		.word	.LANCHOR0
 103 004c 00000000 		.word	.LANCHOR1
 104 0050 00000000 		.word	DevLED
 105 0054 00000000 		.word	Led2
 106              		.cfi_endproc
 107              	.LFE153:
 109              		.section	.text.TaskInertial_Init,"ax",%progbits
 110              		.align	1
 111              		.global	TaskInertial_Init
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu fpv5-d16
 117              	TaskInertial_Init:
 118              	.LFB151:
  25:Task/Task_SensorInertial.c ****     memset(&IMU_Smp_DataPipe, NULL, sizeof(IMU_Smp_DataPipe));
 119              		.loc 1 25 1 is_stmt 1 view -0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123 0000 38B5     		push	{r3, r4, r5, lr}
 124              	.LCFI1:
 125              		.cfi_def_cfa_offset 16
 126              		.cfi_offset 3, -16
 127              		.cfi_offset 4, -12
 128              		.cfi_offset 5, -8
 129              		.cfi_offset 14, -4
  26:Task/Task_SensorInertial.c ****     memset(DataPipe_DataObjAddr(IMU_Data), NULL, sizeof(DataPipe_DataObj(IMU_Data)));
 130              		.loc 1 26 5 view .LVU23
 131 0002 0F4C     		ldr	r4, .L10
 132 0004 2B22     		movs	r2, #43
 133 0006 0021     		movs	r1, #0
 134 0008 2046     		mov	r0, r4
 135 000a FFF7FEFF 		bl	memset
 136              	.LVL7:
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s 			page 5


  27:Task/Task_SensorInertial.c **** 
 137              		.loc 1 27 5 view .LVU24
 138 000e 0D4D     		ldr	r5, .L10+4
 139 0010 4F22     		movs	r2, #79
 140 0012 0021     		movs	r1, #0
 141 0014 2846     		mov	r0, r5
 142 0016 FFF7FEFF 		bl	memset
 143              	.LVL8:
  29:Task/Task_SensorInertial.c ****     IMU_Smp_DataPipe.data_size = sizeof(DataPipe_DataObj(IMU_Data));
 144              		.loc 1 29 5 view .LVU25
  29:Task/Task_SensorInertial.c ****     IMU_Smp_DataPipe.data_size = sizeof(DataPipe_DataObj(IMU_Data));
 145              		.loc 1 29 32 is_stmt 0 view .LVU26
 146 001a C4F81150 		str	r5, [r4, #17]	@ unaligned
  30:Task/Task_SensorInertial.c ****     DataPipe_Enable(&IMU_Smp_DataPipe);
 147              		.loc 1 30 5 is_stmt 1 view .LVU27
  30:Task/Task_SensorInertial.c ****     DataPipe_Enable(&IMU_Smp_DataPipe);
 148              		.loc 1 30 32 is_stmt 0 view .LVU28
 149 001e 4F23     		movs	r3, #79
 150 0020 6375     		strb	r3, [r4, #21]
 151 0022 0023     		movs	r3, #0
 152 0024 A375     		strb	r3, [r4, #22]
  31:Task/Task_SensorInertial.c **** 
 153              		.loc 1 31 5 is_stmt 1 view .LVU29
 154              	.LVL9:
 155              	.LBB4:
 156              	.LBI4:
 157              		.file 2 "System/DataPipe/DataPipe.h"
   1:System/DataPipe/DataPipe.h **** #ifndef __DATAPIPE_H
   2:System/DataPipe/DataPipe.h **** #define __DATAPIPE_H
   3:System/DataPipe/DataPipe.h **** 
   4:System/DataPipe/DataPipe.h **** #include <stdint.h>
   5:System/DataPipe/DataPipe.h **** #include <string.h>
   6:System/DataPipe/DataPipe.h **** #include <stdbool.h>
   7:System/DataPipe/DataPipe.h **** 
   8:System/DataPipe/DataPipe.h **** typedef void (*Pipe_TransFinish_Callback)(void *pipe_obj);
   9:System/DataPipe/DataPipe.h **** typedef void (*Pipe_TransError_Callback)(void *pipe_obj);
  10:System/DataPipe/DataPipe.h **** typedef void (*Pipe_TimeOutProc_Callback)(void *pipe_obj);
  11:System/DataPipe/DataPipe.h **** 
  12:System/DataPipe/DataPipe.h **** #define DataPipeHandleToObj(x) ((DataPipeObj_TypeDef *)x)
  13:System/DataPipe/DataPipe.h **** #define DataPipe_CreateDataObj(type, name) static type name##_##PipeDataObj __attribute__((section(
  14:System/DataPipe/DataPipe.h **** #define DataPipe_DataObjAddr(name) (&name##_##PipeDataObj)
  15:System/DataPipe/DataPipe.h **** #define DataPipe_DataObj(name) name##_##PipeDataObj
  16:System/DataPipe/DataPipe.h **** #define DataPipe_DataSize(name) sizeof(name##_##PipeDataObj)
  17:System/DataPipe/DataPipe.h **** 
  18:System/DataPipe/DataPipe.h **** typedef enum
  19:System/DataPipe/DataPipe.h **** {
  20:System/DataPipe/DataPipe.h ****     Pipe_UnReady = 0,
  21:System/DataPipe/DataPipe.h ****     Pipe_Ready,
  22:System/DataPipe/DataPipe.h ****     Pipe_Busy,
  23:System/DataPipe/DataPipe.h ****     Pipe_Error,
  24:System/DataPipe/DataPipe.h **** } DataPipe_State_List;
  25:System/DataPipe/DataPipe.h **** 
  26:System/DataPipe/DataPipe.h **** #pragma pack(1)
  27:System/DataPipe/DataPipe.h **** typedef struct
  28:System/DataPipe/DataPipe.h **** {
  29:System/DataPipe/DataPipe.h ****     uint32_t min_rx_interval;
  30:System/DataPipe/DataPipe.h ****     uint32_t detect_interval;
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s 			page 6


  31:System/DataPipe/DataPipe.h ****     uint64_t rx_us_rt;
  32:System/DataPipe/DataPipe.h **** 
  33:System/DataPipe/DataPipe.h ****     bool enable;
  34:System/DataPipe/DataPipe.h **** 
  35:System/DataPipe/DataPipe.h ****     uint32_t data_addr;
  36:System/DataPipe/DataPipe.h ****     uint16_t data_size;
  37:System/DataPipe/DataPipe.h **** 
  38:System/DataPipe/DataPipe.h ****     Pipe_TransFinish_Callback trans_finish_cb;
  39:System/DataPipe/DataPipe.h ****     Pipe_TransError_Callback trans_error_cb;
  40:System/DataPipe/DataPipe.h **** 
  41:System/DataPipe/DataPipe.h ****     uint32_t tx_cnt;
  42:System/DataPipe/DataPipe.h ****     uint32_t rx_cnt;
  43:System/DataPipe/DataPipe.h ****     uint32_t er_cnt;
  44:System/DataPipe/DataPipe.h **** } DataPipeObj_TypeDef;
  45:System/DataPipe/DataPipe.h **** #pragma pack()
  46:System/DataPipe/DataPipe.h **** 
  47:System/DataPipe/DataPipe.h **** typedef struct
  48:System/DataPipe/DataPipe.h **** {
  49:System/DataPipe/DataPipe.h ****     DataPipeObj_TypeDef *org;
  50:System/DataPipe/DataPipe.h ****     DataPipeObj_TypeDef *dst;
  51:System/DataPipe/DataPipe.h **** } Data_PlugedPipeObj_TypeDef;
  52:System/DataPipe/DataPipe.h **** 
  53:System/DataPipe/DataPipe.h **** bool DataPipe_Init(void);
  54:System/DataPipe/DataPipe.h **** bool DataPipe_SendTo(DataPipeObj_TypeDef *p_org, DataPipeObj_TypeDef *p_dst);
  55:System/DataPipe/DataPipe.h **** bool DataPipe_DealError(void);
  56:System/DataPipe/DataPipe.h **** 
  57:System/DataPipe/DataPipe.h **** inline bool DataPipe_Enable(DataPipeObj_TypeDef *obj)
 158              		.loc 2 57 13 view .LVU30
 159              	.LBB5:
  58:System/DataPipe/DataPipe.h **** {
  59:System/DataPipe/DataPipe.h ****     if (obj == NULL)
 160              		.loc 2 59 5 view .LVU31
  60:System/DataPipe/DataPipe.h ****         return false;
  61:System/DataPipe/DataPipe.h **** 
  62:System/DataPipe/DataPipe.h ****     obj->enable = true;
 161              		.loc 2 62 5 view .LVU32
 162              		.loc 2 62 17 is_stmt 0 view .LVU33
 163 0026 0123     		movs	r3, #1
 164 0028 2374     		strb	r3, [r4, #16]
  63:System/DataPipe/DataPipe.h **** 
  64:System/DataPipe/DataPipe.h ****     return true;
 165              		.loc 2 64 5 is_stmt 1 view .LVU34
 166              	.LVL10:
 167              		.loc 2 64 5 is_stmt 0 view .LVU35
 168              	.LBE5:
 169              	.LBE4:
  34:Task/Task_SensorInertial.c ****         TaskInertial_State = Task_SensorInertial_Error;
 170              		.loc 1 34 5 is_stmt 1 view .LVU36
  34:Task/Task_SensorInertial.c ****         TaskInertial_State = Task_SensorInertial_Error;
 171              		.loc 1 34 15 is_stmt 0 view .LVU37
 172 002a 074B     		ldr	r3, .L10+8
 173 002c 1B68     		ldr	r3, [r3]
  34:Task/Task_SensorInertial.c ****         TaskInertial_State = Task_SensorInertial_Error;
 174              		.loc 1 34 9 view .LVU38
 175 002e 9847     		blx	r3
 176              	.LVL11:
  34:Task/Task_SensorInertial.c ****         TaskInertial_State = Task_SensorInertial_Error;
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s 			page 7


 177              		.loc 1 34 8 view .LVU39
 178 0030 0128     		cmp	r0, #1
 179 0032 00D0     		beq	.L9
 180              	.L6:
  36:Task/Task_SensorInertial.c **** 
 181              		.loc 1 36 1 view .LVU40
 182 0034 38BD     		pop	{r3, r4, r5, pc}
 183              	.L9:
  35:Task/Task_SensorInertial.c **** }
 184              		.loc 1 35 9 is_stmt 1 view .LVU41
  35:Task/Task_SensorInertial.c **** }
 185              		.loc 1 35 28 is_stmt 0 view .LVU42
 186 0036 054B     		ldr	r3, .L10+12
 187 0038 0122     		movs	r2, #1
 188 003a 1A70     		strb	r2, [r3]
  36:Task/Task_SensorInertial.c **** 
 189              		.loc 1 36 1 view .LVU43
 190 003c FAE7     		b	.L6
 191              	.L11:
 192 003e 00BF     		.align	2
 193              	.L10:
 194 0040 00000000 		.word	IMU_Smp_DataPipe
 195 0044 00000000 		.word	.LANCHOR2
 196 0048 00000000 		.word	SrvIMU
 197 004c 00000000 		.word	.LANCHOR3
 198              		.cfi_endproc
 199              	.LFE151:
 201              		.section	.text.TaskInertical_Core,"ax",%progbits
 202              		.align	1
 203              		.global	TaskInertical_Core
 204              		.syntax unified
 205              		.thumb
 206              		.thumb_func
 207              		.fpu fpv5-d16
 209              	TaskInertical_Core:
 210              	.LVL12:
 211              	.LFB152:
  39:Task/Task_SensorInertial.c ****     DebugPin.ctl(Debug_PB5, true);
 212              		.loc 1 39 1 is_stmt 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 80
 215              		@ frame_needed = 0, uses_anonymous_args = 0
  39:Task/Task_SensorInertial.c ****     DebugPin.ctl(Debug_PB5, true);
 216              		.loc 1 39 1 is_stmt 0 view .LVU45
 217 0000 10B5     		push	{r4, lr}
 218              	.LCFI2:
 219              		.cfi_def_cfa_offset 8
 220              		.cfi_offset 4, -8
 221              		.cfi_offset 14, -4
 222 0002 94B0     		sub	sp, sp, #80
 223              	.LCFI3:
 224              		.cfi_def_cfa_offset 88
  40:Task/Task_SensorInertial.c ****     switch ((uint8_t)TaskInertial_State)
 225              		.loc 1 40 5 is_stmt 1 view .LVU46
  40:Task/Task_SensorInertial.c ****     switch ((uint8_t)TaskInertial_State)
 226              		.loc 1 40 13 is_stmt 0 view .LVU47
 227 0004 1E4B     		ldr	r3, .L18
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s 			page 8


 228 0006 5C68     		ldr	r4, [r3, #4]
  40:Task/Task_SensorInertial.c ****     switch ((uint8_t)TaskInertial_State)
 229              		.loc 1 40 5 view .LVU48
 230 0008 1E4A     		ldr	r2, .L18+4
 231 000a 0123     		movs	r3, #1
 232 000c 07CA     		ldm	r2, {r0, r1, r2}
 233              	.LVL13:
  40:Task/Task_SensorInertial.c ****     switch ((uint8_t)TaskInertial_State)
 234              		.loc 1 40 5 view .LVU49
 235 000e A047     		blx	r4
 236              	.LVL14:
  41:Task/Task_SensorInertial.c ****     {
 237              		.loc 1 41 5 is_stmt 1 view .LVU50
  41:Task/Task_SensorInertial.c ****     {
 238              		.loc 1 41 13 is_stmt 0 view .LVU51
 239 0010 1D4B     		ldr	r3, .L18+8
 240 0012 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
  41:Task/Task_SensorInertial.c ****     {
 241              		.loc 1 41 5 view .LVU52
 242 0014 54B1     		cbz	r4, .L17
 243              	.L13:
  73:Task/Task_SensorInertial.c ****     DebugPin.ctl(Debug_PB5, false);
 244              		.loc 1 73 5 is_stmt 1 view .LVU53
  73:Task/Task_SensorInertial.c ****     DebugPin.ctl(Debug_PB5, false);
 245              		.loc 1 73 11 is_stmt 0 view .LVU54
 246 0016 1D4B     		ldr	r3, .L18+12
 247 0018 1B69     		ldr	r3, [r3, #16]
  73:Task/Task_SensorInertial.c ****     DebugPin.ctl(Debug_PB5, false);
 248              		.loc 1 73 5 view .LVU55
 249 001a 9847     		blx	r3
 250              	.LVL15:
  74:Task/Task_SensorInertial.c **** }
 251              		.loc 1 74 5 is_stmt 1 view .LVU56
  74:Task/Task_SensorInertial.c **** }
 252              		.loc 1 74 13 is_stmt 0 view .LVU57
 253 001c 184B     		ldr	r3, .L18
 254 001e 5C68     		ldr	r4, [r3, #4]
  74:Task/Task_SensorInertial.c **** }
 255              		.loc 1 74 5 view .LVU58
 256 0020 184A     		ldr	r2, .L18+4
 257 0022 0023     		movs	r3, #0
 258 0024 07CA     		ldm	r2, {r0, r1, r2}
 259 0026 A047     		blx	r4
 260              	.LVL16:
  75:Task/Task_SensorInertial.c **** 
 261              		.loc 1 75 1 view .LVU59
 262 0028 14B0     		add	sp, sp, #80
 263              	.LCFI4:
 264              		.cfi_remember_state
 265              		.cfi_def_cfa_offset 8
 266              		@ sp needed
 267 002a 10BD     		pop	{r4, pc}
 268              	.L17:
 269              	.LCFI5:
 270              		.cfi_restore_state
  44:Task/Task_SensorInertial.c ****         if (SrvIMU.sample(SrvIMU_Both_Sample))
 271              		.loc 1 44 9 is_stmt 1 view .LVU60
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s 			page 9


 272 002c 6420     		movs	r0, #100
 273 002e FFF7FEFF 		bl	TaskInertical_Blink_Notification
 274              	.LVL17:
  45:Task/Task_SensorInertial.c ****         {
 275              		.loc 1 45 9 view .LVU61
  45:Task/Task_SensorInertial.c ****         {
 276              		.loc 1 45 19 is_stmt 0 view .LVU62
 277 0032 164B     		ldr	r3, .L18+12
 278 0034 5B68     		ldr	r3, [r3, #4]
  45:Task/Task_SensorInertial.c ****         {
 279              		.loc 1 45 13 view .LVU63
 280 0036 0320     		movs	r0, #3
 281 0038 9847     		blx	r3
 282              	.LVL18:
  45:Task/Task_SensorInertial.c ****         {
 283              		.loc 1 45 12 view .LVU64
 284 003a 0028     		cmp	r0, #0
 285 003c EBD0     		beq	.L13
  47:Task/Task_SensorInertial.c **** 
 286              		.loc 1 47 13 is_stmt 1 view .LVU65
  47:Task/Task_SensorInertial.c **** 
 287              		.loc 1 47 53 is_stmt 0 view .LVU66
 288 003e 134B     		ldr	r3, .L18+12
 289 0040 9B68     		ldr	r3, [r3, #8]
  47:Task/Task_SensorInertial.c **** 
 290              		.loc 1 47 47 view .LVU67
 291 0042 0321     		movs	r1, #3
 292 0044 6846     		mov	r0, sp
 293 0046 9847     		blx	r3
 294              	.LVL19:
 295 0048 4F22     		movs	r2, #79
 296 004a 6946     		mov	r1, sp
 297 004c 1048     		ldr	r0, .L18+16
 298 004e FFF7FEFF 		bl	memcpy
 299              	.LVL20:
  49:Task/Task_SensorInertial.c ****             {
 300              		.loc 1 49 13 is_stmt 1 view .LVU68
 301              	.LBB6:
  49:Task/Task_SensorInertial.c ****             {
 302              		.loc 1 49 18 view .LVU69
  49:Task/Task_SensorInertial.c ****             {
 303              		.loc 1 49 13 is_stmt 0 view .LVU70
 304 0052 08E0     		b	.L14
 305              	.LVL21:
 306              	.L15:
  51:Task/Task_SensorInertial.c ****             }
 307              		.loc 1 51 17 is_stmt 1 discriminator 3 view .LVU71
  51:Task/Task_SensorInertial.c ****             }
 308              		.loc 1 51 91 is_stmt 0 discriminator 3 view .LVU72
 309 0054 0E4B     		ldr	r3, .L18+16
 310 0056 1A5D     		ldrb	r2, [r3, r4]	@ zero_extendqisi2
  51:Task/Task_SensorInertial.c ****             }
 311              		.loc 1 51 57 discriminator 3 view .LVU73
 312 0058 B3F84D10 		ldrh	r1, [r3, #77]	@ unaligned
 313 005c 0A44     		add	r2, r2, r1
 314 005e A3F84D20 		strh	r2, [r3, #77]	@ unaligned
  49:Task/Task_SensorInertial.c ****             {
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s 			page 10


 315              		.loc 1 49 96 is_stmt 1 discriminator 3 view .LVU74
  49:Task/Task_SensorInertial.c ****             {
 316              		.loc 1 49 99 is_stmt 0 discriminator 3 view .LVU75
 317 0062 0134     		adds	r4, r4, #1
 318              	.LVL22:
  49:Task/Task_SensorInertial.c ****             {
 319              		.loc 1 49 99 discriminator 3 view .LVU76
 320 0064 E4B2     		uxtb	r4, r4
 321              	.LVL23:
 322              	.L14:
  49:Task/Task_SensorInertial.c ****             {
 323              		.loc 1 49 35 is_stmt 1 discriminator 1 view .LVU77
  49:Task/Task_SensorInertial.c ****             {
 324              		.loc 1 49 13 is_stmt 0 discriminator 1 view .LVU78
 325 0066 4C2C     		cmp	r4, #76
 326 0068 F4D9     		bls	.L15
 327              	.LBE6:
  54:Task/Task_SensorInertial.c ****             DataPipe_SendTo(&IMU_Smp_DataPipe, &IMU_hub_DataPipe); /* to control task */
 328              		.loc 1 54 13 is_stmt 1 view .LVU79
 329 006a 0A4C     		ldr	r4, .L18+20
 330              	.LVL24:
  54:Task/Task_SensorInertial.c ****             DataPipe_SendTo(&IMU_Smp_DataPipe, &IMU_hub_DataPipe); /* to control task */
 331              		.loc 1 54 13 is_stmt 0 view .LVU80
 332 006c 0A49     		ldr	r1, .L18+24
 333 006e 2046     		mov	r0, r4
 334 0070 FFF7FEFF 		bl	DataPipe_SendTo
 335              	.LVL25:
  55:Task/Task_SensorInertial.c **** 
 336              		.loc 1 55 13 is_stmt 1 view .LVU81
 337 0074 0949     		ldr	r1, .L18+28
 338 0076 2046     		mov	r0, r4
 339 0078 FFF7FEFF 		bl	DataPipe_SendTo
 340              	.LVL26:
  57:Task/Task_SensorInertial.c ****             {
 341              		.loc 1 57 13 view .LVU82
 342 007c CBE7     		b	.L13
 343              	.L19:
 344 007e 00BF     		.align	2
 345              	.L18:
 346 0080 00000000 		.word	DebugPin
 347 0084 00000000 		.word	Debug_PB5
 348 0088 00000000 		.word	.LANCHOR3
 349 008c 00000000 		.word	SrvIMU
 350 0090 00000000 		.word	.LANCHOR2
 351 0094 00000000 		.word	IMU_Smp_DataPipe
 352 0098 00000000 		.word	IMU_Log_DataPipe
 353 009c 00000000 		.word	IMU_hub_DataPipe
 354              		.cfi_endproc
 355              	.LFE152:
 357              		.section	.Perph_Section,"aw"
 358              		.align	2
 359              		.set	.LANCHOR2,. + 0
 362              	IMU_Data_PipeDataObj:
 363 0000 00000000 		.space	79
 363      00000000 
 363      00000000 
 363      00000000 
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s 			page 11


 363      00000000 
 364              		.section	.bss.Lst_Rt.1,"aw",%nobits
 365              		.align	3
 366              		.set	.LANCHOR0,. + 0
 369              	Lst_Rt.1:
 370 0000 00000000 		.space	8
 370      00000000 
 371              		.section	.bss.TaskInertial_State,"aw",%nobits
 372              		.set	.LANCHOR3,. + 0
 375              	TaskInertial_State:
 376 0000 00       		.space	1
 377              		.section	.bss.led_state.0,"aw",%nobits
 378              		.set	.LANCHOR1,. + 0
 381              	led_state.0:
 382 0000 00       		.space	1
 383              		.text
 384              	.Letext0:
 385              		.file 3 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/machine/_de
 386              		.file 4 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/sys/_stdint
 387              		.file 5 "System/runtime/runtime.h"
 388              		.file 6 "HAL_Lib/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 389              		.file 7 "HAL_Lib/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
 390              		.file 8 "System/scheduler/scheduler.h"
 391              		.file 9 "Service/imu_data.h"
 392              		.file 10 "Service/Srv_IMUSample.h"
 393              		.file 11 "Task/Task_SensorInertial.h"
 394              		.file 12 "Bsp/Bsp_GPIO.h"
 395              		.file 13 "debug/debug_util.h"
 396              		.file 14 "Device/Dev_Led.h"
 397              		.file 15 "IO_Def/IO_Definition.h"
 398              		.file 16 "common/error_log.h"
 399              		.file 17 "<built-in>"
ARM GAS  /var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Task_SensorInertial.c
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:18     .text.TaskInertical_Blink_Notification:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:25     .text.TaskInertical_Blink_Notification:0000000000000000 TaskInertical_Blink_Notification
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:102    .text.TaskInertical_Blink_Notification:0000000000000048 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:110    .text.TaskInertial_Init:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:117    .text.TaskInertial_Init:0000000000000000 TaskInertial_Init
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:194    .text.TaskInertial_Init:0000000000000040 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:202    .text.TaskInertical_Core:0000000000000000 $t
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:209    .text.TaskInertical_Core:0000000000000000 TaskInertical_Core
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:346    .text.TaskInertical_Core:0000000000000080 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:358    .Perph_Section:0000000000000000 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:362    .Perph_Section:0000000000000000 IMU_Data_PipeDataObj
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:365    .bss.Lst_Rt.1:0000000000000000 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:369    .bss.Lst_Rt.1:0000000000000000 Lst_Rt.1
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:375    .bss.TaskInertial_State:0000000000000000 TaskInertial_State
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:376    .bss.TaskInertial_State:0000000000000000 $d
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:381    .bss.led_state.0:0000000000000000 led_state.0
/var/folders/8_/_8bzxkcs1296m80nzxdrn9q80000gn/T//ccrCCdwz.s:382    .bss.led_state.0:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_uldivmod
Get_CurrentRunningMs
DevLED
Led2
memset
IMU_Smp_DataPipe
SrvIMU
memcpy
DataPipe_SendTo
DebugPin
Debug_PB5
IMU_Log_DataPipe
IMU_hub_DataPipe
