##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.13.0-B3] date: [Mon Jan 24 09:35:33 CST 2022]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = H7FC

PLATFORM_AT32 := 1
PLATFORM_STM32H7 := 2

PLATFORM := $(PLATFORM_AT32)
ifeq ($(PLATFORM), $(PLATFORM_STM32H7))
HW_MATEK_H743_V1_5 := 1

HARDWARE := $(HW_MATEK_H743_V1_5)
else ifeq ($(PLATFORM), $(PLATFORM_AT32))
HW_BETAFPV_AIO_AT32 := 1
HW_CCRC_AT32_20 := 2

# HARDWARE := $(HW_BETAFPV_AIO_AT32)
HARDWARE := $(HW_CCRC_AT32_20)
endif

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C++ source
CPP_SOURCES = \
Task/Task_Manager.cpp \
Task/Task_Navi.cpp

# C sources
C_SOURCES =  \
main.c \
Algorithm/Navi_Dep/MadgwickAHRS.c \
Algorithm/Filter_Dep/filter.c \
Algorithm/Filter_Dep/filter_param.c \
Algorithm/Control_Dep/pid.c \
Algorithm/Control_Dep/Attitude/Att_Casecade_PID.c \
Algorithm/Control_Dep/controller.c \
debug/debug_util.c \
debug/trace_analysiser.c \
Task/Task_Sample.c \
Task/Task_Telemetry.c \
Task/Task_Protocol.c \
Task/Task_Control.c \
Task/Task_BlackBox.c \
Device/Dev_DPS310.c \
Device/Dev_BMP280.c \
Device/Dev_MPU6000.c \
Device/Dev_ICM20602.c \
Device/Dev_ICM426xx.c \
Device/Dev_Flow_3901U.c \
Device/Dev_Led.c \
Device/Dev_W25Qxx.c \
Device/Dev_Sbus.c \
Device/Dev_CRSF.c \
Device/Dev_Dshot.c \
Service/Srv_IMUSample.c \
Service/Srv_Baro.c \
Service/Srv_Flow.c \
Service/Srv_Receiver.c \
Service/Srv_Actuator.c \
Service/Srv_ComProto.c \
Service/Srv_DataHub.c \
Service/Srv_OsCommon.c \
Service/Srv_SensorMonitor.c \
Service/Srv_FileAdapter.c \
Service/Srv_Upgrade.c \
Service/Srv_BlackBox_Chip.c \
Service/Srv_BlackBox_Card.c \
Service/Srv_BlackBox_Com.c \
DataStructure/Data_Convert_Util.c \
DataStructure/CusQueue.c \
DataStructure/linked_list.c \
DataStructure/binary_tree.c \
common/Error_Log/error_log.c \
common/YModem/YModem.c \
common/util.c \
common/compess/minilzo.c \
System/storage/Storage.c \
System/DataPipe/DataPipe.c \
System/DataPipe/DataPipe_Def.c \
System/FreeRTOS/croutine.c \
System/FreeRTOS/event_groups.c \
System/FreeRTOS/list.c \
System/FreeRTOS/freertos.c \
System/FreeRTOS/queue.c \
System/FreeRTOS/stream_buffer.c \
System/FreeRTOS/tasks.c \
System/FreeRTOS/timers.c \
System/FreeRTOS/CMSIS_RTOS/cmsis_os.c \
System/FreeRTOS/portable/MemMang/heap_4.c \
System/FreeRTOS/portable/GCC/ARM_CM4F/port.c \
System/shell/shell_cmd_list.c \
System/shell/shell_companion.c \
System/shell/shell_ext.c \
System/shell/shell_port.c \
System/shell/shell.c
ifeq ($(PLATFORM), $(PLATFORM_STM32H7))
C_SOURCES +=  \
Task/Task_Log.c \
Device/Dev_Card.c \
System/diskio/DiskIO.c \
System/kernel/kernel_stm32h743.c \
HW_Lib/STM32H7/BSP/Bsp_GPIO.c \
HW_Lib/STM32H7/BSP/Bsp_SPI.c \
HW_Lib/STM32H7/BSP/Bsp_SDMMC.c \
HW_Lib/STM32H7/BSP/Bsp_Uart.c \
HW_Lib/STM32H7/BSP/Bsp_USB.c \
HW_Lib/STM32H7/BSP/Bsp_Flash.c \
HW_Lib/STM32H7/BSP/Bsp_DMA.c \
HW_Lib/STM32H7/BSP/Bsp_Timer.c \
HW_Lib/STM32H7/BSP/stm32h743/Bsp_IIC.c \
HW_Lib/STM32H7/USB/USB_DEVICE/App/usb_device.c \
HW_Lib/STM32H7/USB/USB_DEVICE/App/usbd_desc.c \
HW_Lib/STM32H7/USB/USB_DEVICE/App/usbd_cdc_if.c \
HW_Lib/STM32H7/USB/USB_DEVICE/Target/usbd_conf.c \
HW_Lib/STM32H7/USB/STM32_USB_Device_Library/Core/Src/usbd_core.c \
HW_Lib/STM32H7/USB/STM32_USB_Device_Library/Core/Src/usbd_ctlreq.c \
HW_Lib/STM32H7/USB/STM32_USB_Device_Library/Core/Src/usbd_ioreq.c \
HW_Lib/STM32H7/USB/STM32_USB_Device_Library/Class/CDC/Src/usbd_cdc.c  \
HW_Lib/STM32H7/HAL_Lib/Core/Src/stm32h7xx_it.c \
HW_Lib/STM32H7/HAL_Lib/Core/Src/system_stm32h7xx.c  \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim_ex.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc_ex.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart_ex.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash_ex.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_hsem.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma_ex.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c_ex.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_exti.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_spi.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pcd.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pcd_ex.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sd.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_sdmmc.c \
HW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_usb.c 
ifeq ($(HARDWARE), $(HW_MATEK_H743_V1_5))
C_SOURCES +=  \
HW_Lib/STM32H7/PinPort_Def/MATEK_H743_V1_5/HW_Def.c
endif

# ASM sources
ASM_SOURCES =  \
startup_stm32h743xx.s \
debug/trace.s

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32H743VIHx_FLASH.ld

#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m7

else ifeq ($(PLATFORM), $(PLATFORM_AT32))
C_SOURCES += \
System/kernel/kernel_at32f435.c \
HW_Lib/AT32F435/bsp/Bsp_GPIO.c \
HW_Lib/AT32F435/bsp/Bsp_Spi.c \
HW_Lib/AT32F435/bsp/Bsp_Uart.c \
HW_Lib/AT32F435/bsp/Bsp_Flash.c \
HW_Lib/AT32F435/bsp/Bsp_USB.c \
HW_Lib/AT32F435/bsp/Bsp_DMA.c \
HW_Lib?AT32F435/bsp/Bsp_Timer.c \
HW_Lib/AT32F435/bsp/Bsp_IIC.c \
HW_Lib/AT32F435/USB/usb_drivers/src/usb_core.c \
HW_Lib/AT32F435/USB/usb_drivers/src/usbd_core.c \
HW_Lib/AT32F435/USB/usbd_class/cdc/cdc_class.c \
HW_Lib/AT32F435/USB/usbd_class/cdc/cdc_desc.c \
HW_Lib/AT32F435/USB/usb_drivers/src/usbd_int.c \
HW_Lib/AT32F435/USB/usb_drivers/src/usbd_sdr.c \
HW_Lib/AT32F435/device_support/at32f435_437_clock.c \
HW_Lib/AT32F435/device_support/at32f435_437_int.c \
HW_Lib/AT32F435/device_support/system_at32f435_437.c \
HW_Lib/AT32F435/drivers/src/at32f435_437_crm.c \
HW_Lib/AT32F435/drivers/src/at32f435_437_misc.c \
HW_Lib/AT32F435/driver/src/at32f435_437_gpio.c \
HW_Lib/AT32F435/driver/src/at32f435_437_spi.c \
HW_Lib/AT32F435/driver/src/at32f435_437_i2c.c \
HW_Lib/AT32F435/driver/src/at32f435_437_tmr.c \
HW_Lib/AT32F435/driver/src/at32f435_437_dma.c \
HW_Lib/AT32F435/driver/src/at32f435_437_usb.c \
HW_Lib/AT32F435/driver/src/at32f435_437_flash.c \
HW_Lib/AT32F435/driver/src/at32f435_437_scfg.c \
HW_Lib/AT32F435/driver/src/at32f435_437_exint.c \
HW_Lib/AT32F435/driver/src/at32f435_437_usart.c \
HW_Lib/AT32F435/driver/src/i2c_application.c
ifeq ($(HARDWARE), $(HW_BETAFPV_AIO_AT32))
C_SOURCES +=  \
HW_Lib/AT32F435/PinPort_Def/BETAFPV_AIO_AT32/HW_Def.c
else ifeq ($(HARDWARE), $(HW_CCRC_AT32_20))
C_SOURCES +=  \
HW_Lib/AT32F435/PinPort_Def/CCRC_AT32_20/HW_Def.c
endif

ASM_SOURCES =  \
startup_at32f435_437.s \
debug/trace.s

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = AT32F435xG_FLASH.ld

#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4
endif

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
XX = $(GCC_PATH)/$(PREFIX)g++
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
XX = $(PREFIX)g++
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

ifeq ($(PLATFORM), $(PLATFORM_STM32H7))
# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32H743xx \
-DMATEKH743_V1_5

# fpu
FPU = -mfpu=fpv5-d16
else ifeq ($(PLATFORM), $(PLATFORM_AT32))
C_DEFS = \
-DAT32F435CGU7 \
-DAT32F435_437
ifeq ($(HARDWARE), $(HW_BETAFPV_AIO_AT32))
C_DEFS += \
-DBATEAT32F435_AIO
else ifeq ($(HARDWARE), $(HW_CCRC_AT32_20))
C_DEFS += \
-DCCRC_AT32_20
endif

# fpu
FPU = -mfpu=fpv4-sp-d16
endif

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-I/ \
-Idebug/ \
-ITask/ \
-IDevice/ \
-Icommon/ \
-Icommon/Error_Log \
-Icommon/YModem \
-Icommon/compess \
-Icommon/gen_physic_def \
-IService/ \
-ISystem/FreeRTOS \
-ISystem/FreeRTOS/include \
-ISystem/FreeRTOS/CMSIS_RTOS \
-ISystem/FreeRTOS/portable/GCC/ARM_CM4F \
-ISystem/shell \
-ISystem/storage \
-ISystem/diskio \
-Idebug \
-IMAVLink \
-IAlgorithm/Navi_Dep \
-IAlgorithm/Filter_Dep \
-IAlgorithm/Control_Dep \
-IAlgorithm/Control_Dep/Attitude \
-IAlgorithm \
-IMAVLink/common \
-IMAVLink/minimal \
-IMAVLink/standard \
-IDataStructure/ \
-ISystem/kernel/ \
-ISystem/DataPipe/ \
-IHW_Lib/Port_Def/
ifeq ($(PLATFORM), $(PLATFORM_STM32H7))
C_INCLUDES +=  \
-IHW_Lib/STM32H7 \
-IHW_Lib/STM32H7/BSP \
-IHW_Lib/STM32H7/HAL_Lib/STM32H7xx_HAL_Driver/Inc \
-IHW_Lib/STM32H7/HAL_Lib/Core/Inc \
-IHW_Lib/STM32H7/HAL_Lib/CMSIS/Device/ST/STM32H7xx/Include \
-IHW_Lib/STM32H7/HAL_Lib/CMSIS/Core/Include \
-IHW_Lib/STM32H7/HAL_Lib/CMSIS/Device/ST/STM32H7xx/Include \
-IHW_Lib/STM32H7/HAL_Lib/CMSIS/Include \
-IHW_Lib/STM32H7/USB/STM32_USB_Device_Library/Core/Inc \
-IHW_Lib/STM32H7/USB/STM32_USB_Device_Library/Class/CDC/Inc \
-IHW_Lib/STM32H7/USB/USB_DEVICE/App \
-IHW_Lib/STM32H7/USB/USB_DEVICE/Target 
ifeq ($(HARDWARE), $(HW_MATEK_H743_V1_5))
C_INCLUDES += \
-IHW_Lib/STM32H7/PinPort_Def/MATEK_H743_V1_5
endif
else ifeq ($(PLATFORM), $(PLATFORM_AT32))
C_INCLUDES += \
-IHW_Lib/AT32F435 \
-IHW_Lib/AT32F435/bsp \
-IHW_Lib/AT32F435/drivers/inc \
-IHW_Lib/AT32F435/cmsis/cm4/core_support \
-IHW_Lib/AT32F435/device_support \
-IHW_Lib/AT32F435/USB \
-IHW_Lib/AT32F435/USB/usb_drivers/inc \
-IHW_Lib/AT32F435/USB/usbd_class/cdc
ifeq ($(HARDWARE), $(HW_BETAFPV_AIO_AT32))
C_INCLUDES += \
-IHW_Lib/AT32F435/PinPort_Def/BETAFPV_AIO_AT32
else ifeq ($(HARDWARE), $(HW_CCRC_AT32_20))
C_INCLUDES += \
-IHW_Lib/AT32F435/PinPort_Def/CCRC_AT32_20
endif
endif

CPP_INCLUDES = \
-IEigen

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -std=c99 -Wall -fdata-sections -ffunction-sections

CPPFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(CPP_INCLUDES) $(OPT) -std=c++11 -Wall -fdata-sections -ffunction-sections 

CPPFLAGS += -g

# ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
# endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

# libraries
CPP_LIBS = -lstdc++ -lsupc++
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) $(CPP_LIBS) -Wl,--print-memory-usage -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections -u_printf_float

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR) 
	$(XX) -c $(CPPFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

ifeq ($(PLATFORM), $(PLATFORM_STM32H7))
OPENOCD := openocd -f interface/stlink.cfg \
        -f target/stm32h7x.cfg 
else ifeq ($(PLATFORM), $(PLATFORM_AT32))
OPENOCD := openocd_at32 -f interface/stlink.cfg \
        -f target/at32f435xG.cfg 
endif

# download your program
# $(OPENOCD)
# -c 'program $(BUILD_DIR)/$(TARGET).elf verify reset run exit' 
flash: all
	$(OPENOCD) -c init \
		-c 'reset halt' \
		-c 'flash write_image erase $(BUILD_DIR)/$(TARGET).elf' \
		-c 'reset run' \
		-c exit

debug:
	$(OPENOCD)

